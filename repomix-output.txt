

================================================================
Directory Structure
================================================================
Client/
  .vscode/
    settings.json
  public/
    index.html
    manifest.json
    robots.txt
  src/
    assets/
      css/
        App.css
        Contact.css
        MiniCalendar.css
    components/
      calender/
        viewCalender.js
      card/
        Card.js
        MiniStatistics.js
      charts/
        LineChart.js
        PieChart.js
      checkTable/
        checktable.js
      commonDeleteModel/
        index.js
      commonFileUpload/
        index.js
      commonTableModel/
        AccountModel.js
        Contact.js
        ContactModel.js
        Lead.js
        LeadModel.js
        MultiContactModel.js
        MultiLeadModel.js
        OpprtunityModel.js
        UserModel.js
      countUpComponent/
        countUpComponent.js
      fields/
        InputField.js
        SwitchField.js
      fixedPlugin/
        FixedPlugin.js
      FolderTreeView/
        folderTreeView.js
      footer/
        FooterAdmin.js
        FooterAuth.js
      icons/
        IconBox.js
        Icons.js
      menu/
        ItemContent.js
      navbar/
        searchBar/
          SearchBar.js
        NavbarAdmin.js
        NavbarAuth.js
        NavbarExample.js
        NavbarLinksAdmin.js
        NavbarRTL.js
        ThemeEditor.js
      notFoundData/
        index.js
      pagination/
        Pagination.js
      PDF/
        index.js
      reactTable/
        checktable.js
      rtlProvider/
        RtlProvider.js
      scrollbar/
        Scrollbar.js
      search/
        advanceSearch.js
        search.js
      separator/
        Separator.jsx
      sidebar/
        components/
          Brand.js
          Content.js
          Links.js
          SidebarCard.js
        Sidebar.js
      spinner/
        Spinner.js
        style.css
      Dropzone.js
    contexts/
      RoleContext.js
      SidebarContext.js
    layouts/
      admin/
        index.js
      auth/
        Default.js
        index.js
      user/
        index.js
    redux/
      slices/
        accountSlice.js
        advanceSearchSlice.js
        contactCustomFiledSlice.js
        contactSlice.js
        emailsSlice.js
        emailTempSlice.js
        imageSlice.js
        invoicesSlice.js
        leadCustomFiledSlice.js
        leadSlice.js
        localSlice.js
        meetingSlice.js
        moduleSlice.js
        opportunitySlice.js
        phoneCallSlice.js
        propertyCustomFiledSlice.js
        propertySlice.js
        quotesSlice.js
        roleSlice.js
        routeSlice.js
        taskSlice.js
      accessUtils.js
      store.js
    schema/
      accountSchema.js
      addFiledSchema.js
      contactSchema.js
      document.js
      emailSchema.js
      index.js
      invoicesSchema.js
      leadSchema.js
      loginSchema.js
      meetingSchema.js
      moduleAddSchema.js
      opprtunitiesSchema.js
      phoneCallSchema.js
      propertySchema.js
      quoteSchema.js
      taskSchema.js
      textMsgSchema.js
      userSchema.js
      validationAddSchema.js
    services/
      api.js
    theme/
      additions/
        card/
          card.js
      components/
        badge.js
        button.js
        input.js
        link.js
        progress.js
        slider.js
        switch.js
        textarea.js
      foundations/
        blur.js
        borders.js
        breakpoints.js
        colors.js
        index.js
        radius.js
        shadows.js
        sizes.js
        spacing.js
        transition.js
        typography.js
        z-index.js
      index.js
      styles.js
      theme.js
    utils/
      addDocumentModal.js
      customForm.js
      customView.js
      formDataUse.js
      index.js
      utils.js
    views/
      admin/
        account/
          components/
            AccountAdvanceSearch.js
            AccountImport.js
            ImportModel.js
          AddEdit.js
          index.js
          View.js
        activeDeactiveModule/
          index.js
        adminSetting/
          index.js
        calender/
          components/
            calender.js
          index.js
        communication/
          components/
            call.js
            email.js
            TextMsg.js
          index.js
        contact/
          components/
            ContactImport.js
            ImportModel.js
            phonCall.js
            propertyModel.js
            propertyTable.js
          Add.js
          Edit.js
          index.js
          View.js
        customField/
          addEditHeading.js
          addfield.js
          editfield.js
          index.js
        default/
          components/
            PieCard.js
          index.jsx
        document/
          component/
            Delete.js
            LinkModel.js
            Upload.js
          index.js
        dynamicPage/
          add.js
          DynamicPageview.js
          Edit.js
          index.js
        emailHistory/
          components/
            AddEmail.js
            EmailAdvanceSearch.js
          add.js
          emailView.js
          index.js
          View.js
        emailTemplate/
          AddEdit.js
          index.js
          view.js
        image/
          components/
            Upload.js
          addImage.js
          imageView.js
          index.js
        invoice/
          components/
            ImportModel.js
            InvoiceAdvanceSearch.js
            InvoiceImport.js
          AddEdit.js
          index.js
          preview.js
          View.js
        lead/
          components/
            ImportModal.js
            LeadImport.js
          Add.js
          Edit.js
          index.js
          View.js
        meeting/
          components/
            Addmeeting.js
            MeetingAdvanceSearch.js
          index.js
          meetingView.js
          View.js
        moduleName/
          add.js
          Edit.js
          index.js
          view.js
        opportunities/
          components/
            ImportModel.js
            OpprtunityAdvanceSearch.js
            OpprtunityImport.js
          AddEdit.js
          index.js
          View.js
        payments/
          index.js
          paymentForm.js
        phoneCall/
          components/
            AddPhoneCall.js
            callAdvanceSearch.js
          add.js
          callView.js
          index.js
          View.js
        property/
          components/
            ImportModal.js
            PropertyImport.js
            propertyPhoto.js
            Upload.js
          Add.js
          Edit.js
          index.js
          View.js
        quotes/
          components/
            ImportModel.js
            QuotesAdvanceSearch.js
            QuotesImport.js
          AddEdit.js
          index.js
          View.js
        reports/
          components/
            chart.js
            CheckTable.js
            reportChart.js
          index.js
        role/
          components/
            CheckTable.js
            roleModal.js
            roleUser.js
            userModal.js
          Add.js
          changeAccess.js
          index.js
        tableField/
          index.js
        task/
          components/
            AddEdit.js
            TaskAdvanceSearch.js
            taskView.js
          eventView.js
          index.js
        users/
          components/
            roleModal.js
            roleTable.js
            userAdvanceSearch.js
          Add.js
          AddEditUser.js
          Edit.js
          index.js
          View.js
        validation/
          add.js
          Edit.js
          index.js
          view.js
      auth/
        signIn/
          index.jsx
    constant.js
    index.js
    roles.js
    routes.js
  .gitattributes
  jsconfig.json
  package.json
Server/
  controllers/
    account/
      _routes.js
      account.js
    calendar/
      _routes.js
      calendar.js
    contact/
      _routes.js
      contact.js
    customField/
      _routes.js
      customField.js
    document/
      _routes.js
      document.js
    emailHistory/
      _routes.js
      email.js
    emailTemplate/
      _routes.js
      emailTemplate.js
    form/
      _routes.js
      form.js
    images/
      _routes.js
      imagesController.js
    invoices/
      _routes.js
      invoices.js
    lead/
      _routes.js
      lead.js
    meeting/
      _routes.js
      meeting.js
    moduleActiveDeactive/
      _routes.js
      moduleActiveDeactive.js
    opportunities/
      _routes.js
      opportunities.js
    payment/
      _routes.js
      payment.js
    phoneCall/
      _routes.js
      phonCall.js
    property/
      _routes.js
      property.js
    quotes/
      _routes.js
      quotes.js
    reporting/
      _routes.js
      reporting.js
    roleAccess/
      _routes.js
      roleAccess.js
    route/
      _routes.js
      route.js
    status/
      _routes.js
      status.js
    task/
      _routes.js
      task.js
    textMsg/
      _routes.js
      textMsg.js
    user/
      _routes.js
      user.js
    validation/
      _routes.js
      validation.js
    route.js
  db/
    config.js
    contactFields.js
    leadFields.js
    propertiesFields.js
  middelwares/
    auth.js
    mail.js
  model/
    schema/
      account.js
      contact.js
      customField.js
      document.js
      email.js
      emailTemplate.js
      imagesSchema.js
      invoices.js
      lead.js
      meeting.js
      moduleActiveDeactive.js
      opprtunity.js
      phoneCall.js
      property.js
      quotes.js
      roleAccess.js
      task.js
      textMsg.js
      user.js
      validation.js
  test/
    test.js
  index.js
  package.json
.gitignore
README.md

================================================================
Files
================================================================

================
File: Client/.vscode/settings.json
================
{
}

================
File: Client/public/index.html
================
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="theme-color" content="#000000" />
  <title itemprop="name">Real E-state</title>
  <!-- Manifest and apple icon -->
  <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
  <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
</head>

<body>
  <noscript>You need to enable JavaScript to run this app.</noscript>
  <div id="root"></div>
</body>

</html>

================
File: Client/public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: Client/public/robots.txt
================
User-Agent: *
Disallow:
Sitemap: https://horizon-ui.com

================
File: Client/src/assets/css/App.css
================
@import url("https://fonts.googleapis.com/css2?family=DM+Sans:ital,wght@0,400;0,500;0,700;1,400;1,500;1,700&display=swap");

body {
  font-family: "DM Sans", sans-serif;
}

option {
  color: black;
}

* {
  letter-spacing: 0.3px;
  outline: none;
}

::-webkit-scrollbar {
  height: 4px !important;
  width: 7px;
}

::-webkit-scrollbar-thumb {
  background: #b9b9b9;
  border-radius: 20px;
}

.css-70fard,
.apexcharts-toolbar {
  z-index: 0 !important;
}

.fc-bg-event {
  opacity: 1 !important;
}

.p0 {
  margin-top: 0;
}

/* TABLE  */
.table-container {
  min-height: 23vh;
  max-height: 23vh;
  overflow-y: auto;
}

.table-container thead {
  border-bottom: 1px solid black;
  box-shadow: -2px 0px 4px -2px #5c5d5efa;
  position: sticky;
  top: 0;
  height: 25px;
  background: #ffffff;
}

.table-container-property {
  min-height: auto;
  max-height: 68vh;
  overflow-y: auto;
}

.css-efk3t2 {
  max-height: 15rem !important;
  overflow-y: scroll !important;
}

.table-container-property thead {
  position: sticky;
  top: 0;
  height: 25px;
  background: #ffffff;
  border-bottom: 1px solid black;
  box-shadow: -2px 0px 4px -2px #5c5d5efa;
}

.table-fix-container {
  min-height: 63vh;
  max-height: 63vh;
  overflow-y: auto;
}

.small-table-fix-container {
  min-height: 15vh;
  max-height: 63vh;
  overflow-y: auto;
}

.table-fix-container thead {
  border-bottom: 1px solid black;
  box-shadow: -2px 0px 4px -2px #5c5d5efa;
  position: sticky;
  top: 0;
  height: 25px;
  background: #ffffff;
}

.importTable {
  min-height: auto;
  max-height: 82vh;
  overflow-y: auto;
}

.tableData {
  padding: 10px !important;
}

/* .leadRow td {
  border-bottom: 1px solid #e2e8f0;
} */

.datePickerBorder {
  border: 1px solid #e2e8f0;
  padding: 0 5px;
  border-radius: 5px;
  margin: 0 10px !important;
}

.imageCard {
  position: relative;
  overflow: hidden;
  margin-right: 12px;
  /* height: 200px;
  width: 400px; */
}

.imageContent {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  background-color: #00000096;
  height: 100%;
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  opacity: 0;
}

.imageCard:hover .imageContent {
  opacity: 1;
}

.EditDelete {
  display: none;
}

.CustomFieldName {
  border-bottom: 1px solid rgba(128, 128, 128, 0.705);
}

.CustomFieldName:hover .EditDelete {
  display: block;
}

.pending {
  background-color: #fbf4dd !important;
  color: #a37f08 !important;
  border: 1px solid #a37f08 !important;
}

.onHold {
  background-color: #ffeeeb !important;
  color: #db5436 !important;
  border: 1px solid #db5436 !important;
}

.completed {
  background-color: #eaf9e6 !important;
  color: #4d8f3a !important;
  border: 1px solid #4d8f3a !important;
}

.toDo {
  background-color: #ebf5ff !important;
  color: #1f7eeb !important;
  border: 1px solid #1f7eeb !important;
}

.inProgress {
  background-color: #eee7fc !important;
  color: #7038db !important;
  border: 1px solid #7038db !important;
}

.chakra-checkbox[disabled] .chakra-checkbox__control {
  background-color: #dcdee0 !important;
  border: 2px solid #d1d1d1;
}

/* Invoice.css */
.invoice-container {
  width: 100%;
  margin: 20px auto;
  padding: 20px;
  border: 1px solid #000;
  font-family: Arial, sans-serif;
  font-size: 14px;
}
.invoice-container2 {
  width: 50%;
  margin: 20px auto;
  padding: 20px;
  border: 1px solid #000;
  font-family: Arial, sans-serif;
  font-size: 14px;
}

.invoice-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.logo {
  font-weight: bold;
  font-size: 24px;
  color: orange;
}

.invoice-details {
  text-align: right;
}

.address-section {
  margin-top: 20px;
  display: flex;
  justify-content: space-between;
}

.address {
  width: 45%;
  margin-top: 20px;
}

.invoice-info {
  margin-top: 20px;
}

.invoice-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}

.invoice-table th,
.invoice-table td {
  border: 1px solid #000;
  padding: 5px;
  text-align: center;
}

.totals {
  margin-top: 20px;
  display: flex;
  justify-content: end;
}

.totals > div {
  margin-bottom: 5px;
}

.net-amount {
  font-weight: bold;
}

.footer {
  margin-top: 20px;
  text-align: center;
  font-style: italic;
}

================
File: Client/src/assets/css/Contact.css
================
form {
    width: 100%;
}

================
File: Client/src/assets/css/MiniCalendar.css
================
@import url("https://fonts.googleapis.com/css2?family=DM+Sans:ital,wght@0,400;0,500;0,700;1,400;1,500;1,700&display=swap");
/* LIGHT MODE + GENERAL */

.react-calendar {
  border: unset;
  background-color: transparent;
  font-family: "DM Sans", sans-serif;
}
.react-calendar__navigation__prev2-button {
  display: none;
}
.react-calendar__navigation__next2-button {
  display: none;
}
.react-calendar__navigation {
  align-items: center;
}
abbr[title] {
  border-bottom: none;
  -webkit-text-decoration: unset;
  text-decoration: unset;
  -webkit-text-decoration: unset;
  -webkit-text-decoration: unset;
  text-decoration: unset !important;
}
.react-calendar__navigation__prev-button {
  background-color: #4318ff !important;
  border-radius: 10px;
  min-width: 34px !important;
  height: 34px !important;
  color: white;
}
.react-calendar__navigation__next-button {
  background-color: #4318ff !important;
  border-radius: 10px;
  min-width: 34px !important;
  width: 34px !important;
  height: 34px !important;
  color: white;
}
.react-calendar__navigation__label {
  font-weight: 700 !important;
  font-size: 18px;
}
.react-calendar__navigation__label:hover,
.react-calendar__navigation__label:focus {
  background-color: unset !important;
  border-radius: 10px;
}
.react-calendar__tile {
  font-size: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0px !important;
  height: 34px !important;
  color: #1b2559;
}
.react-calendar__month-view__weekdays {
  background-color: #f4f7fe;
  border-radius: 10px;
  margin-bottom: 6px;
}
.react-calendar__tile--now,
.react-calendar__tile--now:enabled:hover,
.react-calendar__tile--now:enabled:focus {
  background-color: #f4f7fe;
  border-radius: 10px;
}
.react-calendar__month-view__days__day--neighboringMonth {
  color: #b0bbd5;
}
.react-calendar__tile--active,
.react-calendar__tile--active:enabled:hover,
.react-calendar__tile--active:enabled:focus {
  background: #4318ff;
  border-radius: 10px;
  color: white;
}
.react-calendar__tile--range,
.react-calendar__tile--range:enabled:hover,
.react-calendar__tile--range:enabled:focus {
  background: #f4f7fe;
  color: #4318ff;
  border-radius: 0px;
}
.react-calendar__tile--rangeStart,
.react-calendar__tile--rangeStart:enabled:hover,
.react-calendar__tile--rangeStart:enabled:focus {
  background: #4318ff;
  border-top-left-radius: 10px;
  border-bottom-left-radius: 10px;
  color: white;
}
.react-calendar__tile--rangeEnd,
.react-calendar__tile--rangeEnd:enabled:hover,
.react-calendar__tile--rangeEnd:enabled:focus {
  background: #4318ff;
  border-top-right-radius: 10px;
  border-bottom-right-radius: 10px;
  color: white;
}

/* DARK MODE */

body.chakra-ui-dark .react-calendar {
  border-radius: 30px;
}
body.chakra-ui-dark .react-calendar__navigation__prev-button {
  background-color: #7551ff !important;
}
body.chakra-ui-dark .react-calendar__navigation__next-button {
  background-color: #7551ff !important;
  color: white;
}
body.chakra-ui-dark .react-calendar__tile {
  color: white;
}
body.chakra-ui-dark .react-calendar__tile:enabled:hover,
body.chakra-ui-dark .react-calendar__tile:enabled:focus {
  background-color: rgba(255, 255, 255, 0.1);
}
body.chakra-ui-dark .react-calendar__month-view__weekdays {
  background-color: rgba(255, 255, 255, 0.1);
}
body.chakra-ui-dark .react-calendar__tile--now,
body.chakra-ui-dark .react-calendar__tile--now:enabled:hover,
body.chakra-ui-dark .react-calendar__tile--now:enabled:focus {
  background-color: rgba(255, 255, 255, 0.1);
}
body.chakra-ui-dark .react-calendar__month-view__days__day--neighboringMonth {
  color: #b0bbd5;
}
body.chakra-ui-dark .react-calendar__tile--active,
body.chakra-ui-dark .react-calendar__tile--active:enabled:hover,
body.chakra-ui-dark .react-calendar__tile--active:enabled:focus {
  background: #7551ff;
  color: white;
}
body.chakra-ui-dark .react-calendar__tile--range,
body.chakra-ui-dark .react-calendar__tile--range:enabled:hover,
body.chakra-ui-dark .react-calendar__tile--range:enabled:focus {
  background: rgba(255, 255, 255, 0.1);
  color: #7551ff;
}
body.chakra-ui-dark .react-calendar__tile--rangeStart,
body.chakra-ui-dark .react-calendar__tile--rangeStart:enabled:hover,
body.chakra-ui-dark .react-calendar__tile--rangeStart:enabled:focus {
  background: #7551ff;
  color: white;
}
body.chakra-ui-dark .react-calendar__tile--rangeEnd,
body.chakra-ui-dark .react-calendar__tile--rangeEnd:enabled:hover,
body.chakra-ui-dark .react-calendar__tile--rangeEnd:enabled:focus {
  background: #7551ff;
  color: white;
}

================
File: Client/src/components/calender/viewCalender.js
================
import { CloseIcon, DeleteIcon, EditIcon, ViewIcon } from '@chakra-ui/icons'
import { DrawerFooter, Flex, Grid, GridItem, IconButton, Modal, ModalBody, ModalContent, ModalHeader, ModalOverlay, Text } from '@chakra-ui/react'
import Spinner from "components/spinner/Spinner"
import moment from 'moment'
import { useEffect, useState } from 'react'
import { BiLink } from 'react-icons/bi'
import { Link } from 'react-router-dom'
import { getApi } from 'services/api'
import { useNavigate } from 'react-router-dom';

const ViewCalender = (props) => {
    const { onClose, isOpen, info, fetchData, setAction, action, access, contactAccess, leadAccess } = props
    const [data, setData] = useState()
    const [edit, setEdit] = useState(false);
    const [deleteModel, setDelete] = useState(false);
    const user = JSON.parse(localStorage.getItem("user"))
    const [isLoding, setIsLoding] = useState(false)
    const navigate = useNavigate()

    const fetchViewData = async () => {
        if (info?.event?.groupId === "task") {
            setIsLoding(true)
            let result = await getApi('api/task/view/', info?.event ? info?.event?.id : info);
            setData(result?.data);
            setIsLoding(false)
        } else if (info?.event?.groupId === "call") {
            setIsLoding(true)
            let result = await getApi('api/call/view/', info?.event ? info?.event?.id : info);
            setData(result?.data);
            setIsLoding(false)

        } else if (info?.event?.groupId === "meeting") {
            setIsLoding(true)
            let result = await getApi('api/meeting/view/', info?.event ? info?.event?.id : info);
            setData(result?.data);
            setIsLoding(false)

        } else if (info?.event?.groupId === "email") {
            setIsLoding(true)
            let result = await getApi('api/email/view/', info?.event ? info?.event?.id : info);
            setData(result?.data);
            setIsLoding(false)
        }
    }

    useEffect(() => {
        fetchViewData()
    }, [action, info])

    const handleViewOpen = () => {
        if (info?.event) {
            navigate(`/view/${info?.event?.id}`)
        }
        else {
            navigate(`/view/${info}`)
        }
    }
    return (
        <div> <Modal isOpen={isOpen} size={'md'} isCentered>
            <ModalOverlay />
            <ModalContent>
                <ModalHeader justifyContent='space-between' display='flex' >
                    <span style={{ textTransform: "capitalize" }}>{info?.event?.groupId}</span>
                    <IconButton onClick={() => onClose(false)} icon={<CloseIcon />} />
                </ModalHeader>
                {isLoding ?
                    <Flex justifyContent={'center'} alignItems={'center'} mb={30} width="100%" >
                        <Spinner />
                    </Flex> : <>

                        <ModalBody>
                            <Grid templateColumns="repeat(12, 1fr)" gap={3} >
                                {data && Object.keys(data).length > 0 && Object.keys(data)?.map((item) =>
                                    <GridItem colSpan={{ base: 12, md: 6 }} >
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> {item}</Text>
                                        <Text>{data[item] ? data[item] : ' - '}</Text>
                                    </GridItem>
                                )}
                            </Grid>
                           
                        </ModalBody>
                        <DrawerFooter>
                            {access?.view || user?.role === "superAdmin" && <IconButton variant='outline' colorScheme={'green'} onClick={() => handleViewOpen()} borderRadius="10px" size="md" icon={<ViewIcon />} />}
                            {access?.update || user?.role === "superAdmin" && <IconButton variant='outline' onClick={() => setEdit(true)} ml={3} borderRadius="10px" size="md" icon={<EditIcon />} />}
                            {access?.delete || user?.role === "superAdmin" && <IconButton colorScheme='red' onClick={() => setDelete(true)} ml={3} borderRadius="10px" size="md" icon={<DeleteIcon />} />}

                        </DrawerFooter>
                    </>}
            </ModalContent>
        </Modal></div>
    )
}

export default ViewCalender

================
File: Client/src/components/card/Card.js
================
import { Box, useStyleConfig } from "@chakra-ui/react";
function Card(props) {
  const { variant, children, ...rest } = props;
  const styles = useStyleConfig("Card", { variant });

  return (
    <Box __css={styles} height={'100%'} {...rest}>
      {children}
    </Box>
  );
}
export default Card;

================
File: Client/src/components/card/MiniStatistics.js
================
// Chakra imports
// Chakra imports
import {
  Flex,
  Stat,
  StatLabel,
  StatNumber,
  useColorModeValue,
  Text,
} from "@chakra-ui/react";
// Custom components
import Card from "components/card/Card.js";
import CountUpComponent from "components/countUpComponent/countUpComponent";
// Custom icons
import React from "react";

export default function Default(props) {
  const { startContent, endContent, name, growth, value } = props;
  const textColor = useColorModeValue("secondaryGray.900", "white");
  const textColorSecondary = "secondaryGray.600";

  return (
    <Card cursor={'pointer'} py='15px' onClick={props.onClick} >
      <Flex
        my='auto'
        h='100%'
        align={{ base: "center", xl: "start" }}
        justify={{ base: "center", xl: "center" }}>
        {startContent}

        <Stat my='auto' ms={startContent ? "18px" : "0px"}>
          <StatLabel
            lineHeight='100%'
            color={textColorSecondary}
            fontSize={{
              base: props.fontsize ? props.fontsize : "sm",
            }}>
            {name}
          </StatLabel>
          <StatNumber
            color={textColor}
            fontSize={{
              base: "2xl",
            }}>
            <CountUpComponent targetNumber={value} />
            {/* {value} */}
          </StatNumber>
          {growth ? (
            <Flex align='center'>
              <Text color='green.500' fontSize='xs' fontWeight='700' me='5px'>
                {growth}
              </Text>
              <Text color='secondaryGray.600' fontSize='xs' fontWeight='400'>
                since last month
              </Text>
            </Flex>
          ) : null}
        </Stat>
        <Flex ms='auto' w='max-content'>
          {endContent}
        </Flex>
      </Flex>
    </Card>
  );
}

================
File: Client/src/components/charts/LineChart.js
================
import React, { useEffect, useState } from "react";
import ReactApexChart from "react-apexcharts";
import { HasAccess } from "../../redux/accessUtils";

const ApexChart = (props) => {
  const { data } = props;

  let permissions = []
  let permissionsLength = []

  data?.forEach(item => {
    if (item.name) {
      permissions.push(item.name);
      permissionsLength.push(item.length);
    }
  });

  const state = {
    series: [
      {
        name: 'Data',
        data: permissionsLength?.map((item) => item)
      }
    ],
    options: {
      chart: {
        height: 350,
        type: 'bar',
      },
      plotOptions: {
        bar: {
          borderRadius: 10,
          columnWidth: '40%',
        }
      },
      stroke: {
        width: 2
      },
      grid: {
        row: {
          colors: ['#fff', '#f2f2f2']
        }
      },
      xaxis: {
        categories: permissions?.map((item) => item),
        tickPlacement: 'on'
      },

      fill: {
        type: 'gradient',
        gradient: {
          shade: 'light',
          type: "horizontal",
          shadeIntensity: 0.25,
          inverseColors: true,
          opacityFrom: 0.85,
          opacityTo: 0.85,
          stops: [50, 0, 100]
        },
      }
    },
  };
  return (
    <div id="chart">
      <ReactApexChart options={state.options} series={state.series} type="bar" height={350} />
    </div>
  );
};

export default ApexChart;

================
File: Client/src/components/charts/PieChart.js
================
import React, { useState } from "react";
import ReactApexChart from "react-apexcharts";

const ApexChart = (props) => {
  const { leadData } = props;

  let activeLength = leadData && leadData.length > 0 ? leadData?.filter(lead => lead?.leadStatus === "active")?.length : 0;
  let pendingLength = leadData && leadData.length > 0 ? leadData?.filter(lead => lead?.leadStatus === "pending")?.length : 0;
  let soldLength = leadData && leadData.length > 0 ? leadData?.filter(lead => lead?.leadStatus === "sold")?.length : 0;

  const series = [activeLength, pendingLength, soldLength];
  const scaledSeries = series?.map(value => {
    if (leadData?.length === 0) {
        return NaN;
    } else {
        return value === 0 ? NaN : ((value * 100) / leadData?.length);
    }
});


  const options = {
    chart: {
      type: 'radialBar',
      width: 330,
    },
    plotOptions: {
      radialBar: {
        size: undefined,
        inverseOrder: true,
        hollow: {
          margin: 40,
          size: '48%',
          background: 'transparent',
        },
        dataLabels: {
          name: {
            fontSize: '22px',
          },
          value: {
            fontSize: '16px',
          },
          total: {
            show: true,
            label: 'Total',
            color: '#1F7EEB',
            formatter: function () {
              return leadData?.length || 0;
            }
          },
          value: {
            show: true,
            formatter: function (val) {
              return (val / 100 * leadData.length).toFixed(0);
            }
          }
        },
        track: {
          show: true,
        },
        startAngle: -180,
        endAngle: 180,
        hover: {
          size: undefined,
          sizeOffset: 3,
          colors: ["#ff5959", "#ECC94B", "#01B574"], // Add hover effect colors
        }
      },
    },
    stroke: {
      lineCap: 'round'
    },
    colors: ["#25BE87", "#ECC94B", "#ff5959"],
    labels: ['Active', 'Pending', 'Sold'],
    legend: {
      show: true,
      floating: true,
      position: 'bottom',
    },
  }

  return (
    <div>
      <ReactApexChart key={leadData?.length} options={options} series={scaledSeries} type="radialBar" height={320} />
    </div>
  );
};

export default ApexChart;

================
File: Client/src/components/checkTable/checktable.js
================
import { useMemo, useState, useEffect } from 'react';
import { Box, Flex, Table, Tbody, Td, Text, Th, Thead, Tr, Button, HStack, Tag, TagLabel, Menu, MenuButton, MenuDivider, MenuItem, MenuList, Grid, GridItem, Checkbox, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, TagCloseButton } from '@chakra-ui/react';
import { useColorModeValue } from '@chakra-ui/system';
import { BsColumnsGap } from "react-icons/bs";
import { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';
import { SearchIcon, DeleteIcon, AddIcon } from "@chakra-ui/icons";
import { useGlobalFilter, usePagination, useSortBy, useTable } from 'react-table';
import * as XLSX from "xlsx";
import Card from 'components/card/Card';
import CountUpComponent from 'components/countUpComponent/countUpComponent';
import Pagination from 'components/pagination/Pagination';
import Spinner from 'components/spinner/Spinner';
import CustomSearchInput from "../search/search";
import AdvanceSearchUsingCustomFields from "../search/advanceSearch";
import DataNotFound from "../notFoundData";
import moment from 'moment';
import { useSelector, useDispatch } from 'react-redux';
import { getSearchData, setGetTagValues, setSearchValue } from '../../redux/slices/advanceSearchSlice'

const CommonCheckTable = (props) => {
    const { isLoding, title, columnData, size, dataColumn, setSearchedDataOut, state, allData, ManageGrid, deleteMany, tableCustomFields, access, selectedColumns, setSelectedColumns, onOpen, setDelete, selectedValues, setSelectedValues, setIsImport, checkBox, AdvanceSearch, searchDisplay, setSearchDisplay, BackButton, searchboxOutside, setGetTagValuesOutside, setSearchboxOutside, selectType, customSearch } = props;
    const { dataLength } = props;
    const { handleSearchType } = props;
    const textColor = useColorModeValue("secondaryGray.900", "white");
    const borderColor = useColorModeValue("gray.200", "whiteAlpha.100");
    const [displaySearchData, setDisplaySearchData] = useState(false);
    const [searchedData, setSearchedData] = useState([]);
    const columns = useMemo(() => dataColumn, [dataColumn]);
    const [tempSelectedColumns, setTempSelectedColumns] = useState(dataColumn); // State to track changes

    const searchedDataOut = useSelector((state) => state?.advanceSearchData?.searchResult)
    const searchValue = useSelector((state) => state?.advanceSearchData?.searchValue)
    const getTagValues = useSelector((state) => state?.advanceSearchData?.getTagValues)
    const data = useMemo(() => (AdvanceSearch ? searchDisplay : displaySearchData) ? (AdvanceSearch ? searchedDataOut : searchedData) : allData, [(AdvanceSearch ? searchDisplay : displaySearchData) ? (AdvanceSearch ? searchedDataOut : searchedData) : allData]);
    const [manageColumns, setManageColumns] = useState(false);
    const [csvColumns, setCsvColumns] = useState([]);
    const [searchbox, setSearchbox] = useState('');
    const [advaceSearch, setAdvaceSearch] = useState(false);
    const [column, setColumn] = useState('');
    const [gopageValue, setGopageValue] = useState();

    const dispatch = useDispatch();

    const tableInstance = useTable(
        {
            columns,
            data,
            initialState: { pageIndex: 0 }
        },
        useGlobalFilter,
        useSortBy,
        usePagination
    );

    const {
        getTableProps,
        getTableBodyProps,
        headerGroups,
        prepareRow,
        page,
        canPreviousPage,
        canNextPage,
        pageOptions,
        pageCount,
        gotoPage,
        nextPage,
        previousPage,
        setPageSize,
        state: { pageIndex, pageSize }
    } = tableInstance;

    if (pageOptions && pageOptions?.length > 0 && pageOptions?.length < gopageValue) {
        setGopageValue(pageOptions.length)
    }

    const handleSearch = (results) => {
        AdvanceSearch && dispatch(getSearchData({ searchData: results, type: handleSearchType }))
        AdvanceSearch ? setSearchedDataOut(results) : setSearchedData(results);
    };

    const handleAdvanceSearch = (values) => {
        dispatch(setSearchValue(values))
        const searchResult = AdvanceSearch ? dispatch(getSearchData({ values: values, allData: allData, type: title })) : allData?.filter(item => {
            return tableCustomFields.every(field => {
                const fieldValue = values[field.name];
                const itemValue = item[field.name];

                if (field.type === 'select') {
                    return !fieldValue || itemValue === fieldValue;
                }
                else if (field.type === 'number') {
                    return (
                        [null, undefined, ''].includes(fieldValue) ||
                        (itemValue !== undefined &&
                            itemValue.toString().includes(fieldValue.toString()))
                    );
                }
                else if (field.type === 'date') {
                    const fromDate = values[`from${field.name}`];
                    const toDate = values[`to${field.name}`];

                    if (!fromDate && !toDate) {
                        return true; // No date range specified
                    }

                    const timeItemDate = new Date(itemValue);
                    const timeMomentDate = moment(timeItemDate).format('YYYY-MM-DD');

                    return (
                        (!fromDate || (timeMomentDate >= fromDate)) &&
                        (!toDate || (timeMomentDate <= toDate))
                    );
                }
                else {
                    // Default case for text, email
                    return !fieldValue || itemValue?.toLowerCase()?.includes(fieldValue?.toLowerCase());
                }
            });
        });

        const getValue = tableCustomFields.reduce((result, field) => {
            if (field.type === 'date') {
                const fromDate = values[`from${field.name}`];
                const toDate = values[`to${field.name}`];

                if (fromDate || toDate) {
                    result.push({
                        name: [`from${field.name}`, `to${field.name}`],
                        value: `From: ${fromDate} To: ${toDate}`
                    })
                }
            } else if (values[field.name]) {
                result.push({
                    name: [field.name],
                    value: values[field.name]
                })
            }

            return result;
        }, []);
        dispatch(setGetTagValues(getValue))
        setSearchedData(searchResult);
        setDisplaySearchData(true);
        setAdvaceSearch(false);
        if (setSearchbox) {
            setSearchbox('');
        }
    }


    const handleClear = () => {
        setSearchDisplay && setSearchDisplay(false)
        setDisplaySearchData && setDisplaySearchData(false)
        if (searchboxOutside) {
            setSearchboxOutside('')
        } else {
            setSearchbox('');
        }
        dispatch(setGetTagValues([]))
        if (props?.getTagValuesOutSide) {
            setGetTagValuesOutside([]);
        }
        setGopageValue(1);
    };

    const handleClick = () => {
        onOpen();
    };

    const findStatus = () => {
        const searchResult = allData?.filter(
            (item) =>
                (!state || (item?.status && item?.status?.toLowerCase().includes(state?.toLowerCase())))
        )
        let getValue = [state || undefined].filter(value => value);

        dispatch(setGetTagValues(getValue))
        AdvanceSearch ? setSearchedDataOut && setSearchedDataOut(searchResult) : setSearchedData && setSearchedData(searchResult);
        AdvanceSearch ? setSearchDisplay && setSearchDisplay(true) : setDisplaySearchData && setDisplaySearchData(searchResult);
        setDisplaySearchData(true)
        setAdvaceSearch(false)
    }

    useEffect(() => {
        state && findStatus()
    }, [state, allData]);

    let isColumnSelected;
    const toggleColumnVisibility = (columnKey) => {
        setColumn(columnKey);
        isColumnSelected = tempSelectedColumns?.some((column) => column?.accessor === columnKey);
        if (isColumnSelected) {
            const updatedColumns = tempSelectedColumns?.filter((column) => column?.accessor !== columnKey);
            setTempSelectedColumns(updatedColumns);
        } else {
            const columnToAdd = columnData?.find((column) => column?.accessor === columnKey);
            setTempSelectedColumns([...tempSelectedColumns, columnToAdd]);
        }
    };

    const handleCheckboxChange = (event, value) => {
        if (selectType === "single") {
            if (event.target.checked) {
                setSelectedValues && setSelectedValues(value);
            } else {
                setSelectedValues();
            }
        } else if (event.target.checked) {
            setSelectedValues && setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);
        } else {
            setSelectedValues && setSelectedValues((prevSelectedValues) =>
                prevSelectedValues.filter((selectedValue) => selectedValue !== value)
            );
        }

    };

    const handleColumnClear = () => {
        isColumnSelected = selectedColumns?.some((selectedColumn) => selectedColumn?.accessor === column?.accessor)
        setTempSelectedColumns(columnData);
        setManageColumns(!manageColumns ? !manageColumns : false)
    };


    const handleExportLeads = (extension) => {
        selectedValues && selectedValues?.length > 0
            ? downloadCsvOrExcel(extension, selectedValues)
            : downloadCsvOrExcel(extension);
    };

    const downloadCsvOrExcel = async (extension, selectedIds) => {
        try {
            if (selectedIds && selectedIds?.length > 0) {
                const selectedRecordsWithSpecificFileds = allData?.filter((rec) => selectedIds.includes(rec._id))?.map((rec) => {
                    const selectedFieldsData = {};
                    csvColumns?.forEach((property) => {
                        selectedFieldsData[property.accessor] = rec[property.accessor];
                    });
                    return selectedFieldsData;
                });
                convertJsonToCsvOrExcel(selectedRecordsWithSpecificFileds, csvColumns, title || 'data', extension);
            } else {
                const AllRecordsWithSpecificFileds = allData?.map((rec) => {
                    const selectedFieldsData = {};
                    csvColumns?.forEach((property) => {
                        selectedFieldsData[property?.accessor] = rec[property?.accessor];
                    });
                    return selectedFieldsData;
                });
                convertJsonToCsvOrExcel(AllRecordsWithSpecificFileds, csvColumns, title || 'data', extension);
            }
        } catch (e) {
            console.error(e);
        }
    };

    const convertJsonToCsvOrExcel = (jsonArray, csvColumns, fileName, extension) => {
        const csvHeader = csvColumns?.map((col) => col?.Header);

        const csvContent = [
            csvHeader,
            ...jsonArray?.map((row) => csvColumns?.map((col) => row[col?.accessor]))
        ];

        const ws = XLSX.utils.aoa_to_sheet(csvContent);
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, 'Sheet 1');
        XLSX.writeFile(wb, `${fileName}.${extension}`);    // .csv, .xlsx
        setSelectedValues([])
    };

    const handleRemove = (name) => {
        const filter = (getTagValues || []).filter((item) => {
            if (Array.isArray(name?.name)) {
                return name.name?.toString() !== item.name?.toString();
            }
        });

        let updatedSearchValue = { ...searchValue };
        for (let key in updatedSearchValue) {
            if (updatedSearchValue.hasOwnProperty(key)) {
                if (name.name.includes(key)) {
                    delete updatedSearchValue[key];
                }
                if (updatedSearchValue[key] === "") {
                    delete updatedSearchValue[key];
                }
            }
        }

        handleAdvanceSearch(updatedSearchValue)

        dispatch(setGetTagValues(filter))
        if (filter?.length === 0) {
            handleClear();
        }
    }

    useEffect(() => {
        AdvanceSearch ? setSearchedDataOut && setSearchedDataOut(data) : setSearchedData && setSearchedData(data);
    }, []);

    useEffect(() => {
        setTempSelectedColumns(dataColumn);
    }, [dataColumn]);

    useEffect(() => {
        if (selectedColumns) {
            let tempCsvColumns = selectedColumns?.filter((col) => col?.Header !== '#' && col?.Header !== 'Action')?.map((field) => ({ Header: field?.Header, accessor: field?.accessor }));
            setCsvColumns([...tempCsvColumns])
        }
    }, [selectedColumns]);
    return (
        <>
            <Card
                direction="column"
                w="100%"
                overflowX={{ sm: "scroll", lg: "hidden" }}
            >
                <Grid templateColumns="repeat(12, 1fr)" gap={2}>
                    <GridItem colSpan={{ base: 12, md: 8 }} display={"flex"} alignItems={"center"}>
                        <Flex alignItems={"center"} flexWrap={"wrap"}>
                            {
                                title &&
                                <Text
                                    color={'secondaryGray.900'}
                                    fontSize="22px"
                                    fontWeight="700"
                                    lineHeight="100%"
                                    textTransform={'capitalize'}
                                >
                                    {title} (<CountUpComponent key={data?.length} targetNumber={dataLength || data?.length} />)
                                </Text>
                            }
                            {customSearch !== false && <CustomSearchInput setSearchbox={setSearchboxOutside ? setSearchboxOutside : setSearchbox} setDisplaySearchData={setSearchboxOutside ? props.setSearchDisplay : setDisplaySearchData} searchbox={searchboxOutside ? searchboxOutside : searchbox} allData={allData} dataColumn={columns} onSearch={handleSearch} setGetTagValues={props.setGetTagValuesOutside ? props.setGetTagValuesOutside : setGetTagValues} setGopageValue={setGopageValue} />}
                            {
                                AdvanceSearch ? AdvanceSearch : AdvanceSearch !== false &&
                                    <Button variant="outline" colorScheme='brand' leftIcon={<SearchIcon />} mt={{ sm: "5px", md: "0" }} size="sm" onClick={() => setAdvaceSearch(true)}>Advance Search</Button>
                            }
                            {(searchDisplay || displaySearchData) ? <Button variant="outline" colorScheme='red' size="sm" ms={2} onClick={() => handleClear()}>Clear</Button> : ""}
                            {(selectedValues?.length > 0 && access?.delete && !deleteMany) && <DeleteIcon cursor={"pointer"} onClick={() => setDelete(true)} color={'red'} ms={2} />}
                        </Flex>
                    </GridItem>
                    {/* Advance filter */}
                    <AdvanceSearchUsingCustomFields
                        setAdvaceSearch={setAdvaceSearch}
                        setGetTagValues={setGetTagValues}
                        isLoding={isLoding}
                        allData={allData}
                        setDisplaySearchData={setDisplaySearchData}
                        setSearchedData={setSearchedData}
                        advaceSearch={advaceSearch}
                        tableCustomFields={tableCustomFields}
                        setSearchbox={setSearchbox}
                        handleAdvanceSearch={handleAdvanceSearch}
                    />
                    <GridItem colSpan={{ base: 12, md: 4 }} display={"flex"} justifyContent={"end"} alignItems={"center"} textAlign={"right"}>
                        {ManageGrid !== false &&
                            <Menu isLazy  >
                                <MenuButton p={4}>
                                    <BsColumnsGap />
                                </MenuButton>
                                <MenuList minW={'fit-content'} transform={"translate(1670px, 60px)"} zIndex={2} >
                                    <MenuItem onClick={() => setManageColumns(true)} width={"165px"}> Manage Columns
                                    </MenuItem>
                                    {typeof setIsImport === "function" && <MenuItem width={"165px"} onClick={() => setIsImport(true)}> Import {title}
                                    </MenuItem>}
                                    {
                                        allData && allData?.length > 0 &&
                                        <>
                                            <MenuDivider />
                                            <MenuItem width={"165px"} onClick={() => handleExportLeads('csv')}>{selectedValues && selectedValues?.length > 0 ? 'Export Selected Data as CSV' : 'Export as CSV'}</MenuItem>
                                            <MenuItem width={"165px"} onClick={() => handleExportLeads('xlsx')}>{selectedValues && selectedValues?.length > 0 ? 'Export Selected Data as Excel' : 'Export as Excel'}</MenuItem>
                                        </>
                                    }
                                </MenuList>
                            </Menu>}
                        {(access?.create || access === true) && <Button onClick={() => handleClick()} size="sm" variant="brand" leftIcon={<AddIcon />}>Add New</Button>}
                        {BackButton && BackButton}
                    </GridItem>
                    <HStack spacing={4} mb={2}>
                        {(getTagValues || []).map((item) => (
                            <Tag
                                size={"md"}
                                p={2}
                                key={item.value}
                                borderRadius='full'
                                variant='solid'
                                colorScheme="gray"
                            >
                                <TagLabel>{item.value}</TagLabel>
                                <TagCloseButton onClick={() => handleRemove(item)} />
                            </Tag>
                        ))}
                    </HStack>
                </Grid>
                <Box overflowY={"auto"} className={size ? `small-table-fix-container` : `table-fix-container`}>
                    <Table {...getTableProps()} variant="simple" color="gray.500" mb="24px">
                        <Thead zIndex={1}>
                            {headerGroups?.map((headerGroup, index) => (
                                <Tr {...headerGroup.getHeaderGroupProps()} key={index}>
                                    {headerGroup.headers?.map((column, index) => (
                                        <Th
                                            {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}
                                            pe="10px"
                                            key={index}
                                            borderColor={borderColor}
                                        >
                                            <Flex
                                                align="center"
                                                justifyContent={column.center ? "center" : "start"}
                                                fontSize={{ sm: "14px", lg: "16px" }}
                                                color="secondaryGray.900"
                                            >
                                                <span style={{ textTransform: "capitalize", marginRight: "8px" }}>
                                                    {column.render("Header")}
                                                </span>
                                                {column.isSortable !== false && (
                                                    <span>
                                                        {column.isSorted ? (column.isSortedDesc ? <FaSortDown /> : <FaSortUp />) : <FaSort />}
                                                    </span>
                                                )}
                                            </Flex>
                                        </Th>
                                    ))}
                                </Tr>
                            ))}
                        </Thead>
                        <Tbody {...getTableBodyProps()}>
                            {isLoding ?
                                <Tr>
                                    <Td colSpan={columns?.length}>
                                        <Flex justifyContent={'center'} alignItems={'center'} width="100%" color={textColor} fontSize="sm" fontWeight="700">
                                            <Spinner />
                                        </Flex>
                                    </Td>
                                </Tr>
                                : data?.length === 0 ? (
                                    <Tr>
                                        <Td colSpan={columns.length}>
                                            <Text textAlign={'center'} width="100%" color={textColor} fontSize="sm" fontWeight="700">
                                                <DataNotFound />
                                            </Text>
                                        </Td>
                                    </Tr>
                                ) : page?.map((row, i) => {
                                    prepareRow(row);
                                    return (
                                        <Tr {...row?.getRowProps()}>
                                            {row?.cells?.map((cell, index) => {
                                                let data = "";
                                                columnData?.forEach((item) => {
                                                    if (cell?.column.Header === item.Header) {
                                                        if (item.cell && typeof item.cell === 'function') {
                                                            data = (
                                                                <Flex Flex align="center" justifyContent={item?.Header === 'Action' && 'center'}>
                                                                    <Text color={textColor} fontSize="sm" fontWeight="700" >
                                                                        {item.cell(cell) === ' ' ? '-' : item.cell(cell)}
                                                                    </Text>
                                                                </Flex>
                                                            );
                                                        }
                                                        else {
                                                            data = (
                                                                <Flex align="center" >
                                                                    {(item.Header === "#" && (checkBox || checkBox === undefined)) && <Checkbox colorScheme="brandScheme" value={selectedValues} isChecked={selectedValues?.includes(cell?.value)} onChange={(event) => handleCheckboxChange(event, cell?.value)} me="10px" />}

                                                                    <Text color={textColor} fontSize="sm" fontWeight="700">
                                                                        {item.Header === "#" ? cell?.row?.index + 1 : cell?.value ? cell?.value : '-'}
                                                                    </Text>
                                                                </Flex>
                                                            );
                                                        }
                                                    }
                                                });
                                                return (
                                                    <Td
                                                        {...cell?.getCellProps()}
                                                        key={index}
                                                        fontSize={{ sm: "14px" }}
                                                        minW={{ sm: "150px", md: "200px", lg: "auto" }}
                                                        borderColor="transparent"
                                                    >
                                                        {data}
                                                    </Td>
                                                );
                                            })}
                                        </Tr>
                                    );
                                })}
                        </Tbody>
                    </Table>
                </Box>
                {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage}
                    pageSize={pageSize} pageIndex={pageIndex} dataLength={15} />}

                {/* Manage Columns */}
                <Modal onClose={() => { setManageColumns(false); }} isOpen={manageColumns} isCentered>
                    <ModalOverlay />
                    <ModalContent>
                        <ModalHeader>Manage Columns</ModalHeader>
                        <ModalCloseButton onClick={() => { setManageColumns(false); }} />
                        <ModalBody>
                            <div>
                                {columnData?.map((column) => (
                                    <Text display={"flex"} key={column?.accessor} py={2}>
                                        <Checkbox
                                            defaultChecked={selectedColumns?.some((selectedColumn) => selectedColumn?.accessor === column?.accessor)}
                                            onChange={() => toggleColumnVisibility(column?.accessor)}
                                            pe={2}
                                        />
                                        {column?.Header}
                                    </Text>
                                ))}
                            </div>
                        </ModalBody>
                        <ModalFooter>
                            <Button colorScheme='brand' mr={2} onClick={() => {
                                setSelectedColumns([...tempSelectedColumns]);
                                setManageColumns(false);
                            }} disabled={isLoding ? true : false} size='sm'>{isLoding ? <Spinner /> : 'Save'}</Button>
                            <Button variant='outline' colorScheme="red" size='sm' onClick={() => handleColumnClear()}>Close</Button>
                        </ModalFooter>
                    </ModalContent>
                </Modal>

            </Card>
        </>
    );
}

export default CommonCheckTable

================
File: Client/src/components/commonDeleteModel/index.js
================
import { Button, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import { useState } from 'react';
import { useNavigate, useParams } from 'react-router-dom';

const CommonDeleteModel = (props) => {
    const { isOpen, onClose, type, handleDeleteData, ids, selectedValues } = props
    const [isLoding, setIsLoding] = useState(false)

    const handleDelete = () => {
        handleDeleteData(ids, selectedValues)
    }

    const handleClose = () => {
        onClose()
    }

    return (
        <div>
            <Modal onClose={onClose} isOpen={isOpen} isCentered>
                <ModalOverlay />
                <ModalContent>
                    <ModalHeader>Delete {`${type}`}</ModalHeader>
                    <ModalCloseButton />
                    <ModalBody>
                        Are You Sure To Delete selected {`${type}`} ?
                    </ModalBody>
                    <ModalFooter>
                        <Button colorScheme="red" size="sm" mr={2} onClick={handleDelete} disabled={isLoding ? true : false} >{isLoding ? <Spinner /> : 'Yes'}</Button>
                        <Button variant="outline" size="sm" onClick={handleClose}>No</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        </div>
    )
}

export default CommonDeleteModel

================
File: Client/src/components/commonFileUpload/index.js
================
// Chakra imports
import {
    Box, Flex,
    Grid,
    GridItem,
    Icon,
    Text,
    useColorModeValue
} from "@chakra-ui/react";
// Custom components
// Assets
import Dropzone from "components/Dropzone";
import { MdUpload } from "react-icons/md";

export default function CommonFileUpload(props) {
    // const { used, total, count, ...rest } = props;
    const { count, text, onFileSelect } = props;
    // Chakra Color Mode
    const textColorPrimary = useColorModeValue("secondaryGray.900", "white");
    const brandColor = useColorModeValue("brand.500", "white");
    const textColorSecondary = "gray.400";
    return (
        <Grid templateColumns="repeat(12, 1fr)" gap={2}>
            <GridItem colSpan={{ base: 12 }} >
                <Dropzone
                    w={{ base: "100%" }}
                    me='36px'
                    minH={200}
                    img={text === 'Property Photos' ? 'img' : ''}
                    csv={'csv'}
                    height={'100%'}
                    onFileSelect={onFileSelect}
                    isMultipleAllow={false}
                    content={
                        <Box>
                            <Icon as={MdUpload} w='80px' h='80px' color={brandColor} />
                            <Flex justify='center' mx='auto' mb='12px'>
                                <Text fontSize='xl' fontWeight='700' color={brandColor}>
                                    Upload File
                                </Text>
                            </Flex>
                            {count > 0 && <Text fontSize='sm' fontWeight='500' color='secondaryGray.500'>
                                Selected Files : {count}
                            </Text>}
                        </Box>
                    }
                />
            </GridItem>
            <GridItem colSpan={{ base: 12 }} >
                <Flex direction='column' >
                    <Text
                        color={textColorPrimary}
                        fontWeight='bold'
                        textAlign='start'
                        fontSize='2xl'
                        mt={{ base: "20px" }}>
                        Upload {text}
                    </Text>
                    <Text
                        color={textColorSecondary}
                        fontSize='md'
                        my={{ base: "auto" }}
                        mx='auto'
                        textAlign='start'>
                        Accepted File Type (csv, xlsx file - 15MB max) only 1 file
                    </Text>
                </Flex>
            </GridItem>
        </Grid>
    );
}

================
File: Client/src/components/commonTableModel/AccountModel.js
================
import { Button, Flex, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react'
import React, { useEffect, useState } from 'react'
import Spinner from 'components/spinner/Spinner'
import { GiClick } from "react-icons/gi";
import CommonCheckTable from 'components/reactTable/checktable';
import { useDispatch } from 'react-redux';
import { getApi } from 'services/api';
import { fetchAccountData } from '../../redux/slices/accountSlice';
import { toast } from 'react-toastify';

const AccountModel = (props) => {
    const { onClose, isOpen, fieldName, setFieldValue, data, type, billingState, billingCity, billingPostalCode, billingCountry, billingStreet } = props
    const title = "Account";
    const dispatch = useDispatch();
    // const [data, setData] = useState([]);

    const [isLoding, setIsLoding] = useState(false);
    const [leadData, setLeadData] = useState([]);
    const [selectedValues, setSelectedValues] = useState([]);
    const accountData = data?.length > 0 && data?.find((item) => item?._id === selectedValues)
    const handleSubmit = async () => {
        try {
            setIsLoding(true)
            setFieldValue(fieldName, selectedValues)
            // if (type === "quotes") {
            //     setFieldValue(billingStreet, accountData?.billingStreet)
            //     setFieldValue(billingState, accountData?.billingState)
            //     setFieldValue(billingCity, selectedValues?.billingCity)
            //     setFieldValue(billingPostalCode, selectedValues?.billingPostalcode)
            //     setFieldValue(billingCountry, selectedValues?.billingCountry)
            // }
            onClose()
        }
        catch (e) {
            console.log(e)
        }
        finally {
            setIsLoding(false)
        }
    }
    const tableColumns = [
        { Header: "#", accessor: "_id", isSortable: false, width: 10 },
        { Header: 'Account Name', accessor: 'name' },
        { Header: 'Office Phone', accessor: 'officePhone', },
        { Header: 'Fax', accessor: 'fax', },
        { Header: 'Email Address', accessor: 'emailAddress', },
    ];

    // const fetchData = async () => {
    //     setIsLoding(true)
    //     const result = await dispatch(fetchAccountData())

    //     if (result.payload.status === 200) {
    //         setData(result?.payload?.data);
    //     } else {
    //         toast.error("Failed to fetch data", "error");
    //     }
    //     setIsLoding(false)
    // }

    // useEffect(() => {
    //     fetchData()
    // }, [])

    return (
        <Modal onClose={onClose} size='full' isOpen={isOpen} >
            <ModalOverlay />
            <ModalContent>
                <ModalHeader>Select Account</ModalHeader>
                <ModalCloseButton />
                <ModalBody>
                    {isLoding ?
                        <Flex justifyContent={'center'} alignItems={'center'} width="100%" >
                            <Spinner />
                        </Flex> :
                        <CommonCheckTable
                            title={title}
                            isLoding={isLoding}
                            columnData={tableColumns ?? []}
                            // dataColumn={columns ?? []}
                            allData={data ?? []}
                            tableData={data}
                            AdvanceSearch={() => ""}
                            ManageGrid={false}
                            deleteMany={false}
                            selectedValues={selectedValues}
                            setSelectedValues={setSelectedValues}
                            selectType="single"
                            customSearch={false}
                        />
                    }
                </ModalBody>
                <ModalFooter>
                    <Button variant='brand' size='sm' me={2} disabled={isLoding ? true : false} leftIcon={<GiClick />} onClick={handleSubmit}> {isLoding ? <Spinner /> : 'Select'}</Button>
                    <Button variant='outline' size='sm' colorScheme='red' onClick={() => onClose()}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>

    )
}

export default AccountModel

================
File: Client/src/components/commonTableModel/Contact.js
================
import {
  Box, Checkbox,
  Flex, Table,
  Tbody,
  Td,
  Text,
  Th,
  Thead,
  Tr,
  useColorModeValue
} from "@chakra-ui/react";
import { useMemo, useState } from "react";
import {
  useGlobalFilter,
  usePagination,
  useSortBy,
  useTable,
} from "react-table";
import { GrFormNext, GrFormPrevious } from "react-icons/gr";

// Custom components
import Card from "components/card/Card";
import { Link } from "react-router-dom";
import CountUpComponent from "components/countUpComponent/countUpComponent";
import Pagination from "components/pagination/Pagination";
import { FaSort, FaSortDown, FaSortUp } from "react-icons/fa";

export default function ContactTable(props) {
  const { columnsData, tableData, title, type, selectedValues, setSelectedValues } = props;

  const columns = useMemo(() => columnsData, [columnsData]);
  const data = useMemo(() => tableData, [tableData]);
  const user = JSON.parse(localStorage.getItem("user"))
  const [gopageValue, setGopageValue] = useState()

  const tableInstance = useTable(
    {
      columns, data,
      initialState: { pageIndex: 0 }
    },
    useGlobalFilter,
    useSortBy,
    usePagination
  );

  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    prepareRow,
    page,
    canPreviousPage,
    canNextPage,
    pageOptions,
    pageCount,
    gotoPage,
    nextPage,
    previousPage,
    setPageSize,
    state: { pageIndex, pageSize }
  } = tableInstance;

  if (pageOptions.length < gopageValue) {
    setGopageValue(pageOptions.length)
  }

  const textColor = useColorModeValue("gray.500", "white");
  const borderColor = useColorModeValue("gray.200", "whiteAlpha.100");

  const handleCheckboxChange = (event, value) => {
    if (type === "multi") {
      if (event.target.checked) {
        setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);
      } else {
        setSelectedValues((prevSelectedValues) =>
          prevSelectedValues.filter((selectedValue) => selectedValue !== value)
        );
      }
    } else {
      if (event.target.checked) {
        setSelectedValues(value);
      } else {
        setSelectedValues(null);
      }
    }
  };


  return (
    <Card
      direction='column'
      w='100%'
      px='0px'
      style={{ border: '1px solid gray.200' }}
      overflowX={{ sm: "scroll", lg: "hidden" }}>
      <Flex px='25px' justify='space-between' mb='20px' align='center'>
        <Text
          color={textColor}
          fontSize='22px'
          fontWeight='700'
          lineHeight='100%'>
          {title}  (<CountUpComponent key={data?.length} targetNumber={data?.length} />)
        </Text>
      </Flex>
      <Box overflowY={'auto'} className="table-container-property" >
        <Table  {...getTableProps()} variant='simple' color='gray.500' mb='24px'>
          <Thead zIndex={1}>
            {headerGroups?.map((headerGroup, index) => (
              <Tr {...headerGroup.getHeaderGroupProps()} key={index}>
                {headerGroup.headers.map((column, index) => (

                  <Th
                    {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}
                    pe="10px"
                    key={index}
                    borderColor={borderColor}
                  >
                    <Flex
                      align="center"
                      justifyContent={column.center ? "center" : "start"}
                      fontSize={{ sm: "14px", lg: "16px" }}
                      color=" secondaryGray.900"
                    >
                      <span style={{ textTransform: "capitalize", marginRight: "8px" }}>
                        {column.render("Header")}
                      </span>

                      {column.isSortable !== false && (
                        <span>
                          {column.isSorted ? (column.isSortedDesc ? <FaSortDown /> : <FaSortUp />) : <FaSort />}
                        </span>
                      )}
                    </Flex>
                  </Th>
                ))}
              </Tr>
            ))}
          </Thead>
          <Tbody  {...getTableBodyProps()}>
            {data?.length === 0 && (
              <Tr>
                <Td colSpan={columns.length}>
                  <Text textAlign={'center'} width="100%" color={textColor} fontSize="sm" fontWeight="700">
                    -- No Data Found --
                  </Text>
                </Td>
              </Tr>
            )}
            {page?.map((row, index) => {
              prepareRow(row);
              return (
                <Tr {...row?.getRowProps()} key={index}>
                  {row?.cells?.map((cell, index) => {
                    let data = "";
                    if (cell?.column.Header === "#") {
                      data = (
                        <Flex align="center">
                          {type === "multi" ? <Checkbox colorScheme="brandScheme" value={selectedValues} isChecked={selectedValues.includes(cell?.value)} onChange={(event) => handleCheckboxChange(event, cell?.value)} me="10px" /> :
                            <Checkbox colorScheme="brandScheme" value={selectedValues} isChecked={selectedValues === cell?.value} onChange={(event) => handleCheckboxChange(event, cell?.value)} me="10px" />}
                          <Text color={textColor} fontSize="sm" fontWeight="700">
                            {cell?.row?.index + 1}
                          </Text>
                        </Flex>
                      );
                    } else if (cell?.column.Header === "title") {
                      data = (
                        <Text
                          me="10px"
                          color={textColor}
                          fontSize="sm"
                          fontWeight="700"
                        >
                          {cell?.value}
                        </Text>
                      );
                    } else if (cell?.column.Header === "first Name") {
                      data = (
                        // <Link to={`/contactView/${cell?.row?.original._id}`}>
                        <Text
                          me="10px"
                          // sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}
                          color={textColor}
                          fontSize="sm"
                          fontWeight="700"
                        >
                          {cell?.value}
                        </Text>
                        // </Link>
                      );
                    } else if (cell?.column.Header === "last Name") {
                      data = (
                        <Text
                          me="10px"
                          color={textColor}
                          fontSize="sm"
                          fontWeight="700"
                        >
                          {cell?.value}
                        </Text>
                      );
                    } else if (cell?.column.Header === "phone Number") {
                      data = (
                        <Text fontSize="sm" fontWeight="700"
                          color={textColor}>
                          {cell?.value}
                        </Text>
                      );
                    } else if (cell?.column.Header === "Email Address") {
                      data = (
                        <Text fontSize="sm" fontWeight="700"
                          color={textColor}>
                          {cell?.value}
                        </Text>
                      );
                    } else if (cell?.column.Header === "physical Address") {
                      data = (
                        <Text color={textColor} fontSize="sm" fontWeight="700">
                          {cell?.value}
                        </Text>
                      );
                    } else if (cell?.column.Header === "mailing Address") {
                      data = (
                        <Text color={textColor} fontSize="sm" fontWeight="700">
                          {cell?.value}
                        </Text>
                      );
                    } else if (cell?.column.Header === "Contact Method") {
                      data = (
                        <Text color={textColor} fontSize="sm" fontWeight="700">
                          {cell?.value}
                        </Text>
                      );
                    }
                    return (
                      <Td
                        {...cell?.getCellProps()}
                        key={index}
                        fontSize={{ sm: "14px" }}
                        minW={{ sm: "150px", md: "200px", lg: "auto" }}
                        borderColor='transparent'>
                        {data}
                      </Td>
                    );
                  })}
                </Tr>
              );
            })}
          </Tbody>
        </Table>
      </Box>
      {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage} pageSize={pageSize} pageIndex={pageIndex} />}

    </Card>
  );
}

================
File: Client/src/components/commonTableModel/ContactModel.js
================
import { Button, Flex, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react'
import React, { useEffect, useState } from 'react'
import ContactTable from './Contact.js'
import Spinner from 'components/spinner/Spinner'
import { GiClick } from "react-icons/gi";
import CommonCheckTable from 'components/reactTable/checktable.js';
import { fetchContactCustomFiled } from '../../redux/slices/contactCustomFiledSlice.js';
import { fetchContactData } from '../../redux/slices/contactSlice.js';
import { useDispatch } from 'react-redux';

const ContactModel = (props) => {
    const { onClose, isOpen, fieldName, setFieldValue, data } = props
    const [selectedValues, setSelectedValues] = useState();
    const [contactData, setContactData] = useState([]);
    const [isLoding, setIsLoding] = useState(false)
    const [columns, setColumns] = useState([]);
    const dispatch = useDispatch();

    const handleSubmit = async () => {
        try {
            setIsLoding(true)
            setFieldValue(fieldName, selectedValues)
            onClose()
        }
        catch (e) {
            console.log(e)
        }
        finally {
            setIsLoding(false)
        }
    }
    const fetchCustomDataFields = async () => {
        setIsLoding(true);
        const result = await dispatch(fetchContactCustomFiled());
        setContactData(result?.payload?.data);

        const tempTableColumns = [
            { Header: "#", accessor: "_id", isSortable: false, width: 10 },
            ...(result?.payload?.data?.[0]?.fields || [])
                .filter(field => field?.isTableField === true)
                .map(field => ({ Header: field?.label, accessor: field?.name }))
        ];

        setColumns(tempTableColumns);
        setIsLoding(false);
    };
    useEffect(async () => {
        await dispatch(fetchContactData())
        fetchCustomDataFields();
    }, []);
    return (
        <Modal onClose={onClose} size='full' isOpen={isOpen} >
            <ModalOverlay />
            <ModalContent>
                <ModalHeader>Select Contact</ModalHeader>
                <ModalCloseButton />
                <ModalBody>
                    {isLoding ?
                        <Flex justifyContent={'center'} alignItems={'center'} width="100%" >
                            <Spinner />
                        </Flex>
                        :
                        <CommonCheckTable
                            title={'Contacts'}
                            isLoding={isLoding}
                            columnData={columns ?? []}
                            // dataColumn={columns ?? []}
                            allData={data ?? []}
                            tableData={data}
                            tableCustomFields={contactData?.[0]?.fields?.filter((field) => field?.isTableField === true) || []}
                            AdvanceSearch={() => ""}
                            ManageGrid={false}
                            deleteMany={false}
                            selectedValues={selectedValues}
                            setSelectedValues={setSelectedValues}
                            selectType="single"
                            customSearch={false}
                        />
                    }
                </ModalBody>
                <ModalFooter>
                    <Button variant='brand' size='sm' me={2} onClick={handleSubmit} disabled={isLoding ? true : false} leftIcon={<GiClick />}> {isLoding ? <Spinner /> : 'Select'}</Button>
                    <Button variant='outline' size='sm' colorScheme='red' onClick={() => onClose()}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>

    )
}

export default ContactModel

================
File: Client/src/components/commonTableModel/Lead.js
================
import {
  Box, Checkbox,
  Flex, Table,
  Tbody,
  Td,
  Text,
  Th,
  Thead,
  Tr,
  useColorModeValue
} from "@chakra-ui/react";
import { useMemo } from "react";
import {
  useGlobalFilter,
  usePagination,
  useSortBy,
  useTable,
} from "react-table";

// Custom components
import Card from "components/card/Card";
import CountUpComponent from "components/countUpComponent/countUpComponent";
import { useState } from "react";
import { Link } from "react-router-dom";
import Pagination from "components/pagination/Pagination";
import { FaSort, FaSortDown, FaSortUp } from "react-icons/fa";

export default function LeadTable(props) {
  const { columnsData, tableData, title, type, selectedValues, setSelectedValues } = props;

  const columns = useMemo(() => columnsData, [columnsData]);
  const data = useMemo(() => tableData, [tableData]);
  const user = JSON.parse(localStorage.getItem("user"))
  const [gopageValue, setGopageValue] = useState()

  const tableInstance = useTable(
    {
      columns, data,
      initialState: { pageIndex: 0 }
    },
    useGlobalFilter,
    useSortBy,
    usePagination
  );

  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    prepareRow,
    page,
    canPreviousPage,
    canNextPage,
    pageOptions,
    pageCount,
    gotoPage,
    nextPage,
    previousPage,
    setPageSize,
    state: { pageIndex, pageSize }
  } = tableInstance;

  if (pageOptions.length < gopageValue) {
    setGopageValue(pageOptions.length)
  }

  const textColor = useColorModeValue("gray.500", "white");
  const borderColor = useColorModeValue("gray.200", "whiteAlpha.100");

  const handleCheckboxChange = (event, value) => {
    if (type === "multi") {
      if (event.target.checked) {
        setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);
      } else {
        setSelectedValues((prevSelectedValues) =>
          prevSelectedValues.filter((selectedValue) => selectedValue !== value)
        );
      }
    } else {
      if (event.target.checked) {
        setSelectedValues(value);
      } else {
        setSelectedValues(null);
      }
    }

  };


  return (
    <Card
      direction='column'
      w='100%'
      px='0px'
      style={{ border: '1px solid gray.200' }}
      overflowX={{ sm: "scroll", lg: "hidden" }}>
      <Flex px='25px' justify='space-between' mb='20px' align='center'>
        <Text
          color={textColor}
          fontSize='22px'
          fontWeight='700'
          lineHeight='100%'>
          {title}  (<CountUpComponent key={data?.length} targetNumber={data?.length} />)
        </Text>
      </Flex>
      <Box overflowY={'auto'} className="table-container-property" >
        <Table  {...getTableProps()} variant='simple' color='gray.500' mb='24px'>
          <Thead zIndex={1}>
            {headerGroups?.map((headerGroup, index) => (
              <Tr {...headerGroup.getHeaderGroupProps()} key={index}>
                {headerGroup.headers.map((column, index) => (
                  <Th
                    {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}
                    pe="10px"
                    key={index}
                    borderColor={borderColor}
                  >
                    <Flex
                      align="center"
                      justifyContent={column.center ? "center" : "start"}
                      fontSize={{ sm: "14px", lg: "16px" }}
                      color=" secondaryGray.900"
                    >
                      <span style={{ textTransform: "capitalize", marginRight: "8px" }}>
                        {column.render("Header")}
                      </span>

                      {column.isSortable !== false && (
                        <span>
                          {column.isSorted ? (column.isSortedDesc ? <FaSortDown /> : <FaSortUp />) : <FaSort />}
                        </span>
                      )}
                    </Flex>
                  </Th>
                ))}
              </Tr>
            ))}
          </Thead>
          <Tbody  {...getTableBodyProps()}>
            {data?.length === 0 && (
              <Tr>
                <Td colSpan={columns.length}>
                  <Text textAlign={'center'} width="100%" color={textColor} fontSize="sm" fontWeight="700">
                    -- No Data Found --
                  </Text>
                </Td>
              </Tr>
            )}
            {page?.map((row, index) => {
              prepareRow(row);
              return (
                <Tr {...row?.getRowProps()} key={index}>
                  {row?.cells?.map((cell, index) => {
                    let data = "";
                    if (cell?.column.Header === "#") {
                      data = (
                        <Flex align="center">
                          {type === "multi" ? <Checkbox colorScheme="brandScheme" value={selectedValues} isChecked={selectedValues.includes(cell?.value)} onChange={(event) => handleCheckboxChange(event, cell?.value)} me="10px" /> :
                            <Checkbox colorScheme="brandScheme" value={selectedValues} isChecked={selectedValues === cell?.value} onChange={(event) => handleCheckboxChange(event, cell?.value)} me="10px" />}
                          <Text color={textColor} fontSize="sm" fontWeight="700">
                            {cell?.row?.index + 1}
                          </Text>
                        </Flex>
                      );
                    } else if (cell?.column.Header === "Lead Name") {
                      data = (
                        // <Link to={user?.role !== 'superAdmin' ? `/leadView/${cell?.row?.values._id}` : `/admin/leadView/${cell?.row?.values._id}`}>
                        <Text
                          me="10px"
                          // sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}
                          color={textColor}
                          fontSize="sm"
                          fontWeight="700"
                        >
                          {cell?.value}
                        </Text>
                        // </Link>
                      );
                    } else if (cell?.column.Header === "Lead Email") {
                      data = (
                        <Text
                          me="10px"
                          color={textColor}
                          fontSize="sm"
                          fontWeight="700"
                        >
                          {cell?.value}
                        </Text>
                      );
                    } else if (cell?.column.Header === "Lead PhoneNumber") {
                      data = (
                        <Text
                          me="10px"
                          color={textColor}
                          fontSize="sm"
                          fontWeight="700"
                        >
                          {cell?.value}
                        </Text>
                      );
                    } else if (cell?.column.Header === "Lead Address") {
                      data = (
                        <Text color={textColor} fontSize="sm" fontWeight="700">
                          {cell?.value}
                        </Text>
                      );
                    } else if (cell?.column.Header === "Lead Status") {
                      data = (
                        <Text color={textColor} fontSize="sm" fontWeight="700">
                          {cell?.value}
                        </Text>
                      );
                    } else if (cell?.column.Header === "Lead Owner") {
                      data = (
                        <Text color={textColor} fontSize="sm" fontWeight="700">
                          {cell?.value}
                        </Text>
                      );
                    } else if (cell?.column.Header === "Lead Score") {
                      data = (
                        <Text color={textColor} fontSize="sm" fontWeight="700">
                          {cell?.value}
                        </Text>
                      );
                    }
                    return (
                      <Td
                        {...cell?.getCellProps()}
                        key={index}
                        fontSize={{ sm: "14px" }}
                        minW={{ sm: "150px", md: "200px", lg: "auto" }}
                        borderColor='transparent'>
                        {data}
                      </Td>
                    );
                  })}
                </Tr>
              );
            })}
          </Tbody>
        </Table>
      </Box>
      {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage} pageSize={pageSize} pageIndex={pageIndex} />}

    </Card>
  );
}

================
File: Client/src/components/commonTableModel/LeadModel.js
================
import { Button, Flex, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react'
import React, { useEffect, useState } from 'react'
import Spinner from 'components/spinner/Spinner'
import { GiClick } from "react-icons/gi";
import CommonCheckTable from 'components/reactTable/checktable';
import { fetchLeadCustomFiled } from '../../redux/slices/leadCustomFiledSlice';
import { useDispatch } from 'react-redux';
import { fetchLeadData } from '../../redux/slices/leadSlice';

const ContactModel = (props) => {
    const { onClose, isOpen, fieldName, setFieldValue, data } = props
    const title = "Leads";
    const dispatch = useDispatch();

    const [isLoding, setIsLoding] = useState(false);
    const [columns, setColumns] = useState([]);
    const [leadData, setLeadData] = useState([]);
    const [selectedValues, setSelectedValues] = useState([]);

    const handleSubmit = async () => {
        try {
            setIsLoding(true)
            setFieldValue(fieldName, selectedValues)
            onClose()
        }
        catch (e) {
            console.log(e)
        }
        finally {
            setIsLoding(false)
        }
    }

    const fetchCustomDataFields = async () => {
        setIsLoding(true);

        const result = await dispatch(fetchLeadCustomFiled());
        setLeadData(result?.payload?.data);

        const tempTableColumns = [
            { Header: "#", accessor: "_id", isSortable: false, width: 10 },
            {
                Header: "Status", accessor: "leadStatus", isSortable: true, center: true,
                cell: ({ row }) => (
                    row.original.leadStatus
                )
            },
            ...(result?.payload?.data?.[0]?.fields?.filter((field) => field?.isTableField === true)?.map((field) => (field?.name !== "leadStatus" && { Header: field?.label, accessor: field?.name })) || []),
        ];

        setColumns(tempTableColumns);
        setIsLoding(false);
    }

    useEffect(() => {
        dispatch(fetchLeadData())
        fetchCustomDataFields();
    }, [])

    return (
        <Modal onClose={onClose} size='full' isOpen={isOpen} >
            <ModalOverlay />
            <ModalContent>
                <ModalHeader>Select Lead</ModalHeader>
                <ModalCloseButton />
                <ModalBody>
                    {isLoding ?
                        <Flex justifyContent={'center'} alignItems={'center'} width="100%" >
                            <Spinner />
                        </Flex> :
                        <CommonCheckTable
                            title={title}
                            isLoding={isLoding}
                            columnData={columns ?? []}
                            // dataColumn={columns ?? []}
                            allData={data ?? []}
                            tableData={data}
                            tableCustomFields={leadData?.[0]?.fields?.filter((field) => field?.isTableField === true) || []}
                            AdvanceSearch={() => ""}
                            ManageGrid={false}
                            deleteMany={false}
                            selectedValues={selectedValues}
                            setSelectedValues={setSelectedValues}
                            selectType="single"
                            customSearch={false}
                        />
                    }
                </ModalBody>
                <ModalFooter>
                    <Button variant='brand' size='sm' me={2} disabled={isLoding ? true : false} leftIcon={<GiClick />} onClick={handleSubmit}> {isLoding ? <Spinner /> : 'Select'}</Button>
                    <Button variant='outline' size='sm' colorScheme='red' onClick={() => onClose()}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>

    )
}

export default ContactModel

================
File: Client/src/components/commonTableModel/MultiContactModel.js
================
import { Button, Flex, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react'
import React, { useState } from 'react'
import ContactTable from './Contact.js'
import Spinner from 'components/spinner/Spinner'
import { GiClick } from "react-icons/gi";

const MultiContactModel = (props) => {
    const { onClose, isOpen, fieldName, setFieldValue,data } = props
    const [selectedValues, setSelectedValues] = useState([]);
    const [isLoding, setIsLoding] = useState(false)

    const columns = [
        { Header: "#", accessor: "_id", isSortable: false, width: 10 },
        { Header: 'title', accessor: 'title' },
        { Header: "first Name", accessor: "firstName" },
        { Header: "last Name", accessor: "lastName" },
        { Header: "phone Number", accessor: "phoneNumber" },
        { Header: "Email Address", accessor: "email" },
        { Header: "physical Address", accessor: "physicalAddress" },
        { Header: "mailing Address", accessor: "mailingAddress" },
        { Header: "Contact Method", accessor: "preferredContactMethod" },
    ];

    const user = JSON.parse(localStorage.getItem("user"))
   
    const uniqueValues = [...new Set(selectedValues)];

    const handleSubmit = async () => {
        try {
            setIsLoding(true)
            setFieldValue(fieldName, uniqueValues)
            onClose()
        }
        catch (e) {
            console.log(e)
        }
        finally {
            setIsLoding(false)
        }
    }

  
    return (
        <Modal onClose={onClose} size='full' isOpen={isOpen} >
            <ModalOverlay />
            <ModalContent>
                <ModalHeader>Select Contact</ModalHeader>
                <ModalCloseButton />
                <ModalBody>
                    {isLoding ?
                        <Flex justifyContent={'center'} alignItems={'center'} width="100%" >
                            <Spinner />
                        </Flex> : <ContactTable tableData={data} type='multi' selectedValues={selectedValues} setSelectedValues={setSelectedValues} columnsData={columns} title="Contact" />}
                </ModalBody>
                <ModalFooter>
                    <Button variant='brand' onClick={handleSubmit} disabled={isLoding ? true : false} leftIcon={<GiClick />}> {isLoding ? <Spinner /> : 'Select'}</Button>
                    <Button onClick={() => onClose()}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>

    )
}

export default MultiContactModel

================
File: Client/src/components/commonTableModel/MultiLeadModel.js
================
import { Button, Flex, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react'
import React, { useState } from 'react'
import LeadTable from './Lead'
import Spinner from 'components/spinner/Spinner'
import { GiClick } from "react-icons/gi";

const MultiLeadModel = (props) => {
    const { onClose, isOpen, fieldName, setFieldValue,data } = props
    const [selectedValues, setSelectedValues] = useState([]);
    const [isLoding, setIsLoding] = useState(false)

    const columns = [
        { Header: "#", accessor: "_id", isSortable: false, width: 10 },
        { Header: 'Lead Name', accessor: 'leadName', width: 20 },
        { Header: "Lead Email", accessor: "leadEmail", },
        { Header: "Lead PhoneNumber", accessor: "leadPhoneNumber", },
        { Header: "Lead Address", accessor: "leadAddress", },
        { Header: "Lead Status", accessor: "leadStatus", },
        { Header: "Lead Owner", accessor: "leadOwner", },
        { Header: "Lead Score", accessor: "leadScore", },
    ];

    const user = JSON.parse(localStorage.getItem("user"))
   
    const uniqueValues = [...new Set(selectedValues)];

    const handleSubmit = async () => {
        try {
            setIsLoding(true)
            setFieldValue(fieldName, uniqueValues)
            onClose()
        }
        catch (e) {
            console.log(e)
        }
        finally {
            setIsLoding(false)
        }
    }

    return (
        <Modal onClose={onClose} size='full' isOpen={isOpen} >
            <ModalOverlay />
            <ModalContent>
                <ModalHeader>Select Lead</ModalHeader>
                <ModalCloseButton />
                <ModalBody>
                    {isLoding ?
                        <Flex justifyContent={'center'} alignItems={'center'} width="100%" >
                            <Spinner />
                        </Flex> : <LeadTable tableData={data} type='multi' selectedValues={selectedValues} setSelectedValues={setSelectedValues} columnsData={columns} title="Lead" />}
                </ModalBody>
                <ModalFooter>
                    <Button variant='brand' onClick={handleSubmit} disabled={isLoding ? true : false} leftIcon={<GiClick />}> {isLoding ? <Spinner /> : 'Select'}</Button>
                    <Button onClick={() => onClose()}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>

    )
}

export default MultiLeadModel

================
File: Client/src/components/commonTableModel/OpprtunityModel.js
================
import { Button, Flex, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react'
import React, { useEffect, useState } from 'react'
import Spinner from 'components/spinner/Spinner'
import { GiClick } from "react-icons/gi";
import CommonCheckTable from 'components/reactTable/checktable';
import { useDispatch } from 'react-redux';
import { getApi } from 'services/api';
import { fetchAccountData } from '../../redux/slices/accountSlice';
import { toast } from 'react-toastify';
import moment from 'moment';

const OpprtunityModel = (props) => {
    const { onClose, isOpen, fieldName, setFieldValue, data } = props
    const title = "Opprtunities";
    const dispatch = useDispatch();
    // const [data, setData] = useState([]);

    const [isLoding, setIsLoding] = useState(false);
    const [selectedValues, setSelectedValues] = useState([]);

    const handleSubmit = async () => {
        try {
            setIsLoding(true)
            setFieldValue(fieldName, selectedValues)
            onClose()
        }
        catch (e) {
            console.log(e)
        }
        finally {
            setIsLoding(false)
        }
    }
    const tableColumns = [
        { Header: "#", accessor: "_id", isSortable: false, width: 10 },
        {
            Header: 'Opportunity Name', accessor: 'opportunityName',
        },
        {
            Header: 'Account Name', accessor: 'accountName'
        },
        {
            Header: 'Opportunity Amount', accessor: 'opportunityAmount',
        },
        {
            Header: 'Expected Close Date', accessor: 'expectedCloseDate', cell: (cell) => (
                <div>{moment(cell?.value).format("YYYY-MM-DD")}</div>
            )
        },
        {
            Header: 'Sales Stage', accessor: 'salesStage',
        },

    ];

    const [columns, setColumns] = useState([...tableColumns]);
    const [selectedColumns, setSelectedColumns] = useState([...tableColumns]);
    const dataColumn = tableColumns?.filter(item => selectedColumns?.find(colum => colum?.Header === item.Header))

    // const fetchData = async () => {
    //     setIsLoding(true)
    //     const result = await dispatch(fetchAccountData())

    //     if (result.payload.status === 200) {
    //         setData(result?.payload?.data);
    //     } else {
    //         toast.error("Failed to fetch data", "error");
    //     }
    //     setIsLoding(false)
    // }

    // useEffect(() => {
    //     fetchData()
    // }, [])

    return (
        <Modal onClose={onClose} size='full' isOpen={isOpen} >
            <ModalOverlay />
            <ModalContent>
                <ModalHeader>Select Opportunity</ModalHeader>
                <ModalCloseButton />
                <ModalBody>
                    {isLoding ?
                        <Flex justifyContent={'center'} alignItems={'center'} width="100%" >
                            <Spinner />
                        </Flex> :
                        <CommonCheckTable
                            title={title}
                            isLoding={isLoding}
                            columnData={columns ?? []}
                            // dataColumn={columns ?? []}
                            allData={data ?? []}
                            tableData={data}
                            AdvanceSearch={() => ""}
                            ManageGrid={false}
                            deleteMany={false}
                            selectedValues={selectedValues}
                            setSelectedValues={setSelectedValues}
                            selectType="single"
                            customSearch={false}
                        />
                    }
                </ModalBody>
                <ModalFooter>
                    <Button variant='brand' size='sm' me={2} disabled={isLoding ? true : false} leftIcon={<GiClick />} onClick={handleSubmit}> {isLoding ? <Spinner /> : 'Select'}</Button>
                    <Button variant='outline' size='sm' colorScheme='red' onClick={() => onClose()}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>

    )
}

export default OpprtunityModel

================
File: Client/src/components/commonTableModel/UserModel.js
================
import { Button, Flex, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react'
import React, { useEffect, useState } from 'react'
import Spinner from 'components/spinner/Spinner'
import { GiClick } from "react-icons/gi";
import CommonCheckTable from 'components/reactTable/checktable';
import { fetchLeadCustomFiled } from '../../redux/slices/leadCustomFiledSlice';
import { useDispatch } from 'react-redux';
import { getApi } from 'services/api';

const UserModel = (props) => {
    const { onClose, isOpen, fieldName, setFieldValue, data, isLoding, setIsLoding } = props
    const title = "Users";
    const dispatch = useDispatch();
    // const [data, setData] = useState([]);

    // const [isLoding, setIsLoding] = useState(false);
    const [leadData, setLeadData] = useState([]);
    const [selectedValues, setSelectedValues] = useState([]);

    const handleSubmit = async () => {
        try {
            setIsLoding(true)
            setFieldValue(fieldName, selectedValues)
            onClose()
        }
        catch (e) {
            console.log(e)
        }
        finally {
            setIsLoding(false)
        }
    }
    const tableColumns = [
        { Header: "#", accessor: "_id", isSortable: false, width: 10 },
        {
            Header: 'email Id', accessor: 'username',
        },
        { Header: "first Name", accessor: "firstName", },
        { Header: "last Name", accessor: "lastName", },
        { Header: "role", accessor: "role", },
    ];

    // const [columns, setColumns] = useState([...tableColumns]);
    // const [selectedColumns, setSelectedColumns] = useState([...tableColumns]);
    // const dataColumn = tableColumns?.filter(item => selectedColumns?.find(colum => colum?.Header === item.Header))

    // const fetchData = async () => {
    //     setIsLoding(true)
    //     let result = await getApi('api/user/');
    //     setData(result?.data?.user);
    //     setIsLoding(false)
    // }
    // useEffect(() => {
    //     fetchData()
    // }, [])

    return (
        <Modal onClose={onClose} size='full' isOpen={isOpen} >
            <ModalOverlay />
            <ModalContent>
                <ModalHeader>Select User</ModalHeader>
                <ModalCloseButton />
                <ModalBody>
                    {isLoding ?
                        <Flex justifyContent={'center'} alignItems={'center'} width="100%" >
                            <Spinner />
                        </Flex> :
                        <CommonCheckTable
                            title={title}
                            isLoding={isLoding}
                            columnData={tableColumns ?? []}
                            // dataColumn={columns ?? []}
                            allData={data ?? []}
                            tableData={data}
                            AdvanceSearch={() => ""}
                            ManageGrid={false}
                            deleteMany={false}
                            selectedValues={selectedValues}
                            setSelectedValues={setSelectedValues}
                            selectType="single"
                            customSearch={false}
                        />
                    }
                </ModalBody>
                <ModalFooter>
                    <Button variant='brand' size='sm' me={2} disabled={isLoding ? true : false} leftIcon={<GiClick />} onClick={handleSubmit}> {isLoding ? <Spinner /> : 'Select'}</Button>
                    <Button variant='outline' size='sm' colorScheme='red' onClick={() => onClose()}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>

    )
}

export default UserModel

================
File: Client/src/components/countUpComponent/countUpComponent.js
================
import React, { useState, useEffect } from 'react';

function CountUpComponent({ targetNumber }) {
    const [count, setCount] = useState(0);

    useEffect(() => {
        const interval = setInterval(() => {
            if (count < targetNumber) {
                setCount(prevCount => prevCount + 1);
            }
        }, targetNumber > 500 ? 0 : 20); // Change the interval duration as needed (in milliseconds)

        return () => {
            clearInterval(interval);
        };
    }, [count, targetNumber]);

    return <span>{typeof targetNumber === "number" ? count : targetNumber}</span>
}

export default CountUpComponent;

================
File: Client/src/components/fields/InputField.js
================
// Chakra imports
import {
  Flex,
  FormLabel,
  Input,
  Text,
  useColorModeValue,
} from "@chakra-ui/react";
// Custom components
import React from "react";

export default function Default(props) {
  const { id, label, extra, placeholder, type, mb, ...rest } = props;
  // Chakra Color Mode
  const textColorPrimary = useColorModeValue("secondaryGray.900", "white");

  return (
    <Flex direction='column' mb={mb ? mb : "30px"}>
      <FormLabel
        display='flex'
        ms='10px'
        htmlFor={id}
        fontSize='sm'
        color={textColorPrimary}
        fontWeight='bold'
        _hover={{ cursor: "pointer" }}>
        {label}
        <Text fontSize='sm' fontWeight='400' ms='2px'>
          {extra}
        </Text>
      </FormLabel>
      <Input
        {...rest}
        type={type}
        id={id}
        fontWeight='500'
        variant='main'
        placeholder={placeholder}
        _placeholder={{ fontWeight: "400", color: "secondaryGray.600" }}
        h='44px'
        maxh='44px'
      />
    </Flex>
  );
}

================
File: Client/src/components/fields/SwitchField.js
================
// Chakra imports
import {
  Box,
  Flex,
  FormLabel,
  Switch,
  Text,
  useColorModeValue
} from "@chakra-ui/react";
// Custom components
import React from "react";

export default function Default(props) {
  const {
    id,
    label,
    isChecked,
    onChange,
    desc,
    textWidth,
    reversed,
    fontSize,
    ...rest
  } = props;
  let [checked, setChecked] = React.useState(isChecked);
  const textColorPrimary = useColorModeValue("secondaryGray.900", "white");
  return (
    <Box w="100%" fontWeight="500" {...rest}>
      {reversed ? (
        <Flex align="center" borderRadius="16px">
          {isChecked ? (
            <Switch
              isChecked={checked}
              id={id}
              variant="main"
              colorScheme="brandScheme"
              size="md"
              onChange={() => setChecked(!checked)}
            />
          ) : (
            <Switch
              id={id}
              variant="main"
              colorScheme="brandScheme"
              size="md"
            />
          )}
          <FormLabel
            ms="15px"
            htmlFor={id}
            _hover={{ cursor: "pointer" }}
            direction="column"
            mb="0px"
            maxW={textWidth ? textWidth : "75%"}
          >
            <Text color={textColorPrimary} fontSize="md" fontWeight="500">
              {label}
            </Text>
            <Text
              color="secondaryGray.600"
              fontSize={fontSize ? fontSize : "md"}
            >
              {desc}
            </Text>
          </FormLabel>
        </Flex>
      ) : (
        <Flex justify="space-between" align="center" borderRadius="16px">
          <FormLabel
            htmlFor={id}
            _hover={{ cursor: "pointer" }}
            direction="column"
            maxW={textWidth ? textWidth : "75%"}
          >
            <Text color={textColorPrimary} fontSize="md" fontWeight="500">
              {label}
            </Text>
            <Text
              color="secondaryGray.600"
              fontSize={fontSize ? fontSize : "md"}
            >
              {desc}
            </Text>
          </FormLabel>
          {isChecked && onChange ? (
            <Switch
              isChecked={isChecked}
              id={id}
              variant="main"
              colorScheme="brandScheme"
              size="md"
              onChange={onChange}
            />
          ) : (
            <Switch
              id={id}
              variant="main"
              colorScheme="brandScheme"
              size="md"
            />
          )}
        </Flex>
      )}
    </Box>
  );
}

================
File: Client/src/components/fixedPlugin/FixedPlugin.js
================
// Chakra Imports
import { Button, Icon, useColorMode } from "@chakra-ui/react";
// Custom Icons
import { IoMdMoon, IoMdSunny } from "react-icons/io";
import React from "react";

export default function FixedPlugin(props) {
  const { ...rest } = props;
  const { colorMode, toggleColorMode } = useColorMode();
  let bgButton = "linear-gradient(135deg, #868CFF 0%, #4318FF 100%)";

  return (
    <Button
      {...rest}
      h='60px'
      w='60px'
      zIndex='99'
      bg={bgButton}
      position='fixed'
      variant='no-effects'
      left={document.documentElement.dir === "rtl" ? "35px" : ""}
      right={document.documentElement.dir === "rtl" ? "" : "35px"}
      bottom='30px'
      border='1px solid'
      borderColor='#6A53FF'
      borderRadius='50px'
      onClick={toggleColorMode}
      display='flex'
      p='0px'
      align='center'
      justify='center'>
      <Icon
        h='24px'
        w='24px'
        color='white'
        as={colorMode === "light" ? IoMdMoon : IoMdSunny}
      />
    </Button>
  );
}

================
File: Client/src/components/FolderTreeView/folderTreeView.js
================
import { DeleteIcon, DownloadIcon, LinkIcon, ViewIcon } from '@chakra-ui/icons';
import { Collapse, Flex, Icon, IconButton, List, ListIcon, ListItem, Menu, MenuButton, MenuItem, MenuList, Text } from '@chakra-ui/react';
import React, { useState } from 'react'
import { FcOpenedFolder } from 'react-icons/fc';
import { FiChevronDown, FiChevronRight, FiFile } from 'react-icons/fi';
import { IoIosContact } from 'react-icons/io';
import { MdLeaderboard } from 'react-icons/md';
import { useNavigate } from 'react-router-dom';
import Delete from 'views/admin/document/component/Delete';
import LinkModel from 'views/admin/document/component/LinkModel';
import { CiMenuKebab } from "react-icons/ci";

const FolderTreeView = ({ data, deleteFile, item, download, name, isFile, children, setLinkDocument, from }) => {
    const [isOpen, setIsOpen] = useState(false);
    // const user = localStorage.getItem('user');
    const [deleteModel, setDelete] = useState(false);
    const [linkModel, setLinkModel] = useState(false);
    const [id, setId] = useState(false);
    const navigate = useNavigate()

    const handleToggle = () => {
        setIsOpen(!isOpen);
    };
    const isFolder = !isFile && !!children;

    const handleClick = (data) => {
        download(data)
    }

    const deletedata = (data) => {
        setDelete(true)
        setId(data)
    }

    const handleLinkClick = (data) => {
        setLinkModel(true)
        setId(data)
    }
    const user = JSON.parse(localStorage.getItem("user"))

    function isImageUrl(url) {
        const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp'];
        const urlExtension = url.substring(url.lastIndexOf('.')).toLowerCase();
        return imageExtensions.includes(urlExtension);
    }
    return (
        <List width={'100%'} >
            <ListItem alignItems={'center'} display={'flex'} >
                <Text alignItems={'center'} justifyContent={'space-between'} display={'flex'} width={'100%'} onClick={isFolder ? handleToggle : undefined} _hover={{ cursor: 'pointer', textDecoration: 'none' }}>
                    <Flex width={'70%'} alignItems={'center'}>
                        <ListIcon as={isFile ? FiFile : FcOpenedFolder} />
                        {isFolder && (isOpen ? <FiChevronDown /> : <FiChevronRight />)}
                        {name}
                    </Flex>
                    {item?.createByName ? <Text>({item?.createByName}) </Text> : null}
                    {!isFolder &&
                        <Flex justifyContent={'right'} width={'100%'}  >
                            <Menu isLazy  >
                                <MenuButton><CiMenuKebab /></MenuButton>
                                <MenuList position={'absolute'} right={-5} pl={'0.5em'} minW={'fit-content'} >
                                    {!from && data?.linkContact ?
                                        <MenuItem pr={2} w={'180px'} onClick={() => navigate(`/contactView/${data?.linkContact}`)} icon={<IoIosContact fontSize={15} />}>Linked Contact</MenuItem>
                                        : !from && data?.linkLead && <MenuItem pr={2} w={'180px'} onClick={() => navigate(`/leadView/${data?.linkLead}`)} icon={<MdLeaderboard fontSize={15} />}>Linked Lead</MenuItem>
                                    }
                                    {!from && <MenuItem pr={10} alignItems={'start'} color={'blue'} onClick={() => handleLinkClick(data?._id)} icon={<LinkIcon fontSize={15} />}>Link</MenuItem>}
                                    {isImageUrl(data?.img) && <MenuItem alignItems={'start'} pr={10} color={'green'} onClick={() => window.open(data?.img)} icon={<ViewIcon fontSize={15} />}>View</MenuItem>}
                                    <MenuItem pr={10} alignItems={'start'} onClick={() => handleClick(data?._id)} icon={<DownloadIcon fontSize={15} />}>Download</MenuItem>
                                    {!from && <MenuItem alignItems={'start'} pr={10} color={'red'} onClick={() => deletedata(data?._id)} icon={<DeleteIcon fontSize={15} />}>Delete</MenuItem>}
                                </MenuList>
                            </Menu>
                        </Flex>
                    }
                    <Delete isOpen={deleteModel} onClose={setDelete} method='one' deleteFile={deleteFile} id={id} />
                    <LinkModel isOpen={linkModel} setLinkDocument={setLinkDocument} onClose={setLinkModel} id={id} />
                </Text>
            </ListItem>
            {
                isFolder && (
                    <Collapse in={isOpen} animateOpacity>
                        <List styleType="disc" ml={4}>
                            {children}
                        </List>
                    </Collapse>
                )
            }
        </List>
    );
};


export default FolderTreeView

================
File: Client/src/components/footer/FooterAdmin.js
================
/*eslint-disable*/
import React from "react";
import {
  Flex,
  Link,
  List,
  ListItem,
  Text,
  Button,
  useColorMode,
  useColorModeValue,
} from "@chakra-ui/react";

export default function Footer() {
  const textColor = useColorModeValue("blue.700", "white");
  const { toggleColorMode } = useColorMode();
  return (
    <Flex
      zIndex='3'
      flexDirection={{
        base: "column",
        xl: "row",
      }}
      alignItems={{
        base: "center",
        xl: "start",
      }}
      justifyContent='space-between'
      px={{ base: "30px", md: "50px" }}
      pb='30px'>
      <Text
        color={textColor}
        textAlign={{
          base: "center",
          xl: "start",
        }}
        mb={{ base: "20px", xl: "0px" }}>
        {" "}
        &copy; {1900 + new Date().getYear()}
        <Text as='span' fontWeight='500' ms='4px'>
          <Link
            fontWeight='500'
            color={textColor}
            target="_blank"
            href='https://prolinkinfotech.com/'> Prolink Infotech.</Link> Need help, facing issues, or looking for a new feature? Contact us for paid support and services at <Link href='mailto:alternatecrm@gmail.com' fontWeight='500'
              color={textColor}
              target="_blank">alternatecrm@gmail.com</Link>
        </Text>
      </Text>
      {/* <List display='flex'>
        <ListItem
          me={{
            base: "20px",
            md: "44px",
          }}>
          <Link
            fontWeight='500'
            color={textColor}
            href='https://prolinkinfotech.com/'>
            Support
          </Link>
        </ListItem>
        <ListItem
          me={{
            base: "20px",
            md: "44px",
          }}>
          <Link
            fontWeight='500'
            color={textColor}
            href='https://www.simmmple.com/licenses?ref=horizon-chakra-free'>
            License
          </Link>
        </ListItem>
        <ListItem
          me={{
            base: "20px",
            md: "44px",
          }}>
          <Link
            fontWeight='500'
            color={textColor}
            href='https://simmmple.com/terms-of-service?ref=horizon-chakra-free'>
            Terms of Use
          </Link>
        </ListItem>
        <ListItem>
          <Link
            fontWeight='500'
            color={textColor}
            href='https://www.blog.simmmple.com/?ref=horizon-chakra-free'>
            Blog
          </Link>
        </ListItem>
      </List> */}
    </Flex>
  );
}

================
File: Client/src/components/footer/FooterAuth.js
================
/*eslint-disable*/
import React from "react";
import {
  Flex,
  Link,
  List,
  ListItem,
  Text,
  useColorModeValue,
} from "@chakra-ui/react";

export default function Footer() {
  let textColor = useColorModeValue("blue.700", "white");
  let linkColor = useColorModeValue({ base: "gray.400", lg: "gray.400" }, "gray.400");
  return (
    <Flex
      zIndex='3'
      flexDirection={{
        base: "column",
        lg: "row",
      }}
      alignItems={{
        base: "center",
        xl: "start",
      }}
      justifyContent='space-between'
      px={{ base: "30px", md: "0px" }}
      pb='30px'>
      <Text
        color={textColor}
        textAlign={{
          base: "center",
          xl: "start",
        }}
        mb={{ base: "20px", lg: "0px" }}>
        {" "}
        &copy; {1900 + new Date().getYear()}
        <Text as='span' fontWeight='500' ms='4px'>
          <Link
            fontWeight='500'
            color={textColor}
            target="_blank"
            href='https://prolinkinfotech.com/'> Prolink Infotech.</Link> Need help, facing issues, or looking for a new feature? Contact us for paid support and services at <Link href='mailto:alternatecrm@gmail.com' fontWeight='500'
              color={textColor}
              target="_blank">alternatecrm@gmail.com</Link>
        </Text>
      </Text>
      {/* <List display='flex'>
        <ListItem
          me={{
            base: "20px",
            md: "44px",
          }}>
          <Link
            fontWeight='500'
            color={linkColor}
            href='mailto:hello@simmmple.com?ref=horizon-chakra-free'>
            Support
          </Link>
        </ListItem>
        <ListItem
          me={{
            base: "20px",
            md: "44px",
          }}>
          <Link
            fontWeight='500'
            color={linkColor}
            href='https://www.simmmple.com/licenses?ref=horizon-chakra-free'>
            License
          </Link>
        </ListItem>
        <ListItem
          me={{
            base: "20px",
            md: "44px",
          }}>
          <Link
            fontWeight='500'
            color={linkColor}
            href='https://simmmple.com/terms-of-service?ref=horizon-chakra-free'>
            Terms of Use
          </Link>
        </ListItem>
        <ListItem>
          <Link
            fontWeight='500'
            color={linkColor}
            href='https://www.blog.simmmple.com/?ref=horizon-chakra-free'>
            Blog
          </Link>
        </ListItem>
      </List> */}
    </Flex>
  );
}

================
File: Client/src/components/icons/IconBox.js
================
import React from "react";
import { Flex } from "@chakra-ui/react";

export default function IconBox(props) {
  const { icon, ...rest } = props;

  return (
    <Flex
      alignItems={"center"}
      justifyContent={"center"}
      borderRadius={"50%"}
      {...rest}>
      {icon}
    </Flex>
  );
}

================
File: Client/src/components/icons/Icons.js
================
import { createIcon } from "@chakra-ui/icons";

export const AdobexdLogo = createIcon({
  displayName: "AdobexdLogo",
  viewBox: "0 0 24 24",
  path: (
    <g clipPath='url(#clip0)'>
      <path
        d='M4.042 0h12.916A3.539 3.539 0 0120.5 3.542v12.416a3.539 3.539 0 01-3.542 3.542H4.042A3.539 3.539 0 01.5 15.958V3.542A3.539 3.539 0 014.042 0z'
        fill='#470137'
      />
      <path
        d='M11.017 5.124l-2.5 4.125 2.666 4.375a.143.143 0 01.017.1c-.008.034-.042.009-.092.017H9.2c-.133 0-.225-.008-.283-.092-.175-.35-.359-.691-.534-1.041a33.608 33.608 0 00-.566-1.05c-.2-.359-.4-.717-.6-1.084H7.2c-.175.359-.367.717-.558 1.075-.192.359-.384.717-.567 1.067-.192.35-.383.708-.575 1.05-.033.083-.1.092-.192.092H3.475c-.033 0-.058.016-.058-.025a.116.116 0 01.016-.092l2.592-4.25L3.5 5.116c-.025-.033-.033-.067-.017-.083.017-.025.05-.034.084-.034h1.891c.042 0 .084.009.117.017a.236.236 0 01.083.075c.159.358.342.717.534 1.075.2.358.391.708.6 1.058.2.35.383.7.558 1.059h.017c.175-.367.358-.725.541-1.075.184-.35.375-.7.567-1.05.192-.35.375-.709.558-1.05.009-.034.025-.067.05-.084a.159.159 0 01.109-.016h1.758a.077.077 0 01.091.058c.009.008-.008.042-.024.058zM14.866 13.917a4.144 4.144 0 01-1.791-.375 2.906 2.906 0 01-1.259-1.134c-.308-.508-.458-1.141-.458-1.9a3.423 3.423 0 011.783-3.05c.584-.325 1.284-.483 2.109-.483.041 0 .1 0 .175.008.075.009.158.009.258.017V4.367c0-.059.025-.092.083-.092h1.692c.042-.008.075.025.083.058v7.95c0 .15.009.317.017.5.017.175.025.342.033.484 0 .058-.025.108-.083.133a6.365 6.365 0 01-1.358.4 7.35 7.35 0 01-1.284.117zm.817-1.667V8.583c-.075-.016-.15-.033-.225-.041-.092-.009-.183-.017-.275-.017-.325 0-.65.067-.942.217-.283.141-.525.35-.708.616-.183.267-.275.625-.275 1.059-.008.291.042.583.142.858.083.225.208.425.375.592.158.15.35.266.566.333.225.075.459.108.692.108.125 0 .242-.008.35-.016a.73.73 0 00.3-.042z'
        fill='#FF61F6'
      />
    </g>
  ),
});
export const AppleLogo = createIcon({
  displayName: "AppleLogo",
  viewBox: "0 0 15 18",
  path: (
    <g width='15' height='18' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <g clipPath='url(#Apple_logo_black 1__a)'>
        <path
          d='M12.507 17.28c-.966.947-2.031.8-3.046.353-1.08-.456-2.067-.484-3.207 0-1.42.619-2.173.439-3.029-.353C-1.602 12.258-.89 4.608 4.597 4.32c1.33.072 2.263.743 3.046.8 1.166-.24 2.28-.926 3.528-.836 1.498.122 2.619.72 3.367 1.795-3.082 1.872-2.352 5.976.479 7.128-.566 1.503-1.293 2.988-2.512 4.086l.002-.013ZM7.537 4.266C7.392 2.034 9.183.198 11.242.018c.283 2.574-2.316 4.5-3.705 4.248Z'
          fill='currentColor'
        />
      </g>
      <defs>
        <clipPath id='Apple_logo_black 1__a'>
          <path fill='currentColor' d='M0 0h15v18H0z' />
        </clipPath>
      </defs>
    </g>
  ),
});
export const AndroidLogo = createIcon({
  displayName: "AndroidLogo",
  viewBox: "0 0 16 18",
  path: (
    <g width='16' height='18' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <path
        d='M4.9.051a.571.571 0 0 0-.263.066.518.518 0 0 0-.214.715l.595 1.029C3.584 2.71 2.634 4.16 2.634 5.815v.307a1.525 1.525 0 0 0-1.132-.494C.672 5.628 0 6.27 0 7.064v4.426c0 .793.673 1.437 1.502 1.437.452 0 .857-.192 1.132-.495v.62c0 .836.715 1.52 1.588 1.52h.404v1.969c0 .793.672 1.436 1.501 1.436.829 0 1.502-.643 1.502-1.436v-1.97h.697v1.97c0 .793.673 1.436 1.502 1.436.828 0 1.501-.643 1.501-1.436v-1.97h.403c.874 0 1.588-.683 1.588-1.519v-.62c.276.303.68.495 1.133.495.829 0 1.502-.644 1.502-1.437V7.064c0-.793-.673-1.436-1.502-1.436-.452 0-.857.191-1.133.494v-.307c0-1.655-.952-3.104-2.385-3.953l.596-1.03a.518.518 0 0 0-.214-.715.571.571 0 0 0-.748.205L9.945 1.4a5.906 5.906 0 0 0-1.968-.333c-.692 0-1.357.117-1.967.332L5.386.322a.556.556 0 0 0-.487-.27Z'
        fill='#fffcurrentColor'
      />
      <path
        d='M1.501 6.002c-.618 0-1.11.47-1.11 1.062v4.426c0 .592.492 1.063 1.11 1.063.618 0 1.11-.471 1.11-1.063V7.064c0-.591-.492-1.062-1.11-1.062Zm12.952 0c-.619 0-1.11.47-1.11 1.062v4.426c0 .592.491 1.063 1.11 1.063.618 0 1.11-.471 1.11-1.063V7.064c0-.591-.492-1.062-1.11-1.062Zm-8.327 5.05c-.618 0-1.11.471-1.11 1.063v4.426c0 .591.492 1.062 1.11 1.062.618 0 1.11-.47 1.11-1.062v-4.426c0-.592-.492-1.063-1.11-1.063Zm3.7 0c-.618 0-1.11.471-1.11 1.063v4.426c0 .591.492 1.062 1.11 1.062.619 0 1.111-.47 1.111-1.062v-4.426c0-.592-.492-1.063-1.11-1.063Z'
        fill='currentColor'
      />
      <path
        d='M4.9.426a.16.16 0 0 0-.074.02.141.141 0 0 0-.061.204l.782 1.352c-1.505.75-2.522 2.174-2.524 3.808h9.905c-.003-1.634-1.02-3.058-2.524-3.808L11.186.65c.044-.076.018-.163-.061-.205a.16.16 0 0 0-.075-.02.157.157 0 0 0-.14.079l-.792 1.367a5.483 5.483 0 0 0-2.143-.43c-.767 0-1.494.154-2.142.43L5.04.504A.157.157 0 0 0 4.9.426ZM3.024 6.184v6.868c0 .635.534 1.146 1.198 1.146h7.51c.663 0 1.197-.511 1.197-1.146V6.184H3.023Z'
        fill='currentColor'
      />
      <path
        d='M5.69 3.285a.407.407 0 0 0-.413.395c0 .216.187.395.414.395a.407.407 0 0 0 .413-.395.407.407 0 0 0-.413-.395Zm4.572 0a.407.407 0 0 0-.414.395c0 .216.188.395.414.395a.407.407 0 0 0 .413-.395.407.407 0 0 0-.413-.395Z'
        fill='currentColor'
      />
    </g>
  ),
});
export const WindowsLogo = createIcon({
  displayName: "WindowsLogo",
  viewBox: "0 0 19 18",
  path: (
    <g width='19' height='18' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <path
        d='m0 2.537 7.705-.994.004 7.04-7.702.042L0 2.537Zm7.701 6.858.006 7.047L.006 15.44V9.348l7.695.047Zm.935-7.982L18.852 0v8.494l-10.216.077V1.413ZM18.854 9.46l-.002 8.456L8.636 16.55l-.015-7.106 10.233.016Z'
        fill='currentColor'
      />
    </g>
  ),
});

export const AtlassianLogo = createIcon({
  displayName: "AtlassianLogo",
  viewBox: "0 0 24 24",
  path: (
    <g>
      <path
        d='M6.427 9.239a.57.57 0 00-.798-.108.591.591 0 00-.167.209l-4.9 9.803a.586.586 0 00.524.847h6.827a.562.562 0 00.523-.324c1.474-3.043.58-7.67-2.01-10.427z'
        fill='#2684FF'
      />
      <path
        d='M10.028.318a12.932 12.932 0 00-.755 12.765l3.292 6.583a.586.586 0 00.523.324h6.826a.583.583 0 00.586-.585c0-.091-.02-.18-.06-.262L11.024.315a.552.552 0 00-.997 0v.003z'
        fill='#2684FF'
      />
    </g>
  ),
});

export const CartIcon = createIcon({
  displayName: "CartIcon",
  viewBox: "0 0 24 24",
  path: (
    <path
      fill='currentColor'
      d='M7.984 19.937a1.406 1.406 0 100-2.812 1.406 1.406 0 000 2.812zM17.828 19.937a1.406 1.406 0 100-2.812 1.406 1.406 0 000 2.812zM20.324 5.558a1.051 1.051 0 00-.815-.386H6.134l-.27-1.528a.703.703 0 00-.692-.581H2.359a.703.703 0 000 1.406h2.223L6.59 15.841a.703.703 0 00.692.581h11.25a.703.703 0 100-1.406H7.871l-.248-1.406h10.62a1.057 1.057 0 001.035-.848l1.266-6.328a1.055 1.055 0 00-.22-.876z'
    />
  ),
});

export const ClockIcon = createIcon({
  displayName: "ClockIcon",
  viewBox: "0 0 24 24",
  path: (
    <g>
      <g>
        <rect fill='none' height='24' width='24' />
      </g>
      <g>
        <g>
          <g>
            <path
              fill='currentColor'
              d='M12,2C6.5,2,2,6.5,2,12s4.5,10,10,10s10-4.5,10-10S17.5,2,12,2z M16.2,16.2L11,13V7h1.5v5.2l4.5,2.7L16.2,16.2z'
            />
          </g>
        </g>
      </g>
    </g>
  ),
});

export const CreditIcon = createIcon({
  displayName: "CreditIcon",
  viewBox: "0 0 24 24",
  path: (
    <path
      fill='currentColor'
      d='M1.406 17.023a2.461 2.461 0 002.461 2.46h14.766a2.461 2.461 0 002.46-2.46v-6.768H1.407v6.768zm2.9-3.34a1.318 1.318 0 011.319-1.318h2.11a1.318 1.318 0 011.318 1.318v.879a1.318 1.318 0 01-1.319 1.318H5.625a1.318 1.318 0 01-1.318-1.318v-.879zM18.633 4.014H3.867a2.46 2.46 0 00-2.46 2.461v1.143h19.687V6.475a2.46 2.46 0 00-2.461-2.46z'
    />
  ),
});

export const DashboardLogo = createIcon({
  displayName: "DashboardLogo",
  viewBox: "0 0 1000 257",
  path: (
    <g width='998' height='257' viewBox='0 0 998 257' fill='none'>
      <g clipPath='url(#clip0)'>
        <path
          d='M388.5 115.302C406.112 115.302 413.966 126.726 416.584 136.96L441.336 127.916C436.576 109.352 419.44 89.836 388.262 89.836C354.942 89.836 329 115.54 329 151.24C329 186.464 354.942 212.882 388.976 212.882C419.44 212.882 436.814 193.128 442.288 175.04L418.012 166.234C415.394 175.04 407.064 187.654 388.976 187.654C371.602 187.654 356.608 174.564 356.608 151.24C356.608 127.916 371.602 115.302 388.5 115.302Z'
          fill='currentColor'
        />
        <path
          d='M484.894 141.244C485.37 126.488 493.7 115.064 508.932 115.064C526.306 115.064 532.732 126.488 532.732 140.768V209.312H560.34V136.008C560.34 110.542 546.536 90.074 517.976 90.074C505.838 90.074 492.748 94.358 484.894 104.592V37H457.286V209.312H484.894V141.244Z'
          fill='currentColor'
        />
        <path
          d='M577.29 177.896C577.29 196.222 592.284 212.882 616.56 212.882C635.362 212.882 646.786 203.362 652.26 194.556C652.26 203.838 653.212 208.598 653.45 209.312H679.154C678.916 208.122 677.726 201.22 677.726 190.748V133.152C677.726 110.066 664.16 89.836 628.46 89.836C599.9 89.836 581.812 107.686 579.67 127.678L604.898 133.39C606.088 121.728 614.18 112.446 628.698 112.446C643.93 112.446 650.594 120.3 650.594 130.058C650.594 134.104 648.69 137.436 642.026 138.388L612.276 142.91C592.522 145.766 577.29 157.19 577.29 177.896ZM621.796 191.224C610.848 191.224 604.898 184.084 604.898 176.23C604.898 166.71 611.8 161.95 620.368 160.522L650.594 156V161.236C650.594 183.846 637.266 191.224 621.796 191.224Z'
          fill='currentColor'
        />
        <path
          d='M810.108 93.406H773.456L728.95 140.292V37H701.58V209.312H728.95V176.944L743.23 161.95L777.264 209.312H811.06L762.508 142.434L810.108 93.406Z'
          fill='currentColor'
        />
        <path
          d='M889.349 92.692C888.159 92.454 885.303 91.978 881.971 91.978C866.739 91.978 853.887 99.356 848.413 111.97V93.406H821.519V209.312H849.127V154.096C849.127 132.438 858.885 120.062 880.305 120.062C883.161 120.062 886.255 120.3 889.349 120.776V92.692Z'
          fill='currentColor'
        />
        <path
          d='M895.968 177.896C895.968 196.222 910.962 212.882 935.238 212.882C954.04 212.882 965.464 203.362 970.938 194.556C970.938 203.838 971.89 208.598 972.128 209.312H997.832C997.594 208.122 996.404 201.22 996.404 190.748V133.152C996.404 110.066 982.838 89.836 947.138 89.836C918.578 89.836 900.49 107.686 898.348 127.678L923.576 133.39C924.766 121.728 932.858 112.446 947.376 112.446C962.608 112.446 969.272 120.3 969.272 130.058C969.272 134.104 967.368 137.436 960.704 138.388L930.954 142.91C911.2 145.766 895.968 157.19 895.968 177.896ZM940.474 191.224C929.526 191.224 923.576 184.084 923.576 176.23C923.576 166.71 930.478 161.95 939.046 160.522L969.272 156V161.236C969.272 183.846 955.944 191.224 940.474 191.224Z'
          fill='currentColor'
        />
        <rect width='257' height='257' rx='128.5' fill='#4FD1C5' />
        <path
          d='M69.5584 133.985L157.15 46.9959C158.787 45.3708 161.42 47.3484 160.315 49.3729L127.714 109.125C126.987 110.457 127.951 112.083 129.47 112.083H185.809C187.624 112.083 188.501 114.306 187.174 115.545L88.4456 207.687C86.6753 209.339 84.0405 207.011 85.4617 205.051L132.197 140.578C133.156 139.256 132.211 137.404 130.578 137.404H70.9677C69.1826 137.404 68.2917 135.243 69.5584 133.985Z'
          fill='white'
        />
      </g>
      <defs>
        <linearGradient
          id='paint0_linear'
          x1='128.5'
          y1='0'
          x2='128.5'
          y2='257'
          gradientUnits='userSpaceOnUse'>
          <stop stop-color='#7BCBD4' />
          <stop offset='1' stop-color='#29C6B7' />
        </linearGradient>
        <clipPath id='clip0'>
          <rect width='997.832' height='257' fill='white' />
        </clipPath>
      </defs>
    </g>
  ),
});

export const DashboardLogoWhite = createIcon({
  displayName: "DashboardLogo",
  viewBox: "0 0 163.5 42",
  path: (
    <g fill='none'>
      <path
        d='M63.452 19.292c2.877 0 4.16 1.911 4.587 3.623l4.043-1.513c-.777-3.106-3.576-6.371-8.668-6.371-5.443 0-9.68 4.3-9.68 10.274 0 5.893 4.237 10.313 9.796 10.313 4.976 0 7.813-3.305 8.707-6.331l-3.965-1.473c-.427 1.473-1.788 3.583-4.742 3.583-2.837 0-5.286-2.19-5.286-6.092 0-3.903 2.449-6.013 5.208-6.013zM79.196 23.632c.078-2.469 1.438-4.38 3.926-4.38 2.838 0 3.887 1.911 3.887 4.3v11.47h4.51V22.755c0-4.26-2.255-7.685-6.92-7.685-1.982 0-4.12.716-5.403 2.429V6.19h-4.509v28.831h4.51V23.632zM94.287 29.765c0 3.066 2.449 5.853 6.414 5.853 3.071 0 4.936-1.592 5.83-3.066 0 1.553.156 2.35.195 2.47h4.198c-.039-.2-.233-1.355-.233-3.107v-9.637c0-3.862-2.216-7.247-8.047-7.247-4.664 0-7.619 2.986-7.968 6.332l4.12.955c.194-1.951 1.516-3.504 3.887-3.504 2.488 0 3.576 1.314 3.576 2.947 0 .677-.311 1.234-1.399 1.393l-4.859.757c-3.226.478-5.714 2.39-5.714 5.854zm7.269 2.23c-1.788 0-2.76-1.195-2.76-2.509 0-1.593 1.127-2.39 2.527-2.628l4.936-.757v.876c0 3.783-2.176 5.018-4.703 5.018zM132.312 15.628h-5.986l-7.269 7.845V6.191h-4.47v28.83h4.47v-5.416l2.332-2.508 5.559 7.924h5.52l-7.93-11.19 7.774-8.203zM145.254 15.509a6.3 6.3 0 00-1.205-.12c-2.487 0-4.587 1.235-5.481 3.345v-3.106h-4.392v19.393h4.509v-9.238c0-3.624 1.594-5.695 5.092-5.695.467 0 .972.04 1.477.12v-4.7zM146.335 29.765c0 3.066 2.449 5.853 6.414 5.853 3.071 0 4.937-1.592 5.831-3.066 0 1.553.156 2.35.194 2.47h4.199c-.039-.2-.234-1.355-.234-3.107v-9.637c0-3.862-2.215-7.247-8.046-7.247-4.665 0-7.619 2.986-7.969 6.332l4.121.955c.194-1.951 1.516-3.504 3.887-3.504 2.488 0 3.576 1.314 3.576 2.947 0 .677-.311 1.234-1.399 1.393l-4.859.757c-3.227.478-5.715 2.39-5.715 5.854zm7.269 2.23c-1.788 0-2.759-1.195-2.759-2.509 0-1.593 1.127-2.39 2.526-2.628l4.937-.757v.876c0 3.783-2.177 5.018-4.704 5.018zM41.975 21.5C41.975 9.626 32.578 0 20.987 0 9.398 0 0 9.626 0 21.5S9.396 43 20.988 43c11.59 0 20.987-9.626 20.987-21.5z'
        fill='#fff'
      />
      <path
        d='M11.36 22.418L25.668 7.863c.267-.272.697.06.517.398l-5.325 9.997c-.119.223.039.495.287.495h9.202c.296 0 .44.372.223.58L14.446 34.748c-.29.277-.72-.113-.488-.44l7.633-10.788c.157-.221.003-.531-.264-.531H11.59c-.292 0-.437-.362-.23-.572z'
        fill='#3BCBBE'
      />
    </g>
  ),
});

export const DocumentIcon = createIcon({
  displayName: "DocumentIcon",
  viewBox: "0 0 24 24",
  path: (
    <g>
      <path
        fill='currentColor'
        d='M18.809 10.344h-6.153a2.11 2.11 0 01-2.11-2.11V2.083a.176.176 0 00-.175-.176H6.328A2.812 2.812 0 003.516 4.72v14.063a2.812 2.812 0 002.812 2.812h9.844a2.812 2.812 0 002.812-2.813V10.52a.176.176 0 00-.175-.176z'
      />
      <path
        fill='currentColor'
        d='M18.423 8.789l-6.32-6.32a.088.088 0 00-.15.062v5.705a.703.703 0 00.703.703h5.705a.088.088 0 00.062-.15z'
      />
    </g>
  ),
});

export const GlobeIcon = createIcon({
  displayName: "GlobeIcon",
  viewBox: "0 0 24 24",
  path: (
    <g>
      <path
        stroke='currentColor'
        fill='transparent'
        d='M11.25 2.109a9.14 9.14 0 100 18.281 9.14 9.14 0 000-18.281z'
        stroke-width='.75'
        stroke-miterlimit='10'
      />
      <path
        stroke='currentColor'
        fill='transparent'
        d='M11.25 2.109C8.698 2.109 6.3 6.2 6.3 11.249c0 5.048 2.4 9.14 4.951 9.14 2.552 0 4.951-4.092 4.951-9.14 0-5.048-2.399-9.14-4.95-9.14z'
        stroke-width='.75'
        stroke-miterlimit='10'
      />
      <path
        stroke='currentColor'
        fill='transparent'
        d='M5.156 5.156C6.836 6.349 8.952 7.06 11.25 7.06c2.298 0 4.414-.711 6.094-1.904'
      />
      <path
        stroke='currentColor'
        fill='transparent'
        d='M5.156 5.156C6.836 6.349 8.952 7.06 11.25 7.06c2.298 0 4.414-.711 6.094-1.904M17.344 17.344c-1.68-1.193-3.796-1.904-6.094-1.904-2.298 0-4.413.711-6.094 1.904'
        stroke-width='.75'
        stroke-linecap='round'
        stroke-linejoin='round'
      />
      <path
        stroke='currentColor'
        fill='transparent'
        d='M11.25 2.109v18.28M20.39 11.249H2.11'
        stroke-width='.75'
        stroke-miterlimit='10'
      />
    </g>
  ),
});

export const HelpIcon = createIcon({
  displayName: "HelpIcon",
  viewBox: "0 0 24 24",
  path: (
    <path
      fill='currentColor'
      d='M11.25 0C5.04 0 0 5.04 0 11.25S5.04 22.5 11.25 22.5 22.5 17.46 22.5 11.25 17.46 0 11.25 0zm-.352 17.813a1.172 1.172 0 110-2.344 1.172 1.172 0 010 2.344zm1.96-5.977c-.95.637-1.08 1.222-1.08 1.758a.82.82 0 11-1.641 0c0-1.284.59-2.305 1.806-3.121 1.13-.758 1.768-1.239 1.768-2.295 0-.718-.41-1.264-1.26-1.668-.199-.095-.644-.187-1.191-.18-.687.008-1.22.172-1.63.503-.775.623-.84 1.302-.84 1.312a.821.821 0 11-1.642-.08c.007-.142.106-1.425 1.452-2.507.698-.562 1.585-.854 2.636-.866.745-.01 1.444.117 1.918.34 1.418.672 2.198 1.79 2.198 3.146 0 1.982-1.325 2.872-2.494 3.658z'
    />
  ),
});

export const HomeIcon = createIcon({
  displayName: "HomeIcon",
  viewBox: "0 0 24 24",
  path: (
    <g>
      <path
        fill='currentColor'
        d='M11.494 4.951a.351.351 0 00-.486 0l-8.09 7.729a.352.352 0 00-.109.254v7.254a1.406 1.406 0 001.405 1.406h4.223a.703.703 0 00.704-.703v-5.976a.351.351 0 01.351-.352h3.516a.351.351 0 01.351.352v5.976a.703.703 0 00.704.703h4.22a1.407 1.407 0 001.407-1.406v-7.254a.35.35 0 00-.108-.254L11.494 4.95z'
      />
      <path
        fill='currentColor'
        d='M21.574 11.23l-3.287-3.144V3.314a.703.703 0 00-.703-.703h-2.11a.703.703 0 00-.703.703V4.72l-2.545-2.434c-.239-.24-.593-.378-.976-.378-.38 0-.734.138-.972.379L.93 11.23a.717.717 0 00-.058.983.703.703 0 001.018.046l9.119-8.713a.352.352 0 01.486 0l9.12 8.713a.703.703 0 00.992-.019c.27-.28.248-.74-.033-1.01z'
      />
    </g>
  ),
});

export const InvisionLogo = createIcon({
  displayName: "InvisionLogo",
  viewBox: "0 0 24 24",
  path: (
    <g clipPath='url(#clip0)'>
      <path
        d='M18.687 0H2.313A1.813 1.813 0 00.5 1.811v16.374C.5 19.188 1.312 20 2.313 20h16.374a1.813 1.813 0 001.813-1.813V1.812A1.813 1.813 0 0018.687 0z'
        fill='#DC395F'
      />
      <path
        d='M7.184 6.293c.665 0 1.222-.522 1.222-1.204 0-.683-.557-1.204-1.222-1.204-.665 0-1.222.521-1.222 1.204 0 .682.557 1.204 1.222 1.204zM4.65 12.739a4.134 4.134 0 00-.108.905c0 1.06.575 1.764 1.797 1.764 1.013 0 1.834-.602 2.426-1.573l-.361 1.449h2.012l1.15-4.612c.287-1.168.844-1.774 1.689-1.774.665 0 1.078.413 1.078 1.096 0 .197-.018.413-.09.646l-.593 2.12c-.09.306-.126.611-.126.899 0 1.006.593 1.742 1.833 1.742 1.06 0 1.904-.682 2.371-2.317l-.79-.305c-.395 1.095-.737 1.293-1.006 1.293-.27 0-.414-.18-.414-.538 0-.162.037-.342.09-.558l.575-2.065c.144-.485.198-.915.198-1.31 0-1.546-.934-2.352-2.066-2.352-1.06 0-2.138.956-2.677 1.962l.395-1.806H8.962L8.53 8.996h1.438l-.885 3.544c-.695 1.545-1.972 1.57-2.132 1.534-.264-.06-.432-.159-.432-.5 0-.198.036-.482.126-.823l1.348-5.346H4.579l-.431 1.591h1.419L4.65 12.74'
        fill='#fff'
      />
    </g>
  ),
});

export const JiraLogo = createIcon({
  displayName: "JiraLogo",
  viewBox: "0 0 24 24",
  path: (
    <g clipPath='url(#clip0)'>
      <path
        d='M20.26 10.42l-8.863-8.93-.86-.865-6.67 6.722L.814 10.42a.827.827 0 000 1.162l6.096 6.14 3.627 3.654 6.67-6.722.105-.104 2.947-2.964a.824.824 0 000-1.166zm-9.722 3.649L7.493 11l3.045-3.068L13.582 11l-3.044 3.068z'
        fill='#2684FF'
      />
      <path
        d='M10.537 7.932a5.184 5.184 0 01-1.502-3.637A5.185 5.185 0 0110.515.65L3.852 7.36l3.626 3.654 3.06-3.082z'
        fill='url(#paint0_linear)'
      />
      <path
        d='M13.59 10.992l-3.053 3.076a5.186 5.186 0 011.502 3.653c0 1.37-.54 2.683-1.502 3.652l6.682-6.728-3.63-3.653z'
        fill='url(#paint1_linear)'
      />
    </g>
  ),
});

export const MastercardIcon = createIcon({
  displayName: "MastercardIcon",
  viewBox: "0 0 24 24",
  path: (
    <svg
      width='24'
      height='20'
      viewBox='0 0 21 15'
      fill='none'
      xmlns='http://www.w3.org/2000/svg'>
      <circle cx='6.63158' cy='7.49999' r='6.63158' fill='#EB001B' />
      <circle cx='14.3686' cy='7.49999' r='6.63158' fill='#F79E1B' />
    </svg>
  ),
});

export const PayPalIcon = createIcon({
  displayName: "PayPalIcon",
  viewBox: "0 0 24 24",
  path: (
    <g>
      <path
        fill='currentColor'
        d='M16.179 2.532C15.142 1.357 13.265.854 10.863.854H3.895a.997.997 0 00-.986.834L.007 19.945a.595.595 0 00.591.686H4.9l1.08-6.8-.033.215a.993.993 0 01.983-.834h2.044c4.017 0 7.16-1.619 8.08-6.3.027-.14.07-.406.07-.406.262-1.732-.001-2.907-.945-3.974z'
      />
      <path
        fill='currentColor'
        d='M18.213 7.393c-.998 4.61-4.184 7.048-9.24 7.048H7.142L5.773 23.1h2.973a.87.87 0 00.862-.731l.035-.184.684-4.297.044-.237a.87.87 0 01.86-.731h.544c3.514 0 6.264-1.416 7.068-5.51.322-1.644.166-3.021-.63-4.017z'
      />
    </g>
  ),
});

export const PersonIcon = createIcon({
  displayName: "PersonIcon",
  viewBox: "0 0 24 24",
  path: (
    <path
      fill='currentColor'
      d='M14.618 3.338c-.855-.924-2.05-1.432-3.368-1.432-1.325 0-2.524.505-3.375 1.423-.86.928-1.28 2.188-1.181 3.55.195 2.686 2.239 4.87 4.556 4.87s4.358-2.184 4.556-4.87c.1-1.349-.322-2.607-1.188-3.541zM18.984 21.592H3.515a1.363 1.363 0 01-1.063-.489 1.552 1.552 0 01-.316-1.279c.371-2.058 1.529-3.786 3.348-5 1.616-1.076 3.664-1.67 5.766-1.67s4.15.594 5.765 1.67c1.82 1.214 2.977 2.942 3.348 5 .085.471-.03.937-.315 1.279a1.362 1.362 0 01-1.064.49z'
    />
  ),
});

export const ProfileIcon = createIcon({
  displayName: "ProfileIcon",
  viewBox: "0 0 24 24",
  path: (
    <g>
      <path d='M0 0h24v24H0V0z' fill='transparent' />
      <path
        fill='currentColor'
        d='M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v1c0 .55.45 1 1 1h14c.55 0 1-.45 1-1v-1c0-2.66-5.33-4-8-4z'
      />
    </g>
  ),
});

export const RocketIcon = createIcon({
  displayName: "RocketIcon",
  viewBox: "0 0 24 24",
  path: (
    <g>
      <path
        fill='currentColor'
        d='M20.99 2.182a.209.209 0 00-.156-.16c-2.574-.63-8.521 1.613-11.743 4.833a13.93 13.93 0 00-1.566 1.85c-.994-.087-1.987-.014-2.834.355-2.39 1.052-3.085 3.796-3.279 4.976a.424.424 0 00.464.492l3.837-.423c.002.29.02.578.052.866.02.2.108.386.25.527l1.486 1.482a.86.86 0 00.528.25c.286.033.573.05.86.053l-.42 3.832a.424.424 0 00.492.464c1.178-.19 3.927-.885 4.972-3.274.37-.847.445-1.836.36-2.824a13.96 13.96 0 001.855-1.567c3.232-3.216 5.462-9.03 4.842-11.732zm-8.067 7.896a2.11 2.11 0 112.983-2.984 2.11 2.11 0 01-2.983 2.984z'
      />
      <path
        fill='currentColor'
        d='M7.4 18.054c-.24.241-.627.335-1.092.416-1.044.178-1.967-.725-1.779-1.78.072-.401.283-.962.415-1.094a.192.192 0 00-.16-.328 2.636 2.636 0 00-1.544.753c-1.033 1.034-1.13 4.87-1.13 4.87s3.838-.097 4.872-1.13c.417-.417.682-.961.752-1.546.017-.184-.207-.293-.334-.16z'
      />
    </g>
  ),
});

export const SettingsIcon = createIcon({
  displayName: "SettingsIcon",
  viewBox: "0 0 24 24",
  // path can also be an array of elements, if you have multiple paths, lines, shapes, etc.
  path: (
    <g>
      <path d='M0,0h24v24H0V0z' fill='none' />
      <path
        fill='currentColor'
        d='M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.8,11.69,4.8,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z'
      />
    </g>
  ),
});

export const SlackLogo = createIcon({
  displayName: "SlackLogo",
  viewBox: "0 0 24 24",
  path: (
    <g clipPath='url(#clip0)' fill-rule='evenodd' clip-rule='evenodd'>
      <path
        d='M7.832.5c-1.105 0-2 .919-1.999 2.05 0 1.13.895 2.048 2 2.05h2V2.55c.001-1.13-.894-2.048-2-2.05zm0 5.467H2.5c-1.106 0-2.001.918-2 2.05-.002 1.13.894 2.048 2 2.05h5.332c1.106-.001 2.002-.919 2-2.05.002-1.132-.894-2.05-2-2.05z'
        fill='#36C5F0'
      />
      <path
        d='M20.5 8.016c0-1.13-.895-2.048-2-2.05-1.106.002-2.002.92-2 2.05v2.05h2c1.105 0 2-.918 2-2.05zm-5.334 0V2.55c.001-1.13-.893-2.048-2-2.05-1.105 0-2 .919-2 2.05v5.466c-.001 1.131.894 2.049 2 2.05 1.106 0 2.001-.918 2-2.05z'
        fill='#2EB67D'
      />
      <path
        d='M13.166 21c1.106 0 2.001-.919 2-2.05.001-1.13-.894-2.048-2-2.05h-2v2.05c-.001 1.13.894 2.048 2 2.05zm0-5.467h5.333c1.106-.001 2.002-.92 2-2.05.002-1.131-.893-2.049-1.999-2.05h-5.333c-1.106 0-2.001.918-2 2.05-.001 1.13.893 2.049 1.999 2.05z'
        fill='#ECB22E'
      />
      <path
        d='M.5 13.483c-.001 1.13.895 2.049 2 2.05 1.106-.001 2.001-.92 2-2.05v-2.05h-2c-1.105.001-2.001.919-2 2.05zm5.333 0v5.467c-.001 1.13.894 2.048 2 2.05 1.105 0 2-.919 2-2.05v-5.465c.002-1.131-.894-2.05-2-2.05-1.106 0-2 .917-2 2.048z'
        fill='#E01E5A'
      />
    </g>
  ),
});

export const SpotifyLogo = createIcon({
  displayName: "SpotifyLogo",
  viewBox: "0 0 24 24",
  path: (
    <g clipPath='url(#clip0)'>
      <path
        d='M10.5 0C4.977 0 .5 4.477.5 10s4.477 10 10 10 10-4.477 10-10c0-5.522-4.477-10-10-10zm4.586 14.422a.623.623 0 01-.857.208c-2.348-1.435-5.304-1.76-8.785-.964a.623.623 0 11-.277-1.216c3.808-.87 7.076-.495 9.712 1.115.294.181.387.564.207.857zm1.223-2.722a.78.78 0 01-1.072.257c-2.687-1.652-6.786-2.13-9.965-1.166a.78.78 0 01-.973-.519.781.781 0 01.52-.972c3.632-1.102 8.147-.569 11.233 1.329a.78.78 0 01.258 1.072zm.106-2.835C13.19 6.95 7.875 6.775 4.797 7.708a.935.935 0 11-.543-1.79c3.533-1.072 9.404-.865 13.115 1.338a.935.935 0 01-.954 1.609z'
        fill='#2EBD59'
      />
    </g>
  ),
});

export const HorizonLogo = createIcon({
  displayName: "horizonLogo",
  viewBox: "0 0 179 20",
  path: (
    <g width='179' height='20' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <path
        d='M16.42.748V19h-4.446v-7.514H5.058V19H.612V.748h4.446v7.15h6.916V.748h4.446Zm11.842 18.434c-1.716 0-3.294-.399-4.732-1.196a9.092 9.092 0 0 1-3.406-3.328c-.832-1.439-1.248-3.05-1.248-4.836 0-1.785.416-3.389 1.248-4.81a9.092 9.092 0 0 1 3.406-3.328C24.968.887 26.546.488 28.262.488c1.716 0 3.284.399 4.706 1.196a8.665 8.665 0 0 1 3.38 3.328c.832 1.421 1.248 3.025 1.248 4.81 0 1.785-.416 3.397-1.248 4.836a8.901 8.901 0 0 1-3.38 3.328c-1.422.797-2.99 1.196-4.706 1.196Zm0-4.056c1.456 0 2.617-.485 3.484-1.456.884-.97 1.326-2.253 1.326-3.848 0-1.612-.442-2.895-1.326-3.848-.867-.97-2.028-1.456-3.484-1.456-1.474 0-2.652.477-3.536 1.43-.867.953-1.3 2.245-1.3 3.874 0 1.612.433 2.903 1.3 3.874.884.953 2.062 1.43 3.536 1.43ZM49.377 19l-3.796-6.89h-1.066V19h-4.446V.748h7.462c1.439 0 2.66.251 3.666.754 1.023.503 1.785 1.196 2.288 2.08.503.867.754 1.837.754 2.912 0 1.213-.347 2.297-1.04 3.25-.676.953-1.681 1.63-3.016 2.028L54.395 19h-5.018ZM44.515 8.964h2.756c.815 0 1.421-.2 1.82-.598.416-.399.624-.962.624-1.69 0-.693-.208-1.24-.624-1.638-.399-.399-1.005-.598-1.82-.598h-2.756v4.524ZM61.476.748V19H57.03V.748h4.446ZM69.43 15.36h7.852V19H64.386v-3.38l7.8-11.232h-7.8V.748h12.896v3.38L69.43 15.36Zm19.388 3.822c-1.716 0-3.293-.399-4.732-1.196a9.093 9.093 0 0 1-3.406-3.328c-.832-1.439-1.248-3.05-1.248-4.836 0-1.785.416-3.389 1.248-4.81a9.093 9.093 0 0 1 3.406-3.328C85.525.887 87.102.488 88.818.488c1.716 0 3.285.399 4.706 1.196a8.664 8.664 0 0 1 3.38 3.328c.832 1.421 1.248 3.025 1.248 4.81 0 1.785-.416 3.397-1.248 4.836a8.9 8.9 0 0 1-3.38 3.328c-1.421.797-2.99 1.196-4.706 1.196Zm0-4.056c1.456 0 2.618-.485 3.484-1.456.884-.97 1.326-2.253 1.326-3.848 0-1.612-.442-2.895-1.326-3.848-.866-.97-2.028-1.456-3.484-1.456-1.473 0-2.652.477-3.536 1.43-.866.953-1.3 2.245-1.3 3.874 0 1.612.434 2.903 1.3 3.874.884.953 2.063 1.43 3.536 1.43ZM116.954 19h-4.446l-7.436-11.258V19h-4.446V.748h4.446l7.436 11.31V.748h4.446V19ZM136.32.878v1.924h-7.878v6.11h6.396v1.924h-6.396V19h-2.366V.878h10.244ZM148.72 19l-4.316-7.41h-2.86V19h-2.366V.878h5.85c1.369 0 2.522.234 3.458.702.953.468 1.664 1.1 2.132 1.898.468.797.702 1.707.702 2.73 0 1.248-.364 2.349-1.092 3.302-.711.953-1.786 1.586-3.224 1.898l4.55 7.592h-2.834Zm-7.176-9.308h3.484c1.282 0 2.244-.312 2.886-.936.641-.641.962-1.49.962-2.548 0-1.075-.321-1.907-.962-2.496-.624-.59-1.586-.884-2.886-.884h-3.484v6.864Zm15.818-6.89V8.86h6.604v1.95h-6.604v6.24h7.384V19h-9.75V.852h9.75v1.95h-7.384Zm13.33 0V8.86h6.604v1.95h-6.604v6.24h7.384V19h-9.75V.852h9.75v1.95h-7.384Z'
        fill='currentColor'
      />
    </g>
  ),
});

export const SupportIcon = createIcon({
  // Doesn't display the full icon without w and h being specified
  displayName: "BuildIcon",
  viewBox: "0 0 24 24",
  path: (
    <path
      fill='currentColor'
      d='M20.885 5.547a.703.703 0 00-1.122-.176l-2.7 2.702a.708.708 0 01-.995 0l-1.167-1.169a.702.702 0 010-.994l2.689-2.69a.704.704 0 00-.21-1.138c-2.031-.908-4.566-.435-6.164 1.152-1.358 1.348-1.763 3.455-1.11 5.78a.698.698 0 01-.197.703L2.593 16.4a2.82 2.82 0 103.981 3.983l6.754-7.332a.699.699 0 01.693-.2 7.885 7.885 0 002.03.279c1.469 0 2.757-.475 3.686-1.39 1.72-1.695 1.983-4.57 1.148-6.192zM4.623 19.901a1.407 1.407 0 11-.305-2.797 1.407 1.407 0 01.305 2.797z'
    />
  ),
});

export const StatsIcon = createIcon({
  displayName: "StatsIcon",
  viewBox: "0 0 24 24",
  path: (
    <path
      fill='currentColor'
      d='M4.57 22.297H3.164a1.055 1.055 0 01-1.055-1.054v-6.328a1.055 1.055 0 011.055-1.055H4.57a1.055 1.055 0 011.055 1.055v6.328a1.055 1.055 0 01-1.055 1.054zM14.414 22.296h-1.406a1.055 1.055 0 01-1.055-1.055V10.695a1.055 1.055 0 011.055-1.055h1.406a1.055 1.055 0 011.055 1.055V21.24a1.055 1.055 0 01-1.055 1.055zM19.336 22.297H17.93a1.055 1.055 0 01-1.055-1.055V5.773A1.055 1.055 0 0117.93 4.72h1.406a1.055 1.055 0 011.055 1.054v15.47a1.055 1.055 0 01-1.055 1.054zM9.492 22.297H8.086a1.055 1.055 0 01-1.055-1.055V2.257a1.055 1.055 0 011.055-1.054h1.406a1.055 1.055 0 011.055 1.054v18.985a1.055 1.055 0 01-1.055 1.055z'
    />
  ),
});

export const WalletIcon = createIcon({
  displayName: "WalletIcon",
  viewBox: "0 0 24 24",
  path: (
    <g>
      <path
        fill='currentColor'
        d='M4.447 4.818h14.062c.164 0 .328.01.491.031a2.9 2.9 0 00-3.406-2.441L4.03 4.382h-.013a2.9 2.9 0 00-1.805 1.149 3.848 3.848 0 012.236-.713zM18.51 5.875H4.446a2.816 2.816 0 00-2.813 2.812v8.438a2.816 2.816 0 002.813 2.812h14.062a2.815 2.815 0 002.813-2.812V8.687a2.815 2.815 0 00-2.813-2.812zm-2.088 8.437a1.406 1.406 0 110-2.811 1.406 1.406 0 010 2.811z'
      />
      <path
        fill='currentColor'
        d='M1.656 11.651V7.28c0-.952.528-2.549 2.358-2.895 1.553-.291 3.091-.291 3.091-.291s1.011.703.176.703-.813 1.077 0 1.077 0 1.032 0 1.032L4.007 10.62l-2.35 1.032z'
      />
    </g>
  ),
});

export const VisaIcon = createIcon({
  displayName: "VisaIcon",
  viewBox: "0 0 24 24",
  path: (
    <svg
      width='26'
      height='20'
      viewBox='0 0 30 9'
      fill='none'
      xmlns='http://www.w3.org/2000/svg'>
      <path
        fill-rule='evenodd'
        clip-rule='evenodd'
        d='M12.6708 2.96349C12.6568 4.15055 13.653 4.81298 14.4034 5.20684C15.1744 5.61099 15.4333 5.87013 15.4304 6.23147C15.4245 6.78459 14.8153 7.02862 14.2452 7.03812C13.2505 7.05475 12.6723 6.74889 12.2125 6.51753L11.8542 8.32341C12.3155 8.55247 13.1696 8.75217 14.0554 8.76087C16.1345 8.76087 17.4947 7.65543 17.5021 5.94145C17.5102 3.76625 14.7087 3.64579 14.7278 2.67348C14.7344 2.37871 14.9956 2.06408 15.568 1.98406C15.8512 1.94368 16.6332 1.91274 17.5198 2.35252L17.8677 0.605286C17.391 0.418253 16.7782 0.239136 16.0153 0.239136C14.0583 0.239136 12.6819 1.35962 12.6708 2.96349ZM21.2115 0.389687C20.8319 0.389687 20.5118 0.628245 20.3691 0.99433L17.3991 8.63249H19.4767L19.8901 7.40183H22.429L22.6689 8.63249H24.5L22.9021 0.389687H21.2115ZM21.5021 2.61641L22.1016 5.7116H20.4596L21.5021 2.61641ZM10.1518 0.389687L8.51418 8.63249H10.4939L12.1308 0.389687H10.1518ZM7.22303 0.389687L5.16233 6.00003L4.32878 1.22966C4.23097 0.697187 3.84472 0.389687 3.41579 0.389687H0.0471011L0 0.629037C0.691574 0.790671 1.47729 1.0514 1.95326 1.33033C2.24457 1.50067 2.32775 1.64964 2.42336 2.05458L4.00214 8.63249H6.0945L9.3021 0.389687H7.22303Z'
        fill='currentColor'
      />
    </svg>
  ),
});

export const BitcoinLogo = createIcon({
  displayName: "BitcoinLogo",
  viewBox: "0 0 67 14",
  path: (
    <svg width='67' height='14' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <path
        d='M13.779 8.694A6.993 6.993 0 1 1 .209 5.308a6.992 6.992 0 1 1 13.57 3.386Z'
        fill='#F7931A'
      />
      <path
        d='M10.078 6.004c.14-.932-.57-1.433-1.539-1.767l.315-1.261-.768-.192-.306 1.229c-.202-.05-.409-.098-.615-.145l.309-1.237-.768-.191-.314 1.26a25.67 25.67 0 0 1-.49-.115v-.004l-1.058-.264-.204.82s.57.13.558.139c.31.077.367.283.357.446L5.197 6.16c.021.005.05.013.08.025l-.081-.02-.502 2.014c-.038.094-.135.236-.352.182.008.011-.558-.14-.558-.14l-.38.88.998.249.547.141-.317 1.276.766.192.315-1.263c.21.057.412.11.611.16l-.313 1.256.767.191.318-1.274c1.309.248 2.293.148 2.707-1.036.334-.954-.016-1.504-.705-1.863.501-.116.88-.446.98-1.127Zm-1.754 2.46c-.237.954-1.842.438-2.362.31l.422-1.692c.52.13 2.188.388 1.94 1.382Zm.238-2.474c-.217.867-1.552.427-1.986.318l.383-1.533c.433.108 1.828.31 1.603 1.215Zm11.936-1.754c.568 0 1.058.102 1.47.302.413.201.755.473 1.029.815.27.343.471.744.6 1.204.13.462.195.958.195 1.489 0 .815-.15 1.586-.451 2.312a5.995 5.995 0 0 1-1.23 1.896 5.786 5.786 0 0 1-1.842 1.274 5.617 5.617 0 0 1-2.3.47c-.107 0-.295-.003-.56-.008a8.166 8.166 0 0 1-.91-.08 10.687 10.687 0 0 1-1.09-.213 5.458 5.458 0 0 1-1.089-.39L17.383.428l2.744-.425-1.097 4.57a4.19 4.19 0 0 1 .707-.247c.237-.06.49-.09.761-.09Zm-2.3 7.584c.412 0 .802-.101 1.167-.301.367-.2.684-.47.949-.806a4.07 4.07 0 0 0 .628-1.143 3.9 3.9 0 0 0 .23-1.33c0-.567-.094-1.009-.283-1.329-.189-.318-.538-.478-1.045-.478-.166 0-.38.032-.645.088a1.61 1.61 0 0 0-.718.373l-1.168 4.854c.07.012.133.024.186.035a1.918 1.918 0 0 0 .38.037h.318Zm8.439 1.932h-2.62l2.212-9.318h2.638l-2.23 9.317Zm1.275-10.454c-.366 0-.698-.109-.992-.327-.297-.217-.443-.551-.443-1.001 0-.248.05-.48.15-.7A1.87 1.87 0 0 1 27.6.323c.219-.094.452-.14.7-.14.366 0 .695.108.99.326.295.22.443.554.443 1.002 0 .248-.05.481-.15.7a1.844 1.844 0 0 1-.974.947c-.219.096-.45.141-.698.141Zm3.252-1.186 2.744-.425-.674 2.746h2.94l-.531 2.16H32.72l-.778 3.26a3.69 3.69 0 0 0-.124.761c-.013.237.017.44.088.612a.77.77 0 0 0 .38.398c.184.095.445.143.788.143.283 0 .558-.027.825-.08.264-.053.533-.126.804-.222l.196 2.02c-.355.13-.738.242-1.151.337a6.62 6.62 0 0 1-1.47.14c-.814 0-1.445-.12-1.895-.361-.449-.243-.766-.574-.956-.994-.187-.418-.271-.9-.248-1.442a9.351 9.351 0 0 1 .248-1.72l1.736-7.333Zm4.894 7.918c0-.802.13-1.559.39-2.267A5.58 5.58 0 0 1 37.563 5.9a5.215 5.215 0 0 1 1.762-1.257c.689-.306 1.46-.46 2.31-.46.531 0 1.006.05 1.424.15.42.102.8.234 1.143.399l-.904 2.056a8.454 8.454 0 0 0-.734-.257 3.194 3.194 0 0 0-.93-.116c-.874 0-1.566.302-2.08.903-.513.602-.77 1.412-.77 2.428 0 .602.129 1.09.39 1.462.259.372.738.558 1.433.558a4.841 4.841 0 0 0 1.842-.372l.196 2.108a9.48 9.48 0 0 1-1.098.347c-.402.098-.88.149-1.435.149-.732 0-1.352-.107-1.859-.319a3.54 3.54 0 0 1-1.256-.859 3.24 3.24 0 0 1-.717-1.268 5.205 5.205 0 0 1-.223-1.522Zm11.641 3.969c-.626 0-1.17-.096-1.63-.284a3.009 3.009 0 0 1-1.141-.797 3.443 3.443 0 0 1-.682-1.214 4.903 4.903 0 0 1-.229-1.548c0-.71.114-1.42.345-2.128a6.032 6.032 0 0 1 1.018-1.912 5.441 5.441 0 0 1 1.646-1.393c.648-.359 1.392-.54 2.23-.54.613 0 1.154.096 1.62.285a3.03 3.03 0 0 1 1.152.797c.299.343.527.746.68 1.214.154.465.23.983.23 1.55a7.06 7.06 0 0 1-.336 2.126 6.143 6.143 0 0 1-.991 1.913 5.198 5.198 0 0 1-1.637 1.39c-.655.36-1.414.54-2.275.54Zm1.31-7.582c-.39 0-.733.112-1.027.335a2.894 2.894 0 0 0-.743.851 4.202 4.202 0 0 0-.453 1.125 4.87 4.87 0 0 0-.149 1.16c0 .591.095 1.052.283 1.383.19.33.53.496 1.027.496.39 0 .731-.112 1.027-.337.293-.224.542-.508.743-.85.2-.342.352-.718.453-1.126.099-.406.15-.794.15-1.16 0-.59-.096-1.051-.285-1.382-.189-.33-.531-.495-1.027-.495Zm6.784 7.335h-2.622l2.212-9.318h2.64l-2.23 9.317Zm1.273-10.454c-.365 0-.697-.109-.99-.327-.296-.217-.444-.551-.444-1.001 0-.248.051-.48.151-.7.1-.218.233-.406.399-.566.164-.16.358-.286.575-.382.218-.094.45-.14.698-.14.367 0 .698.108.992.326.295.22.444.554.444 1.002 0 .248-.053.481-.152.7a1.837 1.837 0 0 1-.972.947 1.73 1.73 0 0 1-.7.141Zm2.845 1.559c.2-.058.422-.128.663-.204a9.764 9.764 0 0 1 1.824-.371c.372-.043.795-.063 1.265-.063 1.382 0 2.335.402 2.86 1.205.526.804.617 1.902.276 3.295l-1.205 5.032h-2.638l1.168-4.926c.072-.307.127-.604.169-.895a2.12 2.12 0 0 0-.01-.761.911.911 0 0 0-.326-.532c-.173-.136-.434-.204-.789-.204a5.32 5.32 0 0 0-1.044.108l-1.717 7.21h-2.639l2.143-8.894Z'
        fill='#fff'
      />
    </svg>
  ),
});

export const EthereumLogoOutline = createIcon({
  displayName: "EthereumLogoOutline",
  viewBox: "0 0 82 82",
  path: (
    <svg width='82' height='82' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <path
        fill-rule='evenodd'
        clip-rule='evenodd'
        d='M41 82c22.644 0 41-18.356 41-41S63.644 0 41 0 0 18.356 0 41s18.356 41 41 41Zm-.1-33.852-12.625-7.146 12.627 17.054L53.54 41.002 40.9 48.148Zm-12.436-9.44 12.632-20.082 12.628 20.088-12.63 7.147-12.63-7.154Z'
        fill='currentColor'
      />
    </svg>
  ),
});

export const DashCurveUp = createIcon({
  displayName: "DashCurveUp",
  viewBox: "0 0 134 22",
  path: (
    <g width='134' height='22' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <path
        d='M1 21v0C41.269-4.626 92.731-4.626 133 21v0'
        stroke='currentColor'
        stroke-width='2'
        stroke-linecap='round'
        stroke-linejoin='round'
        stroke-dasharray='6 6'
      />
    </g>
  ),
});
export const DashCurveDown = createIcon({
  displayName: "DashCurveDown",
  viewBox: "0 0 134 22",
  path: (
    <g width='134' height='22' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <path
        d='M1 1v0c40.269 25.626 91.731 25.626 132 0v0'
        stroke='currentColor'
        stroke-width='2'
        stroke-linecap='round'
        stroke-linejoin='round'
        stroke-dasharray='6 6'
      />
    </g>
  ),
});

export const ButtonLeft = createIcon({
  displayName: "ButtonLeft",
  viewBox: "0 0 44 29",
  path: (
    <g width='44' height='29' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <path
        d='M1 9.024A5 5 0 0 1 5.606 4.04l32-2.531A5 5 0 0 1 43 6.493v16.014a5 5 0 0 1-5.394 4.984l-32-2.53A5 5 0 0 1 1 19.975V9.024Z'
        stroke='currentColor'
        stroke-width='2'
      />
    </g>
  ),
});

export const ButtonRight = createIcon({
  displayName: "ButtonRight",
  viewBox: "0 0 44 29",
  path: (
    <svg width='44' height='29' fill='none' xmlns='http://www.w3.org/2000/svg'>
      <path
        d='M43 9.024a5 5 0 0 0-4.606-4.984l-32-2.531A5 5 0 0 0 1 6.493v16.014a5 5 0 0 0 5.394 4.984l32-2.53A5 5 0 0 0 43 19.975V9.024Z'
        stroke='currentColor'
        stroke-width='2'
      />
    </svg>
  ),
});

export const Fingerprint = createIcon({
  displayName: "ButtonRight",
  viewBox: "0 0 48 48",
  path: (
    <g xmlns='http://www.w3.org/2000/svg' height='48' width='48'>
      <path
        fill='currentColor'
        d='M24.15 3.7Q27.45 3.7 30.625 4.5Q33.8 5.3 36.7 6.8Q37.15 7.05 37.225 7.425Q37.3 7.8 37.15 8.1Q36.95 8.4 36.6 8.575Q36.25 8.75 35.85 8.5Q33.2 7.1 30.2 6.375Q27.2 5.65 24.15 5.65Q21.05 5.65 18.1 6.35Q15.15 7.05 12.45 8.5Q11.95 8.75 11.6 8.65Q11.25 8.55 11.1 8.25Q10.9 8.05 10.975 7.6Q11.05 7.15 11.4 6.95Q14.3 5.3 17.575 4.5Q20.85 3.7 24.15 3.7ZM24.15 8.65Q29.5 8.65 34.25 10.975Q39 13.3 42.1 17.65Q42.4 18.1 42.325 18.475Q42.25 18.85 41.95 19.1Q41.65 19.35 41.25 19.325Q40.85 19.3 40.6 18.85Q37.8 14.9 33.425 12.775Q29.05 10.65 24.15 10.6Q19.2 10.6 14.875 12.725Q10.55 14.85 7.8 18.9Q7.45 19.35 7.05 19.425Q6.65 19.5 6.35 19.3Q6 19.15 5.925 18.775Q5.85 18.4 6 18.05Q9.05 13.6 13.85 11.125Q18.65 8.65 24.15 8.65ZM24.15 18.55Q28.8 18.55 32.125 21.725Q35.45 24.9 35.45 29.45Q35.45 29.95 35.225 30.275Q35 30.6 34.5 30.6Q33.95 30.6 33.7 30.275Q33.45 29.95 33.45 29.45Q33.45 25.65 30.725 23.05Q28 20.45 24.15 20.45Q20.3 20.45 17.6 23.15Q14.9 25.85 14.9 29.65Q14.9 33.65 16.15 36.625Q17.4 39.6 20.25 42.55Q20.6 42.9 20.6 43.25Q20.6 43.6 20.4 43.85Q20.15 44.2 19.625 44.175Q19.1 44.15 18.75 43.8Q15.9 40.8 14.425 37.35Q12.95 33.9 12.95 29.65Q12.95 25.05 16.2 21.8Q19.45 18.55 24.15 18.55ZM24.15 28.45Q24.6 28.45 24.85 28.75Q25.1 29.05 25.1 29.5Q25.1 33.9 27.975 36.2Q30.85 38.5 34.85 38.5Q35.35 38.5 36 38.4Q36.65 38.3 37.2 38.3Q37.6 38.3 37.875 38.55Q38.15 38.8 38.1 39.1Q38.1 39.5 37.925 39.725Q37.75 39.95 37.45 40.05Q36.75 40.3 36.025 40.35Q35.3 40.4 34.85 40.4Q30 40.4 26.6 37.575Q23.2 34.75 23.2 29.5Q23.2 29.05 23.45 28.75Q23.7 28.45 24.15 28.45ZM24.15 23.5Q26.7 23.5 28.5 25.225Q30.3 26.95 30.3 29.45Q30.3 31.2 31.525 32.4Q32.75 33.6 34.5 33.6Q36.2 33.6 37.4 32.4Q38.6 31.2 38.6 29.45Q38.6 23.6 34.35 19.625Q30.1 15.65 24.1 15.65Q18.1 15.65 13.9 19.725Q9.7 23.8 9.7 29.7Q9.7 31.55 9.975 33.35Q10.25 35.15 10.9 36.85Q11.05 37.35 10.925 37.65Q10.8 37.95 10.45 38.1Q10.05 38.25 9.65 38.15Q9.25 38.05 9.05 37.5Q8.55 36.05 8.175 34.025Q7.8 32 7.8 29.65Q7.8 23.1 12.625 18.325Q17.45 13.55 24.15 13.55Q30.95 13.55 35.75 18.175Q40.55 22.8 40.55 29.45Q40.55 31.95 38.8 33.75Q37.05 35.55 34.5 35.55Q31.9 35.55 30.1 33.825Q28.3 32.1 28.3 29.65Q28.3 27.9 27.1 26.65Q25.9 25.4 24.15 25.4Q22.45 25.4 21.225 26.65Q20 27.9 20 29.65Q20 34.75 22.9 38.225Q25.8 41.7 31.1 42.9Q31.55 42.95 31.725 43.275Q31.9 43.6 31.8 43.95Q31.75 44.35 31.45 44.55Q31.15 44.75 30.55 44.65Q24.7 43.45 21.375 39.375Q18.05 35.3 18.05 29.65Q18.05 27.1 19.825 25.3Q21.6 23.5 24.15 23.5Z'
      />
    </g>
  ),
});

================
File: Client/src/components/menu/ItemContent.js
================
// chakra imports
import { Icon, Flex, Text, useColorModeValue } from "@chakra-ui/react";
import { MdUpgrade } from "react-icons/md";
import React from "react";

export function ItemContent(props) {
  const textColor = useColorModeValue("navy.700", "white");
  return (
    <>
      <Flex
        justify='center'
        align='center'
        borderRadius='16px'
        minH={{ base: "60px", md: "70px" }}
        h={{ base: "60px", md: "70px" }}
        minW={{ base: "60px", md: "70px" }}
        w={{ base: "60px", md: "70px" }}
        me='14px'
        bg='linear-gradient(135deg, #868CFF 0%, #4318FF 100%)'>
        <Icon as={MdUpgrade} color='white' w={8} h={14} />
      </Flex>
      <Flex flexDirection='column'>
        <Text
          mb='5px'
          fontWeight='bold'
          color={textColor}
          fontSize={{ base: "md", md: "md" }}>
          New Update: {props.info}
        </Text>
        <Flex alignItems='center'>
          <Text
            fontSize={{ base: "sm", md: "sm" }}
            lineHeight='100%'
            color={textColor}>
            A new update for your downloaded item is available!
          </Text>
        </Flex>
      </Flex>
    </>
  );
}

================
File: Client/src/components/navbar/searchBar/SearchBar.js
================
import React from "react";
import {
  IconButton,
  Input,
  InputGroup,
  InputLeftElement,
  useColorModeValue,
} from "@chakra-ui/react";
import { SearchIcon } from "@chakra-ui/icons";
export function SearchBar(props) {
  // Pass the computed styles into the `__css` prop
  const { variant, background, children, placeholder, borderRadius, ...rest } =
    props;
  // Chakra Color Mode
  const searchIconColor = useColorModeValue("gray.700", "white");
  const inputBg = useColorModeValue("secondaryGray.300", "navy.900");
  const inputText = useColorModeValue("gray.700", "gray.100");
  return (
    <InputGroup w={{ base: "100%", md: "200px" }} {...rest}>
      <InputLeftElement
        children={
          <IconButton
            bg='inherit'
            borderRadius='inherit'
            _hover='none'
            _active={{
              bg: "inherit",
              transform: "none",
              borderColor: "transparent",
            }}
            _focus={{
              boxShadow: "none",
            }}
            icon={
              <SearchIcon color={searchIconColor} w='15px' h='15px' />
            }></IconButton>
        }
      />
      <Input
        variant='search'
        fontSize='sm'
        bg={background ? background : inputBg}
        color={inputText}
        fontWeight='500'
        _placeholder={{ color: "gray.400", fontSize: "14px" }}
        borderRadius={borderRadius ? borderRadius : "30px"}
        placeholder={placeholder ? placeholder : "Search..."}
      />
    </InputGroup>
  );
}

================
File: Client/src/components/navbar/NavbarAdmin.js
================
// Chakra Imports
import { Box, Flex, Heading, Image, Link, Text, useColorModeValue } from '@chakra-ui/react';
import AdminNavbarLinks from 'components/navbar/NavbarLinksAdmin';
import PropTypes from 'prop-types';
import { useEffect, useState } from 'react';

import { AiOutlineMenuUnfold } from "react-icons/ai";
import { AiOutlineMenuFold } from "react-icons/ai";
import { useDispatch, useSelector } from 'react-redux';
import { fetchImage } from '../../redux/slices/imageSlice';

export default function AdminNavbar(props) {
	const [scrolled, setScrolled] = useState(false);

	useEffect(() => {
		window.addEventListener('scroll', changeNavbar);

		return () => {
			window.removeEventListener('scroll', changeNavbar);
		};
	});

	const { secondary, message, brandText, under, setOpenSidebar, openSidebar, largeLogo, routes } = props;
	// Here are all the props that may change depending on navbar's type or state.(secondary, variant, scrolled)
	let mainText = useColorModeValue('navy.700', 'white');
	let secondaryText = useColorModeValue('gray.700', 'white');
	let navbarPosition = 'fixed';
	let navbarFilter = 'none';
	let navbarBackdrop = 'blur(20px)';
	let navbarShadow = 'none';
	let navbarBg = useColorModeValue('#fff', 'rgba(11,20,55,0.5)');
	let navbarBorder = 'transparent';
	let secondaryMargin = '-9px';
	let paddingX = '15px';
	let gap = '0px';
	let size = "sm";
	const changeNavbar = () => {
		if (window.scrollY > 1) {
			setScrolled(true);
		} else {
			setScrolled(false);
		}
	};
	return (
		<Box
			position={navbarPosition}
			boxShadow={navbarShadow}
			bg={navbarBg}
			borderColor={navbarBorder}
			filter={navbarFilter}
			backdropFilter={navbarBackdrop}
			backgroundPosition='center'
			backgroundSize='cover'
			// borderRadius='16px'
			borderWidth='1.5px'
			borderStyle='solid'
			zIndex={1}
			transitionDelay='0s, 0s, 0s, 0s'
			transitionDuration=' 0.25s, 0.25s, 0.25s, 0s'
			transition-property='box-shadow, background-color, filter, border'
			transitionTimingFunction='linear, linear, linear, linear'
			alignItems={{ xl: 'center' }}
			display={secondary ? 'block' : 'flex'}
			minH='75px'
			justifyContent={{ xl: 'center' }}
			lineHeight='25.6px'
			mx='auto'
			mt={secondaryMargin}
			pb='6px'
			right={{ base: '0px' }}
			// right={{ base: '12px', md: '30px', lg: '30px', xl: '30px' }}
			px={{
				sm: paddingX,
				md: '10px'
			}}
			ps={{
				xl: '12px'
			}}
			pt='8px'
			top={{ base: '0px' }}
			w={{
				base: '100vw'
				// base: 'calc(100vw - 0%)',
				// md: 'calc(100vw - 0%)',
				// lg: 'calc(100vw - 0%)',
				// xl: openSidebar === true ? 'calc(100vw - 286px)' : 'calc(100vw - 80px)',
				// '2xl': openSidebar === true ? 'calc(100vw - 286px)' : 'calc(100vw - 80px)'
			}}
			sx={{ boxShadow: '14px 17px 40px 4px rgba(112, 144, 176, 0.08)' }}
		>
			<Flex
				w='100%'
				flexDirection={{
					sm: 'column',
					md: 'row'
				}}
				alignItems={{ xl: 'center' }}
				mb={gap}>
				<Box
					//  mb={{ sm: '8px', md: '10px' }} 
					//  pt="15px"
					display={"flex"} alignItems={"center"}>
					{/*
					<Breadcrumb>
						<BreadcrumbItem color={secondaryText} fontSize='sm' mb='5px'>
							<BreadcrumbLink as={rrd.Link} to='/admin/default' color={secondaryText}>
								<AiTwotoneHome />
							</BreadcrumbLink>
						</BreadcrumbItem>

						{under?.under && <BreadcrumbItem color={secondaryText} fontSize='sm' mb='5px'>
							<BreadcrumbLink as={rrd.Link} to={`${under.both === true ? '' : under.layout + '/'}${under.under}`} color={secondaryText}>
								{under.parentName}
							</BreadcrumbLink>
						</BreadcrumbItem>}


						<BreadcrumbItem color={secondaryText} fontSize='sm' mb='5px'>
							<BreadcrumbLink as={rrd.Link} to='#' color={secondaryText}>
								{brandText}
							</BreadcrumbLink>
						</BreadcrumbItem>

					</Breadcrumb>
					*/}
					<Flex me={openSidebar ? "" : "5"} mx={openSidebar ? "14" : "1"} display={{ sm: "none", xl: "flex" }}>
						{largeLogo && largeLogo[0]?.logoLgImg || largeLogo && largeLogo[0]?.logoSmImg ? <Image
							style={{ width: openSidebar ? "165px" : "60px", height: '52px', objectFit: "contain" }}
							src={openSidebar === true ? largeLogo[0]?.logoLgImg : largeLogo[0]?.logoSmImg} // Set the source path of your image
							alt="Logo" // Set the alt text for accessibility
							cursor="pointer"
							onClick={() => !props.from && setOpenSidebar(!openSidebar)}
							userSelect="none"
							my={2}
						/> : <Heading my={4} style={{ width: openSidebar ? "165px" : "60px", height: '52px', objectFit: "contain" }}
							cursor={"pointer"} onClick={() => !props.from && setOpenSidebar(!openSidebar)} userSelect={"none"}>{openSidebar === true ? "Prolink" : "Pr"}</Heading>}
					</Flex>
					<Box display={{ sm: "none", xl: "flex" }} ms={openSidebar ? "" : "3"} onClick={() => setOpenSidebar(!openSidebar)} style={{ fontSize: "25px" }}>{openSidebar ? <AiOutlineMenuFold /> : <AiOutlineMenuUnfold />}</Box>
					<Link
						color={mainText}
						display={{ sm: "flex", xl: "none" }}
					>
						{largeLogo && largeLogo[0]?.logoLgImg ? <Image
							style={{ width: "100%", height: '52px' }}
							src={largeLogo[0]?.logoLgImg}
							alt="Logo"
							cursor="pointer"
							userSelect="none"
							my={2}
						/> : <Heading my={4}
							cursor={"pointer"} userSelect={"none"}>{openSidebar === true ? "Prolink" : "Pr"}</Heading>}
					</Link>

					<Link
						color={mainText}
						href='#'
						pt="2px"
						bg='inherit'
						ps="30px"
						display={{ sm: "none", xl: "flex" }}
						borderRadius='inherit'
						fontWeight='bold'
						fontSize='34px'
						textTransform={"capitalize"}
						_hover={{ color: { mainText } }}
						_active={{
							bg: 'inherit',
							transform: 'none',
							borderColor: 'transparent'
						}}
						_focus={{
							boxShadow: 'none'
						}}>
						{brandText}
					</Link>
				</Box>
				<Box ms='auto' w={{ sm: '100%', md: 'unset' }}>
					<AdminNavbarLinks
						setOpenSidebar={setOpenSidebar}
						openSidebar={openSidebar}
						onOpen={props.onOpen}
						logoText={props.logoText}
						secondary={props.secondary}
						fixed={props.fixed}
						scrolled={scrolled}
						routes={routes}
					/>
				</Box>
			</Flex>
			{secondary ? <Text color='white'>{message}</Text> : null}
		</Box>
	);
}

AdminNavbar.propTypes = {
	brandText: PropTypes.string,
	variant: PropTypes.string,
	secondary: PropTypes.bool,
	fixed: PropTypes.bool,
	onOpen: PropTypes.func
};

================
File: Client/src/components/navbar/NavbarAuth.js
================
import PropTypes from "prop-types";
import React from "react";
import { NavLink } from "react-router-dom";

// Chakra imports
import {
  Box,
  Button,
  Flex,
  Grid,
  HStack,
  Icon,
  Link,
  Menu,
  MenuList,
  Stack,
  Text,
  useColorModeValue,
  useColorMode,
  useDisclosure,
  SimpleGrid,
} from "@chakra-ui/react";

// Custom components
import IconBox from "components/icons/IconBox";
import { HorizonLogo } from "components/icons/Icons";
import { SidebarResponsive } from "components/sidebar/Sidebar";
import { SidebarContext } from "contexts/SidebarContext";

// Assets
import { GoChevronDown, GoChevronRight } from "react-icons/go";
import routes from "routes.js";

export default function AuthNavbar(props) {
  const { logo, logoText, secondary, sidebarWidth, ...rest } = props;
  const { colorMode } = useColorMode();
  // Menu States
  const {
    isOpen: isOpenAuth,
    onOpen: onOpenAuth,
    onClose: onCloseAuth,
  } = useDisclosure();
  const {
    isOpen: isOpenDashboards,
    onOpen: onOpenDashboards,
    onClose: onCloseDashboards,
  } = useDisclosure();
  const {
    isOpen: isOpenMain,
    onOpen: onOpenMain,
    onClose: onCloseMain,
  } = useDisclosure();
  const {
    isOpen: isOpenNft,
    onOpen: onOpenNft,
    onClose: onCloseNft,
  } = useDisclosure();
  // Menus
  function getLinks(routeName) {
    let foundRoute = routes.filter(function (route) {
      return route.items && route.name === routeName;
    });
    return foundRoute[0].items;
  }
  function getLinksCollapse(routeName) {
    let foundRoute = routes.filter(function (route) {
      return route.items && route.name === routeName;
    });

    let foundLinks = foundRoute[0].items.filter(function (link) {
      return link.collapse === true;
    });

    return foundLinks;
  }
  let authObject = getLinksCollapse("Authentication");
  let mainObject = getLinksCollapse("Main Pages");
  let dashboardsObject = getLinks("Dashboards");
  let nftsObject = getLinks("NFTs");
  let logoColor = useColorModeValue("white", "white");
  // Chakra color mode

  const textColor = useColorModeValue("navy.700", "white");
  let menuBg = useColorModeValue("white", "navy.900");
  let mainText = "#fff";
  let navbarBg = "none";
  let navbarShadow = "initial";
  let bgButton = "white";
  let colorButton = "brand.500";
  let navbarPosition = "absolute";

  let brand = (
    <Link
      href={`${process.env.PUBLIC_URL}/#/`}
      target='_blank'
      display='flex'
      lineHeight='100%'
      fontWeight='bold'
      justifyContent='center'
      alignItems='center'
      color={mainText}>
      <Stack direction='row' spacing='12px' align='center' justify='center'>
        <HorizonLogo h='26px' w='175px' color={logoColor} />
      </Stack>
      <Text fontsize='sm' mt='3px'>
        {logoText}
      </Text>
    </Link>
  );
  if (props.secondary === true) {
    brand = (
      <Link
        minW='175px'
        href={`${process.env.PUBLIC_URL}/#/`}
        target='_blank'
        display='flex'
        lineHeight='100%'
        fontWeight='bold'
        justifyContent='center'
        alignItems='center'
        color={mainText}>
        <HorizonLogo h='26px' w='175px' my='32px' color={logoColor} />
      </Link>
    );
    // mainText = useColorModeValue("gray.700", "gray.200");
    // navbarBg = useColorModeValue("white", "navy.800");
    // navbarShadow = useColorModeValue(
    //   "0px 7px 23px rgba(0, 0, 0, 0.05)",
    //   "none"
    // );
    // bgButton = useColorModeValue("gray.700", "white");
    // colorButton = useColorModeValue("white", "gray.700");
    // navbarPosition = "fixed";
  }
  const createNftsLinks = (routes) => {
    return routes.map((link, key) => {
      return (
        <NavLink
          key={key}
          to={link.layout + link.path}
          style={{ maxWidth: "max-content", marginLeft: "40px" }}>
          <Text color='gray.400' fontSize='sm' fontWeight='normal'>
            {link.name}
          </Text>
        </NavLink>
      );
    });
  };
  const createDashboardsLinks = (routes) => {
    return routes.map((link, key) => {
      return (
        <NavLink
          key={key}
          to={link.layout + link.path}
          style={{ maxWidth: "max-content", marginLeft: "40px" }}>
          <Text color='gray.400' fontSize='sm' fontWeight='normal'>
            {link.name}
          </Text>
        </NavLink>
      );
    });
  };
  const createMainLinks = (routes) => {
    return routes.map((link, key) => {
      if (link.collapse === true) {
        return (
          <Stack key={key} direction='column' maxW='max-content'>
            <Stack
              direction='row'
              spacing='0px'
              align='center'
              cursor='default'>
              <IconBox bg='brand.500' h='30px' w='30px' me='10px'>
                {link.icon}
              </IconBox>
              <Text fontWeight='bold' fontSize='md' me='auto' color={textColor}>
                {link.name}
              </Text>
              <Icon
                as={GoChevronRight}
                color={mainText}
                w='14px'
                h='14px'
                fontWeight='2000'
              />
            </Stack>
            <Stack direction='column' bg={menuBg}>
              {createMainLinks(link.items)}
            </Stack>
          </Stack>
        );
      } else {
        return (
          <NavLink
            key={key}
            to={link.layout + link.path}
            style={{ maxWidth: "max-content", marginLeft: "40px" }}>
            <Text color='gray.400' fontSize='sm' fontWeight='normal'>
              {link.name}
            </Text>
          </NavLink>
        );
      }
    });
  };
  const createAuthLinks = (routes) => {
    return routes.map((link, key) => {
      if (link.collapse === true) {
        return (
          <Stack key={key} direction='column' my='auto' maxW='max-content'>
            <Stack
              direction='row'
              spacing='0px'
              align='center'
              cursor='default'
              w='max-content'>
              <IconBox bg='brand.500' h='30px' w='30px' me='10px'>
                {link.icon}
              </IconBox>
              <Text fontWeight='bold' fontSize='md' me='auto' color={textColor}>
                {link.name}
              </Text>
              <Icon
                as={GoChevronRight}
                color={mainText}
                w='14px'
                h='14px'
                fontWeight='2000'
              />
            </Stack>
            <Stack direction='column' bg={menuBg}>
              {createAuthLinks(link.items)}
            </Stack>
          </Stack>
        );
      } else {
        return (
          <NavLink
            key={key}
            to={link.layout + link.path}
            style={{ maxWidth: "max-content", marginLeft: "40px" }}>
            <Text color='gray.400' fontSize='sm' fontWeight='normal'>
              {link.name}
            </Text>
          </NavLink>
        );
      }
    });
  };
  const linksAuth = (
    <HStack display={{ sm: "none", lg: "flex" }} spacing='12px'>
      <Stack
        direction='row'
        spacing='4px'
        align='center'
        color='#fff'
        fontWeight='bold'
        onMouseEnter={onOpenDashboards}
        onMouseLeave={onCloseDashboards}
        cursor='pointer'
        position='relative'>
        <Text fontSize='sm' color={mainText}>
          Dashboards
        </Text>
        <Box>
          <Icon
            mt='8px'
            as={GoChevronDown}
            color={mainText}
            w='14px'
            h='14px'
            fontWeight='2000'
          />
        </Box>
        <Menu isOpen={isOpenDashboards}>
          <MenuList
            bg={menuBg}
            p='22px'
            cursor='default'
            borderRadius='15px'
            position='absolute'
            top='30px'
            left='-10px'>
            <Flex flexWrap='wrap' w='300px' gap='16px'>
              {createDashboardsLinks(dashboardsObject)}
            </Flex>
          </MenuList>
        </Menu>
      </Stack>
      <Stack
        direction='row'
        spacing='4px'
        align='center'
        color='#fff'
        fontWeight='bold'
        onMouseEnter={onOpenAuth}
        onMouseLeave={onCloseAuth}
        cursor='pointer'
        position='relative'>
        <Text fontSize='sm' color={mainText}>
          Authentications
        </Text>
        <Box>
          <Icon
            mt='8px'
            as={GoChevronDown}
            color={mainText}
            w='14px'
            h='14px'
            fontWeight='2000'
          />
        </Box>
        <Menu isOpen={isOpenAuth}>
          <MenuList
            bg={menuBg}
            p='22px'
            cursor='default'
            borderRadius='15px'
            position='absolute'
            top='30px'
            left='-10px'>
            <Flex>
              <SimpleGrid columns='3' gap='10px' minW='500px' me='20px'>
                {createAuthLinks(authObject)}
              </SimpleGrid>
              {/* <Flex
                bg='red'
                direction='column'
                justify='center'
                align='center'
                w='stretch'
                minH='230px'
                borderRadius='15px'>
                <IconBox
                  bg='white'
                  color='white'
                  borderRadius='50%'
                  h='50px'
                  w='50px'
                  mb='12px'>
                  <Icon as={AiFillStar} w='25px' h='25px' color='blue.500' />
                </IconBox>
                <Text
                  fontSize='xl'
                  fontWeight='bold'
                  color='#fff'
                  maxW='80%'
                  textAlign='center'>
                  Explore our utilities pages
                </Text>
              </Flex> */}
            </Flex>
          </MenuList>
        </Menu>
      </Stack>
      <Stack
        direction='row'
        spacing='4px'
        align='center'
        color='#fff'
        fontWeight='bold'
        onMouseEnter={onOpenMain}
        onMouseLeave={onCloseMain}
        cursor='pointer'
        position='relative'>
        <Text fontSize='sm' color={mainText}>
          Main Pages
        </Text>
        <Box>
          <Icon
            mt='8px'
            as={GoChevronDown}
            color={mainText}
            w='14px'
            h='14px'
            fontWeight='2000'
          />
        </Box>
        <Menu isOpen={isOpenMain}>
          <MenuList
            bg={menuBg}
            p='22px'
            cursor='default'
            borderRadius='15px'
            position='absolute'
            top='30px'
            left='-10px'>
            <Flex flexWrap='wrap' align='start' w='500px' gap='16px'>
              {createMainLinks(mainObject)}
            </Flex>
          </MenuList>
        </Menu>
      </Stack>
      <Stack
        direction='row'
        spacing='4px'
        align='center'
        color='#fff'
        fontWeight='bold'
        onMouseEnter={onOpenNft}
        onMouseLeave={onCloseNft}
        cursor='pointer'
        position='relative'>
        <Text fontSize='sm' color={mainText}>
          NFTs
        </Text>
        <Box>
          <Icon
            mt='8px'
            as={GoChevronDown}
            color={mainText}
            w='14px'
            h='14px'
            fontWeight='2000'
          />
        </Box>
        <Menu isOpen={isOpenNft}>
          <MenuList
            bg={menuBg}
            p='22px'
            minW='350px'
            cursor='default'
            borderRadius='15px'
            position='absolute'
            top='30px'
            left='-10px'>
            <Grid templateColumns='repeat(2, 1fr)' gap='16px'>
              {createNftsLinks(nftsObject)}
            </Grid>
          </MenuList>
        </Menu>
      </Stack>
    </HStack>
  );

  return (
    <SidebarContext.Provider value={{ sidebarWidth }}>
      <Flex
        position={navbarPosition}
        top='16px'
        left='50%'
        transform='translate(-50%, 0px)'
        background={navbarBg}
        boxShadow={navbarShadow}
        borderRadius='15px'
        px='16px'
        py='22px'
        mx='auto'
        width='1044px'
        maxW='90%'
        alignItems='center'
        zIndex='3'>
        <Flex w='100%' justifyContent={{ sm: "start", lg: "space-between" }}>
          {brand}
          <Box
            ms={{ base: "auto", lg: "0px" }}
            display={{ base: "flex", lg: "none" }}
            justifyContent='center'
            alignItems='center'>
            <SidebarResponsive
              logo={
                <Stack
                  direction='row'
                  spacing='12px'
                  align='center'
                  justify='center'>
                  <Box
                    w='1px'
                    h='20px'
                    bg={colorMode === "dark" ? "white" : "gray.700"}
                  />
                </Stack>
              }
              logoText={props.logoText}
              secondary={props.secondary}
              routes={routes}
              {...rest}
            />
          </Box>
          {linksAuth}
          <Link href='https://www.horizon-ui.com/pro'>
            <Button
              bg={bgButton}
              color={colorButton}
              fontSize='xs'
              variant='no-effects'
              borderRadius='50px'
              px='45px'
              display={{
                sm: "none",
                lg: "flex",
              }}>
              Buy Now
            </Button>
          </Link>
        </Flex>
      </Flex>
    </SidebarContext.Provider>
  );
}

AuthNavbar.propTypes = {
  color: PropTypes.oneOf(["primary", "info", "success", "warning", "danger"]),
  brandText: PropTypes.string,
};

================
File: Client/src/components/navbar/NavbarExample.js
================
// Chakra imports
import {
  Box,
  Button,
  Flex,
  Grid,
  HStack,
  Icon,
  Link,
  Menu,
  MenuItem,
  MenuList,
  MenuButton,
  Stack,
  Text,
  useColorModeValue,
  useColorMode,
  useDisclosure,
  SimpleGrid,
} from "@chakra-ui/react";
import IconBox from "components/icons/IconBox";
import { SidebarResponsive } from "components/sidebar/Sidebar";
import PropTypes from "prop-types";
import React from "react";
import { AiFillStar } from "react-icons/ai";
import { GoChevronDown, GoChevronRight } from "react-icons/go";
import { NavLink } from "react-router-dom";
import { SidebarContext } from "contexts/SidebarContext";
import routes from "routes.js";

export default function AuthNavbar(props) {
  const { logo, logoText, secondary, sidebarWidth, ...rest } = props;
  const { colorMode } = useColorMode();
  // Menu States
  const {
    isOpen: isOpenPages,
    onOpen: onOpenPages,
    onClose: onClosePages,
  } = useDisclosure();

  const {
    isOpen: isOpenAuth,
    onOpen: onOpenAuth,
    onClose: onCloseAuth,
  } = useDisclosure();

  const {
    isOpen: isOpenApplication,
    onOpen: onOpenApplication,
    onClose: onCloseApplication,
  } = useDisclosure();

  const {
    isOpen: isOpenEcommerce,
    onOpen: onOpenEcommerce,
    onClose: onCloseEcommerce,
  } = useDisclosure();

  // Menus
  let authObject = {};
  routes.map((route) => {
    if (route.items) {
      authObject = route.items.find((link) => link.name === "Authentication");
    }
  });

  let applicationsObject = {};
  routes.map((route) => {
    if (route.items) {
      applicationsObject = route.items.find(
        (link) => link.name === "Applications"
      );
    }
  });

  let ecommerceObject = {};
  routes.map((route) => {
    if (route.items) {
      ecommerceObject = route.items.find((link) => link.name === "Ecommerce");
    }
  });

  let extraArr = [];
  routes.map((route) => {
    route.items.map((item) => {
      if (item.items && item.name === "Pages") {
        extraArr = item.items.filter((link) => !link.collapse);
      }
    });
  });

  // Chakra color mode

  const textColor = useColorModeValue("gray.700", "#fff");
  let menuBg = useColorModeValue("white", "navy.900");
  let mainText = "#fff";
  let navbarBg = "none";
  let navbarShadow = "initial";
  let bgButton = useColorModeValue("white", "navy.900");
  let colorButton = useColorModeValue("gray.700", "white");
  let navbarPosition = "absolute";

  let brand = (
    <Link
      href={`${process.env.PUBLIC_URL}/#/`}
      target='_blank'
      display='flex'
      lineHeight='100%'
      fontWeight='bold'
      justifyContent='center'
      alignItems='center'
      color={mainText}>
      <Text fontsize='sm' mt='3px'>
        {logoText}
      </Text>
    </Link>
  );
  if (props.secondary === true) {
    brand = (
      <Link
        href={`${process.env.PUBLIC_URL}/#/`}
        target='_blank'
        display='flex'
        lineHeight='100%'
        fontWeight='bold'
        justifyContent='center'
        alignItems='center'
        color={mainText}>
        <Stack direction='row' spacing='12px' align='center' justify='center'>
          <Box
            w='1px'
            h='20px'
          //  bg={useColorModeValue("gray.700", "white")}
          />
        </Stack>
        <Text fontsize='sm' mt='3px'>
          {logoText}
        </Text>
      </Link>
    );
    // mainText = useColorModeValue("gray.700", "gray.200");
    // navbarBg = useColorModeValue("white", "navy.800");
    // navbarShadow = useColorModeValue(
    //   "0px 7px 23px rgba(0, 0, 0, 0.05)",
    //   "none"
    // );
    // bgButton = useColorModeValue("gray.700", "white");
    // colorButton = useColorModeValue("white", "gray.700");
    // navbarPosition = "fixed";
  }

  const createPagesLinks = (routes) => {
    return routes.map((link) => {
      if (
        link.name === "Applications" ||
        link.name === "Ecommerce" ||
        link.name === "Authentication" ||
        link.name === "RTL" ||
        link.name === "Widgets" ||
        link.name === "Charts" ||
        link.name === "Alerts"
      ) {
        return;
      }
      if (link.name === "Pricing Page") {
        return (
          <Stack direction='column'>
            <Stack
              direction='row'
              spacing='6px'
              align='center'
              mb='6px'
              cursor='default'>
              <IconBox bg='blue.500' color='white' h='30px' w='30px'>
                {/* <RocketIcon color='inherit' /> */}
              </IconBox>
              <Text fontWeight='bold' fontSize='sm' color={textColor}>
                Extra
              </Text>
            </Stack>
            {createExtraLinks(extraArr)}
          </Stack>
        );
      }
      if (link.authIcon) {
        return (
          <Stack direction='column'>
            <Stack
              direction='row'
              spacing='6px'
              align='center'
              mb='6px'
              cursor='default'>
              <IconBox bg='blue.500' color='white' h='30px' w='30px'>
                {link.authIcon}
              </IconBox>
              <Text fontWeight='bold' fontSize='sm' color={textColor}>
                {link.name}
              </Text>
            </Stack>
            {createPagesLinks(link.items)}
          </Stack>
        );
      } else {
        if (link.component) {
          return (
            <NavLink to={link.layout + link.path}>
              <MenuItem
                ps='36px'
                py='0px'
                _hover={{ boxShadow: "none", bg: "none" }}
                borderRadius='12px'>
                <Text color='gray.400' fontSize='sm' fontWeight='normal'>
                  {link.name}
                </Text>
              </MenuItem>
            </NavLink>
          );
        } else {
          return <>{createPagesLinks(link.items)}</>;
        }
      }
    });
  };

  const createExtraLinks = (routes) => {
    return routes.map((link) => {
      return (
        <NavLink to={link.layout + link.path}>
          <MenuItem
            ps='36px'
            py='0px'
            _hover={{ boxShadow: "none", bg: "none" }}
            borderRadius='12px'>
            <Text color='gray.400' fontSize='sm' fontWeight='normal'>
              {link.name}
            </Text>
          </MenuItem>
        </NavLink>
      );
    });
  };

  const createAuthLinks = (routes) => {
    return routes.map((link) => {
      if (link.authIcon && link.collapse === true) {
        return (
          <Stack direction='column' my='auto'>
            <Stack
              direction='row'
              spacing='0px'
              align='center'
              cursor='default'>
              <Text fontWeight='bold' fontSize='sm' me='auto' color={textColor}>
                {link.name}
              </Text>
              <Icon
                as={GoChevronRight}
                color={mainText}
                w='14px'
                h='14px'
                fontWeight='2000'
              />
            </Stack>

            <Flex direction='column' bg={menuBg}>
              {createAuthLinks(link.items)}
            </Flex>
          </Stack>
        );
      } else {
        return (
          <NavLink to={link.layout + link.path}>
            <Text color='red' fontSize='sm' fontWeight='normal'>
              {link.name}
            </Text>
          </NavLink>
        );
      }
    });
  };

  const createApplicationLinks = (routes) => {
    return routes.map((link) => {
      return (
        <NavLink to={link.layout + link.path}>
          <Stack direction='row' spacing='12px' align='center' cursor='pointer'>
            <IconBox bg='blue.500' color='white' h='30px' w='30px'>
              {link.authIcon}
            </IconBox>
            <Text fontWeight='bold' fontSize='sm' color={textColor}>
              {link.name}
            </Text>
          </Stack>
        </NavLink>
      );
    });
  };

  const createEcommerceLinks = (routes) => {
    return routes.map((link) => {
      if (link.authIcon) {
        return (
          <Stack direction='column'>
            <Stack
              direction='row'
              spacing='6px'
              align='center'
              mb='6px'
              cursor='default'>
              <IconBox bg='blue.500' color='white' h='30px' w='30px'>
                {link.authIcon}
              </IconBox>
              <Text fontWeight='bold' fontSize='sm' color={textColor}>
                {link.name}
              </Text>
            </Stack>
            {createPagesLinks(link.items)}
          </Stack>
        );
      } else {
        if (link.component) {
          return (
            <NavLink to={link.layout + link.path}>
              <MenuItem
                ps='36px'
                py='0px'
                _hover={{ boxShadow: "none", bg: "none" }}
                borderRadius='12px'>
                <Text color='gray.400' fontSize='sm' fontWeight='normal'>
                  {link.name}
                </Text>
              </MenuItem>
            </NavLink>
          );
        } else {
          return <>{createPagesLinks(link.items)}</>;
        }
      }
    });
  };

  const linksAuth = (
    <HStack display={{ sm: "none", lg: "flex" }} spacing='12px'>
      <Stack
        direction='row'
        spacing='4px'
        align='center'
        color='#fff'
        fontWeight='bold'
        onMouseEnter={onOpenPages}
        onMouseLeave={onClosePages}
        cursor='pointer'
        position='relative'>
        <Text fontSize='sm' color={mainText}>
          Pages
        </Text>
        <Icon
          as={GoChevronDown}
          color={mainText}
          w='14px'
          h='14px'
          fontWeight='2000'
        />
        <Menu isOpen={isOpenPages}>
          <MenuList
            bg={menuBg}
            p='22px'
            minW='550px'
            cursor='default'
            borderRadius='15px'
            position='absolute'
            top='30px'
            left='-10px'>
            <Grid templateColumns='repeat(3, 1fr)' gap='16px'>
              {createPagesLinks(routes)}
            </Grid>
          </MenuList>
        </Menu>
      </Stack>
      <Stack
        direction='row'
        spacing='4px'
        align='center'
        color='#fff'
        fontWeight='bold'
        onMouseEnter={onOpenAuth}
        onMouseLeave={onCloseAuth}
        cursor='pointer'
        position='relative'>
        <Text fontSize='sm' color={mainText}></Text>
        <Icon
          as={GoChevronDown}
          color={mainText}
          w='14px'
          h='14px'
          fontWeight='2000'
        />
        <Menu isOpen={isOpenAuth}>
          <MenuList
            bg={menuBg}
            p='22px'
            minW='450px'
            cursor='default'
            borderRadius='15px'
            position='absolute'
            top='30px'
            left='-10px'>
            <Stack direction='row' spacing='24px'>
              <Flex
                direction='column'
                justify='center'
                align='center'
                // bgImage={bgCard}
                minW='200px'
                maxW='200px'
                minH='230px'
                borderRadius='15px'>
                <IconBox
                  bg='white'
                  color='white'
                  borderRadius='50%'
                  h='50px'
                  w='50px'
                  mb='12px'>
                  <Icon as={AiFillStar} w='25px' h='25px' color='blue.500' />
                </IconBox>
                <Text
                  fontSize='xl'
                  fontWeight='bold'
                  color='#fff'
                  maxW='80%'
                  textAlign='center'>
                  Explore our utilities pages
                </Text>
              </Flex>
              <SimpleGrid templateColumns='1fr' width='100%'>
                {createAuthLinks(authObject.items)}
              </SimpleGrid>
            </Stack>
          </MenuList>
        </Menu>
      </Stack>
      <Stack
        direction='row'
        spacing='4px'
        align='center'
        color='#fff'
        fontWeight='bold'
        onMouseEnter={onOpenApplication}
        onMouseLeave={onCloseApplication}
        cursor='pointer'
        position='relative'>
        <Text fontSize='sm' color={mainText}>
          Application
        </Text>
        <Icon
          as={GoChevronDown}
          color={mainText}
          w='14px'
          h='14px'
          fontWeight='2000'
        />
        <Menu isOpen={isOpenApplication}>
          <MenuList
            bg={menuBg}
            p='22px'
            cursor='default'
            borderRadius='15px'
            position='absolute'
            top='30px'
            left='-10px'>
            <Grid templateColumns='1fr' gap='16px'>
              {createApplicationLinks(applicationsObject.items)}
            </Grid>
          </MenuList>
        </Menu>
      </Stack>
      <Stack
        direction='row'
        spacing='4px'
        align='center'
        color='#fff'
        fontWeight='bold'
        onMouseEnter={onOpenEcommerce}
        onMouseLeave={onCloseEcommerce}
        cursor='pointer'
        position='relative'>
        <Text fontSize='sm' color={mainText}>
          Ecommerce
        </Text>
        <Icon
          as={GoChevronDown}
          color={mainText}
          w='14px'
          h='14px'
          fontWeight='2000'
        />
        <Menu isOpen={isOpenEcommerce}>
          <MenuList
            bg={menuBg}
            p='22px'
            minW='350px'
            cursor='default'
            borderRadius='15px'
            position='absolute'
            top='30px'
            left='-10px'>
            <Grid templateColumns='repeat(2, 1fr)' gap='16px'>
              {createEcommerceLinks(ecommerceObject.items)}
            </Grid>
          </MenuList>
        </Menu>
      </Stack>
    </HStack>
  );

  return (
    <SidebarContext.Provider value={{ sidebarWidth }}>
      <Flex
        position={navbarPosition}
        top='16px'
        left='50%'
        transform='translate(-50%, 0px)'
        background={navbarBg}
        boxShadow={navbarShadow}
        borderRadius='15px'
        px='16px'
        py='22px'
        mx='auto'
        width='1044px'
        maxW='90%'
        alignItems='center'
        zIndex='3'>
        <Flex w='100%' justifyContent={{ sm: "start", lg: "space-between" }}>
          {brand}
          <Box
            ms={{ base: "auto", lg: "0px" }}
            display={{ base: "flex", lg: "none" }}
            justifyContent='center'
            alignItems='center'>
            <SidebarResponsive
              logo={
                <Stack
                  direction='row'
                  spacing='12px'
                  align='center'
                  justify='center'>
                  <Box
                    w='1px'
                    h='20px'
                    bg={colorMode === "dark" ? "white" : "gray.700"}
                  />
                </Stack>
              }
              logoText={props.logoText}
              secondary={props.secondary}
              routes={routes}
              {...rest}
            />
          </Box>
          {linksAuth}
          <Link href='https://www.horizon-ui.com/pro'>
            <Button
              bg={bgButton}
              color={colorButton}
              fontSize='xs'
              variant='no-effects'
              px='30px'
              display={{
                sm: "none",
                lg: "flex",
              }}>
              Buy Now
            </Button>
          </Link>
        </Flex>
      </Flex>
    </SidebarContext.Provider>
  );
}

AuthNavbar.propTypes = {
  color: PropTypes.oneOf(["primary", "info", "success", "warning", "danger"]),
  brandText: PropTypes.string,
};

================
File: Client/src/components/navbar/NavbarLinksAdmin.js
================
// Chakra Imports
import {
	Avatar,
	Button,
	Flex,
	Icon,
	Image,
	Menu,
	MenuButton,
	MenuItem,
	MenuList,
	Text,
	useColorModeValue,
} from "@chakra-ui/react";
// Custom Components
import { ItemContent } from "components/menu/ItemContent";
import { SearchBar } from "components/navbar/searchBar/SearchBar";
import { SidebarResponsive } from "components/sidebar/Sidebar";
import PropTypes from "prop-types";
import { useEffect, useState } from "react";
// Assets
import { MdInfoOutline, MdNotificationsNone } from "react-icons/md";
import { FaEthereum } from "react-icons/fa";
import { Link, useNavigate } from "react-router-dom";
import { getApi } from "services/api";
import { toast } from "react-toastify";
import jwtDecode from "jwt-decode";
import { ThemeEditor } from "./ThemeEditor";
import FixedPlugin from "components/fixedPlugin/FixedPlugin";
import { useDispatch, useSelector } from "react-redux";
export default function HeaderLinks(props) {
	const { secondary, setOpenSidebar, openSidebar, routes } = props;
	// Chakra Color Mode
	const navbarIcon = useColorModeValue("gray.400", "white");
	let menuBg = useColorModeValue("white", "navy.800");
	const textColor = useColorModeValue("secondaryGray.900", "white");
	const textColorBrand = useColorModeValue("brand.700", "brand.400");
	const ethColor = useColorModeValue("gray.700", "white");
	const borderColor = useColorModeValue("#E6ECFA", "rgba(135, 140, 189, 0.3)");
	const ethBg = useColorModeValue("secondaryGray.300", "navy.900");
	const ethBox = useColorModeValue("white", "navy.800");
	const shadow = useColorModeValue(
		"14px 17px 40px 4px rgba(112, 144, 176, 0.18)",
		"14px 17px 40px 4px rgba(112, 144, 176, 0.06)"
	);
	// const borderButton = useColorModeValue('secondaryGray.500', 'whiteAlpha.200');

	// const [loginUser, setLoginUser] = useState();
	const navigate = useNavigate();
	const dispatch = useDispatch();
	const userData = useSelector(state => state.user.user)

	const data = typeof userData === 'string' ? JSON.parse(userData) : userData
	const user = data?.firstName + " " + data?.lastName;
	const userId = JSON.parse(localStorage.getItem("user"))?._id;
	const loginUser = useSelector((state) => state?.user?.user)


	const [isLogoutScheduled, setIsLogoutScheduled] = useState(false);

	const logOut = (message) => {
		localStorage.clear();
		sessionStorage.clear();
		navigate("/auth");
		if (message) {
			toast.error(message);
		} else {
			toast.success("Log out Successfully");
		}
		setIsLogoutScheduled(true);
	};

	useEffect(() => {
		const token =
			localStorage.getItem("token") || sessionStorage.getItem("token");

		if (token) {
			try {
				const decodedToken = jwtDecode(token);
				const currentTime = Date.now() / 1000; // Convert milliseconds to seconds
				if (decodedToken.exp < currentTime) {
					if (!isLogoutScheduled) {
						logOut("Token has expired");
					}
				} else {
					// Schedule automatic logout when the token expires
					const timeToExpire = (decodedToken.exp - currentTime) * 1000; // Convert seconds to milliseconds
					setTimeout(() => {
						if (!isLogoutScheduled) {
							logOut("Token has expired");
						}
					}, timeToExpire);
				}
			} catch (error) {
				console.error("Error decoding token:", error);
			}
		}
	}, [isLogoutScheduled]);

	return (
		<Flex
			w={{ sm: "100%", md: "auto" }}
			alignItems="center"
			justifyContent={"end"}
			flexDirection="row"
			bg={menuBg}
			flexWrap={secondary ? { base: "wrap", md: "nowrap" } : "unset"}
			p="6px"
			mt={2.5}
			borderRadius="30px"
			boxShadow={shadow}
		>
			{/* <SearchBar
				mb={secondary ? { base: "10px", md: "unset" } : "unset"}
				me="10px"
				borderRadius="30px"
			/> */}

			<Flex
				bg={ethBg}
				display={secondary ? "flex" : "none"}
				borderRadius="30px"
				ms="auto"
				p="6px"
				align="center"
				me="6px"
			>
				<Flex
					align="center"
					justify="center"
					bg={ethBox}
					h="29px"
					w="29px"
					borderRadius="30px"
					me="7px"
				>
					<Icon color={ethColor} w="9px" h="14px" as={FaEthereum} />
				</Flex>
				<Text
					w="max-content"
					color={ethColor}
					fontSize="sm"
					fontWeight="700"
					me="6px"
				>
					1,924
					<Text as="span" display={{ base: "none", md: "unset" }}>
						{" "}
						ETH
					</Text>
				</Text>
			</Flex>

			<SidebarResponsive routes={routes} setOpenSidebar={setOpenSidebar} openSidebar={openSidebar} />

			<Menu>
				<MenuButton p="0px">
					<Icon
						mt="6px"
						as={MdNotificationsNone}
						color={navbarIcon}
						w="18px"
						h="18px"
						me="10px"
					/>
				</MenuButton>
				<MenuList
					boxShadow={shadow}
					p="20px"
					borderRadius="20px"
					bg={menuBg}
					border="none"
					mt="22px"
					me={{ base: "30px", md: "unset" }}
					minW={{ base: "unset", md: "400px", xl: "450px" }}
					maxW={{ base: "360px", md: "unset" }}
				>
					<Flex jusitfy="space-between" w="100%" mb="20px">
						<Text fontSize="md" fontWeight="600" color={textColor}>
							Notifications
						</Text>
						<Text
							fontSize="sm"
							fontWeight="500"
							color={textColorBrand}
							ms="auto"
							cursor="pointer"
						>
							Mark all read
						</Text>
					</Flex>
					<Flex flexDirection="column">
						<MenuItem
							_hover={{ bg: "none" }}
							_focus={{ bg: "none" }}
							px="0"
							borderRadius="8px"
							mb="10px"
						>
							<ItemContent info="Horizon UI Dashboard PRO" aName="Alicia" />
						</MenuItem>
						<MenuItem
							_hover={{ bg: "none" }}
							_focus={{ bg: "none" }}
							px="0"
							borderRadius="8px"
							mb="10px"
						>
							<ItemContent
								info="Horizon Design System Free"
								aName="Josh Henry"
							/>
						</MenuItem>
					</Flex>
				</MenuList>
			</Menu>
			{/* <FixedPlugin /> */}
			{/* <ThemeEditor navbarIcon={navbarIcon} /> */}

			<Menu style={{ zIndex: 1500 }}>
				<MenuButton p="0px">
					<Avatar
						_hover={{ cursor: "pointer" }}
						color="white"
						name={user || "Prolink Infotech"}
						bg="#11047A"
						size="sm"
						w="40px"
						h="40px"
					/>
				</MenuButton>
				<MenuList
					boxShadow={shadow}
					p="0px"
					mt="10px"
					borderRadius="20px"
					bg={menuBg}
					border="none"
				>
					<Flex w="100%" mb="0px">
						<Text
							ps="20px"
							pt="16px"
							pb="10px"
							w="100%"
							borderBottom="1px solid"
							borderColor={borderColor}
							fontSize="sm"
							fontWeight="700"
							textTransform={"capitalize"}
							color={textColor}
						>
							👋&nbsp; Hey, {user}
						</Text>
					</Flex>

					<Flex flexDirection="column" p="10px">
						<MenuItem
							_hover={{ bg: "none" }}
							_focus={{ bg: "none" }}
							borderRadius="8px"
							px="14px"
						>
							<Text fontSize="sm" onClick={() => navigate(`/admin/`)}>
								Home
							</Text>
						</MenuItem>

						{loginUser?.role === "superAdmin" &&
							<MenuItem
								_hover={{ bg: "none" }}
								_focus={{ bg: "none" }}
								borderRadius="8px"
								px="14px"
							>
								<Text
									fontSize="sm"
									onClick={() =>
										navigate('/admin-setting')
									}
								>
									Admin Settings
								</Text>
							</MenuItem>}
						<MenuItem
							_hover={{ bg: "none" }}
							_focus={{ bg: "none" }}
							borderRadius="8px"
							px="14px"
						>
							<Text
								fontSize="sm"
								onClick={() =>
									navigate(
										`/userView/${JSON.parse(localStorage.getItem("user"))?._id}`
									)
								}
							>
								Profile Settings
							</Text>
						</MenuItem>
						{/*<MenuItem _hover={{ bg: 'none' }} _focus={{ bg: 'none' }} borderRadius="8px" px="14px">
							<Text fontSize="sm">Newsletter Settings</Text>
						</MenuItem> */}
						<MenuItem
							_hover={{ bg: "none" }}
							onClick={logOut}
							_focus={{ bg: "none" }}
							color="red.400"
							borderRadius="8px"
							px="14px"
						>
							<Text fontSize="sm">Log out</Text>
						</MenuItem>
					</Flex>
				</MenuList>
			</Menu>
		</Flex>
	);
}

HeaderLinks.propTypes = {
	variant: PropTypes.string,
	fixed: PropTypes.bool,
	secondary: PropTypes.bool,
	onOpen: PropTypes.func,
};

================
File: Client/src/components/navbar/NavbarRTL.js
================
// Chakra Imports
import {
  Box,
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  Flex,
  Link,
  Text,
  useColorModeValue,
} from "@chakra-ui/react";
import PropTypes from "prop-types";
import React, { useState, useEffect } from "react";
import AdminNavbarLinks from "components/navbar/NavbarLinksAdmin";

export default function AdminNavbar(props) {
  const [scrolled, setScrolled] = useState(false);

  useEffect(() => {
    window.addEventListener("scroll", changeNavbar);

    return () => {
      window.removeEventListener("scroll", changeNavbar);
    };
  });

  const { secondary, message, brandText } = props;

  // Here are all the props that may change depending on navbar's type or state.(secondary, variant, scrolled)
  let mainText = useColorModeValue("navy.700", "white");
  let secondaryText = useColorModeValue("gray.700", "white");
  let navbarPosition = "fixed";
  let navbarFilter = "none";
  let navbarBackdrop = "blur(20px)";
  let navbarShadow = "none";
  let navbarBg = useColorModeValue(
    "rgba(244, 247, 254, 0.2)",
    "rgba(11,20,55,0.5)"
  );
  let navbarBorder = "transparent";
  let secondaryMargin = "0px";
  let paddingX = "15px";
  let gap = "0px";
  const changeNavbar = () => {
    if (window.scrollY > 1) {
      setScrolled(true);
    } else {
      setScrolled(false);
    }
  };

  return (
    <Box
      position={navbarPosition}
      boxShadow={navbarShadow}
      bg={navbarBg}
      borderColor={navbarBorder}
      filter={navbarFilter}
      backdropFilter={navbarBackdrop}
      backgroundPosition='center'
      backgroundSize='cover'
      borderRadius='16px'
      borderWidth='1.5px'
      borderStyle='solid'
      transitionDelay='0s, 0s, 0s, 0s'
      transitionDuration=' 0.25s, 0.25s, 0.25s, 0s'
      transition-property='box-shadow, background-color, filter, border'
      transitionTimingFunction='linear, linear, linear, linear'
      alignItems={{ xl: "center" }}
      display={secondary ? "block" : "flex"}
      minH='75px'
      justifyContent={{ xl: "center" }}
      lineHeight='25.6px'
      mx='auto'
      mt={secondaryMargin}
      pb='8px'
      left={{ base: "12px", md: "30px", lg: "30px", xl: "30px" }}
      px={{
        sm: paddingX,
        md: "10px",
      }}
      ps={{
        xl: "12px",
      }}
      pt='8px'
      top={{ base: "12px", md: "16px", xl: "18px" }}
      w={{
        base: "calc(100vw - 6%)",
        md: "calc(100vw - 8%)",
        lg: "calc(100vw - 6%)",
        xl: "calc(100vw - 350px)",
        "2xl": "calc(100vw - 365px)",
      }}>
      <Flex
        w='100%'
        flexDirection={{
          sm: "column",
          md: "row",
        }}
        alignItems={{ xl: "center" }}
        mb={gap}>
        <Box mb={{ sm: "8px", md: "0px" }}>
          <Breadcrumb>
            <BreadcrumbItem color={secondaryText} fontSize='sm' mb='5px'>
              <BreadcrumbLink href='#' color={secondaryText}>
                Pages
              </BreadcrumbLink>
            </BreadcrumbItem>

            <BreadcrumbItem color={secondaryText} fontSize='sm'>
              <BreadcrumbLink href='#' color={secondaryText}>
                {brandText}
              </BreadcrumbLink>
            </BreadcrumbItem>
          </Breadcrumb>
          {/* Here we create navbar brand, based on route name */}
          <Link
            color={mainText}
            href='#'
            bg='inherit'
            borderRadius='inherit'
            fontWeight='bold'
            fontSize='34px'
            _hover={{ color: { mainText } }}
            _active={{
              bg: "inherit",
              transform: "none",
              borderColor: "transparent",
            }}
            _focus={{
              boxShadow: "none",
            }}>
            {brandText}
          </Link>
        </Box>
        <Box ms='auto' w={{ sm: "100%", md: "unset" }}>
          <AdminNavbarLinks
            onOpen={props.onOpen}
            logoText={props.logoText}
            secondary={props.secondary}
            fixed={props.fixed}
            scrolled={scrolled}
          />
        </Box>
      </Flex>
      {secondary ? <Text color='white'>{message}</Text> : null}
    </Box>
  );
}

AdminNavbar.propTypes = {
  brandText: PropTypes.string,
  variant: PropTypes.string,
  secondary: PropTypes.bool,
  fixed: PropTypes.bool,
  onOpen: PropTypes.func,
};

================
File: Client/src/components/navbar/ThemeEditor.js
================
import React from 'react'
import {
  ThemeEditor as ThemeEditorContainer,
  ThemeEditorDrawer,
  ThemeEditorColors,
  ThemeEditorFontSizes
} from '@hypertheme-editor/chakra-ui'
import { Button, Icon } from '@chakra-ui/react'
import { CgColorPicker } from 'react-icons/cg'
import { ImFontSize } from 'react-icons/im'
import { MdPalette } from 'react-icons/md'

export function ThemeEditor(props) {
    return (
        <ThemeEditorContainer>
          <ThemeEditorButton {...props} />
          <ThemeEditorDrawer hideUpgradeToPro>
            <ThemeEditorColors icon={CgColorPicker} title="Colors" />
            <ThemeEditorFontSizes icon={ImFontSize} title="Font Sizes" />
          </ThemeEditorDrawer>
        </ThemeEditorContainer>
      )
}

function ThemeEditorButton({ onOpen, navbarIcon, ...rest }) {
  return (
    <Button
        variant='no-hover'
        bg='transparent'
        p='0px'
        minW='unset'
        minH='unset'
        h='18px'
        w='max-content'
        _focus={{ boxShadow: 'none' }}
        onClick={onOpen}
        {...rest}
    >
        <Icon
            me='10px'
            h='18px'
            w='18px'
            color={navbarIcon}
            as={MdPalette}
        />
      </Button>
  )
}

================
File: Client/src/components/notFoundData/index.js
================
import { Image, Box } from '@chakra-ui/react'
import React from 'react'

const DataNotFound = () => {
    return (
        <Box display={'flex'} justifyContent={'center'} alignItems={'center'}>
            -- No Data Found --
        </Box>
    )
}

export default DataNotFound

================
File: Client/src/components/pagination/Pagination.js
================
import { ArrowLeftIcon, ArrowRightIcon, ChevronLeftIcon, ChevronRightIcon } from '@chakra-ui/icons';
import { Flex, IconButton, NumberDecrementStepper, NumberIncrementStepper, NumberInput, NumberInputField, NumberInputStepper, Select, Text, Tooltip } from '@chakra-ui/react';
import React from 'react'
import { useEffect } from 'react';

const Pagination = (props) => {
    const { gotoPage, gopageValue, setGopageValue, pageCount, canPreviousPage, previousPage, canNextPage, pageOptions, setPageSize, nextPage, pageSize, pageIndex } = props

    useEffect(() => {
        setGopageValue(1)
    }, [])

    return (

        <Flex justifyContent={pageOptions?.length !== 1 ? "space-between" : "end"} mt={2} alignItems="center" >
            {pageOptions?.length !== 1 && <Flex>
                <Tooltip label="First Page">
                    <IconButton
                        onClick={() => { gotoPage(0); setGopageValue(1) }}
                        isDisabled={!canPreviousPage}
                        icon={<ArrowLeftIcon h={3} w={3} />}
                        mr={4}
                    />
                </Tooltip>
                <Tooltip label="Previous Page">
                    <IconButton
                        onClick={() => { previousPage(); setGopageValue((pre) => pre - 1) }}
                        isDisabled={!canPreviousPage}
                        icon={<ChevronLeftIcon h={6} w={6} />}
                    />
                </Tooltip>
            </Flex>}

            <Flex alignItems="center">
                {pageOptions?.length !== 1 && <>
                    <Text flexShrink="0" mr={8}>
                        Page{" "}
                        <Text fontWeight="bold" as="span">
                            {pageIndex + 1}
                        </Text>{" "}
                        of{" "}
                        <Text fontWeight="bold" as="span">
                            {pageOptions?.length}
                        </Text>
                    </Text>
                    <Text flexShrink="0">Go to page:</Text>{" "}
                    <NumberInput
                        ml={2}
                        mr={8}
                        w={28}
                        min={1}
                        max={pageOptions?.length}
                        value={gopageValue}
                        onChange={(value) => {
                            const page = value ? value - 1 : 0;
                            gotoPage(page);
                            setGopageValue(value)
                        }}
                        defaultValue={pageIndex + 1}
                    >
                        <NumberInputField />
                        <NumberInputStepper>
                            <NumberIncrementStepper />
                            <NumberDecrementStepper />
                        </NumberInputStepper>
                    </NumberInput>
                </>}
                <Select
                    w={32}
                    value={pageSize}
                    onChange={(e) => {
                        setPageSize(Number(e.target.value));
                    }}
                >
                    {[5, 10, 20, 30, 40, 50].map((pageSize) => (
                        <option key={pageSize} value={pageSize}>
                            Show {pageSize}
                        </option>
                    ))}
                </Select>
            </Flex>

            {pageOptions?.length !== 1 &&
                <Flex>
                    <Tooltip label="Next Page">
                        <IconButton
                            onClick={() => { nextPage(); setGopageValue((pre) => pre + 1) }}
                            isDisabled={!canNextPage}
                            icon={<ChevronRightIcon h={6} w={6} />}
                        />
                    </Tooltip>
                    <Tooltip label="Last Page">
                        <IconButton
                            onClick={() => { gotoPage(pageCount - 1); setGopageValue(pageCount) }}
                            isDisabled={!canNextPage}
                            icon={<ArrowRightIcon h={3} w={3} />}
                            ml={4}
                        />
                    </Tooltip>
                </Flex>}
        </Flex>
    )
}

export default Pagination

================
File: Client/src/components/PDF/index.js
================
import React from 'react';
import { PDFDownloadLink, Document, Page, Text, View, StyleSheet } from '@react-pdf/renderer';

// Create styles
const styles = StyleSheet.create({
  page: {
    flexDirection: 'column',
    backgroundColor: '#E4E4E4',
    padding: 20,
  },
  section: {
    margin: 10,
    padding: 10,
    flexGrow: 1,
  },
  header: {
    fontSize: 20,
    marginBottom: 20,
  },
  text: {
    fontSize: 12,
    marginBottom: 10,
  },
});

// Create Document Component
const MyDocument = () => (
  <Document>
    <Page size="A4" style={styles.page}>
      <View style={styles.section}>
        <Text style={styles.header}>Hello World</Text>
        <Text style={styles.text}>
          This is an example of a simple PDF document created using @react-pdf/renderer.
        </Text>
        <Text style={styles.text}>
          You can add more text, images, and other elements to your PDF document.
        </Text>
      </View>
    </Page>
  </Document>
);


export default MyDocument;

================
File: Client/src/components/reactTable/checktable.js
================
import { useMemo, useState, useEffect } from 'react';
import { Box, Flex, Table, Tbody, Td, Text, Th, Thead, Tr, Button, HStack, Tag, TagLabel, Menu, MenuButton, MenuDivider, MenuItem, MenuList, Grid, GridItem, Checkbox, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, TagCloseButton } from '@chakra-ui/react';
import { useColorModeValue } from '@chakra-ui/system';
import { BsColumnsGap } from "react-icons/bs";
import { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';
import { SearchIcon, DeleteIcon, AddIcon } from "@chakra-ui/icons";
import { useGlobalFilter, usePagination, useSortBy, useTable } from 'react-table';
import Card from 'components/card/Card';
import CountUpComponent from 'components/countUpComponent/countUpComponent';
import Pagination from 'components/pagination/Pagination';
import Spinner from 'components/spinner/Spinner';
import CustomSearchInput from "../search/search";
import AdvanceSearchUsingCustomFields from "../search/advanceSearch";
import DataNotFound from "../notFoundData";
import moment from 'moment';
import { useSelector, useDispatch } from 'react-redux';
import { getSearchData, setGetTagValues, setSearchValue } from '../../redux/slices/advanceSearchSlice'
import { commonUtils } from 'utils/utils';

const CommonCheckTable = (props) => {
    const {
        isLoding,
        title,
        columnData,
        size,
        // dataColumn,
        setSearchedDataOut,
        state,
        allData,
        ManageGrid,
        deleteMany,
        tableCustomFields,
        access,
        // selectedColumns,
        // setSelectedColumns,
        onOpen,
        setDelete,
        selectedValues,
        setSelectedValues,
        setIsImport,
        checkBox,
        AdvanceSearch,
        searchDisplay,
        setSearchDisplay,
        BackButton,
        searchboxOutside,
        setGetTagValuesOutside,
        setSearchboxOutside,
        selectType,
        customSearch,
    } = props;
    const { dataLength } = props;
    const { handleSearchType } = props;

    const textColor = useColorModeValue("secondaryGray.900", "white");
    const borderColor = useColorModeValue("gray.200", "whiteAlpha.100");

    const [displaySearchData, setDisplaySearchData] = useState(false);
    const [searchedData, setSearchedData] = useState([]);

    const [columns, setColumns] = useState(columnData || []);
    const [tempSelectedColumns, setTempSelectedColumns] = useState(columns || []);

    const searchedDataOut = useSelector((state) => state?.advanceSearchData?.searchResult)
    const searchValue = useSelector((state) => state?.advanceSearchData?.searchValue)
    const getTagValues = useSelector((state) => state?.advanceSearchData?.getTagValues)
    const data = useMemo(() => (AdvanceSearch ? searchDisplay : displaySearchData) ? (AdvanceSearch ? searchedDataOut : searchedData) : allData, [searchDisplay, displaySearchData, AdvanceSearch, searchedDataOut, searchedData, allData]);

    const [manageColumnsModel, setManageColumnsModel] = useState(false);
    const [csvColumns, setCsvColumns] = useState([]);
    const [searchbox, setSearchbox] = useState('');
    const [advaceSearch, setAdvaceSearch] = useState(false);
    // const [column, setColumn] = useState('');
    const [gopageValue, setGopageValue] = useState();

    const dispatch = useDispatch();

    const tableInstance = useTable(
        {
            columns,
            data,
            initialState: { pageIndex: 0 }
        },
        useGlobalFilter,
        useSortBy,
        usePagination
    );

    const {
        getTableProps,
        getTableBodyProps,
        headerGroups,
        prepareRow,
        page,
        canPreviousPage,
        canNextPage,
        pageOptions,
        pageCount,
        gotoPage,
        nextPage,
        previousPage,
        setPageSize,
        state: { pageIndex, pageSize }
    } = tableInstance;

    if (pageOptions && pageOptions?.length > 0 && pageOptions?.length < gopageValue) {
        setGopageValue(pageOptions.length)
    }

    const handleSearch = (results) => {
        AdvanceSearch && dispatch(getSearchData({ searchData: (results || []), type: handleSearchType }))
        AdvanceSearch ? setSearchedDataOut(results || []) : setSearchedData(results || []);
    };

    const handleAdvanceSearch = (values) => {
        dispatch(setSearchValue(values))
        const searchResult = AdvanceSearch ? dispatch(getSearchData({ values: values, allData: allData, type: title })) : allData?.filter(item => {
            return tableCustomFields.every(field => {
                const fieldValue = values[field.name];
                const itemValue = item[field.name];

                if (field.type === 'select') {
                    return !fieldValue || itemValue === fieldValue;
                }
                else if (field.type === 'number') {
                    return (
                        [null, undefined, ''].includes(fieldValue) ||
                        (itemValue !== undefined &&
                            itemValue.toString().includes(fieldValue.toString()))
                    );
                }
                else if (field.type === 'date') {
                    const fromDate = values[`from${field.name}`];
                    const toDate = values[`to${field.name}`];

                    if (!fromDate && !toDate) {
                        return true; // No date range specified
                    }

                    const timeItemDate = new Date(itemValue);
                    const timeMomentDate = moment(timeItemDate).format('YYYY-MM-DD');

                    return (
                        (!fromDate || (timeMomentDate >= fromDate)) &&
                        (!toDate || (timeMomentDate <= toDate))
                    );
                }
                else {
                    // Default case for text, email
                    return !fieldValue || itemValue?.toLowerCase()?.includes(fieldValue?.toLowerCase());
                }
            });
        });

        const getValue = tableCustomFields.reduce((result, field) => {
            if (field.type === 'date') {
                const fromDate = values[`from${field.name}`];
                const toDate = values[`to${field.name}`];

                if (fromDate || toDate) {
                    result.push({
                        name: [`from${field.name}`, `to${field.name}`],
                        value: `From: ${fromDate} To: ${toDate}`
                    })
                }
            } else if (values[field.name]) {
                result.push({
                    name: [field.name],
                    value: values[field.name]
                })
            }

            return result;
        }, []);
        dispatch(setGetTagValues(getValue))
        setSearchedData(searchResult);
        setDisplaySearchData(true);
        setAdvaceSearch(false);
        if (setSearchbox) {
            setSearchbox('');
        }
    }


    const handleClear = () => {
        setSearchDisplay && setSearchDisplay(false)
        setDisplaySearchData && setDisplaySearchData(false)
        if (searchboxOutside) {
            setSearchboxOutside('')
        } else {
            setSearchbox('');
        }
        dispatch(setGetTagValues([]))
        if (props?.getTagValuesOutSide) {
            setGetTagValuesOutside([]);
        }
        setGopageValue(1);
    };

    const handleClick = () => {
        onOpen();
    };

    const findStatus = () => {
        const searchResult = allData?.filter(
            (item) =>
                (!state || (item?.status && item?.status?.toLowerCase().includes(state?.toLowerCase())))
        )
        let getValue = [state || undefined].filter(value => value);

        dispatch(setGetTagValues(getValue))
        AdvanceSearch ? setSearchedDataOut && setSearchedDataOut(searchResult) : setSearchedData && setSearchedData(searchResult);
        AdvanceSearch ? setSearchDisplay && setSearchDisplay(true) : setDisplaySearchData && setDisplaySearchData(searchResult);
        setDisplaySearchData(true)
        setAdvaceSearch(false)
    }

    useEffect(() => {
        state && findStatus()
    }, [state, allData]);

    const toggleColumnVisibility = (columnKey) => {
        let updatedColumns;

        if (tempSelectedColumns?.some((column) => column?.accessor === columnKey)) {
            updatedColumns = tempSelectedColumns?.filter((column) => column?.accessor !== columnKey);
        } else {
            const columnToAdd = columnData?.find((column) => column?.accessor === columnKey);
            updatedColumns = [...tempSelectedColumns, columnToAdd];
        }

        const orderedColumns = columnData?.filter(column => updatedColumns.some(updatedColumn => updatedColumn?.accessor === column?.accessor));
        setTempSelectedColumns(orderedColumns);

    };

    const handleCheckboxChange = (event, value) => {
        if (selectType === "single") {
            if (event.target.checked) {
                setSelectedValues && setSelectedValues(value);
            } else {
                setSelectedValues();
            }
        } else if (event.target.checked) {
            setSelectedValues && setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);
        } else {
            setSelectedValues && setSelectedValues((prevSelectedValues) =>
                prevSelectedValues.filter((selectedValue) => selectedValue !== value)
            );
        }

    };

    const handleColumnClose = () => {
        setManageColumnsModel(!manageColumnsModel)
    };


    const handleExportLeads = (extension) => {
        selectedValues && selectedValues?.length > 0
            ? downloadCsvOrExcel(extension, selectedValues)
            : downloadCsvOrExcel(extension);
    };

    const downloadCsvOrExcel = async (extension, selectedIds) => {
        try {
            if (selectedIds && selectedIds?.length > 0) {
                const selectedRecordsWithSpecificFileds = allData?.filter((rec) => selectedIds.includes(rec._id))?.map((rec) => {
                    const selectedFieldsData = {};
                    csvColumns?.forEach((property) => {
                        selectedFieldsData[property.accessor] = rec[property.accessor];
                    });
                    return selectedFieldsData;
                });
                commonUtils.convertJsonToCsvOrExcel({
                    jsonArray: selectedRecordsWithSpecificFileds,
                    csvColumns: csvColumns,
                    fileName: title || 'data',
                    extension: extension
                });
            } else {
                const AllRecordsWithSpecificFileds = allData?.map((rec) => {
                    const selectedFieldsData = {};
                    csvColumns?.forEach((property) => {
                        selectedFieldsData[property?.accessor] = rec[property?.accessor];
                    });
                    return selectedFieldsData;
                });
                commonUtils.convertJsonToCsvOrExcel({
                    jsonArray: AllRecordsWithSpecificFileds,
                    csvColumns: csvColumns,
                    fileName: title || 'data',
                    extension: extension
                });
            }
            setSelectedValues([])
        } catch (e) {
            console.error(e);
        }
    };

    const handleRemoveFromTag = (name) => {
        const filter = (getTagValues || []).filter((item) => {
            if (Array.isArray(name?.name)) {
                return name.name?.toString() !== item.name?.toString();
            }
        });

        let updatedSearchValue = { ...searchValue };
        for (let key in updatedSearchValue) {
            if (updatedSearchValue.hasOwnProperty(key)) {
                if (name.name.includes(key)) {
                    delete updatedSearchValue[key];
                }
                if (updatedSearchValue[key] === "") {
                    delete updatedSearchValue[key];
                }
            }
        }

        handleAdvanceSearch(updatedSearchValue)

        dispatch(setGetTagValues(filter))
        if (filter?.length === 0) {
            handleClear();
        }
    }

    useEffect(() => {
        AdvanceSearch ? setSearchedDataOut && setSearchedDataOut(data) : setSearchedData && setSearchedData(data);
    }, []);

    useEffect(() => {
        setColumns(columnData);
    }, [columnData]);

    useEffect(() => {
        if (columns) {
            let tempCsvColumns = columns?.filter((col) => col?.Header !== '#' && col?.Header !== 'Action')?.map((field) => ({ Header: field?.Header, accessor: field?.accessor }));
            setCsvColumns([...tempCsvColumns])
        }
    }, [columns]);

    return (
        <>
            <Card
                direction="column"
                w="100%"
                overflowX={{ sm: "scroll", lg: "hidden" }}
            >
                <Grid templateColumns="repeat(12, 1fr)" gap={2}>
                    <GridItem colSpan={{ base: 12, md: 8 }} display={"flex"} alignItems={"center"}>
                        <Flex alignItems={"center"} flexWrap={"wrap"}>
                            {
                                title &&
                                <Text
                                    color={'secondaryGray.900'}
                                    fontSize="22px"
                                    fontWeight="700"
                                    lineHeight="100%"
                                    textTransform={'capitalize'}
                                >
                                    {title} (<CountUpComponent key={data?.length} targetNumber={dataLength || data?.length} />)
                                </Text>
                            }
                            {customSearch !== false && <CustomSearchInput setSearchbox={setSearchboxOutside ? setSearchboxOutside : setSearchbox} setDisplaySearchData={setSearchboxOutside ? props.setSearchDisplay : setDisplaySearchData} searchbox={searchboxOutside ? searchboxOutside : searchbox} allData={allData} dataColumn={columns} onSearch={handleSearch} setGetTagValues={props.setGetTagValuesOutside ? props.setGetTagValuesOutside : setGetTagValues} setGopageValue={setGopageValue} />}
                            {
                                AdvanceSearch ? AdvanceSearch : AdvanceSearch !== false &&
                                    <Button variant="outline" colorScheme='brand' leftIcon={<SearchIcon />} mt={{ sm: "5px", md: "0" }} size="sm" onClick={() => setAdvaceSearch(true)}>Advance Search</Button>
                            }
                            {(searchDisplay || displaySearchData) ? <Button variant="outline" colorScheme='red' size="sm" ms={2} onClick={() => handleClear()}>Clear</Button> : ""}
                            {(selectedValues?.length > 0 && access?.delete && !deleteMany) && <DeleteIcon cursor={"pointer"} onClick={() => setDelete(true)} color={'red'} ms={2} />}
                        </Flex>
                    </GridItem>
                    {/* Advance filter */}
                    <AdvanceSearchUsingCustomFields
                        setAdvaceSearch={setAdvaceSearch}
                        setGetTagValues={setGetTagValues}
                        isLoding={isLoding}
                        allData={allData}
                        setDisplaySearchData={setDisplaySearchData}
                        setSearchedData={setSearchedData}
                        advaceSearch={advaceSearch}
                        tableCustomFields={tableCustomFields}
                        setSearchbox={setSearchbox}
                        handleAdvanceSearch={handleAdvanceSearch}
                    />
                    <GridItem colSpan={{ base: 12, md: 4 }} display={"flex"} justifyContent={"end"} alignItems={"center"} textAlign={"right"}>
                        {ManageGrid !== false &&
                            <Menu isLazy  >
                                <MenuButton p={4}>
                                    <BsColumnsGap />
                                </MenuButton>
                                <MenuList minW={'fit-content'} transform={"translate(1670px, 60px)"} zIndex={2} >
                                    <MenuItem onClick={() => setManageColumnsModel(true)} width={"165px"}> Manage Columns
                                    </MenuItem>
                                    {typeof setIsImport === "function" && <MenuItem width={"165px"} onClick={() => setIsImport(true)}> Import {title}
                                    </MenuItem>}
                                    {
                                        allData && allData?.length > 0 &&
                                        <>
                                            <MenuDivider />
                                            <MenuItem width={"165px"} onClick={() => handleExportLeads('csv')}>{selectedValues && selectedValues?.length > 0 ? 'Export Selected Data as CSV' : 'Export as CSV'}</MenuItem>
                                            <MenuItem width={"165px"} onClick={() => handleExportLeads('xlsx')}>{selectedValues && selectedValues?.length > 0 ? 'Export Selected Data as Excel' : 'Export as Excel'}</MenuItem>
                                        </>
                                    }
                                </MenuList>
                            </Menu>}
                        {(access?.create || access === true) && <Button onClick={() => handleClick()} size="sm" variant="brand" leftIcon={<AddIcon />}>Add New</Button>}
                        {BackButton && BackButton}
                    </GridItem>
                    <HStack spacing={4} mb={2}>
                        {(getTagValues || []).map((item) => (
                            <Tag
                                size={"md"}
                                p={2}
                                key={item.value}
                                borderRadius='full'
                                variant='solid'
                                colorScheme="gray"
                            >
                                <TagLabel>{item.value}</TagLabel>
                                <TagCloseButton onClick={() => handleRemoveFromTag(item)} />
                            </Tag>
                        ))}
                    </HStack>
                </Grid>
                <Box overflowY={"auto"} className={size ? `small-table-fix-container` : `table-fix-container`}>
                    <Table {...getTableProps()} variant="simple" color="gray.500" mb="24px">
                        <Thead zIndex={1}>
                            {headerGroups?.map((headerGroup, index) => (
                                <Tr {...headerGroup.getHeaderGroupProps()} key={index}>
                                    {headerGroup.headers?.map((column, index) => (
                                        <Th
                                            {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}
                                            pe="10px"
                                            key={index}
                                            borderColor={borderColor}
                                        >
                                            <Flex
                                                align="center"
                                                justifyContent={column.center ? "center" : "start"}
                                                fontSize={{ sm: "14px", lg: "16px" }}
                                                color="secondaryGray.900"
                                            >
                                                <span style={{ textTransform: "capitalize", marginRight: "8px" }}>
                                                    {column.render("Header")}
                                                </span>
                                                {column.isSortable !== false && (
                                                    <span>
                                                        {column.isSorted ? (column.isSortedDesc ? <FaSortDown /> : <FaSortUp />) : <FaSort />}
                                                    </span>
                                                )}
                                            </Flex>
                                        </Th>
                                    ))}
                                </Tr>
                            ))}
                        </Thead>
                        <Tbody {...getTableBodyProps()}>
                            {isLoding ?
                                <Tr>
                                    <Td colSpan={columns?.length}>
                                        <Flex justifyContent={'center'} alignItems={'center'} width="100%" color={textColor} fontSize="sm" fontWeight="700">
                                            <Spinner />
                                        </Flex>
                                    </Td>
                                </Tr>
                                : data && data?.length === 0 || data === undefined ? (
                                    <Tr>
                                        <Td colSpan={columns.length}>
                                            <Text textAlign={'center'} width="100%" color={textColor} fontSize="sm" fontWeight="700">
                                                <DataNotFound />
                                            </Text>
                                        </Td>
                                    </Tr>
                                ) : page?.map((row, i) => {
                                    prepareRow(row);
                                    return (
                                        <Tr {...row?.getRowProps()}>
                                            {row?.cells?.map((cell, index) => {
                                                let data = "";
                                                columnData?.forEach((item) => {
                                                    if (cell?.column.Header === item.Header) {
                                                        if (item.cell && typeof item.cell === 'function') {
                                                            data = (
                                                                <Flex Flex align="center" justifyContent={item?.Header === 'Action' && 'center'}>
                                                                    <Text color={textColor} fontSize="sm" fontWeight="700" >
                                                                        {item.cell(cell) === ' ' ? '-' : item.cell(cell)}
                                                                    </Text>
                                                                </Flex>
                                                            );
                                                        }
                                                        else {
                                                            data = (
                                                                <Flex align="center" >
                                                                    {item.Header ===
                                                                        "#" &&
                                                                        (checkBox || checkBox === undefined) && (
                                                                            <Checkbox
                                                                                colorScheme="brandScheme"
                                                                                value={selectedValues}
                                                                                isChecked={selectedValues?.includes(cell?.value)}
                                                                                onChange={(event) => handleCheckboxChange(event, cell?.value)}
                                                                                me="10px"
                                                                            />
                                                                        )}

                                                                    <Text color={textColor} fontSize="sm" fontWeight="700">
                                                                        {item.Header === "#" ? cell?.row?.index + 1 : cell?.value ? cell?.value : '-'}
                                                                    </Text>
                                                                </Flex>
                                                            );
                                                        }
                                                    }
                                                });
                                                return (
                                                    <Td
                                                        {...cell?.getCellProps()}
                                                        key={index}
                                                        fontSize={{ sm: "14px" }}
                                                        minW={{ sm: "150px", md: "200px", lg: "auto" }}
                                                        borderColor="transparent"
                                                    >
                                                        {data}
                                                    </Td>
                                                );
                                            })}
                                        </Tr>
                                    );
                                })}
                        </Tbody>
                    </Table>
                </Box>
                {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage}
                    pageSize={pageSize} pageIndex={pageIndex} dataLength={15} />}

                {/* Manage Columns */}
                <Modal onClose={() => { setManageColumnsModel(false); }} isOpen={manageColumnsModel} isCentered>
                    <ModalOverlay />
                    <ModalContent>
                        <ModalHeader>Manage Columns</ModalHeader>
                        <ModalCloseButton onClick={() => { setManageColumnsModel(false); }} />
                        <ModalBody>
                            <div>
                                {columnData?.map((column) => (
                                    <Text display={"flex"} key={column?.accessor} py={2}>
                                        <Checkbox
                                            defaultChecked={columns?.some((item) => item?.accessor === column?.accessor)}
                                            onChange={() => toggleColumnVisibility(column?.accessor)}
                                            pe={2}
                                        />
                                        {column?.Header}
                                    </Text>
                                ))}
                            </div>
                        </ModalBody>
                        <ModalFooter>
                            <Button
                                colorScheme='brand'
                                mr={2}
                                onClick={() => {
                                    setColumns([...tempSelectedColumns]);
                                    setManageColumnsModel(false);
                                }}
                                disabled={isLoding ? true : false}
                                size='sm'
                            >
                                {isLoding ? <Spinner /> : 'Save'}
                            </Button>
                            <Button
                                variant='outline'
                                colorScheme="red"
                                size='sm'
                                onClick={() => handleColumnClose()}
                            >
                                Close
                            </Button>
                        </ModalFooter>
                    </ModalContent>
                </Modal>

            </Card>
        </>
    );
}

export default CommonCheckTable

================
File: Client/src/components/rtlProvider/RtlProvider.js
================
import { CacheProvider } from "@emotion/react";
import createCache from "@emotion/cache";
import rtl from "stylis-plugin-rtl";
// NB: A unique `key` is important for it to work!
const options = {
  rtl: { key: "css-ar", stylisPlugins: [rtl] },
  ltr: { key: "css-en" },
};
export function RtlProvider({ children }) {
  const dir = document.documentElement.dir === "ar" ? "rtl" : "ltr";
  const cache = createCache(options[dir]);
  return <CacheProvider value={cache} children={children} />;
}

================
File: Client/src/components/scrollbar/Scrollbar.js
================
import { Box } from "@chakra-ui/react";

import React from "react";

export const renderTrack = ({ style, ...props }) => {
  const trackStyle = {
    position: "absolute",
    maxWidth: "100%",
    width: 6,
    transition: "opacity 200ms ease 0s",
    opacity: 0,
    background: "transparent",
    bottom: 2,
    top: 2,
    borderRadius: 3,
    right: 0,
  };
  return <div style={{ ...style, ...trackStyle }} {...props} />;
};
export const renderThumb = ({ style, ...props }) => {
  const thumbStyle = {
    borderRadius: 15,
    background: "rgba(222, 222, 222, .1)",
  };
  return <div style={{ ...style, ...thumbStyle }} {...props} />;
};
export const renderView = ({ style, ...props }) => {
  const viewStyle = {
    marginBottom: 10,
  };
  return (
    <Box
      me={{ base: "0px !important", lg: "-16px !important" }}
      style={{ ...style, ...viewStyle }}
      {...props}
    />
  );
};

================
File: Client/src/components/search/advanceSearch.js
================
import React from 'react';
import moment from 'moment';
import { useFormik } from 'formik';
import { Box, Button, Flex, FormLabel, Grid, GridItem, Input, InputGroup, InputLeftElement, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Select, Spinner, Text } from '@chakra-ui/react';

const AdvanceSearch = ({ handleAdvanceSearch, setAdvaceSearch, search, advaceSearch, isLoding, allData, setDisplaySearchData, setSearchedData, setGetTagValues, setSearchClear, tableCustomFields, setSearchbox }) => {

    const initialFieldValues = Object.fromEntries(
        (tableCustomFields || []).flatMap(field => {
            if (field.type === 'date') {
                return [
                    [`from${field.name}`, ''],
                    [`to${field.name}`, '']
                ];
            } else {
                return [[field?.name, '']];
            }
        })
    );

    const initialValues = {
        ...initialFieldValues
    };

    const formik = useFormik({
        initialValues: initialValues,
        enableReinitialize: true,
        onSubmit: (values, { resetForm }) => {
            handleAdvanceSearch(values)
            resetForm();
        }
    })
    // const formik = useFormik({
    //     initialValues: initialValues,
    //     enableReinitialize: true,
    //     onSubmit: (values, { resetForm }) => {
    //         const searchResult = allData?.filter(item => {
    //             return tableCustomFields.every(field => {
    //                 const fieldValue = values[field.name];
    //                 const itemValue = item[field.name];

    //                 if (field.type === 'select') {
    //                     return !fieldValue || itemValue === fieldValue;
    //                 }
    //                 else if (field.type === 'number') {
    //                     // return (
    //                     //     [null, undefined, ''].includes(fieldValue) ||
    //                     //     (itemValue !== undefined &&
    //                     //         (parseInt(itemValue, 10) >= parseInt(fieldValue, 10) || 0))
    //                     // );
    //                     // return (
    //                     //     [null, undefined, ''].includes(fieldValue) ||
    //                     //     (itemValue !== undefined &&
    //                     //         (parseInt(itemValue, 10) === parseInt(fieldValue, 10)))
    //                     // );
    //                     return (
    //                         [null, undefined, ''].includes(fieldValue) ||
    //                         (itemValue !== undefined &&
    //                             itemValue.toString().includes(fieldValue.toString()))
    //                     );
    //                 }
    //                 else if (field.type === 'date') {
    //                     const fromDate = values[`from${field.name}`];
    //                     const toDate = values[`to${field.name}`];

    //                     if (!fromDate && !toDate) {
    //                         return true; // No date range specified
    //                     }

    //                     const timeItemDate = new Date(itemValue);
    //                     const timeMomentDate = moment(timeItemDate).format('YYYY-MM-DD');

    //                     return (
    //                         (!fromDate || (timeMomentDate >= fromDate)) &&
    //                         (!toDate || (timeMomentDate <= toDate))
    //                     );
    //                 }
    //                 else {
    //                     // Default case for text, email
    //                     return !fieldValue || itemValue?.toLowerCase()?.includes(fieldValue?.toLowerCase());
    //                 }
    //             });
    //         });

    //         // let getValue = tableCustomFields.map(field => values[field.name]).filter(value => value);
    //         const getValue = tableCustomFields.map(field => {
    //             if (field.type === 'date') {
    //                 const fromDate = values[`from${field.name}`];
    //                 const toDate = values[`to${field.name}`];

    //                 return (fromDate || toDate) && `From: ${fromDate} To: ${toDate}`;
    //             } else {
    //                 return values[field.name];
    //             }
    //         }).filter(value => value);

    //         setGetTagValues(getValue);
    //         setSearchedData(searchResult);
    //         setDisplaySearchData(true);
    //         setAdvaceSearch(false);
    //         resetForm();
    //         if (setSearchbox) {
    //             setSearchbox('');
    //         }
    //     }
    // })

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik;

    return (
        <Modal onClose={() => { setAdvaceSearch(false); resetForm() }} isOpen={advaceSearch} isCentered>
            <ModalOverlay />
            <ModalContent>
                <ModalHeader>Advance Search</ModalHeader>
                <ModalCloseButton onClick={() => { setAdvaceSearch(false); resetForm(); }} />
                <ModalBody>
                    <Grid templateColumns="repeat(12, 1fr)" mb={3} gap={2}>
                        {
                            tableCustomFields?.map((field) => (
                                <GridItem colSpan={{ base: 12, sm: (field.type === 'date' ? 12 : 6) }} key={field?.name}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2} htmlFor={field?.name}>
                                        {field?.label}
                                    </FormLabel>
                                    {field.type === 'select' ?
                                        <Select
                                            fontSize='sm'
                                            id={field.name}
                                            name={field.name}
                                            onChange={handleChange}
                                            onBlur={handleBlur}
                                            value={values?.[field?.name]}
                                            fontWeight='500'
                                        // borderColor={errors?.[field?.name] && touched?.[field?.name] ? "red.300" : null}
                                        >
                                            <option value="">Select {field?.label}</option>
                                            {field.options.map(option => (
                                                <option key={option?._id} value={option?.value}>
                                                    {option?.name}
                                                </option>
                                            ))}
                                        </Select>
                                        : field.type === 'date' ? (
                                            <>
                                                <Flex justifyContent="space-between">
                                                    <Box w="49%">
                                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" >
                                                            From
                                                        </FormLabel>
                                                        <Input
                                                            fontSize='sm'
                                                            onChange={handleChange}
                                                            onBlur={handleBlur}
                                                            value={values[`from${field.name}`]}
                                                            type="date"
                                                            name={`from${field.name}`}
                                                            fontWeight='500'
                                                        />
                                                    </Box>
                                                    <Box w="49%">
                                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0">
                                                            To
                                                        </FormLabel>
                                                        <Input
                                                            fontSize='sm'
                                                            onChange={handleChange}
                                                            onBlur={handleBlur}
                                                            value={values[`to${field.name}`]}
                                                            type="date"
                                                            min={values[`from${field.name}`]}
                                                            name={`to${field.name}`}
                                                            fontWeight='500'
                                                        />
                                                    </Box>
                                                </Flex>
                                                {/* <Text mb='10px' color={'red'}> {errors.fromLeadScore && touched.fromLeadScore && errors.fromLeadScore}</Text> */}
                                            </>
                                        ) : <InputGroup>
                                            {/* {field.type === 'tel' && <InputLeftElement
                                                pointerEvents="none"
                                                children={<PhoneIcon color="gray.300" borderRadius="16px" />}
                                            />} */}
                                            < Input
                                                fontSize='sm'
                                                type={field.type}
                                                id={field.name}
                                                name={field.name}
                                                onChange={handleChange}
                                                onBlur={handleBlur}
                                                value={values[field.name]}
                                                fontWeight='500'
                                                placeholder={`Enter ${field.label}`}
                                            // borderColor={errors?.[field?.name] && touched?.[field?.name] ? "red.300" : null}
                                            />
                                        </InputGroup>
                                    }
                                </GridItem>
                            ))
                        }
                    </Grid>
                </ModalBody>
                <ModalFooter>
                    <Button variant="outline" colorScheme='green' size="sm" mr={2} onClick={handleSubmit} disabled={isLoding ? true : false} >{isLoding ? <Spinner /> : 'Search'}</Button>
                    <Button colorScheme="red" size="sm" onClick={() => resetForm()}>Clear</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    )
}

export default AdvanceSearch

================
File: Client/src/components/search/search.js
================
import React, { useState } from 'react';
import { InputGroup, InputLeftElement, Input } from '@chakra-ui/react';
import { SearchIcon } from '@chakra-ui/icons';

const CustomSearchInput = ({ allData, setSearchbox, setDisplaySearchData, searchbox, dataColumn, onSearch, setGetTagValues, setGopageValue }) => {

    const handleInputChange = (e) => {
        const searchTerm = e.target.value?.toLowerCase();

        const results = allData?.filter((item) => {
            // Check if any of the specified columns contains the search term
            return dataColumn?.some((column) => {
                const columnValue = item[column?.accessor];

                return (
                    columnValue &&
                        typeof columnValue === 'string' ?
                        columnValue?.toLowerCase()?.includes(searchTerm) : typeof columnValue === 'number' && columnValue?.toString()?.includes(searchTerm)
                );
            });
        });

        setSearchbox(searchTerm ? searchTerm : '');
        setDisplaySearchData(e.target.value === "" ? false : true)
        onSearch(results);
        setGetTagValues([]);

        if (e.target.value === "" && setGopageValue) {
            setGopageValue(1);
        }
    };

    return (
        <InputGroup width={{ sm: "100%", md: "30%" }} mx={{ sm: 0, md: 3 }} my={{ sm: "8px", md: "0" }} >
            <InputLeftElement
                size="sm"
                top="-3px"
                pointerEvents="none"
                zIndex='0'
                children={<SearchIcon color="gray.300" borderRadius="16px" />}
            />
            <Input
                type="text"
                size="sm"
                fontSize="sm"
                value={searchbox}
                onChange={handleInputChange}
                fontWeight="500"
                placeholder="Search..."
                borderRadius="16px"
            />
        </InputGroup>
    );
};

export default CustomSearchInput;

================
File: Client/src/components/separator/Separator.jsx
================
import { Flex } from "@chakra-ui/react";
import React from "react";

const HSeparator = (props) => {
  const { variant, children, ...rest } = props;
  return <Flex h='1px' w='100%' bg='rgba(135, 140, 189, 0.3)' {...rest}></Flex>;
};

const VSeparator = (props) => {
  const { variant, children, ...rest } = props;
  return <Flex w='1px' bg='rgba(135, 140, 189, 0.3)' {...rest}></Flex>;
};

export { HSeparator, VSeparator };

================
File: Client/src/components/sidebar/components/Brand.js
================
// Chakra imports
import { Flex, Heading, Image, useColorModeValue } from "@chakra-ui/react";

// Custom components
import { HSeparator } from "components/separator/Separator";
import { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { fetchImage } from "../../../redux/slices/imageSlice";

export function SidebarBrand(props) {
  const { setOpenSidebar, openSidebar, from, largeLogo } = props;

  //   Chakra color mode
  let logoColor = useColorModeValue("navy.700", "white");

  return (
    <Flex align='center' direction='column' style={{
      position: "sticky",
      top: "0",
      left: "0",
      background: "#fff",

    }}>
      <Flex>
        {largeLogo && (largeLogo[0]?.logoLgImg || largeLogo[0]?.logoSmImg) ? <Image
          style={{ width: "100%", height: '52px' }}
          src={openSidebar === true ? largeLogo[0]?.logoLgImg : largeLogo[0]?.logoSmImg} // Set the source path of your image
          alt="Logo" // Set the alt text for accessibility
          cursor="pointer"
          onClick={() => !from && setOpenSidebar(!openSidebar)}
          userSelect="none"
          my={2}
        /> : <Heading my={4}
          cursor={"pointer"} onClick={() => !from && setOpenSidebar(!openSidebar)} userSelect={"none"}>{openSidebar === true ? "Prolink" : "Pr"}</Heading>}
      </Flex>

    </Flex>
  );
}

export default SidebarBrand;

================
File: Client/src/components/sidebar/components/Content.js
================
// chakra imports
import { Box, Flex, Stack, Text } from "@chakra-ui/react";
//   Custom components
import Brand from "components/sidebar/components/Brand";
import Links from "components/sidebar/components/Links";
import SidebarCard from "components/sidebar/components/SidebarCard";
import React from "react";
import { HiOutlineChevronDoubleRight, HiOutlineChevronLeft, HiOutlineChevronRight } from "react-icons/hi";

// FUNCTIONS

function SidebarContent(props) {
  const { routes, setOpenSidebar, openSidebar, from, largeLogo } = props;

  // SIDEBAR
  return (
    <Flex direction='column' height='100%'
      borderRadius='30px'>
      <Brand from={from} largeLogo={largeLogo}
        openSidebar={openSidebar} setOpenSidebar={setOpenSidebar}
      />
      <Stack direction='column' mb='auto' pt={2}
      >

        <Box
        >
          <Links routes={routes} key={routes}
            openSidebar={openSidebar} setOpenSidebar={setOpenSidebar}

          />
        </Box>
      </Stack>

      {/* <Box
        mt='60px'
        mb='40px'
        borderRadius='30px'>
        <SidebarCard />
      </Box> */}
    </Flex >
  );
}

export default SidebarContent;

================
File: Client/src/components/sidebar/components/Links.js
================
/* eslint-disable */
import { NavLink, useLocation } from "react-router-dom";
// chakra imports
import { AbsoluteCenter, Box, Divider, Flex, HStack, Text, Tooltip, useColorModeValue, useDisclosure } from "@chakra-ui/react";

export function SidebarLinks(props) {
  //   Chakra color mode
  let location = useLocation();
  let activeColor = useColorModeValue("brand.600", "white");
  let inactiveColor = useColorModeValue(
    "secondaryGray.600",
    "secondaryGray.600"
  );
  let activeIcon = useColorModeValue("brand.600", "white");
  let textColor = useColorModeValue("secondaryGray.500", "white");
  let brandColor = useColorModeValue("brand.500", "brand.400");
  let sidebarBgColor = useColorModeValue("gray.200", "brand.200");
  const { isOpen, onOpen, onClose } = useDisclosure();

  const user = JSON.parse(localStorage.getItem("user"))

  const { routes, setOpenSidebar, openSidebar } = props;

  // verifies if routeName is the one active (in browser input)
  const activeRoute = (routeName) => {
    return location.pathname ===  routeName;
  };


  // this function creates the links from the secondary accordions (for example auth -> sign-in -> default)
  const createLinks = (routes) => {

    return routes?.map((route, index) => {
      if (route?.category) {
        return (
          <>
            <Text
              fontSize={"md"}
              color={activeColor}
              fontWeight='bold'
              mx='auto'
              ps={{
                sm: "10px",
                xl: "16px",
              }}
              pt='18px'
              pb='10px'
              key={index}>
              {route?.name}
            </Text>
            {createLinks(route?.items)}
          </>
        );
      } else if (!route?.under && user?.role && route?.layout?.includes(`/${user?.role}`)) {
        return (
          <NavLink key={index} to={route.path}>
            {route?.separator &&
              <Box position='relative'
                margin='20px 0'
              >
                <Divider />
                <AbsoluteCenter textTransform={'capitalize'} bg='white' width={'max-content'} padding='0 10px' textAlign={'center'}>
                  {route?.separator}
                </AbsoluteCenter>
              </Box>
            }
            {
              route.icon ? (
                <Box backgroundColor={activeRoute(route.path.toLowerCase())
                  ? sidebarBgColor
                  : ""}
                  ps={"25px"} pb={"6px"} pt={"10px"}>

                  <HStack
                    spacing={activeRoute(route.path.toLowerCase()) ? "22px" : "26px"}
                    py='5px'
                  >
                    {openSidebar === true ?
                      <Flex w='100%' alignItems='center' justifyContent='center'
                      // onClick={() => setOpenSidebar(!openSidebar)}
                      >
                        <Box
                          color={
                            activeRoute(route.path.toLowerCase())
                              ? activeIcon
                              : textColor
                          }
                          me='18px' >
                          {route.icon}
                        </Box>
                        <Text
                          me='auto'
                          pb={"3px"}
                          textOverflow={"ellipsis"}
                          textTransform={'capitalize'}
                          overflowX="hidden"
                          whiteSpace='nowrap'
                          width="190px"
                          color={
                            activeRoute(route.path.toLowerCase())
                              ? activeColor
                              : textColor
                          }
                          fontWeight={
                            activeRoute(route.path.toLowerCase())
                              ? "bold"
                              : "normal"
                          }>
                          <Tooltip hasArrow label={route.name}>
                            {route.name}
                          </Tooltip>
                        </Text>
                      </Flex>
                      :
                      <Flex w='100%' alignItems='center' justifyContent='center'
                      //  onClick={() => setOpenSidebar(!openSidebar)}
                      >
                        <Box
                          color={
                            activeRoute(route.path.toLowerCase())
                              ? activeIcon
                              : textColor
                          }
                          me='18px' >
                          {route.icon}
                        </Box>
                      </Flex>}
                    <Box
                      // h='36px'
                      w='4px'
                      bg={
                        activeRoute(route.path.toLowerCase())
                          ? brandColor
                          : brandColor
                      }
                      borderRadius='5px'
                    />
                  </HStack>
                </Box>
              ) : (
                <Box>
                  <HStack
                    spacing={
                      activeRoute(route.path.toLowerCase()) ? "22px" : "26px"
                    }
                    py='5px'
                    ps='10px'>
                    <Text
                      me='auto'
                      color={
                        activeRoute(route.path.toLowerCase())
                          ? activeColor
                          : inactiveColor
                      }
                      fontWeight={
                        activeRoute(route.path.toLowerCase()) ? "bold" : "normal"
                      }>
                      {route.name}
                    </Text>
                    <Box h='36px' w='4px' bg='brand.400' borderRadius='5px' />
                  </HStack>
                </Box>
              )
            }
          </NavLink>
        );
      }

    });
  };
  //  BRAND
  return createLinks(routes);
}

export default SidebarLinks;

================
File: Client/src/components/sidebar/components/SidebarCard.js
================
import {
  Button,
  Flex,
  Image,
  Link,
  Text,
  useColorModeValue,
} from "@chakra-ui/react";
import logoWhite from "assets/img/layout/logoWhite.png";
import React from "react";

export default function SidebarDocs() {
  const bgColor = "linear-gradient(135deg, #868CFF 0%, #4318FF 100%)";
  const borderColor = useColorModeValue("white", "navy.800");
  return (
    <Flex
      justify='center'
      direction='column'
      align='center'
      bg={bgColor}
      borderRadius='30px'
      position='relative'>
      <Flex
        border='5px solid'
        borderColor={borderColor}
        bg='linear-gradient(135deg, #868CFF 0%, #4318FF 100%)'
        borderRadius='50%'
        w='94px'
        h='94px'
        align='center'
        justify='center'
        mx='auto'
        position='absolute'
        left='50%'
        top='-47px'
        transform='translate(-50%, 0%)'>
        <Image src={logoWhite} w='40px' h='40px' />
      </Flex>
      <Flex
        direction='column'
        mb='12px'
        align='center'
        justify='center'
        px='15px'
        pt='55px'>
        <Text
          fontSize={{ base: "lg", xl: "18px" }}
          color='white'
          fontWeight='bold'
          lineHeight='150%'
          textAlign='center'
          px='10px'
          mt="10px"
          mb='6px'>
          Upgrade to PRO
        </Text>
        <Text
          fontSize='14px'
          color={"white"}
          fontWeight='500'
          px='10px'
          mb='6px'
          textAlign='center'>
          Improve your development process and start doing more with Horizon UI
          PRO!
        </Text>
      </Flex>
      <Link href='https://horizon-ui.com/pro?ref=horizon-chakra-free'>
        <Button
          bg='whiteAlpha.300'
          _hover={{ bg: "whiteAlpha.200" }}
          _active={{ bg: "whiteAlpha.100" }}
          mb={{ sm: "16px", xl: "24px" }}
          color={"white"}
          fontWeight='regular'
          fontSize='sm'
          minW='185px'
          mx='auto'>
          Upgrade to PRO
        </Button>
      </Link>
    </Flex>
  );
}

================
File: Client/src/components/sidebar/Sidebar.js
================
import React, { useState } from "react";

// chakra imports
import {
  Box,
  Flex,
  Drawer,
  DrawerBody,
  Icon,
  useColorModeValue,
  DrawerOverlay,
  useDisclosure,
  DrawerContent,
  DrawerCloseButton,
} from "@chakra-ui/react";
import Content from "components/sidebar/components/Content";
import {
  renderThumb,
  renderTrack,
  renderView,
} from "components/scrollbar/Scrollbar";
import { Scrollbars } from "react-custom-scrollbars-2";
import PropTypes from "prop-types";

// Assets
import { IoMenuOutline } from "react-icons/io5";

function Sidebar(props) {
  const { routes, setOpenSidebar, openSidebar, largeLogo } = props;

  let variantChange = "0.2s linear";
  let shadow = useColorModeValue(
    "14px 17px 40px 4px rgba(112, 144, 176, 0.08)",
    "unset"
  );
  // Chakra Color Mode
  let sidebarBg = useColorModeValue("white", "navy.800");
  let sidebarMargins = "0px";
  const { isOpen, onOpen, onClose } = useDisclosure();
  // SIDEBAR
  return (
    <Box display={{ sm: "none", xl: "block" }} w="100%" position='fixed' minH='100%'>
      <Box
        bg={sidebarBg}
        transition={variantChange}
        // w='280px'
        w={openSidebar ? '280px' : "80px"}
        h='100vh'
        m={sidebarMargins}
        minH='100%'
        overflowX='hidden'
        boxShadow={shadow}>
        <Scrollbars
          autoHide
          renderTrackVertical={renderTrack}
          renderThumbVertical={renderThumb}
          renderView={renderView}>
          <Content routes={routes} largeLogo={largeLogo} openSidebar={openSidebar} setOpenSidebar={setOpenSidebar} />
        </Scrollbars>
      </Box>
    </Box>
  );
}

// FUNCTIONS
export function SidebarResponsive(props) {
  let sidebarBackgroundColor = useColorModeValue("white", "navy.800");
  let menuColor = useColorModeValue("gray.400", "white");
  // // SIDEBAR
  const { isOpen, onOpen, onClose } = useDisclosure();
  const btnRef = React.useRef();
  const { routes, setOpenSidebar, openSidebar } = props;
  // let isWindows = navigator.platform.startsWith("Win");
  //  BRAND
  const handlesidebarClose = () => {
    // setOpenSidebar(false)
    onClose();
  }
  return (
    <Flex display={{ sm: "flex", xl: "none" }} alignItems='center'>
      <Flex
        ref={btnRef}
        w='max-content' h='max-content' onClick={() => { onOpen(); setOpenSidebar(true) }}>
        <Icon
          as={IoMenuOutline}
          color={menuColor}
          my='auto'
          w='20px'
          h='20px'
          me='10px'
          _hover={{ cursor: "pointer" }}
        />
      </Flex>

      <Drawer
        isOpen={isOpen}
        onClose={handlesidebarClose}
        placement={document.documentElement.dir === "rtl" ? "right" : "left"}
        finalFocusRef={btnRef}>
        <DrawerOverlay />
        <DrawerContent boxShadow={'xl'} w='285px' maxW='285px' bg={sidebarBackgroundColor}>
          <DrawerCloseButton
            zIndex='3'
            onClose={handlesidebarClose}
            _focus={{ boxShadow: "none" }}
            _hover={{ boxShadow: "none" }}
          />
          <DrawerBody maxW='285px' px='0rem' pb='0'>
            <Scrollbars
              autoHide
              renderTrackVertical={renderTrack}
              renderThumbVertical={renderThumb}
              renderView={renderView}>
              <Content from={"modal"} routes={routes} openSidebar={openSidebar} setOpenSidebar={setOpenSidebar} />
            </Scrollbars>
          </DrawerBody>
        </DrawerContent>
      </Drawer>
    </Flex>
  );
}
// PROPS

Sidebar.propTypes = {
  logoText: PropTypes.string,
  routes: PropTypes.arrayOf(PropTypes.object),
  variant: PropTypes.string,
};

export default Sidebar;

================
File: Client/src/components/spinner/Spinner.js
================
import './style.css';
const Spinner = () => <div className="loader"></div>;

export default Spinner;

================
File: Client/src/components/spinner/style.css
================
.loader {
    border: 5px solid #f3f3f3;
    border-top: 5px solid #3442df;
    width: 30px;
    border-radius: 50%;
    height: 30px;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }
}

================
File: Client/src/components/Dropzone.js
================
// Chakra imports
import { Button, Flex, Input, useColorModeValue } from "@chakra-ui/react";
// Assets
import React from "react";
import { useDropzone } from "react-dropzone";

function Dropzone(props) {
  const { content, ...rest } = props;
  const { getRootProps, getInputProps } = useDropzone({
    // multiple: true, // Set to false if you only want to allow selecting one file
    multiple: props.hasOwnProperty('isMultipleAllow') ? props.isMultipleAllow : true, // assign false in props.isMultipleAllow if you only want to allow selecting one file
    onDrop: (acceptedFiles) => {
      if (props.img === "img") {
        const imageFiles = acceptedFiles.filter((file) => {
          return file.type.startsWith("image/");
        })
        if (imageFiles.length > 0) {
          props.onFileSelect(imageFiles);
        }
      }
      else if (props.csv === "csv") {
        const excelFiles = acceptedFiles.filter((file) => {
          return ["text/csv", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"]?.includes(file?.type)
        })
        if (excelFiles.length > 0) {
          props.onFileSelect(excelFiles);
        }
      }
      else if (acceptedFiles.length > 0) {
        props.onFileSelect(acceptedFiles);
      }

    },
  });

  const bg = useColorModeValue("gray.100", "navy.700");
  const borderColor = useColorModeValue("secondaryGray.100", "whiteAlpha.100");
  return (
    <Flex
      align='center'
      justify='center'
      bg={bg}
      border='1px dashed'
      borderColor={borderColor}
      borderRadius='16px'
      w='100%'
      h='max-content'
      minH='100%'
      cursor='pointer'
      {...getRootProps({ className: "dropzone" })}
      {...rest}>
      <Input type="file" variant='main' multiple {...getInputProps()} />
      <Button variant='no-effects'>{content}</Button>
    </Flex>
  );
}

export default Dropzone;

================
File: Client/src/contexts/RoleContext.js
================
import React, { createContext, useContext, useEffect, useState } from 'react';
import { getApi } from 'services/api';

// Create context
const RoleContext = createContext();

// Create provider
export const RoleProvider = ({ children }) => {
    const [roleData, setRoleData] = useState(null);

    const user = JSON.parse(localStorage.getItem('user'))

    // Fetch user data from API
    useEffect(async () => {
        // Call API here
        // Example using fetch:
        if (user) {
            const response = await getApi(`api/user/view/${user?._id}`)
            setRoleData(response?.data?.roles)
        }
    }, []);

    return (
        <RoleContext.Provider value={roleData}>
            {children}
        </RoleContext.Provider>
    );
};

// Custom hook to access user data
export const useRole = () => useContext(RoleContext);

================
File: Client/src/contexts/SidebarContext.js
================
import { createContext } from "react";

export const SidebarContext = createContext();

================
File: Client/src/layouts/admin/index.js
================
// Chakra imports
import { Portal, Box, useDisclosure, Flex, Icon } from '@chakra-ui/react';
import Footer from 'components/footer/FooterAdmin.js';
// Layout components
import Navbar from 'components/navbar/NavbarAdmin.js';
import Sidebar from 'components/sidebar/Sidebar.js';
import Spinner from 'components/spinner/Spinner';
import { SidebarContext } from 'contexts/SidebarContext';
import React, { Suspense, useEffect } from 'react';
import { useState } from 'react';
import { Navigate, Route, Routes } from 'react-router-dom';
import { ROLE_PATH } from '../../roles';
import newRoutes from 'routes.js';
import { useDispatch, useSelector } from 'react-redux';
import { fetchImage } from '../../redux/slices/imageSlice';
import { getApi } from 'services/api';
import { MdHome, MdLock } from 'react-icons/md';
import DynamicPage from 'views/admin/dynamicPage';
import DynamicPageview from 'views/admin/dynamicPage/DynamicPageview';
import { fetchRouteData } from '../../redux/slices/routeSlice';
import { LuChevronRightCircle } from 'react-icons/lu';
import { fetchRoles } from '../../redux/slices/roleSlice';
import { fetchModules } from '../../redux/slices/moduleSlice';

const MainDashboard = React.lazy(() => import("views/admin/default"));

// Custom Chakra theme
export default function Dashboard(props) {
	const { ...rest } = props;
	// states and functions
	const [fixed] = useState(false);
	const [toggleSidebar, setToggleSidebar] = useState(false);
	const [openSidebar, setOpenSidebar] = useState(false)
	// const user = JSON.parse(localStorage.getItem("user"))
	const userId = JSON.parse(localStorage.getItem("user"))?._id;

	// let routes = newRoutes;
	const [routes, setRoutes] = useState(newRoutes)
	const route = useSelector((state) => state?.route?.data)
	const modules = useSelector((state) => state?.modules?.data)
	const dispatch = useDispatch();

	const pathName = (name) => {
		return `/${name?.toLowerCase()?.replace(/ /g, '-')}`;
	}

	const getRoute = () => {
		return window.location.pathname !== '/admin/full-screen-maps';
	};

	const dynamicRoute = () => {
		let apiData = []

		route && route?.length > 0 && route?.map((item, i) => {
			let rec = routes.find(route => route?.name === item?.moduleName)
			if (!routes.some(route => route?.name === item?.moduleName)) {

				const newRoute = [{
					name: item?.moduleName,
					layout: [ROLE_PATH.superAdmin],
					path: pathName(item.moduleName),
					icon: item?.icon ? (
						<img src={item?.icon} width="20px" height="20px" alt="icon" />
					) : (
						<Icon as={LuChevronRightCircle} width="20px" height="20px" color="inherit" />
					),
					component: DynamicPage,
				},
				{
					name: item?.moduleName,
					layout: [ROLE_PATH.superAdmin],
					under: item?.moduleName,
					parentName: item?.moduleName,
					path: `${pathName(item.moduleName)}/:id`,
					icon: item?.icon ? (
						<img src={item?.icon} width="20px" height="20px" alt="icon" />
					) : (
						<Icon as={LuChevronRightCircle} width="20px" height="20px" color="inherit" />
					),
					component: DynamicPageview,
				}
				]
				setRoutes((pre) => [...pre, ...newRoute])
			} else if (routes.some(route => route?.name === item?.moduleName) && rec.icon?.props?.src !== item?.icon) {

				const updatedData = routes?.map(i => {
					if (i.name === item?.moduleName) {
						return { ...i, icon: <img src={item?.icon} width="20px" height="20px" alt="icon" /> };
					}
					return i;
				});
				setRoutes(updatedData)
			}
			if (routes.find(route => route?.name !== item?.moduleName)) {

				if (!newRoutes.find(route => route?.name?.toLowerCase() === item?.moduleName?.toLowerCase())) {

					const newRoute = [{
						name: item?.moduleName,
						layout: [ROLE_PATH.superAdmin],
						path: pathName(item.moduleName),
						icon: item?.icon ? (
							<img src={item?.icon} width="20px" height="20px" alt="icon" />
						) : (
							<Icon as={LuChevronRightCircle} width="20px" height="20px" color="inherit" />
						),
						component: DynamicPage,
					},
					{
						name: item?.moduleName,
						layout: [ROLE_PATH.superAdmin],
						under: item?.moduleName,
						parentName: item?.moduleName,
						path: `${pathName(item.moduleName)}/:id`,
						icon: item?.icon ? (
							<img src={item?.icon} width="20px" height="20px" alt="icon" />
						) : (
							<Icon as={LuChevronRightCircle} width="20px" height="20px" color="inherit" />
						),
						component: DynamicPageview,
					}
					]

					apiData.push(...newRoute)
				}
			}

		});

		let filterData = [...newRoutes, ...apiData]

		const activeModel = modules?.filter(module => module?.isActive)?.map(module => module?.moduleName);

		const activeRoutes = filterData?.filter(
			(data) =>
				activeModel?.includes(data?.name) ||
				activeModel?.includes(data?.parentName) ||
				!modules?.some(
					(module) =>
						module?.moduleName === data?.name ||
						module?.moduleName === data?.parentName
				)
		);

		setRoutes(activeRoutes)

	};

	const getActiveRoute = (routes) => {
		let activeRoute = 'Prolink';
		for (let i = 0; i < routes.length; i++) {
			if (routes[i].collapse) {
				let collapseActiveRoute = getActiveRoute(routes[i].items);
				if (collapseActiveRoute !== activeRoute) {
					return collapseActiveRoute;
				}
			} else if (routes[i].category) {
				let categoryActiveRoute = getActiveRoute(routes[i].items);
				if (categoryActiveRoute !== activeRoute) {
					return categoryActiveRoute;
				}
			} else {
				if (window.location.href.indexOf(routes[i].path.replace("/:id", "")) !== -1) {
					return routes[i].name;
				}
			}
		}
		return activeRoute;
	};


	useEffect(() => {
		dynamicRoute();
	}, [route, modules]);

	useEffect(async () => {
		if (window.location.pathname === "/default") {
			await dispatch(fetchRouteData());
			await dispatch(fetchImage());
		}
		await dispatch(fetchModules())
	}, []);

	const largeLogo = useSelector((state) => state?.images?.images?.filter(item => item?.isActive === true));

	const under = (routes) => {
		let activeRoute = false
		for (let i = 0; i < routes.length; i++) {
			if (routes[i].collapse) {
				let collapseActiveRoute = getActiveRoute(routes[i].items);
				if (collapseActiveRoute !== activeRoute) {
					return collapseActiveRoute;
				}
			} else if (routes[i].category) {
				let categoryActiveRoute = getActiveRoute(routes[i].items);
				if (categoryActiveRoute !== activeRoute) {
					return categoryActiveRoute;
				}
			} else {
				if (window.location.href.indexOf(routes[i].path.replace("/:id", "")) !== -1) {
					return routes[i];
				}
			}
		}
		return activeRoute;
	};

	const getActiveNavbar = (routes) => {
		let activeNavbar = false;
		for (let i = 0; i < routes.length; i++) {
			if (routes[i].collapse) {
				let collapseActiveNavbar = getActiveNavbar(routes[i].items);
				if (collapseActiveNavbar !== activeNavbar) {
					return collapseActiveNavbar;
				}
			} else if (routes[i].category) {
				let categoryActiveNavbar = getActiveNavbar(routes[i].items);
				if (categoryActiveNavbar !== activeNavbar) {
					return categoryActiveNavbar;
				}
			} else {
				if (window.location.href.indexOf(routes[i].path) !== -1) {
					return routes[i].secondary;
				}
			}
		}
		return activeNavbar;
	};
	const getActiveNavbarText = (routes) => {
		let activeNavbar = false;
		for (let i = 0; i < routes.length; i++) {
			if (routes[i].collapse) {
				let collapseActiveNavbar = getActiveNavbarText(routes[i].items);
				if (collapseActiveNavbar !== activeNavbar) {
					return collapseActiveNavbar;
				}
			} else if (routes[i].category) {
				let categoryActiveNavbar = getActiveNavbarText(routes[i].items);
				if (categoryActiveNavbar !== activeNavbar) {
					return categoryActiveNavbar;
				}
			} else {
				if (window.location.href.indexOf(routes[i].path) !== -1) {
					return routes[i].messageNavbar;
				}
			}
		}
		return activeNavbar;
	};

	const getRoutes = (routes) => {
		return routes.map((prop, key) => {
			// if (!prop.under && prop.layout === '/superAdmin') {
			if (!prop.under && prop.layout?.includes(ROLE_PATH.superAdmin)) {
				return <Route path={prop.path} element={<prop.component />} key={key} />;
			} else if (prop.under) {
				return <Route path={prop.path} element={<prop.component />} key={key} />
			}
			if (prop.collapse) {
				return getRoutes(prop.items);
			}
			if (prop.category) {
				return getRoutes(prop.items);
			} else {
				return null;
			}
		});
	};

	useEffect(() => {
		if (window.location.pathname === "/default") {
			dispatch(fetchRoles(userId))
		}
	}, [userId]);

	document.documentElement.dir = 'ltr';
	const { onOpen } = useDisclosure();
	document.documentElement.dir = 'ltr';
	return (
		<Box>
			<Box>
				<SidebarContext.Provider
					value={{
						toggleSidebar,
						setToggleSidebar
					}}>
					<Sidebar routes={routes} largeLogo={largeLogo} display='none' {...rest} openSidebar={openSidebar} setOpenSidebar={setOpenSidebar} />
					<Box
						float='right'
						minHeight='100vh'
						height='100%'

						overflow='auto'
						position='relative'
						maxHeight='100%'
						// w={{ base: '100%', xl: 'calc( 100% - 290px )' }}
						w={{ base: '100%', xl: openSidebar === true ? 'calc( 100% - 300px )' : 'calc( 100% - 88px )' }}
						maxWidth={{ base: '100%', xl: openSidebar === true ? 'calc( 100% - 300px )' : 'calc( 100% - 88px )' }}
						transition='all 0.33s cubic-bezier(0.685, 0.0473, 0.346, 1)'
						transitionDuration='.2s, .2s, .35s'
						transitionProperty='top, bottom, width'
						transitionTimingFunction='linear, linear, ease'>
						<Portal >
							<Box className="header">
								<Navbar
									onOpen={onOpen}
									logoText={'Horizon UI Dashboard PRO'}
									brandText={getActiveRoute(routes)}
									secondary={getActiveNavbar(routes)}
									message={getActiveNavbarText(routes)}
									routes={routes}
									fixed={fixed}
									under={under(routes)}
									largeLogo={largeLogo}
									openSidebar={openSidebar} setOpenSidebar={setOpenSidebar}
									{...rest}
								/>
							</Box>
						</Portal>
						<Box pt={{ base: "150px", md: "95px", xl: "95px" }}>
							{getRoute() ? (
								<Box mx='auto' pe='20px' minH='84vh' pt='50px' style={{ padding: openSidebar ? '8px 20px 8px 0px' : '8px 20px' }}>
									<Suspense fallback={
										<Flex justifyContent={'center'} alignItems={'center'} width="100%" >
											<Spinner />
										</Flex>
									}>
										<Routes>
											{getRoutes(routes)}
											<Route path="/*" element={<Navigate to="/default" />} />
										</Routes>
									</Suspense>
								</Box>
							) : null}
						</Box>
						<Box>
							<Footer />
						</Box>
					</Box>
				</SidebarContext.Provider>
			</Box>
		</Box>
	);
}

================
File: Client/src/layouts/auth/Default.js
================
// Chakra imports
import { Box, Flex } from "@chakra-ui/react";
import Footer from "components/footer/FooterAuth";
import FixedPlugin from "components/fixedPlugin/FixedPlugin";
import { Link } from "react-router-dom";
// Custom components
// Assets

function AuthIllustration(props) {
  const { children, illustrationBackground } = props;
  // Chakra color mode
  return (
    <Flex h='max-content'>

      <Flex
        h={{
          sm: "initial",
          md: "unset",
          lg: "100vh",
          xl: "97vh",
        }}
        w='100%'
        maxW={{ md: "66%", lg: "1313px" }}
        mx='auto'
        pt={{ sm: "50px", md: "0px" }}
        px={{ lg: "30px", xl: "0px" }}
        ps={{ xl: "70px" }}
        justifyContent='center'
        direction='column'>
        {children}
        <Box
          display={{ base: "none", md: "flex" }}
          h='100%'
          minH='100vh'
          w={{ lg: "50vw", "2xl": "44vw" }}
          borderBottomLeftRadius={{ lg: "120px", xl: "200px" }}
          justifyContent='center'
          position='absolute'
          flexDirection={'column'}
          alignItems={'center'}
          // bg={'black'}
          overflow={'hidden'}
          right='0px'>
          <Link to="https://prolinkinfotech.com/" target="_blank" style={{ height: '50%', width: '50%' }} >
            <Flex
              bg={`url(${illustrationBackground})`}
              justify='center'
              align='center'
              w='100%'
              h='100%'
              bgSize='cover'
              bgPosition='50%'
            />
          </Link>
          {/* <Box
            border={'1px solid'}
            p={4}
            borderRadius={10}
          >
            Hi
          </Box> */}
        </Box>
        <Footer />
      </Flex>
      {/* CHANGE THEME COLOR BUTTON LIGHT-DARK */}
      {/* <FixedPlugin /> */}
    </Flex>
  );
}
// PROPS

// AuthIllustration.propTypes = {
//   illustrationBackground: PropTypes.string,
//   image: PropTypes.any,
// };

export default AuthIllustration;

================
File: Client/src/layouts/auth/index.js
================
import { Suspense, useState } from "react";
import { Navigate, Route, Routes } from "react-router-dom";
import routes from "routes.js";

// Chakra imports
import { Box, Flex, useColorModeValue } from "@chakra-ui/react";

// Layout components
import { SidebarContext } from "contexts/SidebarContext";
import Spinner from "components/spinner/Spinner";

// Custom Chakra theme
export default function Auth({ setIsLogin }) {

  // states and functions
  const [toggleSidebar, setToggleSidebar] = useState(false);
  // functions for changing the states from components
  const getRoute = () => {
    return window.location.pathname !== "/auth/full-screen-maps";
  };
  const getRoutes = (routes) => {
    return routes.map((prop, key) => {
      if (prop.layout === "/auth") {
        return (
          <Route
            path={prop.layout + prop.path}
            element={<prop.component />}
            key={key}
          />
        );
      }
      if (prop.collapse) {
        return getRoutes(prop.items);
      }
      if (prop.category) {
        return getRoutes(prop.items);
      } else {
        return null;
      }
    });
  };

  const authBg = useColorModeValue("white", "navy.900");
  document.documentElement.dir = "ltr";
  return (
    <Box>
      <SidebarContext.Provider
        value={{
          toggleSidebar,
          setToggleSidebar,
        }}>
        <Box
          bg={authBg}
          float='right'
          minHeight='100vh'
          height='100%'
          position='relative'
          w='100%'
          transition='all 0.33s cubic-bezier(0.685, 0.0473, 0.346, 1)'
          transitionDuration='.2s, .2s, .35s'
          transitionProperty='top, bottom, width'
          transitionTimingFunction='linear, linear, ease'
        >
          {getRoute() ? (
            <Box mx='auto' minH='100vh' >
              <Suspense fallback={
                <Flex justifyContent={'center'} alignItems={'center'} width="100%" height={'100vh'}>
                  <Spinner />
                </Flex>
              }>
                <Routes>
                  {getRoutes(routes)}
                  <Route path="/*" element={<Navigate to="/auth/sign-in" />} />
                </Routes>
              </Suspense>
            </Box>
          ) : null}
        </Box>
      </SidebarContext.Provider>
    </Box>
  );
}

================
File: Client/src/layouts/user/index.js
================
// Chakra imports
import { Portal, Box, useDisclosure, Text, Button, Link, Flex, Icon } from '@chakra-ui/react';
import Footer from 'components/footer/FooterAdmin.js';
// Layout components
import Navbar from 'components/navbar/NavbarAdmin.js';
import Sidebar from 'components/sidebar/Sidebar.js';
import { SidebarContext } from 'contexts/SidebarContext';
import React, { Suspense, useEffect, useState } from 'react';
import { Navigate, Route, Routes } from 'react-router-dom';
import { ROLE_PATH } from '../../roles';
import newRoute from 'routes.js';
import { MdHome, MdLock } from 'react-icons/md';
import Spinner from 'components/spinner/Spinner';
import { useDispatch, useSelector } from 'react-redux';
import { fetchImage } from '../../redux/slices/imageSlice';
import { getApi } from 'services/api';
import DynamicPage from 'views/admin/dynamicPage';
import { LuChevronRightCircle } from 'react-icons/lu';
import { FaCalendarAlt } from 'react-icons/fa';
import { fetchModules } from '../../redux/slices/moduleSlice';

const MainDashboard = React.lazy(() => import("views/admin/default"));
const SignInCentered = React.lazy(() => import("views/auth/signIn"));
const Calender = React.lazy(() => import("views/admin/calender"));
const UserView = React.lazy(() => import("views/admin/users/View"));

// Custom Chakra theme
export default function User(props) {
    const { ...rest } = props;
    // states and functions
    const [fixed] = useState(false);
    const [toggleSidebar, setToggleSidebar] = useState(false);
    const [route, setRoute] = useState();
    const [openSidebar, setOpenSidebar] = useState(true)
    const user = JSON.parse(localStorage.getItem("user"))
    const modules = useSelector((state) => state?.modules?.data)
    // functions for changing the states from components
    const getRoute = () => {
        return window.location.pathname !== '/admin/full-screen-maps';
    };


    const fetchRoute = async () => {
        let response = await getApi("api/route/");
        setRoute(response?.data);
    };

    const pathName = (name) => {
        return `/${name.toLowerCase().replace(/ /g, '-')}`;
    }


    useEffect(() => {
        fetchRoute();
    }, []);

    const layoutName = user?.roles?.map(item => `/${item.roleName}`)

    const filterAccess = (rolesData) => {
        return rolesData?.map(role => {
            role.access = role?.access?.filter(access => access.view);
            return role;
        });
    };

    // Example usage:
    const updatedRolesData = filterAccess(user?.roles);
    let access = []
    updatedRolesData?.map((item) => {
        item?.access?.map((data) => access.push(data))
    })

    let mergedPermissions = {};

    access.forEach((permission) => {
        const { title, ...rest } = permission;

        if (!mergedPermissions[title]) {
            mergedPermissions[title] = { ...rest };
        } else {
            // Merge with priority to true values
            Object.keys(rest).forEach((key) => {
                if (mergedPermissions[title][key] !== true) {
                    mergedPermissions[title][key] = rest[key];
                }
            });
        }
    });

    let routes =
        [
            {
                name: "Dashboard",
                layout: [ROLE_PATH.user],
                path: "/default",
                icon: <Icon as={MdHome} width='20px' height='20px' color='inherit' />,
                component: MainDashboard,
            }, {
                name: "Sign In",
                layout: "/auth",
                path: "/sign-in",
                icon: <Icon as={MdLock} width='20px' height='20px' color='inherit' />,
                component: SignInCentered,
            },
            {
                name: "Calender",
                layout: [ROLE_PATH.user],
                path: "/calender",
                icon: <Icon as={FaCalendarAlt} width='20px' height='20px' color='inherit' />,
                component: Calender,
            },
            {
                name: "User View",
                layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
                parentName: "Email",
                under: "user",
                path: "/userView/:id",
                component: UserView,
            },
        ]

    route?.map((item, i) => {
        if (!newRoute.some(route => route.name === item.moduleName)) {
            return (
                newRoute.push({
                    name: item?.moduleName,
                    layout: [ROLE_PATH.user],
                    path: pathName(item.moduleName),
                    icon: <Icon as={LuChevronRightCircle} width='20px' height='20px' color='inherit' />,
                    component: DynamicPage,
                })
            )
        }
    })
    const accessRoute = newRoute?.filter(item => Object.keys(mergedPermissions)?.find(data => (data?.toLowerCase() === item?.name?.toLowerCase()) || (data?.toLowerCase() === item.parentName?.toLowerCase())))

    // routes.push(...accessRoute)
    let filterData = [...accessRoute]

    const activeModel = modules?.filter(module => module?.isActive)?.map(module => module?.moduleName);

    const activeRoutes = filterData?.filter(
        (data) =>
            activeModel?.includes(data?.name) ||
            activeModel?.includes(data?.parentName) ||
            !modules?.some(
                (module) =>
                    module?.moduleName === data?.name ||
                    module?.moduleName === data?.parentName
            )
    );
    routes.push(...activeRoutes)

    const getActiveRoute = (routes) => {
        let activeRoute = 'Prolink';
        for (let i = 0; i < routes.length; i++) {
            if (routes[i].collapse) {
                let collapseActiveRoute = getActiveRoute(routes[i].items);
                if (collapseActiveRoute !== activeRoute) {
                    return collapseActiveRoute;
                }
            } else if (routes[i].category) {
                let categoryActiveRoute = getActiveRoute(routes[i].items);
                if (categoryActiveRoute !== activeRoute) {
                    return categoryActiveRoute;
                }
            } else {
                if (window.location.href.indexOf(routes[i].path.replace("/:id", "")) !== -1) {
                    return routes[i].name;
                }
            }
        }
        return activeRoute;
    };
    const under = (routes) => {
        let activeRoute = false
        for (let i = 0; i < routes?.length; i++) {
            if (routes[i]?.collapse) {
                let collapseActiveRoute = getActiveRoute(routes[i]?.items);
                if (collapseActiveRoute !== activeRoute) {
                    return collapseActiveRoute;
                }
            } else if (routes[i]?.category) {
                let categoryActiveRoute = getActiveRoute(routes[i]?.items);
                if (categoryActiveRoute !== activeRoute) {
                    return categoryActiveRoute;
                }
            } else {
                if (window.location.href?.indexOf(routes[i]?.path?.replace("/:id", "")) !== -1) {
                    return routes[i];
                }
            }
        }
        return activeRoute;
    };

    const getActiveNavbar = (routes) => {
        let activeNavbar = false;
        for (let i = 0; i < routes.length; i++) {
            if (routes[i].collapse) {
                let collapseActiveNavbar = getActiveNavbar(routes[i].items);
                if (collapseActiveNavbar !== activeNavbar) {
                    return collapseActiveNavbar;
                }
            } else if (routes[i].category) {
                let categoryActiveNavbar = getActiveNavbar(routes[i].items);
                if (categoryActiveNavbar !== activeNavbar) {
                    return categoryActiveNavbar;
                }
            } else {
                if (window.location.href.indexOf(routes[i].path) !== -1) {
                    return routes[i].secondary;
                }
            }
        }
        return activeNavbar;
    };
    const getActiveNavbarText = (routes) => {
        let activeNavbar = false;
        for (let i = 0; i < routes.length; i++) {
            if (routes[i].collapse) {
                let collapseActiveNavbar = getActiveNavbarText(routes[i].items);
                if (collapseActiveNavbar !== activeNavbar) {
                    return collapseActiveNavbar;
                }
            } else if (routes[i].category) {
                let categoryActiveNavbar = getActiveNavbarText(routes[i].items);
                if (categoryActiveNavbar !== activeNavbar) {
                    return categoryActiveNavbar;
                }
            } else {
                if (window.location.href.indexOf(routes[i].path) !== -1) {
                    return routes[i].messageNavbar;
                }
            }
        }
        return activeNavbar;
    };


    const getRoutes = (routes) => {
        return routes?.map((prop, key) => {
            // if (!prop.under && prop.layout === '/admin') {
            if (!prop?.under && prop?.layout !== '/auth') {
                return <Route path={prop?.path} element={prop && <prop.component />} key={key} />;
            } else if (prop?.under) {
                return <Route path={prop?.path} element={prop && <prop.component />} key={key} />
            }
            if (prop?.collapse) {
                return getRoutes(prop?.items);
            }
            if (prop?.category) {
                return getRoutes(prop?.items);
            } else {
                return null;
            }
        });
    };
    document.documentElement.dir = 'ltr';
    const { onOpen } = useDisclosure();
    document.documentElement.dir = 'ltr';

    const dispatch = useDispatch();

    useEffect(() => {
        // Dispatch the fetchRoles action on component mount
        dispatch(fetchImage());
        dispatch(fetchModules())

    }, [dispatch]);

    const largeLogo = useSelector((state) => state?.images?.images?.filter(item => item?.isActive === true));


    return (
        <Box>
            <Box>
                <SidebarContext.Provider
                    value={{
                        toggleSidebar,
                        setToggleSidebar
                    }}>
                    <Sidebar routes={routes} display='none' {...rest} openSidebar={openSidebar} setOpenSidebar={setOpenSidebar} largeLogo={largeLogo} />
                    <Box
                        float='right'
                        minHeight='100vh'
                        height='100%'
                        overflow='auto'
                        position='relative'
                        maxHeight='100%'
                        // w={{ base: '100%', xl: 'calc( 100% - 290px )' }}
                        w={{ base: '100%', xl: openSidebar === true ? 'calc( 100% - 300px )' : 'calc( 100% - 88px )' }}
                        maxWidth={{ base: '100%', xl: openSidebar === true ? 'calc( 100% - 300px )' : 'calc( 100% - 88px )' }}
                        transition='all 0.33s cubic-bezier(0.685, 0.0473, 0.346, 1)'
                        transitionDuration='.2s, .2s, .35s'
                        transitionProperty='top, bottom, width'
                        transitionTimingFunction='linear, linear, ease'>
                        <Portal>
                            <Box className='header'>
                                <Navbar
                                    onOpen={onOpen}
                                    logoText={'Horizon UI Dashboard PRO'}
                                    brandText={getActiveRoute(routes)}
                                    secondary={getActiveNavbar(routes)}
                                    message={getActiveNavbarText(routes)}
                                    fixed={fixed}
                                    routes={routes}
                                    under={under(routes)}
                                    largeLogo={largeLogo}
                                    openSidebar={openSidebar} setOpenSidebar={setOpenSidebar}
                                    {...rest}
                                />
                            </Box>
                        </Portal>
                        <Box pt={{ base: "150px", md: "95px", xl: "95px" }}>
                            {getRoute() ? (
                                <Box mx='auto' pe='20px' minH='84vh' pt='50px' style={{ padding: openSidebar ? '8px 20px 8px 20px' : '8px 20px' }}>
                                    <Suspense fallback={
                                        <Flex justifyContent={'center'} alignItems={'center'} width="100%" >
                                            <Spinner />
                                        </Flex>
                                    }>
                                        <Routes>
                                            {getRoutes(routes)}
                                            <Route path="/*" element={<Navigate to="/default" />} />
                                        </Routes>
                                    </Suspense>
                                </Box>
                            ) : null}
                        </Box>
                        <Box>
                            <Footer />
                        </Box>
                    </Box>
                </SidebarContext.Provider>
            </Box>
        </Box>
    );
}

================
File: Client/src/redux/slices/accountSlice.js
================
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getApi } from '../../services/api'

export const fetchAccountData = createAsyncThunk('fetchAccountData', async () => {
    const user = JSON.parse(localStorage.getItem("user"));
    try {
        const response = await getApi(user.role === 'superAdmin' ? 'api/account/' : `api/account/?createBy=${user._id}`);
        return response;
    } catch (error) {
        throw error;
    }
});


const accountSlice = createSlice({
    name: 'accountData',
    initialState: {
        data: [],
        isLoading: false,
        error: "",
    },
    extraReducers: (builder) => {
        builder
            .addCase(fetchAccountData.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(fetchAccountData.fulfilled, (state, action) => {
                state.isLoading = false;
                state.data = action.payload;
                state.error = "";
            })
            .addCase(fetchAccountData.rejected, (state, action) => {
                state.isLoading = false;
                state.data = [];
                state.error = action.error.message;
            });
    },
});

export default accountSlice.reducer;

================
File: Client/src/redux/slices/advanceSearchSlice.js
================
import { createSlice } from '@reduxjs/toolkit';
import moment from 'moment';

const initialState = {
    searchValue: {},
    getTagValues: [],
    searchResult: []
};

const advanceSearchSlice = createSlice({
    name: 'advanceSearchValue',
    initialState,
    reducers: {
        setSearchValue(state, action) {
            state.searchValue = action.payload;
        },
        setGetTagValues(state, action) {
            state.getTagValues = action.payload;
        },
        getSearchData(state, action) {
            switch (action.payload.type) {
                case 'Tasks':
                    state.searchResult = action.payload.allData?.filter(item => {
                        return ((!action.payload.values?.title || (item?.title && item?.title.toLowerCase().includes(action.payload.values?.title?.toLowerCase()))) &&
                            (!action.payload.values.status || (item?.status && item?.status.toLowerCase().includes(action.payload.values.status?.toLowerCase()))) &&
                            (!action.payload.values?.category || (item?.category && item?.category.toLowerCase().includes(action.payload.values?.category?.toLowerCase()))) &&
                            (!action.payload.values?.start || (item?.start && item?.start.toLowerCase().includes(action.payload.values?.start?.toLowerCase()))) &&
                            (!action.payload.values?.end || (item?.end && item?.end.toString().includes(action.payload.values?.end))) &&
                            (!action.payload.values?.assignToName || (item?.assignToName && item?.assignToName.toLowerCase().includes(action.payload.values?.assignToName?.toLowerCase()))) &&
                            ([null, undefined, ''].includes(action.payload.values?.fromLeadScore) || [null, undefined, ''].includes(action.payload.values?.toLeadScore) ||
                                ((item?.leadScore || item?.leadScore === 0) &&
                                    (parseInt(item?.leadScore, 10) >= parseInt(action.payload.values.fromLeadScore, 10) || 0) &&
                                    (parseInt(item?.leadScore, 10) <= parseInt(action.payload.values.toLeadScore, 10) || 0)))
                        );
                    });
                    break;
                case 'TasksSearch':
                    state.searchResult = action.payload.searchData;
                    break;
                case 'Meeting':
                    state.searchResult = action.payload.allData?.filter(
                        (item) => {
                            const itemDate = new Date(item.dateTime);
                            const momentDate = moment(itemDate).format('YYYY-MM-DD');
                            const timeItemDate = new Date(item.timestamp);
                            const timeMomentDate = moment(timeItemDate).format('YYYY-MM-DD');
                            return (
                                (!action?.payload?.values?.agenda || (item?.agenda && item?.agenda.toLowerCase().includes(action?.payload?.values?.agenda?.toLowerCase()))) &&
                                (!action?.payload?.values?.createBy || (item?.createBy && item?.createBy.toLowerCase().includes(action?.payload?.values?.createBy?.toLowerCase()))) &&
                                (!action?.payload?.values?.startDate || (momentDate >= action?.payload?.values?.startDate)) &&
                                (!action?.payload?.values?.endDate || (momentDate <= action?.payload?.values?.endDate)) &&
                                (!action?.payload?.values?.timeStartDate || (timeMomentDate >= action?.payload?.values?.timeStartDate)) &&
                                (!action?.payload?.values?.timeEndDate || (timeMomentDate <= action?.payload?.values?.timeEndDate)))
                        }
                    )
                    break;
                case 'MeetingSearch':
                    state.searchResult = action.payload.searchData;
                    break;
                case 'Calls':
                    state.searchResult = action.payload.allData?.filter(
                        (item) =>
                            (!action.payload.values?.senderName || (item?.senderName && item?.senderName.toLowerCase().includes(action.payload.values?.senderName?.toLowerCase()))) &&
                            (!action.payload.values?.realetedTo || (action.payload.values.realetedTo === "contact" ? item.createBy : item.createByLead)) &&
                            (!action.payload.values?.createByName || (item?.createByName && item?.createByName.toLowerCase().includes(action.payload.values?.createByName?.toLowerCase())))
                    )
                    break;
                case 'CallsSearch':
                    state.searchResult = action.payload.searchData;
                    break;
                case 'Leads':
                    state.searchResult = action.payload.allData?.filter(
                        (item) =>
                            (!action.payload.values?.leadStatus || (item?.leadStatus && item?.leadStatus.toLowerCase().includes(action.payload.values?.leadStatus?.toLowerCase())))
                    )
                    break;
                case 'Email':
                    state.searchResult = action.payload.allData?.filter(
                        (item) =>
                            (!action.payload.values?.senderName || (item?.senderName && item?.senderName.toLowerCase().includes(action.payload.values?.senderName?.toLowerCase()))) &&
                            (!action.payload.values?.realetedTo || (action.payload.values.realetedTo === "contact" ? item.createBy : item.createByLead)) &&
                            (!action.payload.values?.createByName || (item?.createByName && item?.createByName.toLowerCase().includes(action.payload.values?.createByName?.toLowerCase())))
                    )
                    break;
                case 'EmailSearch':
                    state.searchResult = action.payload.searchData;
                    break;
                case 'Users':
                    state.searchResult = action?.payload?.allData?.filter(
                        (item) =>
                            (!action.payload?.values?.firstName || (item?.firstName && item?.firstName.toLowerCase().includes(action.payload?.values?.firstName?.toLowerCase()))) &&
                            (!action.payload?.values?.username || (item?.username && item?.username.toLowerCase().includes(action.payload?.values?.username?.toLowerCase()))) &&
                            (!action.payload?.values?.lastName || (item?.lastName && item?.lastName.toLowerCase().includes(action.payload?.values?.lastName?.toLowerCase())))
                    )
                    break;
                case 'UsersSearch':
                    state.searchResult = action.payload.searchData;
                    break;
                case 'Opprtunity':
                    state.searchResult = action?.payload?.allData?.filter(
                        (item) =>
                            (!action.payload?.values?.opportunityName || (item?.opportunityName && item?.opportunityName.toLowerCase().includes(action.payload?.values?.opportunityName?.toLowerCase()))) &&
                            (!action.payload?.values?.accountName2 || (item?.accountName2 && item?.accountName2.toLowerCase().includes(action.payload?.values?.accountName2?.toLowerCase()))) &&
                            (!action.payload?.values?.opportunityAmount || (item?.opportunityAmount && item?.opportunityAmount.toLowerCase().includes(action.payload?.values?.opportunityAmount?.toLowerCase()))) &&
                            (!action.payload?.values?.expectedCloseDate || (item?.expectedCloseDate && item?.expectedCloseDate.toLowerCase().includes(action.payload?.values?.expectedCloseDate?.toLowerCase()))) &&
                            (!action.payload?.values?.salesStage || (item?.salesStage && item?.salesStage.toLowerCase().includes(action.payload?.values?.salesStage?.toLowerCase())))
                    )
                    break;
                case 'OpprtunitySearch':
                    state.searchResult = action.payload.searchData;
                    break;
                case 'Account':
                    state.searchResult = action?.payload?.allData?.filter(
                        (item) =>
                            (!action.payload?.values?.name || (item?.name && item?.name.toLowerCase().includes(action.payload?.values?.name?.toLowerCase()))) &&
                            (!action.payload?.values?.officePhone || (item?.officePhone && item?.officePhone.toString().toLowerCase().includes(action.payload?.values?.officePhone?.toString().toLowerCase()))) &&
                            (!action.payload?.values?.fax || (item?.fax && item?.fax.toString().toLowerCase().includes(action.payload?.values?.fax?.toString().toLowerCase()))) &&
                            (!action.payload?.values?.emailAddress || (item?.emailAddress && item?.emailAddress.toLowerCase().includes(action.payload?.values?.emailAddress?.toLowerCase())))
                    )
                    break;
                case 'AccountSearch':
                    state.searchResult = action.payload.searchData;
                    break;
                case 'quotes':
                    state.searchResult = action?.payload?.allData?.filter(
                        (item) =>
                            (!action.payload?.values?.quoteNumber || (item?.quoteNumber && item?.quoteNumber?.toString().toLowerCase().includes(action.payload?.values?.quoteNumber?.toString().toLowerCase()))) &&
                            (!action.payload?.values?.title || (item?.title && item?.title.toString().toLowerCase().includes(action.payload?.values?.title?.toString().toLowerCase()))) &&
                            (!action.payload?.values?.quoteStage || (item?.quoteStage && item?.quoteStage.toString().toLowerCase().includes(action.payload?.values?.quoteStage?.toString().toLowerCase()))) &&
                            (!action.payload?.values?.contactName || (item?.contactName && item?.contactName.toLowerCase().includes(action.payload?.values?.contactName?.toLowerCase()))) &&
                            (!action.payload?.values?.accountName || (item?.accountName && item?.accountName.toLowerCase().includes(action.payload?.values?.accountName?.toLowerCase()))) &&
                            (!action.payload?.values?.grandTotal || (item?.grandTotal && item?.grandTotal?.toString().toLowerCase().includes(action.payload?.values?.grandTotal?.toString().toLowerCase()))) &&
                            (!action.payload?.values?.validUntil || (item?.validUntil && item?.validUntil.toLowerCase().includes(action.payload?.values?.validUntil?.toLowerCase())))
                    )
                    break;
                case 'QuotesSearch':
                    state.searchResult = action.payload.searchData;
                    break;
                case 'invoice':
                    state.searchResult = action?.payload?.allData?.filter(
                        (item) =>
                            (!action.payload?.values?.invoiceNumber || (item?.invoiceNumber && item?.invoiceNumber?.toString().toLowerCase().includes(action.payload?.values?.invoiceNumber?.toString().toLowerCase()))) &&
                            (!action.payload?.values?.title || (item?.title && item?.title.toString().toLowerCase().includes(action.payload?.values?.title?.toString().toLowerCase()))) &&
                            (!action.payload?.values?.status || (item?.status && item?.status.toString().toLowerCase().includes(action.payload?.values?.status?.toString().toLowerCase()))) &&
                            (!action.payload?.values?.contactName || (item?.contactName && item?.contactName.toLowerCase().includes(action.payload?.values?.contactName?.toLowerCase()))) &&
                            (!action.payload?.values?.accountName || (item?.accountName && item?.accountName.toLowerCase().includes(action.payload?.values?.accountName?.toLowerCase()))) &&
                            (!action.payload?.values?.grandTotal || (item?.grandTotal && item?.grandTotal?.toString().toLowerCase().includes(action.payload?.values?.grandTotal?.toString().toLowerCase())))
                    )
                    break;
                case 'InvoiceSearch':
                    state.searchResult = action.payload.searchData;
                    break;
                case 'template':
                    state.searchResult = action.payload.searchData;
                    break;
                default:
            }
        },
    },
});

export const { setSearchValue, setGetTagValues, getSearchData } = advanceSearchSlice.actions;
export default advanceSearchSlice.reducer;

================
File: Client/src/redux/slices/contactCustomFiledSlice.js
================
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getApi } from '../../services/api'

export const fetchContactCustomFiled = createAsyncThunk('fetchContactCustomFiled', async () => {
    const user = JSON.parse(localStorage.getItem("user"));
    try {
        const response = await getApi(`api/custom-field/?moduleName=Contacts`);
        return response;
    } catch (error) {
        throw error;
    }
});


const contactCustomFiledSlice = createSlice({
    name: 'contactCustomFiledData',
    initialState: {
        data: [],
        isLoading: false,
        error: "",
    },
    extraReducers: (builder) => {
        builder
            .addCase(fetchContactCustomFiled.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(fetchContactCustomFiled.fulfilled, (state, action) => {
                state.isLoading = false;
                state.data = action.payload;
                state.error = "";
            })
            .addCase(fetchContactCustomFiled.rejected, (state, action) => {
                state.isLoading = false;
                state.data = [];
                state.error = action.error.message;
            });
    },
});

export default contactCustomFiledSlice.reducer;

================
File: Client/src/redux/slices/contactSlice.js
================
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getApi } from 'services/api';

export const fetchContactData = createAsyncThunk('fetchContactData', async () => {
    const user = JSON.parse(localStorage.getItem("user"));
    try {
        const response = await getApi(user.role === 'superAdmin' ? 'api/contact/' : `api/contact/?createBy=${user._id}`);
        return response.data;
    } catch (error) {
        throw error;
    }
});


const getContactSlice = createSlice({
    name: 'contactData',
    initialState: {
        data: [],
        isLoading: false,
        error: "",
    },
    extraReducers: (builder) => {
        builder
            .addCase(fetchContactData.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(fetchContactData.fulfilled, (state, action) => {
                state.isLoading = false;
                state.data = action.payload;
                state.error = "";
            })
            .addCase(fetchContactData.rejected, (state, action) => {
                state.isLoading = false;
                state.data = [];
                state.error = action.error.message;
            });
    },
});

export default getContactSlice.reducer;

================
File: Client/src/redux/slices/emailsSlice.js
================
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getApi } from '../../services/api'

export const fetchEmailsData = createAsyncThunk('fetchEmailsData', async () => {
    const user = JSON.parse(localStorage.getItem("user"));
    try {
        const response = await getApi(user.role === 'superAdmin' ? 'api/email/' : `api/email/?sender=${user._id}`);
        return response;
    } catch (error) {
        throw error;
    }
});

const emailsSlice = createSlice({
    name: 'emailsData',
    initialState: {
        data: [],
        isLoading: false,
        error: "",
    },
    extraReducers: (builder) => {
        builder
            .addCase(fetchEmailsData.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(fetchEmailsData.fulfilled, (state, action) => {
                state.isLoading = false;
                state.data = action.payload;
                state.error = "";
            })
            .addCase(fetchEmailsData.rejected, (state, action) => {
                state.isLoading = false;
                state.data = [];
                state.error = action.error.message;
            });
    },
});

export default emailsSlice.reducer;

================
File: Client/src/redux/slices/emailTempSlice.js
================
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getApi } from '../../services/api'

export const fetchEmailTempData = createAsyncThunk('fetchEmailTempData', async () => {
    const user = JSON.parse(localStorage.getItem("user"));
    try {
        const response = await getApi(user.role === 'superAdmin' ? 'api/email-temp/' : `api/email-temp/?createBy=${user._id}`);
        return response;
    } catch (error) {
        throw error;
    }
});


const emailTempSlice = createSlice({
    name: 'emailTempData',
    initialState: {
        data: [],
        isLoading: false,
        error: "",
    },
    extraReducers: (builder) => {
        builder
            .addCase(fetchEmailTempData.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(fetchEmailTempData.fulfilled, (state, action) => {
                state.isLoading = false;
                state.data = action.payload;
                state.error = "";
            })
            .addCase(fetchEmailTempData.rejected, (state, action) => {
                state.isLoading = false;
                state.data = [];
                state.error = action.error.message;
            });
    },
});

export default emailTempSlice.reducer;

================
File: Client/src/redux/slices/imageSlice.js
================
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { getApi } from 'services/api';

const initialState = {
    images: [],
    status: 'idle',
    error: null,
};

// Create an asynchronous thunk
export const fetchImage = createAsyncThunk('images/fetchImage', async (active, { dispatch, getState }) => {
    dispatch(fetchImage.pending());
    try {
        const response = await getApi(`api/images/${active ? active : ""}`);
        dispatch(fetchImage.fulfilled(response.data));
        return response.data;
    } catch (error) {
        dispatch(fetchImage.rejected(error));
        throw error;
    }
});
const imageSlice = createSlice({
    name: 'images',
    initialState,
    reducers: {},
    extraReducers: (builder) => {
        builder
            .addCase(fetchImage.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(fetchImage.fulfilled, (state, action) => {
                state.status = 'succeeded';
                state.images = action.payload;
                state.error = null; // Reset error on successful fetch
            })
            .addCase(fetchImage.rejected, (state, action) => {
                state.status = 'failed';
                state.error = action.error.message;
            });
    },
});

export default imageSlice.reducer;

================
File: Client/src/redux/slices/invoicesSlice.js
================
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getApi } from '../../services/api'

export const fetchInvoicesData = createAsyncThunk('fetchInvoicesData', async () => {
    const user = JSON.parse(localStorage.getItem("user"));
    try {
        const response = await getApi(user.role === 'superAdmin' ? 'api/invoices/' : `api/invoices/?createBy=${user._id}`);
        return response;
    } catch (error) {
        throw error;
    }
});


const invoicesSlice = createSlice({
    name: 'invoiceData',
    initialState: {
        data: [],
        isLoading: false,
        error: "",
    },
    extraReducers: (builder) => {
        builder
            .addCase(fetchInvoicesData.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(fetchInvoicesData.fulfilled, (state, action) => {
                state.isLoading = false;
                state.data = action.payload;
                state.error = "";
            })
            .addCase(fetchInvoicesData.rejected, (state, action) => {
                state.isLoading = false;
                state.data = [];
                state.error = action.error.message;
            });
    },
});

export default invoicesSlice.reducer;

================
File: Client/src/redux/slices/leadCustomFiledSlice.js
================
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getApi } from '../../services/api'

export const fetchLeadCustomFiled = createAsyncThunk('fetchLeadCustomFiled', async () => {
    const user = JSON.parse(localStorage.getItem("user"));
    try {
        const response = await getApi(`api/custom-field/?moduleName=Leads`);
        return response;
    } catch (error) {
        throw error;
    }
});


const leadCustomFiledSlice = createSlice({
    name: 'leadCustomFiledData',
    initialState: {
        data: [],
        isLoading: false,
        error: "",
    },
    extraReducers: (builder) => {
        builder
            .addCase(fetchLeadCustomFiled.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(fetchLeadCustomFiled.fulfilled, (state, action) => {
                state.isLoading = false;
                state.data = action.payload;
                state.error = "";
            })
            .addCase(fetchLeadCustomFiled.rejected, (state, action) => {
                state.isLoading = false;
                state.data = [];
                state.error = action.error.message;
            });
    },
});

export default leadCustomFiledSlice.reducer;

================
File: Client/src/redux/slices/leadSlice.js
================
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getApi } from '../../services/api'

export const fetchLeadData = createAsyncThunk('fetchLeadData', async () => {
    const user = JSON.parse(localStorage.getItem("user"));
    try {
        const response = await getApi(user.role === 'superAdmin' ? 'api/lead/' : `api/lead/?createBy=${user._id}`);
        return response.data;
    } catch (error) {
        throw error;
    }
});


const leadSlice = createSlice({
    name: 'leadData',
    initialState: {
        data: [],
        isLoading: false,
        error: "",
    },
    extraReducers: (builder) => {
        builder
            .addCase(fetchLeadData.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(fetchLeadData.fulfilled, (state, action) => {
                state.isLoading = false;
                state.data = action.payload;
                state.error = "";
            })
            .addCase(fetchLeadData.rejected, (state, action) => {
                state.isLoading = false;
                state.data = [];
                state.error = action.error.message;
            });
    },
});

export default leadSlice.reducer;

================
File: Client/src/redux/slices/localSlice.js
================
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
    user: JSON.parse(window.localStorage.getItem('user')),
};

const localSlice = createSlice({
    name: 'user',
    initialState,
    reducers: {
        setUser: (state, action) => {
            state.user = action.payload;
            // You can also update localStorage here if needed
        },
        clearUser: (state) => {
            state.user = null;
            // You can also update localStorage here if needed
        },
    },
});

export const { setUser, clearUser } = localSlice.actions;

export default localSlice.reducer;

================
File: Client/src/redux/slices/meetingSlice.js
================
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getApi } from '../../services/api'

export const fetchMeetingData = createAsyncThunk('fetchMeetingData', async () => {
    const user = JSON.parse(localStorage.getItem("user"));
    try {
        const response = await getApi(user.role === 'superAdmin' ? 'api/meeting' : `api/meeting/?createBy=${user._id}`);
        return response;
    } catch (error) {
        throw error;
    }
});

const meetingSlice = createSlice({
    name: 'meetingData',
    initialState: {
        data: [],
        isLoading: false,
        error: "",
    },
    extraReducers: (builder) => {
        builder
            .addCase(fetchMeetingData.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(fetchMeetingData.fulfilled, (state, action) => {
                state.isLoading = false;
                state.data = action.payload;
                state.error = "";
            })
            .addCase(fetchMeetingData.rejected, (state, action) => {
                state.isLoading = false;
                state.data = [];
                state.error = action.error.message;
            });
    },
});

export default meetingSlice.reducer;

================
File: Client/src/redux/slices/moduleSlice.js
================
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { getApi } from 'services/api';

// Assume you have an initialState for roles
const initialState = {
    data: [],
    status: 'idle',
    error: null,
};

// Create an asynchronous thunk
export const fetchModules = createAsyncThunk('modules', async () => {
    try {
        const response = await getApi(`api/modules`);
        return response.data;
    } catch (error) {
        throw error;
    }
});

// Create a slice with reducers and the initial state
const moduleSlice = createSlice({
    name: 'modules',
    initialState,
    reducers: {},
    extraReducers: (builder) => {
        builder
            .addCase(fetchModules.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(fetchModules.fulfilled, (state, action) => {
                state.status = 'succeeded';
                state.data = action.payload;
            })
            .addCase(fetchModules.rejected, (state, action) => {
                state.status = 'failed';
                state.error = action.error.message;
            });
    },
});

export default moduleSlice.reducer;

================
File: Client/src/redux/slices/opportunitySlice.js
================
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getApi } from '../../services/api'

export const fetchOpportunityData = createAsyncThunk('fetchOpportunityData', async () => {
    const user = JSON.parse(localStorage.getItem("user"));
    try {
        const response = await getApi(user.role === 'superAdmin' ? 'api/opportunity/' : `api/opportunity/?createBy=${user._id}`);
        return response;
    } catch (error) {
        throw error;
    }
});


const opportunitySlice = createSlice({
    name: 'opportunityData',
    initialState: {
        data: [],
        isLoading: false,
        error: "",
    },
    extraReducers: (builder) => {
        builder
            .addCase(fetchOpportunityData.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(fetchOpportunityData.fulfilled, (state, action) => {
                state.isLoading = false;
                state.data = action.payload;
                state.error = "";
            })
            .addCase(fetchOpportunityData.rejected, (state, action) => {
                state.isLoading = false;
                state.data = [];
                state.error = action.error.message;
            });
    },
});

export default opportunitySlice.reducer;

================
File: Client/src/redux/slices/phoneCallSlice.js
================
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getApi } from '../../services/api'

export const fetchPhoneCallData = createAsyncThunk('fetchPhoneCallData', async () => {
    const user = JSON.parse(localStorage.getItem("user"));
    try {
        const response = await getApi(user.role === 'superAdmin' ? 'api/phoneCall' : `api/phoneCall?sender=${user._id}`);
        return response;
    } catch (error) {
        throw error;
    }
});

const phoneCallSlice = createSlice({
    name: 'phoneCallData',
    initialState: {
        data: [],
        isLoading: false,
        error: "",
    },
    extraReducers: (builder) => {
        builder
            .addCase(fetchPhoneCallData.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(fetchPhoneCallData.fulfilled, (state, action) => {
                state.isLoading = false;
                state.data = action.payload;
                state.error = "";
            })
            .addCase(fetchPhoneCallData.rejected, (state, action) => {
                state.isLoading = false;
                state.data = [];
                state.error = action.error.message;
            });
    },
});

export default phoneCallSlice.reducer;

================
File: Client/src/redux/slices/propertyCustomFiledSlice.js
================
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getApi } from '../../services/api'

export const fetchPropertyCustomFiled = createAsyncThunk('fetchLeadData', async () => {
    const user = JSON.parse(localStorage.getItem("user"));
    try {
        const response = await getApi(`api/custom-field/?moduleName=Properties`);
        return response;
    } catch (error) {
        throw error;
    }
});


const propertyCustomFiledSlice = createSlice({
    name: 'propertyCustomFiledData',
    initialState: {
        data: [],
        isLoading: false,
        error: "",
    },
    extraReducers: (builder) => {
        builder
            .addCase(fetchPropertyCustomFiled.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(fetchPropertyCustomFiled.fulfilled, (state, action) => {
                state.isLoading = false;
                state.data = action.payload;
                state.error = "";
            })
            .addCase(fetchPropertyCustomFiled.rejected, (state, action) => {
                state.isLoading = false;
                state.data = [];
                state.error = action.error.message;
            });
    },
});

export default propertyCustomFiledSlice.reducer;

================
File: Client/src/redux/slices/propertySlice.js
================
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getApi } from '../../services/api'

export const fetchPropertyData = createAsyncThunk('fetchPropertyData', async () => {
    const user = JSON.parse(localStorage.getItem("user"));
    try {
        const response = await getApi(user.role === 'superAdmin' ? 'api/property/' : `api/property/?createBy=${user._id}`);
        return response.data;
    } catch (error) {
        throw error;
    }
});

const propertySlice = createSlice({
    name: 'propertyData',
    initialState: {
        data: [],
        isLoading: false,
        error: "",
    },
    extraReducers: (builder) => {
        builder
            .addCase(fetchPropertyData.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(fetchPropertyData.fulfilled, (state, action) => {
                state.isLoading = false;
                state.data = action.payload;
                state.error = "";
            })
            .addCase(fetchPropertyData.rejected, (state, action) => {
                state.isLoading = false;
                state.data = [];
                state.error = action.error.message;
            });
    },
});

export default propertySlice.reducer;

================
File: Client/src/redux/slices/quotesSlice.js
================
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getApi } from '../../services/api'

export const fetchQuotesData = createAsyncThunk('fetchQuotesData', async () => {
    const user = JSON.parse(localStorage.getItem("user"));
    try {
        const response = await getApi(user.role === 'superAdmin' ? 'api/quotes/' : `api/quotes/?createBy=${user._id}`);
        return response;
    } catch (error) {
        throw error;
    }
});


const quotesSlice = createSlice({
    name: 'quotesData',
    initialState: {
        data: [],
        isLoading: false,
        error: "",
    },
    extraReducers: (builder) => {
        builder
            .addCase(fetchQuotesData.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(fetchQuotesData.fulfilled, (state, action) => {
                state.isLoading = false;
                state.data = action.payload;
                state.error = "";
            })
            .addCase(fetchQuotesData.rejected, (state, action) => {
                state.isLoading = false;
                state.data = [];
                state.error = action.error.message;
            });
    },
});

export default quotesSlice.reducer;

================
File: Client/src/redux/slices/roleSlice.js
================
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { getApi } from 'services/api';

// Assume you have an initialState for roles
const initialState = {
    roles: [],
    user: {}, // Initial empty array for roles
    status: 'idle', // Possible statuses: 'idle', 'loading', 'succeeded', 'failed'
    error: null,
};

// Create an asynchronous thunk
export const fetchRoles = createAsyncThunk('roles/fetchRoles', async (userId) => {
    try {
        const response = await getApi(`api/user/view/${userId}`);
        return response.data;
    } catch (error) {
        throw error;
    }
});

// Create a slice with reducers and the initial state
const rolesSlice = createSlice({
    name: 'roles',
    initialState,
    reducers: {},
    extraReducers: (builder) => {
        builder
            .addCase(fetchRoles.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(fetchRoles.fulfilled, (state, action) => {
                state.status = 'succeeded';
                state.roles = action?.payload?.roles || []; // Set roles in the state
                state.user = action.payload; // Set roles in the state
            })
            .addCase(fetchRoles.rejected, (state, action) => {
                state.status = 'failed';
                state.error = action.error.message;
            });
    },
});

export default rolesSlice.reducer;

================
File: Client/src/redux/slices/routeSlice.js
================
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axios from 'axios';
import { constant } from '../../constant';
import { getApi } from 'services/api';

export const fetchRouteData = createAsyncThunk('fetchRouteData', async () => {
  try {
    const response = await getApi(`api/route/`);
    return response.data;
} catch (error) {
    throw error;
}
});


const routeSlice = createSlice({
  name: 'routeData',
  initialState: {
    data: [],
    isLoading: false,
    error: "",
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchRouteData.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(fetchRouteData.fulfilled, (state, action) => {
        state.isLoading = false;
        state.data = action.payload;
        state.error = "";
      })
      .addCase(fetchRouteData.rejected, (state, action) => {
        state.isLoading = false;
        state.data = [];
        state.error = action.error.message;
      });
  },
});

export default routeSlice.reducer;

================
File: Client/src/redux/slices/taskSlice.js
================
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getApi } from '../../services/api'

export const fetchTaskData = createAsyncThunk('fetchTaskData', async () => {
    const user = JSON.parse(localStorage.getItem("user"));
    try {
        const response = await getApi(user.role === 'superAdmin' ? `api/task` : `api/task/?createBy=${user._id}`);
        return response;
    } catch (error) {
        throw error;
    }
});

const taskSlice = createSlice({
    name: 'taskData',
    initialState: {
        data: [],
        isLoading: false,
        error: "",
    },
    extraReducers: (builder) => {
        builder
            .addCase(fetchTaskData.pending, (state) => {
                state.isLoading = true;
            })
            .addCase(fetchTaskData.fulfilled, (state, action) => {
                state.isLoading = false;
                state.data = action.payload;
                state.error = "";
            })
            .addCase(fetchTaskData.rejected, (state, action) => {
                state.isLoading = false;
                state.data = [];
                state.error = action.error.message;
            });
    },
});

export default taskSlice.reducer;

================
File: Client/src/redux/accessUtils.js
================
import { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { fetchRoles } from "./slices/roleSlice";

export const HasAccess = (actions) => {

    const user = JSON.parse(localStorage.getItem('user'))

    const dispatch = useDispatch();

    useEffect(() => {
        // Dispatch the fetchRoles action on component mount
        if (window.location.pathname === "/default") {
            dispatch(fetchRoles(user?._id));
        }
    }, [dispatch]);

    const roles = useSelector((state) => state?.roles?.roles);

    const rolesToCheck = roles?.map(item => item.roleName)
    const mergedPermissions = {};
    const superAdminPermission = {
        "create": true,
        "update": true,
        "delete": true,
        "view": true,
        "import": true,
        "export": true,
    };

    actions?.forEach(action => {
        const access = rolesToCheck.map(roleToCheck => {
            const role = roles.find(r => r.roleName === roleToCheck);
            return role?.access?.find(a => a.title === action);
        });

        access?.forEach(permission => {
            // Check if permission is defined
            if (permission) {
                // Destructure permission only if it's defined
                const { title, ...rest } = permission;

                if (!mergedPermissions[title]) {
                    mergedPermissions[title] = { ...rest };
                } else {
                    // Merge with priority to true values
                    Object.keys(rest).forEach(key => {
                        if (mergedPermissions[title][key] !== true) {
                            mergedPermissions[title][key] = rest[key];
                        }
                    });
                }
            }
        });
    });


    // Return permissions for each action
    return actions.map(action => (
        user?.role === "superAdmin" ? superAdminPermission : mergedPermissions[action]
    ));
};

================
File: Client/src/redux/store.js
================
import { configureStore } from '@reduxjs/toolkit';
import { persistStore, persistReducer } from 'redux-persist';
import storage from 'redux-persist/lib/storage';
import roleReducer from './slices/roleSlice';
import imageReducer from './slices/imageSlice';
import userReducer from './slices/localSlice';
import routeReducer from './slices/routeSlice';
import advanceSearchSlice from './slices/advanceSearchSlice';
import leadSlice from './slices/leadSlice'
import propertyCustomFiledSlice from './slices/propertyCustomFiledSlice';
import propertySlice from './slices/propertySlice';
import contactSlice from './slices/contactSlice';
import contactCustomFiledSlice from './slices/contactCustomFiledSlice';
import leadCustomFiledSlice from './slices/leadCustomFiledSlice';
import taskSlice from './slices/taskSlice';
import meetingSlice from './slices/meetingSlice';
import emailsSlice from './slices/emailsSlice';
import emailTempSlice from './slices/emailTempSlice';
import opportunitySlice from './slices/opportunitySlice';
import moduleSlice from './slices/moduleSlice';
import accountSlice from './slices/accountSlice';
import quotesSlice from './slices/quotesSlice';
import invoicesSlice from './slices/invoicesSlice';

const middleware = (getDefaultMiddleware) => {
  return getDefaultMiddleware({
    serializableCheck: false,
  });
};

const userPersistConfig = {
  key: 'userDetails',
  storage,
};
const routePersistConfig = {
  key: 'route',
  storage,
};
const imagesPersistConfig = {
  key: 'image',
  storage,
};
const leadPersistConfig = {
  key: 'lead',
  storage,
};
const contactPersistConfig = {
  key: 'contact',
  storage,
};

export const store = configureStore({
  reducer: {
    roles: persistReducer(userPersistConfig, roleReducer),
    modules: moduleSlice,
    images: persistReducer(imagesPersistConfig, imageReducer),
    user: userReducer,
    route: persistReducer(routePersistConfig, routeReducer),
    advanceSearchData: advanceSearchSlice,
    leadData: persistReducer(leadPersistConfig, leadSlice),
    contactData: persistReducer(contactPersistConfig, contactSlice),
    propertyCustomFiled: propertyCustomFiledSlice,
    contactCustomFiled: contactCustomFiledSlice,
    leadCustomFiled: leadCustomFiledSlice,
    propertyData: propertySlice,
    taskData: taskSlice,
    meetingData: meetingSlice,
    emailsData: emailsSlice,
    emailTempData: emailTempSlice,
    opportunityData: opportunitySlice,
    accountData: accountSlice,
    quotesData: quotesSlice,
    invoicesData: invoicesSlice,
  },
  middleware,
});

export const persistor = persistStore(store);

================
File: Client/src/schema/accountSchema.js
================
import * as yup from 'yup'

export const accountSchema = yup.object({
    name: yup.string().required("Account Name Is required"),
    officePhone: yup.string().matches(/^\d{10}$/, 'Office Number must be exactly 10 digits').notRequired(),
    alternatePhone: yup.string().matches(/^\d{10}$/, 'Office Number must be exactly 10 digits').notRequired(),
    website: yup.string().url('Enter a valid URL').notRequired(),
    emailAddress: yup.string().email('Enter a valid Email Address').notRequired(),
    nonPrimaryEmail: yup.string().email('Enter a valid Email Address').notRequired(),
    shippingPostalcode: yup.string().matches(/^\d{6}$/, 'Shipping Postal Code must be exactly 6 digits').notRequired(),
    billingPostalcode: yup.string().matches(/^\d{6}$/, 'Billing Postal Code must be exactly 6 digits').notRequired(),
})

================
File: Client/src/schema/addFiledSchema.js
================
import * as yup from 'yup'

// export const addFiledSchema = yup.object({
//     name: yup.string().min(2).required('Name is required'),
//     label: yup.string().min(2).required('Label is required'),
//     type: yup.string().required('Type is required'),
// })

const nameValidation = yup
    .string()
    .min(2)
    .matches(/^[A-Za-z0-9_-]+$/, 'Name can only contain letters, numbers, underscores, and dashes')
    .required('Name is required');

// Custom validation function for the label field
const labelValidation = yup
    .string()
    .min(2)
    .test('first-letter-capital', 'First letter of label must be capital', value => {
        return /^[A-Z]/.test(value);
    })
    .required('Label is required');

// Define the schema using the custom validations
export const addFiledSchema = yup.object({
    name: nameValidation,
    label: labelValidation,
    type: yup.string().required('Type is required')
    // belongsTo: yup.string().required('Belongs To is required'),
});

================
File: Client/src/schema/contactSchema.js
================
import * as yup from 'yup'

export const contactSchema = yup.object({
    // 1. Basic Information
    firstName: yup.string().min(2).required('First Name is required'),
    lastName: yup.string().min(2).required('Last Name is required'),
    title: yup.string().required('Title is required'),
    email: yup.string().email().required('Email is required'),
    phoneNumber: yup.number().min(1000000000, 'Phone number is invalid').max(999999999999, 'Phone number is invalid').required('Phonenumber is Required'),
    mobileNumber: yup.number().min(1000000000, 'Phone number is invalid').max(999999999999, 'Phone number is invalid').notRequired(),
    physicalAddress: yup.string().required('Physical address is required'),
    mailingAddress: yup.string(),
    preferredContactMethod: yup.string().required('Preferred contact method is required'),
    // 2.Lead Source Information
    leadSource: yup.string(),
    referralSource: yup.string(),
    campaignSource: yup.string(),
    // 3. Status and Classifications
    leadStatus: yup.string(),
    leadRating: yup.number(),
    leadConversionProbability: yup.string(),
    // 5. History:
    emailHistory: yup.string(),
    phoneCallHistory: yup.string(),
    meetingHistory: yup.string(),
    notesandComments: yup.string(),
    // 6. Tags or Categories
    tagsOrLabelsForcategorizingcontacts: yup.string(),
    // 7. Important Dates:
    birthday: yup.date(),
    anniversary: yup.date(),
    keyMilestones: yup.string(),
    // 8. Additional Personal Information
    dob: yup.string(),
    gender: yup.string(),
    occupation: yup.string(),
    interestsOrHobbies: yup.string(),
    // 9. Preferred  Communication Preferences:
    communicationFrequency: yup.string(),
    preferences: yup.string(),
    // 10. Social Media Profiles:
    linkedInProfile: yup.string(),
    facebookProfile: yup.string(),
    twitterHandle: yup.string(),
    otherProfiles: yup.string(),
    // 11. Lead Assignment and Team Collaboration:
    agentOrTeamMember: yup.string(),
    internalNotesOrComments: yup.string(),
    createBy: yup.string(),
    // 12. Custom Fields:
})

================
File: Client/src/schema/document.js
================
import * as yup from 'yup'


// Define the yup schema for the main document
export const documentSchema = yup.object().shape({
    folderName: yup.string().required('Folder Name is required'),
    filename: yup.string().min(2, 'File Name Must Be At Least 2 Characters'),
    createBy: yup.string().required()
});

================
File: Client/src/schema/emailSchema.js
================
import * as yup from 'yup'

export const emailSchema = yup.object({
    sender: yup.string().required("Sender Is required"),
    recipient: yup.string().email().required("Recipient Is required"),
    cc: yup.string().email(),
    bcc: yup.string().email(),
    relatedToContact: yup.string(),
    relatedToLead: yup.string(),
    subject: yup.string().required("Subject Is required"),
    message: yup.string(),
    startDate: yup.date().required("Start Date Is required"),
    createBy: yup.string(),
    createByLead: yup.string(),
}).test('createBy-or-createByLead-required', 'Recipient Is required', function (value) {
    if (!value.createBy && !value.createByLead) {
        return this.createError({
            path: 'createBy',
            message: 'Recipient Is required',
        });
    }
});

================
File: Client/src/schema/index.js
================
import { contactSchema } from './contactSchema.js';
import { propertySchema } from './propertySchema.js';
import { leadSchema } from './leadSchema.js';
import { userSchema } from './userSchema.js';
import { loginSchema } from './loginSchema.js';
import { emailSchema } from './emailSchema.js';
import { documentSchema } from './document.js';
import { phoneCallSchema } from './phoneCallSchema.js';
import { textMsgSchema } from './textMsgSchema.js';
import { TaskSchema } from './taskSchema.js';
import { MeetingSchema } from './meetingSchema.js';
import { addFiledSchema } from './addFiledSchema.js'

export {
    addFiledSchema,
    contactSchema,
    propertySchema,
    leadSchema,
    userSchema,
    loginSchema,
    emailSchema,
    documentSchema,
    TaskSchema,
    phoneCallSchema,
    textMsgSchema,
    MeetingSchema,
};

================
File: Client/src/schema/invoicesSchema.js
================
import * as yup from 'yup'

export const invoicesSchema = yup.object({
    title: yup.string().required("Title Is required"),
    shippingPostalcode: yup.string().matches(/^\d{6}$/, 'Shipping Postal Code must be exactly 6 digits').notRequired(),
    billingPostalcode: yup.string().matches(/^\d{6}$/, 'Billing Postal Code must be exactly 6 digits').notRequired(),
})

================
File: Client/src/schema/leadSchema.js
================
import * as yup from 'yup'

export const leadSchema = yup.object({
    // Lead Information:
    leadName: yup.string().required("Lead Name Is required"),
    leadEmail: yup.string().email().required("Lead Email Is required"),
    leadPhoneNumber: yup.number().min(1000000000, 'Phone number is invalid').max(999999999999, 'Phone number is invalid').required("Lead Phone Number Is required"),
    leadAddress: yup.string().required("Lead Address Is required"),
    // Lead Source and Details:
    leadSource: yup.string(),
    leadStatus: yup.string(),
    leadSourceDetails: yup.string(),
    leadCampaign: yup.string(),
    leadSourceChannel: yup.string(),
    leadSourceMedium: yup.string(),
    leadSourceCampaign: yup.string(),
    leadSourceReferral: yup.string(),
    // Lead Assignment and Ownership:
    leadAssignedAgent: yup.string(),
    leadOwner: yup.string(),
    leadCommunicationPreferences: yup.string(),
    // Lead Dates and Follow-up:
    leadCreationDate: yup.date().required("Lead Creation Date Is required"),
    leadConversionDate: yup.date().required("Lead Conversion Date Is required"),
    leadFollowUpDate: yup.date().required("lead Follow Up Date  Is required"),
    leadFollowUpStatus: yup.string(),
    // Lead Scoring and Nurturing:
    leadScore: yup.number().required("Lead Score Is required").min(0, "Lead Score Is invalid"),
    leadNurturingWorkflow: yup.string(),
    leadEngagementLevel: yup.string(),
    leadConversionRate: yup.number().required("lead Conversion Rate Is required"),
    leadNurturingStage: yup.string(),
    leadNextAction: yup.string(),
})

================
File: Client/src/schema/loginSchema.js
================
import * as yup from 'yup'

export const loginSchema = yup.object({
    username: yup.string().email().required("Email Is required"),
    password: yup.string().required("Password Is required")
})

================
File: Client/src/schema/meetingSchema.js
================
import * as yup from 'yup'

export const MeetingSchema = yup.object({
    agenda: yup.string().required("Agenda Is required"),
    attendes: yup.array().of(yup.string().trim()),
    attendesLead: yup.array().of(yup.string().trim()),
    location: yup.string(),
    related: yup.string(),
    dateTime: yup.string().required("Date Time Is required"),
    notes: yup.string(),
    createFor: yup.string(),
    createdBy: yup.string(),
})

================
File: Client/src/schema/moduleAddSchema.js
================
import * as yup from 'yup'

export const moduleAddSchema = yup.object({
    moduleName: yup.string().min(2).required('Name is required'),
})

================
File: Client/src/schema/opprtunitiesSchema.js
================
import * as yup from 'yup'

export const opprtunitiesSchema = yup.object({
    opportunityName: yup.string().required("Opportunity Name Is required"),
    type: yup.string(),
    leadSource: yup.string(),
    currency: yup.string(),
    opportunityAmount: yup.string().required("Opportunity Amount Is required"),
    amount: yup.string(),
    expectedCloseDate: yup.string().required("Expected Close Date Is required"),
    nextStep: yup.string(),
    salesStage: yup.string().required("Sales Stage Is required"),
    probability: yup.string(),
    description: yup.string(),
    createBy: yup.string(),
})

================
File: Client/src/schema/phoneCallSchema.js
================
import * as yup from 'yup'

export const phoneCallSchema = yup.object({
    sender: yup.string().required("Sender Is required"),
    recipient: yup.string().required("Recipient Is required"),
    callDuration: yup.string().required("Call Duration is required"),
    callNotes: yup.string(),
    createBy: yup.string(),
    createByLead: yup.string(),
    category: yup.string(),
    startDate: yup.date().required("Start Date Is required"),
}).test('createBy-or-createByLead-required', 'Recipient Is required', function (value) {
    if (!value.createBy && !value.createByLead) {
        return this.createError({
            path: 'createBy',
            message: 'Recipient Is required',
        });
    }
});

================
File: Client/src/schema/propertySchema.js
================
import * as yup from 'yup'
const currentYear = new Date().getFullYear()

export const propertySchema = yup.object({
    // 1. basicPropertyInformation:
    propertyType: yup.string().required("Property Type Is required"),
    propertyAddress: yup.string().required("Property Address Is required"),
    listingPrice: yup.string().required("Listing Price Is required"),
    squareFootage: yup.string().required("Square Footage Is required"),
    numberofBedrooms: yup.number().required("Number Of Bedrooms Is required"),
    numberofBathrooms: yup.number().required("Number Of Bathrooms Is required"),
    yearBuilt: yup.number().min(1000).max(currentYear).required("Year Built Is required"),
    propertyDescription: yup.string().required("Property Description Is required"),
    //2. Property Features and Amenities:
    lotSize: yup.string(),
    parkingAvailability: yup.string(),
    appliancesIncluded: yup.string(),
    heatingAndCoolingSystems: yup.string(),
    flooringType: yup.string(),
    exteriorFeatures: yup.string(),
    communityAmenities: yup.string(),
    //3. Media and Visuals:
    propertyPhotos: yup.array(),
    virtualToursOrVideos: yup.array(),
    floorPlans: yup.array(),
    propertyDocuments: yup.array(),
    //4. Listing and Marketing Details:
    listingStatus: yup.string(),
    listingAgentOrTeam: yup.string(),
    listingDate: yup.string(),
    marketingDescription: yup.string(),
    multipleListingService: yup.string(),
    //5. Property History:
    previousOwners: yup.number().min(0).notRequired(),
    purchaseHistory: yup.string(),
    //6. Financial Information:
    propertyTaxes: yup.string(),
    homeownersAssociation: yup.string(),
    mortgageInformation: yup.string(),
    //7. Contacts Associated with Property:
    sellers: yup.string(),
    buyers: yup.string(),
    propertyManagers: yup.string(),
    contractorsOrServiceProviders: yup.string(),
    //8. Property Notes and Comments:
    internalNotesOrComments: yup.string(),
})

================
File: Client/src/schema/quoteSchema.js
================
import * as yup from 'yup'

export const quoteSchema = yup.object({
    title: yup.string().required("Title Is required"),
    quoteStage: yup.string().required("Quote Stage Is required"),
    validUntil: yup.string().required("Valid Until Is required"),
    shippingPostalcode: yup.string().matches(/^\d{6}$/, 'Shipping Postal Code must be exactly 6 digits').notRequired(),
    billingPostalcode: yup.string().matches(/^\d{6}$/, 'Billing Postal Code must be exactly 6 digits').notRequired(),
})

================
File: Client/src/schema/taskSchema.js
================
import * as yup from 'yup'

export const TaskSchema = yup.object({
    title: yup.string().required("Title Is required"),
    category: yup.string(),
    description: yup.string(),
    notes: yup.string(),
    // assignTo: yup.string(),
    // assignToLead: yup.string(),
    reminder: yup.string(),
    start: yup.string().required("Start Date Is required"),
    end: yup.string(),
    backgroundColor: yup.string(),
    borderColor: yup.string(),
    textColor: yup.string(),
    display: yup.string(),
    url: yup.string(),
    createBy: yup.string(),
})

================
File: Client/src/schema/textMsgSchema.js
================
import * as yup from 'yup'

export const textMsgSchema = yup.object({
    sender: yup.string().min(1000000000, 'Phone number is invalid').max(999999999999, 'Phone number is invalid').required("Sender Is required"),
    to: yup.string().min(1000000000, 'Phone number is invalid').max(999999999999, 'Phone number is invalid').required("To Is required"),
    message: yup.string(),
    createFor: yup.string().required("Create By Is required")
})

================
File: Client/src/schema/userSchema.js
================
import * as yup from 'yup'

export const userSchema = yup.object({
    firstName: yup.string().required("First Name Is required"),
    lastName: yup.string(),
    // phoneNumber: yup.string().required("Phone Number Is required").matches(/^\d{10}$/, "Phone Number must be exactly 10 digits"),
    phoneNumber: yup.number().typeError("Invalid Phone Number").min(1000000000, 'Phone Number is invalid').max(999999999999, 'Phone Number is invalid').required('Phone Number is Required'),
    username: yup.string().email("Email must be a valid email").required("Email Is required"),
})

================
File: Client/src/schema/validationAddSchema.js
================
import * as yup from 'yup'

export const validationAddSchema = yup.object({
    name: yup.string().min(2).required('Name is required'),
})

================
File: Client/src/services/api.js
================
import axios from "axios"
import { constant } from "../constant"


export const postApi = async (path, data, login) => {
    try {
        let result = await axios.post(constant.baseUrl + path, data, {
            headers: {
                Authorization: localStorage.getItem("token") || sessionStorage.getItem("token")
            }
        })
        if (result.data?.token && result.data?.token !== null) {
            if (login) {
                localStorage.setItem('token', result.data?.token)
            } else {
                sessionStorage.setItem('token', result.data?.token)
            }
            localStorage.setItem('user', JSON.stringify(result.data?.user))
        }
        return result
    } catch (e) {
        console.error(e)
        return e
    }
}
export const putApi = async (path, data, id) => {
    try {
        let result = await axios.put(constant.baseUrl + path, data, {
            headers: {
                Authorization: localStorage.getItem("token") || sessionStorage.getItem("token")
            }
        })
        return result
    } catch (e) {
        console.error(e)
        return e
    }
}

export const deleteApi = async (path, param) => {
    try {
        let result = await axios.delete(constant.baseUrl + path + param, {
            headers: {
                Authorization: localStorage.getItem("token") || sessionStorage.getItem("token")
            }
        })
        if (result.data?.token && result.data?.token !== null) {
            localStorage.setItem('token', result.data?.token)
        }
        return result
    } catch (e) {
        console.error(e)
        return e
    }
}

export const deleteManyApi = async (path, data) => {
    try {
        let result = await axios.post(constant.baseUrl + path, data, {
            headers: {
                Authorization: localStorage.getItem("token") || sessionStorage.getItem("token")
            }
        })
        if (result.data?.token && result.data?.token !== null) {
            localStorage.setItem('token', result.data?.token)
        }
        return result
    } catch (e) {
        console.error(e)
        return e
    }
}

export const getApi = async (path, id) => {
    try {
        if (id) {
            let result = await axios.get(constant.baseUrl + path + id, {
                headers: {
                    Authorization: localStorage.getItem("token") || sessionStorage.getItem("token")
                }
            })
            return result
        }
        else {
            let result = await axios.get(constant.baseUrl + path, {
                headers: {
                    Authorization: localStorage.getItem("token") || sessionStorage.getItem("token")
                }
            })
            return result
        }
    } catch (e) {
        console.error(e)
        return e
    }
}

================
File: Client/src/theme/additions/card/card.js
================
import { mode } from "@chakra-ui/theme-tools";
const Card = {
  baseStyle: (props) => ({
    p: "20px",
    display: "flex",
    flexDirection: "column",
    width: "100%",
    position: "relative",
    borderRadius: "20px",
    minWidth: "0px",
    wordWrap: "break-word",
    bg: mode("#ffffff", "navy.800")(props),
    backgroundClip: "border-box",
  }),
};

export const CardComponent = {
  components: {
    Card,
  },
};

================
File: Client/src/theme/components/badge.js
================
import { mode } from "@chakra-ui/theme-tools";
export const badgeStyles = {
  components: {
    Badge: {
      baseStyle: {
        borderRadius: "10px",
        lineHeight: "100%",
        padding: "7px",
        paddingLeft: "12px",
        paddingRight: "12px",
      },
      variants: {
        outline: () => ({
          borderRadius: "16px",
        }),
        brand: (props) => ({
          bg: mode("brand.500", "brand.400")(props),
          color: "white",
          _focus: {
            bg: mode("brand.500", "brand.400")(props),
          },
          _active: {
            bg: mode("brand.500", "brand.400")(props),
          },
          _hover: {
            bg: mode("brand.600", "brand.400")(props),
          },
        }),
      },
    },
  },
};

================
File: Client/src/theme/components/button.js
================
import { mode } from "@chakra-ui/theme-tools";
export const buttonStyles = {
  components: {
    Button: {
      baseStyle: {
        borderRadius: "16px",
        boxShadow: "45px 76px 113px 7px rgba(112, 144, 176, 0.08)",
        transition: ".25s all ease",
        boxSizing: "border-box",
        _focus: {
          boxShadow: "none",
        },
        _active: {
          boxShadow: "none",
        },
      },
      variants: {
        outline: () => ({
          borderRadius: "16px",
        }),
        brand: (props) => ({
          bg: mode("brand.500", "brand.400")(props),
          color: "white",
          _focus: {
            bg: mode("brand.500", "brand.400")(props),
          },
          _active: {
            bg: mode("brand.500", "brand.400")(props),
          },
          _hover: {
            bg: mode("brand.600", "brand.400")(props),
          },
        }),
        darkBrand: (props) => ({
          bg: mode("brand.900", "brand.400")(props),
          color: "white",
          _focus: {
            bg: mode("brand.900", "brand.400")(props),
          },
          _active: {
            bg: mode("brand.900", "brand.400")(props),
          },
          _hover: {
            bg: mode("brand.800", "brand.400")(props),
          },
        }),
        lightBrand: (props) => ({
          bg: mode("#F2EFFF", "whiteAlpha.100")(props),
          color: mode("brand.500", "white")(props),
          _focus: {
            bg: mode("#F2EFFF", "whiteAlpha.100")(props),
          },
          _active: {
            bg: mode("secondaryGray.300", "whiteAlpha.100")(props),
          },
          _hover: {
            bg: mode("secondaryGray.400", "whiteAlpha.200")(props),
          },
        }),
        light: (props) => ({
          bg: mode("secondaryGray.400", "whiteAlpha.100")(props),
          color: mode("secondaryGray.900", "white")(props),
          _focus: {
            bg: mode("secondaryGray.300", "whiteAlpha.100")(props),
          },
          _active: {
            bg: mode("secondaryGray.300", "whiteAlpha.100")(props),
          },
          _hover: {
            bg: mode("secondaryGray.400", "whiteAlpha.200")(props),
          },
        }),
        action: (props) => ({
          fontWeight: "500",
          borderRadius: "50px",
          bg: mode("secondaryGray.300", "brand.400")(props),
          color: mode("brand.500", "white")(props),
          _focus: {
            bg: mode("secondaryGray.300", "brand.400")(props),
          },
          _active: { bg: mode("secondaryGray.300", "brand.400")(props) },
          _hover: {
            bg: mode("secondaryGray.200", "brand.400")(props),
          },
        }),
        setup: (props) => ({
          fontWeight: "500",
          borderRadius: "50px",
          bg: mode("transparent", "brand.400")(props),
          border: mode("1px solid", "0px solid")(props),
          borderColor: mode("secondaryGray.400", "transparent")(props),
          color: mode("secondaryGray.900", "white")(props),
          _focus: {
            bg: mode("transparent", "brand.400")(props),
          },
          _active: { bg: mode("transparent", "brand.400")(props) },
          _hover: {
            bg: mode("secondaryGray.100", "brand.400")(props),
          },
        }),
      },
    },
  },
};

================
File: Client/src/theme/components/input.js
================
import { mode } from "@chakra-ui/theme-tools";
export const inputStyles = {
  components: {
    Input: {
      baseStyle: {
        field: {
          fontWeight: 400,
          borderRadius: "8px",
        },
      },

      variants: {
        main: (props) => ({
          field: {
            bg: mode("transparent", "navy.800")(props),
            border: "1px solid",
            color: mode("secondaryGray.900", "white")(props),
            borderColor: mode("secondaryGray.100", "whiteAlpha.100")(props),
            borderRadius: "16px",
            fontSize: "sm",
            p: "20px",
            _placeholder: { color: "secondaryGray.400" },
          },
        }),
        auth: (props) => ({
          field: {
            fontWeight: "500",
            color: mode("navy.700", "white")(props),
            bg: mode("transparent", "transparent")(props),
            border: "1px solid",
            borderColor: mode(
              "secondaryGray.100",
              "rgba(135, 140, 189, 0.3)"
            )(props),
            borderRadius: "16px",
            _placeholder: { color: "secondaryGray.600", fontWeight: "400" },
          },
        }),
        authSecondary: (props) => ({
          field: {
            bg: "transparent",
            border: "1px solid",
            borderColor: "secondaryGray.100",
            borderRadius: "16px",
            _placeholder: { color: "secondaryGray.600" },
          },
        }),
        search: (props) => ({
          field: {
            border: "none",
            py: "11px",
            borderRadius: "inherit",
            _placeholder: { color: "secondaryGray.600" },
          },
        }),
      },
    },
    NumberInput: {
      baseStyle: {
        field: {
          fontWeight: 400,
        },
      },

      variants: {
        main: (props) => ({
          field: {
            bg: "transparent",
            border: "1px solid",

            borderColor: "secondaryGray.100",
            borderRadius: "16px",
            _placeholder: { color: "secondaryGray.600" },
          },
        }),
        auth: (props) => ({
          field: {
            bg: "transparent",
            border: "1px solid",

            borderColor: "secondaryGray.100",
            borderRadius: "16px",
            _placeholder: { color: "secondaryGray.600" },
          },
        }),
        authSecondary: (props) => ({
          field: {
            bg: "transparent",
            border: "1px solid",

            borderColor: "secondaryGray.100",
            borderRadius: "16px",
            _placeholder: { color: "secondaryGray.600" },
          },
        }),
        search: (props) => ({
          field: {
            border: "none",
            py: "11px",
            borderRadius: "inherit",
            _placeholder: { color: "secondaryGray.600" },
          },
        }),
      },
    },
    Select: {
      baseStyle: {
        field: {
          fontWeight: 400,
        },
      },

      variants: {
        main: (props) => ({
          field: {
            bg: mode("transparent", "navy.800")(props),
            border: "1px solid",
            color: "secondaryGray.600",
            borderColor: mode("secondaryGray.100", "whiteAlpha.100")(props),
            borderRadius: "16px",
            _placeholder: { color: "secondaryGray.600" },
          },
          icon: {
            color: "secondaryGray.600",
          },
        }),
        mini: (props) => ({
          field: {
            bg: mode("transparent", "navy.800")(props),
            border: "0px solid transparent",
            fontSize: "0px",
            p: "10px",
            _placeholder: { color: "secondaryGray.600" },
          },
          icon: {
            color: "secondaryGray.600",
          },
        }),
        subtle: (props) => ({
          box: {
            width: "unset",
          },
          field: {
            bg: "transparent",
            border: "0px solid",
            color: "secondaryGray.600",
            borderColor: "transparent",
            width: "max-content",
            _placeholder: { color: "secondaryGray.600" },
          },
          icon: {
            color: "secondaryGray.600",
          },
        }),
        transparent: (props) => ({
          field: {
            bg: "transparent",
            border: "0px solid",
            width: "min-content",
            color: mode("secondaryGray.600", "secondaryGray.600")(props),
            borderColor: "transparent",
            padding: "0px",
            paddingLeft: "8px",
            paddingRight: "20px",
            fontWeight: "700",
            fontSize: "14px",
            _placeholder: { color: "secondaryGray.600" },
          },
          icon: {
            transform: "none !important",
            position: "unset !important",
            width: "unset",
            color: "secondaryGray.600",
            right: "0px",
          },
        }),
        auth: (props) => ({
          field: {
            bg: "transparent",
            border: "1px solid",

            borderColor: "secondaryGray.100",
            borderRadius: "16px",
            _placeholder: { color: "secondaryGray.600" },
          },
        }),
        authSecondary: (props) => ({
          field: {
            bg: "transparent",
            border: "1px solid",

            borderColor: "secondaryGray.100",
            borderRadius: "16px",
            _placeholder: { color: "secondaryGray.600" },
          },
        }),
        search: (props) => ({
          field: {
            border: "none",
            py: "11px",
            borderRadius: "inherit",
            _placeholder: { color: "secondaryGray.600" },
          },
        }),
      },
    },
    // PinInputField: {
    //   variants: {
    //     main: (props) => ({
    //       field: {
    //         bg: "red !important",
    //         border: "1px solid",
    //         color: mode("secondaryGray.900", "white")(props),
    //         borderColor: mode("secondaryGray.100", "whiteAlpha.100")(props),
    //         borderRadius: "16px",
    //         _placeholder: { color: "secondaryGray.600" },
    //       },
    //     }),
    //   },
    // },
  },
};

================
File: Client/src/theme/components/link.js
================
export const linkStyles = {
    components: {
      
      Link: {
          baseStyle: {
            textDecoration: "none",
              boxShadow: "none",
            _focus: {
                boxShadow: "none"
            },
            _active: {
                boxShadow: "none"
            },
            _hover: {
              textDecoration: "none",
              border: "none"
            }

          },
          _hover: {
            textDecoration: "none",
            border: "none"
          }
      },
    },
  };

================
File: Client/src/theme/components/progress.js
================
import { mode } from "@chakra-ui/theme-tools";
export const progressStyles = {
  components: {
    Progress: {
      baseStyle: {
        field: {
          fontWeight: 400,
          w: "16px",
          h: "16px",
          borderRadius: "20px",
          _checked: { transform: "translate(20px, 0px)" },
        },
        track: {
          w: "40px",
          h: "20px",
          borderRadius: "20px",
          _focus: {
            boxShadow: "none",
          },
        },
      },

      variants: {
        table: (props) => ({
          field: {
            bg: "brand.500",
            borderRadius: "16px",
            fontSize: "sm",
          },
          track: {
            borderRadius: "20px",
            bg: mode("blue.50", "whiteAlpha.50")(props),
            h: "8px",
            w: "54px",
          },
          thumb: {
            w: "250px",
          },
        }),
      },
    },
  },
};

================
File: Client/src/theme/components/slider.js
================
import { mode } from "@chakra-ui/theme-tools";
export const sliderStyles = {
  components: {
    RangeSlider: {
      // baseStyle: {
      //   thumb: {
      //     fontWeight: 400,
      //   },
      //   track: {
      //     display: "flex",
      //   },
      // },

      variants: {
        main: (props) => ({
          thumb: {
            bg: mode("brand.500", "brand.400")(props),
          },
        }),
      },
    },
  },
};

================
File: Client/src/theme/components/switch.js
================
import { mode } from "@chakra-ui/theme-tools";
export const switchStyles = {
  components: {
    Switch: {
      baseStyle: {
        thumb: {
          fontWeight: 400,
          borderRadius: "50%",
          w: "16px",
          h: "16px",
          _checked: { transform: "translate(20px, 0px)" },
        },
        track: {
          display: "flex",
          alignItems: "center",
          boxSizing: "border-box",
          w: "40px",
          h: "20px",
          p: "2px",
          ps: "2px",
          _focus: {
            boxShadow: "none",
          },
        },
      },

      variants: {
        main: (props) => ({
          track: {
            bg: mode("gray.300", "navy.700")(props),
          },
        }),
      },
    },
  },
};

================
File: Client/src/theme/components/textarea.js
================
import { mode } from "@chakra-ui/theme-tools";
export const textareaStyles = {
  components: {
    Textarea: {
      baseStyle: {
        field: {
          fontWeight: 400,
          borderRadius: "8px",
        },
      },

      variants: {
        main: (props) => ({
          field: {
            bg: mode("transparent", "navy.800")(props),
            border: "1px solid !important",
            color: mode("secondaryGray.900", "white")(props),
            borderColor: mode("secondaryGray.100", "whiteAlpha.100")(props),
            borderRadius: "16px",
            fontSize: "sm",
            p: "20px",
            _placeholder: { color: "secondaryGray.400" },
          },
        }),
        auth: (props) => ({
          field: {
            bg: "white",
            border: "1px solid",
            borderColor: "secondaryGray.100",
            borderRadius: "16px",
            _placeholder: { color: "secondaryGray.600" },
          },
        }),
        authSecondary: (props) => ({
          field: {
            bg: "white",
            border: "1px solid",

            borderColor: "secondaryGray.100",
            borderRadius: "16px",
            _placeholder: { color: "secondaryGray.600" },
          },
        }),
        search: (props) => ({
          field: {
            border: "none",
            py: "11px",
            borderRadius: "inherit",
            _placeholder: { color: "secondaryGray.600" },
          },
        }),
      },
    },
  },
};

================
File: Client/src/theme/foundations/blur.js
================
const blur = {
	none: '0',
	sm: '4px',
	base: '8px',
	md: '12px',
	lg: '16px',
	xl: '24px',
	'2xl': '40px',
	'3xl': '64px',
}

export default blur

================
File: Client/src/theme/foundations/borders.js
================
const borders = {
	none: 0,
	'1px': '1px solid',
	'2px': '2px solid',
	'4px': '4px solid',
	'8px': '8px solid',
}

export default borders

================
File: Client/src/theme/foundations/breakpoints.js
================
import { createBreakpoints } from '@chakra-ui/theme-tools'

export const breakpoints = createBreakpoints({
	base: '0em',
	sm: '320px',
	md: '768px',
	lg: '960px',
	xl: '1200px',
	'2xl': '1600px',
	'2sm': '380px',
	'3xl': '1920px',
})

// export default breakpoints

================
File: Client/src/theme/foundations/colors.js
================
const colors = {
	transparent: 'transparent',
	current: 'currentColor',
	black: '#000000',
	white: '#FFFFFF',
	whiteAlpha: {
		50: 'rgba(255, 255, 255, 0.04)',
		100: 'rgba(255, 255, 255, 0.06)',
		200: 'rgba(255, 255, 255, 0.08)',
		300: 'rgba(255, 255, 255, 0.16)',
		400: 'rgba(255, 255, 255, 0.24)',
		500: 'rgba(255, 255, 255, 0.36)',
		600: 'rgba(255, 255, 255, 0.48)',
		700: 'rgba(255, 255, 255, 0.64)',
		800: 'rgba(255, 255, 255, 0.80)',
		900: 'rgba(255, 255, 255, 0.92)',
	},
	blackAlpha: {
		50: 'rgba(0, 0, 0, 0.04)',
		100: 'rgba(0, 0, 0, 0.06)',
		200: 'rgba(0, 0, 0, 0.08)',
		300: 'rgba(0, 0, 0, 0.16)',
		400: 'rgba(0, 0, 0, 0.24)',
		500: 'rgba(0, 0, 0, 0.36)',
		600: 'rgba(0, 0, 0, 0.48)',
		700: 'rgba(0, 0, 0, 0.64)',
		800: 'rgba(0, 0, 0, 0.80)',
		900: 'rgba(0, 0, 0, 0.92)',
	},
	gray: {
		50: '#F7FAFC',
		100: '#FAFCFE',
		200: '#E2E8F0',
		300: '#CBD5E0',
		400: '#A0AEC0',
		500: '#718096',
		600: '#4A5568',
		700: '#2D3748',
		800: '#1A202C',
		900: '#171923',
	},
	red: {
		50: '#fee9e7',
		100: '#fbbcb7',
		200: '#faa69f',
		300: '#f89086',
		400: '#f77a6e',
		500: 'rgba(244, 77, 62, 1)',
		600: '#f1200e',
		700: '#d91d0c',
		800: '#c11a0b',
		900: '#911308',
	},
	orange: {
		50: '#FFFAF0',
		100: '#FFF6DA',
		200: '#FBD38D',
		300: '#F6AD55',
		400: '#ED8936',
		500: '#FFB547',
		600: '#C05621',
		700: '#9C4221',
		800: '#7B341E',
		900: '#652B19',
	},
	yellow: {
		50: '#FFFFF0',
		100: '#FEFCBF',
		200: '#FAF089',
		300: '#F6E05E',
		400: '#ECC94B',
		500: '#D69E2E',
		600: '#B7791F',
		700: '#975A16',
		800: '#744210',
		900: '#5F370E',
	},
	green: {
		50: '#b9f2dd',
		100: '#8ee9c8',
		200: '#79e5bd',
		300: '#63e1b3',
		400: '#4edda8',
		500: 'rgba(40, 208, 146, 1)',
		600: '#20a574',
		700: '#1c9065',
		800: '#187a56',
		900: '#0f5038',
	},
	teal: {
		50: '#E6FFFA',
		100: '#B2F5EA',
		200: '#81E6D9',
		300: '#4FD1C5',
		400: '#38B2AC',
		500: '#319795',
		600: '#2C7A7B',
		700: '#285E61',
		800: '#234E52',
		900: '#1D4044',
	},
	blue: {
		50: '#e0f9e8',
		100: '#b5f0c9',
		200: '#a0ecb9',
		300: '#8be8aa',
		400: '#76e49a',
		500: 'rgba(75, 219, 123, 1)',
		600: '#28ca5f',
		700: '#24b555',
		800: '#20a04b',
		900: '#177537',
	},
	cyan: {
		50: '#EDFDFD',
		100: '#C4F1F9',
		200: '#9DECF9',
		300: '#76E4F7',
		400: '#0BC5EA',
		500: '#00B5D8',
		600: '#00A3C4',
		700: '#0987A0',
		800: '#086F83',
		900: '#065666',
	},
	purple: {
		50: '#aee2c9',
		100: '#89d4b0',
		200: '#76cda4',
		300: '#63c697',
		400: '#51bf8b',
		500: 'rgba(59, 162, 113, 1)',
		600: '#2d7d57',
		700: '#276a4a',
		800: '#20573d',
		900: '#123223',
	},
	pink: {
		50: '#ffffff',
		100: '#fbd7e9',
		200: '#f8c0dd',
		300: '#f6a8d0',
		400: '#f491c4',
		500: 'rgba(239, 99, 171, 1)',
		600: '#ea3592',
		700: '#e81e86',
		800: '#d61679',
		900: '#a8115f',
	},
	linkedin: {
		50: '#E8F4F9',
		100: '#CFEDFB',
		200: '#9BDAF3',
		300: '#68C7EC',
		400: '#34B3E4',
		500: '#00A0DC',
		600: '#008CC9',
		700: '#0077B5',
		800: '#005E93',
		900: '#004471',
	},
	facebook: {
		50: '#E8F4F9',
		100: '#D9DEE9',
		200: '#B7C2DA',
		300: '#6482C0',
		400: '#4267B2',
		500: '#385898',
		600: '#314E89',
		700: '#29487D',
		800: '#223B67',
		900: '#1E355B',
	},
	messenger: {
		50: '#D0E6FF',
		100: '#B9DAFF',
		200: '#A2CDFF',
		300: '#7AB8FF',
		400: '#2E90FF',
		500: '#0078FF',
		600: '#0063D1',
		700: '#0052AC',
		800: '#003C7E',
		900: '#002C5C',
	},
	whatsapp: {
		50: '#dffeec',
		100: '#b9f5d0',
		200: '#90edb3',
		300: '#65e495',
		400: '#3cdd78',
		500: '#22c35e',
		600: '#179848',
		700: '#0c6c33',
		800: '#01421c',
		900: '#001803',
	},
	twitter: {
		50: '#E5F4FD',
		100: '#C8E9FB',
		200: '#A8DCFA',
		300: '#83CDF7',
		400: '#57BBF5',
		500: '#1DA1F2',
		600: '#1A94DA',
		700: '#1681BF',
		800: '#136B9E',
		900: '#0D4D71',
	},
	telegram: {
		50: '#E3F2F9',
		100: '#C5E4F3',
		200: '#A2D4EC',
		300: '#7AC1E4',
		400: '#47A9DA',
		500: '#0088CC',
		600: '#007AB8',
		700: '#006BA1',
		800: '#005885',
		900: '#003F5E',
	},
	brand: {
		50: '#bbb4f4',
		100: '#9387ed',
		200: '#7f71ea',
		300: '#6b5be6',
		400: '#5745e3',
		500: 'rgba(53, 32, 213, 1)',
		600: '#2a19a9',
		700: '#241692',
		800: '#1f137c',
		900: '#140c50',
	},
	brandScheme: {
		50: '#7959f5',
		100: '#5229f2',
		200: '#3e11f0',
		300: '#370dda',
		400: '#310cc2',
		500: 'rgba(37, 9, 146, 1)',
		600: '#190662',
		700: '#13054a',
		800: '#0d0332',
		900: '#000002',
	},
	brandTabs: {
		50: '#270bff',
		100: '#1800d7',
		200: '#1600be',
		300: '#1300a4',
		400: '#10008b',
		500: 'rgba(10, 0, 88, 1)',
		600: '#040025',
		700: '#01000b',
		800: '#000000',
		900: '#000000',
	},
	secondaryGray: {
		50: '#ffffff',
		100: '#fbfbfc',
		200: '#ecedf1',
		300: '#dddfe7',
		400: '#ced2dc',
		500: 'rgba(176, 182, 199, 1)',
		600: '#929ab2',
		700: '#838da7',
		800: '#747f9d',
		900: '#5c6682',
	},
	navy: {
		50: '#4bfad4',
		100: '#19f9c8',
		200: '#07f1be',
		300: '#06d8ab',
		400: '#05c097',
		500: 'rgba(4, 142, 112, 1)',
		600: '#035c49',
		700: '#024435',
		800: '#012b22',
		900: '#000000',
	},
}

export default colors

================
File: Client/src/theme/foundations/index.js
================
import borders from './borders'
import breakpoints from './breakpoints'
import colors from './colors'
import radii from './radius'
import shadows from './shadows'
import sizes from './sizes'
import spacing from './spacing'
import transition from './transition'
import typography from './typography'
import zIndices from './z-index'
import blur from './blur'

const foundations = {
  breakpoints,
  zIndices,
  radii,
  blur,
  colors,
  ...typography,
  sizes,
  shadows,
  space: spacing,
  borders,
  transition,
}

export default foundations

================
File: Client/src/theme/foundations/radius.js
================
const radii = {
	none: '0',
	sm: '0.125rem',
	base: '0.25rem',
	md: '0.375rem',
	lg: '0.5rem',
	xl: '0.75rem',
	'2xl': '1rem',
	'3xl': '1.5rem',
	full: '9999px',
}

export default radii

================
File: Client/src/theme/foundations/shadows.js
================
const shadows = {
	xs: '0 0 0 1px rgba(0, 0, 0, 0.05)',
	sm: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',
	base: '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)',
	md: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
	lg: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
	xl: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',
	'2xl': '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
	outline: '0 0 0 3px rgba(66, 153, 225, 0.6)',
	inner: 'inset 0 2px 4px 0 rgba(0,0,0,0.06)',
	none: 'none',
	'dark-lg': 'rgba(0, 0, 0, 0.1) 0px 0px 0px 1px, rgba(0, 0, 0, 0.2) 0px 5px 10px, rgba(0, 0, 0, 0.4) 0px 15px 40px',
}

export default shadows

================
File: Client/src/theme/foundations/sizes.js
================
const sizes = {
	1: '0.25rem',
	2: '0.5rem',
	3: '0.75rem',
	4: '1rem',
	5: '1.25rem',
	6: '1.5rem',
	7: '1.75rem',
	8: '2rem',
	9: '2.25rem',
	10: '2.5rem',
	12: '3rem',
	14: '3.5rem',
	16: '4rem',
	20: '5rem',
	24: '6rem',
	28: '7rem',
	32: '8rem',
	36: '9rem',
	40: '10rem',
	44: '11rem',
	48: '12rem',
	52: '13rem',
	56: '14rem',
	60: '15rem',
	64: '16rem',
	72: '18rem',
	80: '20rem',
	96: '24rem',
	px: '1px',
	'0.5': '0.125rem',
	'1.5': '0.375rem',
	'2.5': '0.625rem',
	'3.5': '0.875rem',
	max: 'max-content',
	min: 'min-content',
	full: '100%',
	'3xs': '14rem',
	'2xs': '16rem',
	xs: '20rem',
	sm: '24rem',
	md: '28rem',
	lg: '32rem',
	xl: '36rem',
	'2xl': '42rem',
	'3xl': '48rem',
	'4xl': '56rem',
	'5xl': '64rem',
	'6xl': '72rem',
	'7xl': '80rem',
	'8xl': '90rem',
	container: {
		sm: '640px',
		md: '768px',
		lg: '1024px',
		xl: '1280px',
	},
}

export default sizes

================
File: Client/src/theme/foundations/spacing.js
================
const spacing = {
	1: '0.25rem',
	2: '0.5rem',
	3: '0.75rem',
	4: '1rem',
	5: '1.25rem',
	6: '1.5rem',
	7: '1.75rem',
	8: '2rem',
	9: '2.25rem',
	10: '2.5rem',
	12: '3rem',
	14: '3.5rem',
	16: '4rem',
	20: '5rem',
	24: '6rem',
	28: '7rem',
	32: '8rem',
	36: '9rem',
	40: '10rem',
	44: '11rem',
	48: '12rem',
	52: '13rem',
	56: '14rem',
	60: '15rem',
	64: '16rem',
	72: '18rem',
	80: '20rem',
	96: '24rem',
	px: '1px',
	'0.5': '0.125rem',
	'1.5': '0.375rem',
	'2.5': '0.625rem',
	'3.5': '0.875rem',
}

export default spacing

================
File: Client/src/theme/foundations/transition.js
================
const transition = {
	property: {
		common: 'background-color, border-color, color, fill, stroke, opacity, box-shadow, transform',
		colors: 'background-color, border-color, color, fill, stroke',
		dimensions: 'width, height',
		position: 'left, right, top, bottom',
		background: 'background-color, background-image, background-position',
	},
	easing: {
		'ease-in': 'cubic-bezier(0.4, 0, 1, 1)',
		'ease-out': 'cubic-bezier(0, 0, 0.2, 1)',
		'ease-in-out': 'cubic-bezier(0.4, 0, 0.2, 1)',
	},
	duration: {
		'ultra-fast': '50ms',
		faster: '100ms',
		fast: '150ms',
		normal: '200ms',
		slow: '300ms',
		slower: '400ms',
		'ultra-slow': '500ms',
	},
}

export default transition

================
File: Client/src/theme/foundations/typography.js
================
const typography = {
	letterSpacing: {
		tighter: '-0.05em',
		tight: '-0.025em',
		normal: '0',
		wide: '0.025em',
		wider: '0.05em',
		widest: '0.1em',
	},
	lineHeights: {
		3: '.75rem',
		4: '1rem',
		5: '1.25rem',
		6: '1.5rem',
		7: '1.75rem',
		8: '2rem',
		9: '2.25rem',
		10: '2.5rem',
		normal: 'normal',
		none: '1',
		shorter: '1.25',
		short: '1.375',
		base: '1.5',
		tall: '1.625',
		taller: '2',
	},
	fontWeights: {
		hairline: '100',
		thin: '200',
		light: '300',
		normal: '400',
		medium: '500',
		semibold: '600',
		bold: '700',
		extrabold: '800',
		black: '900',
	},
	fonts: {
		heading: '-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
		body: '-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
		mono: 'SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace',
	},
	fontSizes: {
		xs: '0.75rem',
		sm: '0.875rem',
		md: '1rem',
		lg: '1.125rem',
		xl: '1.25rem',
		'2xl': '1.5rem',
		'3xl': '1.875rem',
		'4xl': '2.25rem',
		'5xl': '3rem',
		'6xl': '3.75rem',
		'7xl': '4.5rem',
		'8xl': '6rem',
		'9xl': '8rem',
	},
}

export default typography

================
File: Client/src/theme/foundations/z-index.js
================
const zIndices = {
	hide: -1,
	auto: 'auto',
	base: 0,
	docked: 10,
	dropdown: 1000,
	sticky: 1100,
	banner: 1200,
	overlay: 1300,
	modal: 1400,
	popover: 1500,
	skipLink: 1600,
	toast: 1700,
	tooltip: 1800,
}

export default zIndices

================
File: Client/src/theme/index.js
================
import { extendTheme } from '@chakra-ui/react'
import foundations from './foundations'

const direction = 'ltr'

const config = {
  useSystemColorMode: false,
  initialColorMode: 'light',
  cssVarPrefix: 'chakra',
}

export const theme = {
  direction,
  ...foundations,
  config,
}

export default extendTheme(theme)

================
File: Client/src/theme/styles.js
================
import { mode } from "@chakra-ui/theme-tools";
export const globalStyles = {
  colors: {
    brand: {
      100: "#E9E3FF",
      200: "#422AFB",
      300: "#422AFB",
      400: "#7551FF",
      500: "#422AFB",
      600: "#3311DB",
      700: "#02044A",
      800: "#190793",
      900: "#11047A",
    },
    brandScheme: {
      100: "#E9E3FF",
      200: "#7551FF",
      300: "#7551FF",
      400: "#7551FF",
      500: "#422AFB",
      600: "#3311DB",
      700: "#02044A",
      800: "#190793",
      900: "#02044A",
    },
    brandTabs: {
      100: "#E9E3FF",
      200: "#422AFB",
      300: "#422AFB",
      400: "#422AFB",
      500: "#422AFB",
      600: "#3311DB",
      700: "#02044A",
      800: "#190793",
      900: "#02044A",
    },
    secondaryGray: {
      100: "#E0E5F2",
      200: "#E1E9F8",
      300: "#F4F7FE",
      400: "#E9EDF7",
      500: "#8F9BBA",
      600: "#A3AED0",
      700: "#707EAE",
      800: "#707EAE",
      900: "#1B2559",
    },
    red: {
      100: "#FEEFEE",
      300: "#eb7b74",
      500: "#EE5D50",
      600: "#E31A1A",
    },
    blue: {
      50: "#EFF4FB",
      500: "#3965FF",
    },
    orange: {
      100: "#FFF6DA",
      400: "#fde04ce8",
      500: "#FFB547",
    },
    green: {
      100: "#E6FAF5",
      500: "#01B574",
    },
    navy: {
      50: "#d0dcfb",
      100: "#aac0fe",
      200: "#a3b9f8",
      300: "#728fea",
      400: "#3652ba",
      500: "#1b3bbb",
      600: "#24388a",
      700: "#1B254B",
      800: "#111c44",
      900: "#0b1437",
    },
    gray: {
      100: '#FAFCFE',
      200: '#E2E8F0',
      300: '#CBD5E0',
      400: '#A0AEC0',
      500: '#718096',
      600: '#4A5568',
      700: '#2D3748',
      800: '#1A202C',
      900: '#171923',
    },
  },
  styles: {
    global: (props) => ({
      body: {
        overflowX: "hidden",
        bg: mode("secondaryGray.300", "navy.900")(props),
        fontFamily: "Inter,sans-serif",
        letterSpacing: "-0.5px",
      },
      input: {
        color: "gray.700",
      },
      html: {
        fontFamily: "Inter,sans-serif",
      },
    }),
  },
};

================
File: Client/src/theme/theme.js
================
import { extendTheme } from "@chakra-ui/react";
import { CardComponent } from "./additions/card/card";
import { buttonStyles } from "./components/button";
import { badgeStyles } from "./components/badge";
import { inputStyles } from "./components/input";
import { progressStyles } from "./components/progress";
import { sliderStyles } from "./components/slider";
import { textareaStyles } from "./components/textarea";
import { switchStyles } from "./components/switch";
import { linkStyles } from "./components/link";
import { breakpoints } from "./foundations/breakpoints";
import { globalStyles } from "./styles";
export default extendTheme(
  { breakpoints }, // Breakpoints
  globalStyles,
  badgeStyles, // badge styles
  buttonStyles, // button styles
  linkStyles, // link styles
  progressStyles, // progress styles  
  sliderStyles, // slider styles
  inputStyles, // input styles
  textareaStyles, // textarea styles
  switchStyles, // switch styles
  CardComponent // card component
);

================
File: Client/src/utils/addDocumentModal.js
================
import { Box, Button, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, FormLabel, Input, Text } from '@chakra-ui/react';
import React, { useState } from 'react'
import { useFormik } from 'formik';
import Spinner from 'components/spinner/Spinner';
import { postApi } from 'services/api';
import { documentSchema } from 'schema';
import FormDataUse, { commonUtils } from './formDataUse';
import Upload from '../views/admin/document/component/Upload'

const AddDocumentModal = ({ setAddDocument, addDocument, linkId, from, setAction, fetchData }) => {
    const [isLoding, setIsLoding] = useState(false)
    const user = JSON.parse(localStorage.getItem("user"))

    const initialValues = {
        folderName: '',
        files: '',
        filename: '',
        linkLead: from === 'lead' && linkId,
        linkContact: from === 'contact' && linkId,
        createBy: user._id
    };

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: documentSchema,
        onSubmit: (values, { resetForm }) => {
            addData();
        },
    });
    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik


    const addData = async () => {
        try {
            setIsLoding(true)
            const payload = commonUtils.formData(values)

            let response = await postApi(from === 'lead' ? 'api/document/addDocumentLead' : 'api/document/addDocumentContact', payload);
            if (response && response.status === 200) {
                formik.resetForm();
                // setAction((pre) => !pre)
                fetchData(2)
                setAddDocument(false)
            }
        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };
    return (
        <Modal onClose={() => setAddDocument(false)} isOpen={addDocument} isCentered>
            <ModalOverlay />
            <ModalContent maxWidth={"2xl"}>
                <ModalHeader></ModalHeader>
                <ModalCloseButton />
                <ModalBody>
                    <Box >
                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                            Folder Name<Text color={"red"}>*</Text>
                        </FormLabel>
                        <Input
                            fontSize='sm'
                            onChange={handleChange}
                            value={values.folderName}
                            name="folderName"
                            placeholder='Enter Folder Name'
                            fontWeight='500'
                            borderColor={errors?.folderName && touched?.folderName ? "red.300" : null}
                        />
                        <Text mb='10px' color={'red'}> {errors.folderName && touched.folderName && errors.folderName}</Text>
                    </Box>
                    <Box >
                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                            File Name
                        </FormLabel>
                        <Input
                            fontSize='sm'
                            onChange={handleChange}
                            value={values.filename}
                            name="filename"
                            placeholder='Enter File Name'
                            fontWeight='500'
                            borderColor={errors?.filename && touched?.filename ? "red.300" : null}
                        />
                        <Text mb='10px' color={'red'}> {errors.filename && touched.filename && errors.filename}</Text>
                    </Box>
                    <Upload count={values.files.length} onFileSelect={(file) => setFieldValue('files', file)} />              </ModalBody>
                <ModalFooter>
                    <Button size="sm" variant='brand' mr={2} onClick={handleSubmit} disabled={isLoding ? true : false} >{isLoding ? <Spinner /> : 'Save'}</Button>
                    <Button size="sm" variant="outline" colorScheme="red" onClick={() => { setAddDocument(false); resetForm() }} >Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    )
}

export default AddDocumentModal

================
File: Client/src/utils/customForm.js
================
import React from 'react';
import { Grid, GridItem, Heading, FormLabel, Input, Text, InputLeftElement, InputGroup, Checkbox, Select, RadioGroup, Radio, HStack, Slider, SliderTrack, SliderFilledTrack, SliderThumb, Box } from '@chakra-ui/react'; // Assuming you are using Chakra UI
import { HSeparator } from 'components/separator/Separator';
import { EmailIcon, PhoneIcon, StarIcon } from '@chakra-ui/icons';

const CustomForm = ({ moduleData, values, handleChange, handleBlur, errors, touched, setFieldValue }) => {
    return (
        <Grid templateColumns="repeat(12, 1fr)" gap={3}>
            {moduleData?.headings?.length > 0 ?
                <>
                    {
                        moduleData?.headings?.map((item, ind) => (
                            <>
                                <GridItem colSpan={{ base: 12 }} key={ind}>
                                    {ind !== 0 && <HSeparator />}
                                    <Heading as="h1" size="md" mt='10px'>
                                        {ind + 1}. {item?.heading}
                                    </Heading>
                                </GridItem>
                                {
                                    moduleData?.fields?.filter((itm) => itm?.belongsTo === item?._id)?.map((field, index) => (
                                        <GridItem colSpan={{ base: 12, sm: 6 }} key={index}>
                                            {field.type === 'check' ? '' : <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px' htmlFor={field.name}>{field.label} {field.validation && field.validation.find((validation) => validation.require) && (
                                                <span style={{ color: 'red' }}>*</span>
                                            )}</FormLabel>}
                                            {field.type === 'range' ?
                                                <>
                                                    {values.leadRating || 0}
                                                    <Slider ml={2} aria-label='slider-ex-1' colorScheme='yellow' value={values.leadRating} min={field?.validation[1]?.value} max={field?.validation[2]?.value} step={.1} defaultValue={0} onChange={(value) => setFieldValue(field.name, value)} >
                                                        <SliderTrack>
                                                            <SliderFilledTrack />
                                                        </SliderTrack>
                                                        <SliderThumb boxSize={6}>
                                                            <Box color='yellow.300' as={StarIcon} />
                                                        </SliderThumb>
                                                    </Slider>
                                                </>
                                                : field.type === 'radio' ?
                                                    <RadioGroup
                                                        name={field.name}
                                                        value={values[field.name]}
                                                        onChange={(value) => setFieldValue(field.name, value)}
                                                    >
                                                        <HStack spacing="24px">
                                                            {field.options.map(option => (
                                                                <Radio key={option._id} value={option.value}>
                                                                    {option.name}
                                                                </Radio>
                                                            ))}
                                                        </HStack>
                                                    </RadioGroup> :
                                                    field.type === 'select' ? <Select
                                                        fontSize='sm'
                                                        id={field.name}
                                                        name={field.name}
                                                        onChange={handleChange}
                                                        onBlur={handleBlur}
                                                        value={values[field.name]}
                                                        fontWeight='500'
                                                        borderColor={errors?.[field?.name] && touched?.[field?.name] ? "red.300" : null}
                                                    >
                                                        {field.options.map(option => (
                                                            <option key={option._id} value={option.value}>
                                                                {option.name}
                                                            </option>
                                                        ))}
                                                    </Select> : field.type === 'check' ? <Checkbox
                                                        isChecked={values[field.name]}
                                                        onChange={() => setFieldValue(field.name, !values[field.name])}
                                                    >
                                                        {field.label}
                                                    </Checkbox> :
                                                        <>
                                                            <InputGroup>
                                                                {field.type === 'tel' ? <InputLeftElement
                                                                    pointerEvents="none"
                                                                    children={<PhoneIcon color="gray.300" borderRadius="16px" />}
                                                                /> : field.type === 'email' && <InputLeftElement
                                                                    pointerEvents="none"
                                                                    children={<EmailIcon color="gray.300" borderRadius="16px" />}
                                                                />
                                                                }
                                                                <Input
                                                                    fontSize='sm'
                                                                    type={field.type}
                                                                    id={field.name}
                                                                    name={field.name}
                                                                    onChange={handleChange}
                                                                    onBlur={handleBlur}
                                                                    value={values[field.name]}
                                                                    fontWeight='500'
                                                                    placeholder={`Enter ${field.label}`}
                                                                    borderColor={errors?.[field?.name] && touched?.[field?.name] ? "red.300" : null}
                                                                />
                                                            </InputGroup>
                                                        </>}
                                            {touched[field?.name] && errors?.[field?.name] ? (
                                                <Text mb='10px' color={'red'} fontSize='sm' textTransform={'capitalize'}> {errors?.[field?.name]}</Text>
                                            ) : null}
                                        </GridItem>
                                    ))
                                }
                            </>
                        ))
                    }
                    <>
                        {moduleData?.fields?.filter((itm) => !itm?.belongsTo)?.map((field, i) => (
                            <GridItem colSpan={{ base: 12, sm: 6 }} key={i}>
                                {field.type === 'check' ? '' : <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px' htmlFor={field.name}>{field.label} {field.validation && field.validation.find((validation) => validation.require) && (
                                    <span style={{ color: 'red' }}>*</span>
                                )}</FormLabel>}
                                {field.type === 'range' ?
                                    <>
                                        {values.leadRating || 0}
                                        <Slider ml={2} aria-label='slider-ex-1' colorScheme='yellow' min={field?.validation[1]?.value} max={field?.validation[2]?.value} step={.1} defaultValue={0} onChange={(value) => setFieldValue(field.name, value)} >
                                            <SliderTrack>
                                                <SliderFilledTrack />
                                            </SliderTrack>
                                            <SliderThumb boxSize={6}>
                                                <Box color='yellow.300' as={StarIcon} />
                                            </SliderThumb>
                                        </Slider>
                                    </>
                                    : field.type === 'radio' ?
                                        <RadioGroup
                                            name={field.name}
                                            value={values[field.name]}
                                            onChange={(value) => setFieldValue(field.name, value)}
                                        >
                                            <HStack spacing="24px">
                                                {field.options.map(option => (
                                                    <Radio key={option._id} value={option.value}>
                                                        {option.name}
                                                    </Radio>
                                                ))}
                                            </HStack>
                                        </RadioGroup> :
                                        field.type === 'select' ? <Select
                                            fontSize='sm'
                                            id={field.name}
                                            name={field.name}
                                            onChange={handleChange}
                                            onBlur={handleBlur}
                                            value={values[field.name]}
                                            fontWeight='500'
                                            borderColor={errors?.[field?.name] && touched?.[field?.name] ? "red.300" : null}
                                        >
                                            <option value="">Select {field.label}</option>
                                            {field.options.map(option => (
                                                <option key={option._id} value={option.value}>
                                                    {option.name}
                                                </option>
                                            ))}
                                        </Select> : field.type === 'check' ? <Checkbox
                                            isChecked={values[field.name]}
                                            onChange={() => setFieldValue(field.name, !values[field.name])}
                                        >
                                            {field.label}
                                        </Checkbox> :
                                            <>
                                                <InputGroup>
                                                    {field.type === 'tel' && <InputLeftElement
                                                        pointerEvents="none"
                                                        children={<PhoneIcon color="gray.300" borderRadius="16px" />}
                                                    />}
                                                    <Input
                                                        fontSize='sm'
                                                        type={field.type}
                                                        id={field.name}
                                                        name={field.name}
                                                        onChange={handleChange}
                                                        onBlur={handleBlur}
                                                        value={values[field.name]}
                                                        fontWeight='500'
                                                        placeholder={`Enter ${field.label}`}
                                                        borderColor={errors?.[field?.name] && touched?.[field?.name] ? "red.300" : null}
                                                    />
                                                </InputGroup>
                                            </>}
                                {touched[field?.name] && errors?.[field?.name] ? (
                                    <Text mb='10px' fontSize='sm' color={'red'}> {errors?.[field?.name]}</Text>
                                ) : null}
                            </GridItem>
                        ))}
                    </>
                </>
                :
                <>
                    {moduleData?.fields?.filter((itm) => !itm?.belongsTo)?.map((field, index) => (
                        <GridItem colSpan={{ base: 12, sm: 6 }} key={index}>
                            {field.type === 'check' ? '' : <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px' htmlFor={field.name}>{field.label} {field.validation && field.validation.find((validation) => validation.require) && (
                                <span style={{ color: 'red' }}>*</span>
                            )}</FormLabel>}
                            {field.type === 'range' ?
                                <>
                                    {values.leadRating || 0}
                                    <Slider ml={2} aria-label='slider-ex-1' colorScheme='yellow' min={field?.validation[1]?.value} max={field?.validation[2]?.value} step={.1} defaultValue={0} onChange={(value) => setFieldValue(field.name, value)} >
                                        <SliderTrack>
                                            <SliderFilledTrack />
                                        </SliderTrack>
                                        <SliderThumb boxSize={6}>
                                            <Box color='yellow.300' as={StarIcon} />
                                        </SliderThumb>
                                    </Slider>
                                </>
                                : field.type === 'radio' ?
                                    <RadioGroup
                                        name={field.name}
                                        value={values[field.name]}
                                        onChange={(value) => setFieldValue(field.name, value)}
                                    >
                                        <HStack spacing="24px">
                                            {field.options.map(option => (
                                                <Radio key={option._id} value={option.value}>
                                                    {option.name}
                                                </Radio>
                                            ))}
                                        </HStack>
                                    </RadioGroup> :
                                    field.type === 'select' ? <Select
                                        fontSize='sm'
                                        id={field.name}
                                        name={field.name}
                                        onChange={handleChange}
                                        onBlur={handleBlur}
                                        value={values[field.name]}
                                        fontWeight='500'
                                        borderColor={errors?.[field?.name] && touched?.[field?.name] ? "red.300" : null}
                                    >
                                        <option value="">Select {field.label}</option>
                                        {field.options.map(option => (
                                            <option key={option._id} value={option.value}>
                                                {option.name}
                                            </option>
                                        ))}
                                    </Select> : field.type === 'check' ? <Checkbox
                                        isChecked={values[field.name]}
                                        onChange={() => setFieldValue(field.name, !values[field.name])}
                                    >
                                        {field.label}
                                    </Checkbox> :
                                        <>
                                            <InputGroup>
                                                {field.type === 'tel' && <InputLeftElement
                                                    pointerEvents="none"
                                                    children={<PhoneIcon color="gray.300" borderRadius="16px" />}
                                                />}
                                                <Input
                                                    fontSize='sm'
                                                    type={field.type}
                                                    id={field.name}
                                                    name={field.name}
                                                    onChange={handleChange}
                                                    onBlur={handleBlur}
                                                    value={values[field.name]}
                                                    fontWeight='500'
                                                    placeholder={`Enter ${field.label}`}
                                                    borderColor={errors?.[field?.name] && touched?.[field?.name] ? "red.300" : null}
                                                />
                                            </InputGroup>
                                        </>}
                            {touched[field?.name] && errors?.[field?.name] ? (
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors?.[field?.name]}</Text>
                            ) : null}
                        </GridItem>
                    ))}
                </>
            }

        </Grid>
    );
};

export default CustomForm;

================
File: Client/src/utils/customView.js
================
// import React from 'react'
// import { Grid, GridItem, Box, Heading, Text } from '@chakra-ui/react'
// import Card from 'components/card/Card'
// import moment from 'moment'
// import { HSeparator } from "components/separator/Separator";

// const CustomView = ({ data, toCamelCase, fieldData }) => {

//     const headingLength = data?.headings?.length % 3
//     const headingLengthMd = data?.headings?.length % 2
//     const lastLength = data?.headings.length - headingLength
//     const lastLengthMd = data?.headings.length - headingLengthMd

//     // Define a function to determine the colSpan value
//     const getColSpanLg = (ind, lastLength, headingLength) => {
//         if (ind < lastLength) {
//             return (ind + 1) > lastLength ? 6 : 4;
//         } else {
//             return headingLength === 1 ? 12 : ((ind + 1) > lastLength ? 6 : 4);
//         }
//     };
//     const getColSpanMd = (ind, lastLengthMd, headingLengthMd) => {
//         if (ind < lastLengthMd) {
//             return (ind + 1) > lastLengthMd ? 4 : 6;
//         } else {
//             return headingLengthMd === 1 ? 12 : ((ind + 1) > lastLengthMd ? 4 : 6);
//         }
//     };
//     return (
//         <Grid templateColumns="repeat(12, 1fr)" gap={3}>
//             {data?.headings?.length > 0 ? <>
//                 {data?.headings?.map((item, ind) => (
//                     <>
//                         <GridItem colSpan={{
//                             base: 12, md: getColSpanMd(ind, lastLengthMd, headingLengthMd), lg: getColSpanLg(ind, lastLength, headingLength)
//                         }} key={ind}>
//                             <Card>
//                                 <Grid templateColumns="repeat(12, 1fr)" gap={3}>
//                                     <GridItem colSpan={12}>
//                                         <Heading as="h1" size="md" mb='10px'>
//                                             {ind + 1}. {item?.heading}
//                                         </Heading>
//                                         <HSeparator />
//                                     </GridItem>
//                                     {
//                                         data?.fields?.filter((itm) => itm?.belongsTo === item?._id)?.map((field) => (
//                                             <GridItem colSpan={{ base: 12, md: 6 }} key={field?.name}>
//                                                 <Text color={'blackAlpha.900'} fontSize="sm" fontWeight="bold"> {field?.label}</Text>
//                                                 <Text color={'blackAlpha.900'} fontSize="sm" > {(fieldData && (fieldData[field?.name] !== undefined ? fieldData[field?.name] : "N/A")) || "N/A"}</Text>
//                                             </GridItem>
//                                         ))
//                                     }
//                                 </Grid>
//                             </Card>
//                         </GridItem>
//                     </>)
//                 )}
//             </> :
//                 <GridItem colSpan={{
//                     base: 12,
//                 }}>

//                     <Card>
//                         <Grid templateColumns="repeat(12, 1fr)" gap={3}>
//                             <GridItem colSpan={12}>
//                                 <Heading as="h1" size="md" mb='10px'>
//                                     {data?.moduleName} view page
//                                 </Heading>
//                                 <HSeparator />
//                             </GridItem>
//                             {
//                                 data?.fields?.map((field) => (
//                                     <GridItem colSpan={{ base: 12, md: 6 }} key={field?.name}>
//                                         <Text color={'blackAlpha.900'} fontSize="sm" fontWeight="bold"> {field?.label}</Text>
//                                         <Text color={'blackAlpha.900'} fontSize="sm" > {(fieldData && (fieldData[field?.name] !== undefined ? fieldData[field?.name] : "N/A")) || "N/A"}</Text>
//                                     </GridItem>
//                                 ))
//                             }
//                         </Grid>
//                     </Card>
//                 </GridItem>
//             }
//         </Grid>
//     )
// }

// export default CustomView
// import React, { useState } from 'react'
// import { Grid, GridItem, Box, Heading, Text, Input } from '@chakra-ui/react'
// import Card from 'components/card/Card'
// import moment from 'moment'
// import { HSeparator } from "components/separator/Separator";
// import { putApi } from 'services/api';
// import { useParams } from 'react-router-dom';
// import { useFormik } from 'formik';
// import * as yup from 'yup'
// import { generateValidationSchema } from 'utils';

// const CustomView = ({ data, toCamelCase, fieldData, moduleId, fetchData }) => {
//     const [editableField, setEditableField] = useState(null);
//     const [editableValue, setEditableValue] = useState('');
//     const param = useParams()

//     const handleDoubleClick = (fieldName, value) => {
//         setEditableField(fieldName);
//         setEditableValue(value);
//     };
//     const handleChange = (event) => {
//         setEditableValue(event.target.value);
//     };

//     const formik = useFormik({
//         initialValues: fieldData,
//         enableReinitialize: true,
//         validationSchema: yup.object().shape(generateValidationSchema(data?.fields)),
//         onSubmit: (values, { resetForm }) => {
//             EditData();
//         },
//     });


//     const EditData = async () => {
//         let payload = {
//             ...formik.values,
//             moduleId: moduleId
//         }
//         payload[`${editableField}`] = editableValue
//         try {
//             // setIsLoding(true)
//             let response = await putApi(`api/form/edit/${param.id}`, payload)
//             if (response.status === 200) {
//                 setEditableField(null);
//                 fetchData()
//             }
//         } catch (e) {
//             console.log(e);
//         }
//         finally {
//             // setIsLoding(false)
//         }
//     };

//     const handleBlur = (e) => {
//         formik.handleSubmit()
//     };

//     const headingLength = data?.headings?.length % 3;
//     const headingLengthMd = data?.headings?.length % 2;
//     const lastLength = data?.headings.length - headingLength;
//     const lastLengthMd = data?.headings.length - headingLengthMd;

//     // Define a function to determine the colSpan value
//     const getColSpanLg = (ind, lastLength, headingLength) => {
//         if (ind < lastLength) {
//             return (ind + 1) > lastLength ? 6 : 4;
//         } else {
//             return headingLength === 1 ? 12 : ((ind + 1) > lastLength ? 6 : 4);
//         }
//     };
//     const getColSpanMd = (ind, lastLengthMd, headingLengthMd) => {
//         if (ind < lastLengthMd) {
//             return (ind + 1) > lastLengthMd ? 4 : 6;
//         } else {
//             return headingLengthMd === 1 ? 12 : ((ind + 1) > lastLengthMd ? 4 : 6);
//         }
//     };

//     return (
//         <Grid templateColumns="repeat(12, 1fr)" gap={3}>
//             {data?.headings?.length > 0 ? (
//                 <>
//                     {data?.headings?.map((item, ind) => (
//                         <GridItem colSpan={{
//                             base: 12, md: getColSpanMd(ind, lastLengthMd, headingLengthMd), lg: getColSpanLg(ind, lastLength, headingLength)
//                         }} key={ind}>
//                             <Card>
//                                 <Grid templateColumns="repeat(12, 1fr)" gap={3}>
//                                     <GridItem colSpan={12}>
//                                         <Heading as="h1" size="md" mb='10px'>
//                                             {ind + 1}. {item?.heading}
//                                         </Heading>
//                                         <HSeparator />
//                                     </GridItem>
//                                     {
//                                         data?.fields?.filter((itm) => itm?.belongsTo === item?._id)?.map((field) => (
//                                             <GridItem colSpan={{ base: 12, md: 6 }} key={field?.name}>
//                                                 <Text color={'blackAlpha.900'} fontSize="sm" fontWeight="bold">{field?.label}</Text>
//                                                 {editableField === field?.name ? (
//                                                     <Input
//                                                         value={editableValue}
//                                                         onChange={handleChange}
//                                                         onBlur={handleBlur}
//                                                         autoFocus
//                                                         borderColor={errors?.[field?.name] && touched?.[field?.name] ? "red.300" : null}
//                                                     />
//                                                 ) : (
//                                                     <Text
//                                                         color={'blackAlpha.900'}
//                                                         fontSize="sm"
//                                                         onDoubleClick={() => handleDoubleClick(field?.name, fieldData && (fieldData[field?.name] !== undefined ? fieldData[field?.name] : "N/A"))}
//                                                     >
//                                                         {(fieldData && (fieldData[field?.name] !== undefined ? fieldData[field?.name] : "N/A")) || "N/A"}
//                                                     </Text>
//                                                 )}
//                                             </GridItem>
//                                         ))
//                                     }
//                                 </Grid>
//                             </Card>
//                         </GridItem>
//                     ))}
//                 </>
//             ) : (
//                 <GridItem colSpan={{ base: 12 }}>
//                     <Card>
//                         <Grid templateColumns="repeat(12, 1fr)" gap={3}>
//                             <GridItem colSpan={12}>
//                                 <Heading as="h1" size="md" mb='10px'>
//                                     {data?.moduleName} view page
//                                 </Heading>
//                                 <HSeparator />
//                             </GridItem>
//                             {data?.fields?.map((field) => (
//                                 <GridItem colSpan={{ base: 12, md: 6 }} key={field?.name}>
//                                     <Text color={'blackAlpha.900'} fontSize="sm" fontWeight="bold">{field?.label}</Text>
//                                     {editableField === field?.name ? (
//                                         <Input
//                                             value={editableValue}
//                                             onChange={handleChange}
//                                             onBlur={handleBlur}
//                                             autoFocus
//                                         />
//                                     ) : (
//                                         <Text
//                                             color={'blackAlpha.900'}
//                                             fontSize="sm"
//                                             onDoubleClick={() => handleDoubleClick(field?.name, fieldData && (fieldData[field?.name] !== undefined ? fieldData[field?.name] : "N/A"))}
//                                         >
//                                             {(fieldData && (fieldData[field?.name] !== undefined ? fieldData[field?.name] : "N/A")) || "N/A"}
//                                         </Text>
//                                     )}
//                                 </GridItem>
//                             ))}
//                         </Grid>
//                     </Card>
//                 </GridItem>
//             )}
//         </Grid>
//     );
// };

// export default CustomView;


import React, { useState } from 'react';
import { Grid, GridItem, Heading, Text, Input, FormControl, FormErrorMessage, Select } from '@chakra-ui/react';
import Card from 'components/card/Card';
import moment from 'moment';
import { HSeparator } from "components/separator/Separator";
import { putApi } from 'services/api';
import { useParams } from 'react-router-dom';
import { useFormik } from 'formik';
import * as yup from 'yup';
import { generateValidationSchema } from 'utils';
import { toast } from 'react-toastify';

const CustomView = ({ data, toCamelCase, fieldData, moduleId, fetchData, editUrl, id }) => {
    const param = useParams();
    const [editableField, setEditableField] = useState(null);
    const [editableFieldName, setEditableFieldName] = useState(null);

    const formik = useFormik({
        initialValues: fieldData,
        enableReinitialize: true,
        validationSchema: yup.object().shape(generateValidationSchema(data?.fields)),
        onSubmit: async (values) => {
            let payload = {
                ...values,
                moduleId: moduleId
            };
            try {
                let response = await putApi(editUrl ? editUrl : `api/form/edit/${param.id}`, payload);
                if (response.status === 200) {
                    setEditableField(null)
                    toast.success(`${editableFieldName} Update successfully`)
                    fetchData();
                }
            } catch (e) {
                console.log(e);
                toast.success(`server error`)
            }
        },
    });

    const handleDoubleClick = (fieldName, value, lable) => {
        formik.setFieldValue(fieldName, value);
        setEditableField(fieldName)
        setEditableFieldName(lable)
    };

    const handleBlur = (e) => {
        formik.handleSubmit();
    };

    const headingLength = data?.headings?.length % 3;
    const headingLengthMd = data?.headings?.length % 2;
    const lastLength = data?.headings.length - headingLength;
    const lastLengthMd = data?.headings.length - headingLengthMd;

    const getColSpanLg = (ind, lastLength, headingLength) => {
        if (ind < lastLength) {
            return (ind + 1) > lastLength ? 6 : 4;
        } else {
            return headingLength === 1 ? 12 : ((ind + 1) > lastLength ? 6 : 4);
        }
    };

    const getColSpanMd = (ind, lastLengthMd, headingLengthMd) => {
        if (ind < lastLengthMd) {
            return (ind + 1) > lastLengthMd ? 4 : 6;
        } else {
            return headingLengthMd === 1 ? 12 : ((ind + 1) > lastLengthMd ? 4 : 6);
        }
    };

    return (
        <Grid templateColumns="repeat(12, 1fr)" gap={3} id={id}>
            {data?.headings?.length > 0 ? (
                <>
                    {data?.headings?.map((item, ind) => (
                        <GridItem colSpan={{
                            base: 12, md: getColSpanMd(ind, lastLengthMd, headingLengthMd), lg: getColSpanLg(ind, lastLength, headingLength)
                        }} key={ind}>
                            <Card>
                                <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                                    <GridItem colSpan={12}>
                                        <Heading as="h1" size="md" mb='10px'>
                                            {ind + 1}. {item?.heading}
                                        </Heading>
                                        <HSeparator />
                                    </GridItem>
                                    {
                                        data?.fields?.filter((itm) => itm?.belongsTo === item?._id)?.map((field) => (
                                            <GridItem colSpan={{ base: 12, md: 6 }} key={field?.name}>
                                                <FormControl isInvalid={formik.errors[field?.name] && formik.touched[field?.name]}>
                                                    <Text color={'blackAlpha.900'} fontSize="sm" fontWeight="bold">{field?.label}</Text>
                                                    {editableField === field?.name || formik.errors[field?.name] ? (
                                                        field?.type === "select" || field?.type === "radio" ?
                                                            <Select
                                                                fontSize='sm'
                                                                id={field?.name}
                                                                name={field?.name}
                                                                onChange={formik.handleChange}
                                                                onBlur={handleBlur}
                                                                value={formik.values[field?.name] || ''}
                                                                fontWeight='500'
                                                                borderColor={formik.errors[field?.name] && formik.touched[field?.name] ? "red.300" : null}
                                                            >
                                                                {field?.options?.map(option => (
                                                                    <option key={option._id} value={option.value}>
                                                                        {option.name}
                                                                    </option>))}
                                                            </Select>
                                                            : field?.type === "text" ?
                                                                <Input
                                                                    value={formik.values[field?.name] || ''}
                                                                    onChange={formik.handleChange}
                                                                    onBlur={handleBlur}
                                                                    autoFocus
                                                                    borderColor={formik.errors[field?.name] && formik.touched[field?.name] ? "red.300" : null}
                                                                    name={field?.name}
                                                                />
                                                                : field?.type === "tel" ?
                                                                    <Input
                                                                        value={formik.values[field?.name] || ''}
                                                                        onChange={formik.handleChange}
                                                                        onBlur={handleBlur}
                                                                        autoFocus
                                                                        borderColor={formik.errors[field?.name] && formik.touched[field?.name] ? "red.300" : null}
                                                                        name={field?.name}
                                                                    />
                                                                    : field?.type === "email" ?
                                                                        <Input
                                                                            value={formik.values[field?.name] || ''}
                                                                            onChange={formik.handleChange}
                                                                            onBlur={handleBlur}
                                                                            autoFocus
                                                                            borderColor={formik.errors[field?.name] && formik.touched[field?.name] ? "red.300" : null}
                                                                            name={field?.name}
                                                                        /> : field?.type === "date" ?
                                                                            <Input
                                                                                value={formik.values[field?.name] || ''}
                                                                                onChange={formik.handleChange}
                                                                                onBlur={handleBlur}
                                                                                autoFocus
                                                                                type='date'
                                                                                borderColor={formik.errors[field?.name] && formik.touched[field?.name] ? "red.300" : null}
                                                                                name={field?.name}
                                                                            /> : field?.type === "url" ?
                                                                                <Input
                                                                                    value={formik.values[field?.name] || ''}
                                                                                    onChange={formik.handleChange}
                                                                                    onBlur={handleBlur}
                                                                                    autoFocus
                                                                                    type='url'
                                                                                    borderColor={formik.errors[field?.name] && formik.touched[field?.name] ? "red.300" : null}
                                                                                    name={field?.name}
                                                                                />
                                                                                : field?.type === "range" ?
                                                                                    <Input
                                                                                        value={formik.values[field?.name] || ''}
                                                                                        onChange={formik.handleChange}
                                                                                        onBlur={handleBlur}
                                                                                        autoFocus
                                                                                        type='range'
                                                                                        borderColor={formik.errors[field?.name] && formik.touched[field?.name] ? "red.300" : null}
                                                                                        name={field?.name}
                                                                                    />
                                                                                    :
                                                                                    <Input
                                                                                        value={formik.values[field?.name] || ''}
                                                                                        onChange={formik.handleChange}
                                                                                        onBlur={handleBlur}
                                                                                        autoFocus
                                                                                        borderColor={formik.errors[field?.name] && formik.touched[field?.name] ? "red.300" : null}
                                                                                        name={field?.name}
                                                                                    />

                                                    ) : (
                                                        <Text
                                                            color={'blackAlpha.900'}
                                                            fontSize="sm"
                                                            onDoubleClick={() => handleDoubleClick(field?.name, fieldData && (fieldData[field?.name] !== undefined ? fieldData[field?.name] : "N/A"), field?.label)}
                                                        >
                                                            {(fieldData && (fieldData[field?.name] !== undefined ? fieldData[field?.name] : "N/A")) || "N/A"}
                                                        </Text>
                                                    )}
                                                    <FormErrorMessage>{formik.errors[field?.name]}</FormErrorMessage>
                                                </FormControl>
                                            </GridItem>
                                        ))
                                    }
                                </Grid>
                            </Card>
                        </GridItem>
                    ))}
                </>
            ) : (
                <GridItem colSpan={{ base: 12 }}>
                    <Card>
                        <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                            <GridItem colSpan={12}>
                                <Heading as="h1" size="md" mb='10px'>
                                    {data?.moduleName} view page
                                </Heading>
                                <HSeparator />
                            </GridItem>
                            {data?.fields?.map((field) => (
                                <GridItem colSpan={{ base: 12, md: 6 }} key={field?.name}>
                                    <FormControl isInvalid={formik.errors[field?.name] && formik.touched[field?.name]}>
                                        <Text color={'blackAlpha.900'} fontSize="sm" fontWeight="bold">{field?.label}</Text>
                                        {editableField === field?.name || formik.errors[field?.name] ? (
                                            field?.type === "select" || field?.type === "radio" ?
                                                <Select
                                                    fontSize='sm'
                                                    id={field?.name}
                                                    name={field?.name}
                                                    onChange={formik.handleChange}
                                                    onBlur={handleBlur}
                                                    value={formik.values[field?.name] || ''}
                                                    fontWeight='500'
                                                    borderColor={formik.errors[field?.name] && formik.touched[field?.name] ? "red.300" : null}
                                                >
                                                    {field?.options?.map(option => (
                                                        <option key={option._id} value={option.value}>
                                                            {option.name}
                                                        </option>))}
                                                </Select>
                                                : field?.type === "text" ?
                                                    <Input
                                                        value={formik.values[field?.name] || ''}
                                                        onChange={formik.handleChange}
                                                        onBlur={handleBlur}
                                                        autoFocus
                                                        borderColor={formik.errors[field?.name] && formik.touched[field?.name] ? "red.300" : null}
                                                        name={field?.name}
                                                    />
                                                    : field?.type === "tel" ?
                                                        <Input
                                                            value={formik.values[field?.name] || ''}
                                                            onChange={formik.handleChange}
                                                            onBlur={handleBlur}
                                                            autoFocus
                                                            borderColor={formik.errors[field?.name] && formik.touched[field?.name] ? "red.300" : null}
                                                            name={field?.name}
                                                        />
                                                        : field?.type === "email" ?
                                                            <Input
                                                                value={formik.values[field?.name] || ''}
                                                                onChange={formik.handleChange}
                                                                onBlur={handleBlur}
                                                                autoFocus
                                                                borderColor={formik.errors[field?.name] && formik.touched[field?.name] ? "red.300" : null}
                                                                name={field?.name}
                                                            /> : field?.type === "date" ?
                                                                <Input
                                                                    value={formik.values[field?.name] || ''}
                                                                    onChange={formik.handleChange}
                                                                    onBlur={handleBlur}
                                                                    autoFocus
                                                                    type='date'
                                                                    borderColor={formik.errors[field?.name] && formik.touched[field?.name] ? "red.300" : null}
                                                                    name={field?.name}
                                                                /> : field?.type === "url" ?
                                                                    <Input
                                                                        value={formik.values[field?.name] || ''}
                                                                        onChange={formik.handleChange}
                                                                        onBlur={handleBlur}
                                                                        autoFocus
                                                                        type='url'
                                                                        borderColor={formik.errors[field?.name] && formik.touched[field?.name] ? "red.300" : null}
                                                                        name={field?.name}
                                                                    />
                                                                    : field?.type === "range" ?
                                                                        <Input
                                                                            value={formik.values[field?.name] || ''}
                                                                            onChange={formik.handleChange}
                                                                            onBlur={handleBlur}
                                                                            autoFocus
                                                                            type='range'
                                                                            borderColor={formik.errors[field?.name] && formik.touched[field?.name] ? "red.300" : null}
                                                                            name={field?.name}
                                                                        />
                                                                        :
                                                                        <Input
                                                                            value={formik.values[field?.name] || ''}
                                                                            onChange={formik.handleChange}
                                                                            onBlur={handleBlur}
                                                                            autoFocus
                                                                            borderColor={formik.errors[field?.name] && formik.touched[field?.name] ? "red.300" : null}
                                                                            name={field?.name}
                                                                        />


                                        ) : (
                                            <Text
                                                color={'blackAlpha.900'}
                                                fontSize="sm"
                                                onDoubleClick={() => handleDoubleClick(field?.name, fieldData && (fieldData[field?.name] !== undefined ? fieldData[field?.name] : "N/A"), field?.label)}
                                            >
                                                {(fieldData && (fieldData[field?.name] !== undefined ? fieldData[field?.name] : "N/A")) || "N/A"}
                                            </Text>
                                        )}
                                        <FormErrorMessage>{formik.errors[field?.name]}</FormErrorMessage>
                                    </FormControl>
                                </GridItem>
                            ))}
                        </Grid>
                    </Card>
                </GridItem>
            )}
        </Grid>
    );
};

export default CustomView;

================
File: Client/src/utils/formDataUse.js
================
import { useEffect } from 'react';

const FormDataUse = (values, formData) => {

    useEffect(() => {
        // const appendFormData = (key) => {
        //     if (formData && values[key]) {
        //         formData.append(key, values[key]);
        //     }
        // };

        // // Append each value to formData
        // appendFormData('folderName');
        // appendFormData('createBy');
        // appendFormData('filename');

        Object.entries(values).forEach(([key, value]) => {
            formData.append(key, value);
        });

        // Clean up function
        return () => {
            // Optionally, you can reset or clear the formData here if needed
        };
    }, [values, formData]);
};

export default FormDataUse;


export const commonUtils = {
    formData: (values) => {
        const formData = new FormData();

        Object.entries(values).forEach(([key, value]) => {
            formData.append(key, value);
        });
        values.files.forEach((file) => {
            formData?.append('files', file);
        });
        return formData;
    }
}

================
File: Client/src/utils/index.js
================
import * as yup from 'yup'

// export const generateValidationSchema = (fields) => {
//     return fields.reduce((acc, field) => {
//         acc[field.name] = field.validation.reduce((fieldAcc, rule) => {
//             if (rule.require) {
//                 fieldAcc = fieldAcc.required(rule.message);
//             }
//             if (rule.min) {
//                 fieldAcc = fieldAcc.min(rule.value, rule.message);
//             }
//             if (rule.max) {
//                 fieldAcc = fieldAcc.max(rule.value, rule.message);
//             }
//             if (rule.match) {
//                 const data = new RegExp(rule.value)
//                 const fieldAcc1 = data.test(rule.value);

//                 // fieldAcc = fieldAcc.matches(data, rule.message);
//                 if (!fieldAcc1) {
//                     // If the string doesn't match the regular expression, handle the error or validation failure
//                     console.error(rule.message);
//                 }
//             }
//             // if (rule.formikType) {
//             //     fieldAcc = yup.formikType() || yup.string()
//             // }
//             if (rule.formikType === 'date') {
//                 fieldAcc = fieldAcc.required(rule.message);
//             }
//             // if (rule.formikType === 'email') {
//             //     fieldAcc = fieldAcc.required(rule.message);
//             // }
//             return fieldAcc;
//         }, yup.string());

//         return acc;
//     }, {});
// };

export const generateValidationSchema = (fields) => {
    return fields?.reduce((acc, field) => {
        // let formikValObj = field?.validation?.find(obj => obj?.hasOwnProperty('formikType'));

        acc[field.name] = field.validation.reduce((fieldAcc, rule) => {
            if (rule.require) {
                fieldAcc = fieldAcc.required(rule.message);
            }
            if (rule.min) {
                fieldAcc = fieldAcc.min(rule.value, rule.message);
            }
            if (rule.max) {
                fieldAcc = fieldAcc.max(rule.value, rule.message);
            }
            if (rule.match) {
                const regexPattern = rule?.value?.replace(/^\/|\/$/g, ''); // Remove leading and trailing slashes
                const regex = new RegExp(regexPattern);
                fieldAcc = fieldAcc.matches(regex, rule.message);
            }
            if (rule.formikType === 'date') {
                fieldAcc = fieldAcc.required(rule.message);
            }
            // Add other formikType cases as needed

            return fieldAcc;
        }, yup.string());
        // }, (formikValObj && formikValObj?.formikType) ? yup?.[formikValObj?.formikType]() : yup.string());

        let fieldValidation;
        let formikValidation = field?.validation?.find(obj => obj?.hasOwnProperty('formikType'));
        let fieldFormikType = formikValidation?.formikType?.toLowerCase();

        if (fieldFormikType === 'string') {
            fieldValidation = yup.string()
        } else if (fieldFormikType === 'email') {
            fieldValidation = yup.string().email()
        } else if (fieldFormikType === 'date') {
            fieldValidation = yup.date()
        } else if (fieldFormikType === 'number') {
            fieldValidation = yup.number()
        } else if (fieldFormikType === 'object') {
            fieldValidation = yup.object()
        } else if (fieldFormikType === 'array') {
            fieldValidation = yup.array()
        } else if (fieldFormikType === 'url') {
            fieldValidation = yup.string().url()
        } else if (fieldFormikType === 'boolean') {
            fieldValidation = yup.boolean()
        } else if (fieldFormikType === 'positive') {
            fieldValidation = yup.number().positive()
        } else if (fieldFormikType === "negative") {
            fieldValidation = yup.number().negative()
        } else if (fieldFormikType === "integer") {
            fieldValidation = yup.number().integer()
        } else {
            fieldValidation = yup.string()
        }

        if (field.validation && Array.isArray(field.validation)) {
            field.validation.forEach((validationRule) => {

                if (validationRule.require) {
                    fieldValidation = fieldValidation.required(validationRule.message || 'This field is required');
                }
                if (validationRule.min) {
                    fieldValidation = fieldValidation.min(validationRule.value, validationRule.message || (fieldFormikType === 'date' ? "Date is too small" : 'Value is too small'));
                }
                if (validationRule.max) {
                    fieldValidation = fieldValidation.max(validationRule.value, validationRule.message || (fieldFormikType === 'date' ? "Date is too large" : 'Value is too large'));
                }
                if (validationRule.match) {
                    fieldValidation = fieldValidation.matches(
                        new RegExp(validationRule.match),
                        validationRule.message || 'Value does not match the pattern'
                    );
                }
                if (validationRule?.formikType && validationRule?.message) {
                    fieldValidation = fieldValidation.typeError(validationRule.message)
                }
            });
        }

        return {
            ...acc,
            [field.name]: fieldValidation,
        };

    }, {})
};

================
File: Client/src/utils/utils.js
================
import * as XLSX from "xlsx";

export const commonUtils = {
    convertJsonToCsvOrExcel: ({ jsonArray, csvColumns, fileName, extension }) => {
        const csvHeader = csvColumns?.length > 0 && csvColumns?.map((col) => col?.Header);

        const csvContent = [
            csvHeader,
            ...jsonArray?.map((row) => csvColumns?.length > 0 && csvColumns?.map((col) => row[col?.accessor]))
        ];

        const ws = XLSX.utils.aoa_to_sheet(csvContent);
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, 'Sheet 1');
        XLSX.writeFile(wb, `${fileName}.${extension}`);    // .csv, .xlsx
    }
}

================
File: Client/src/views/admin/account/components/AccountAdvanceSearch.js
================
import React from 'react';
import { useFormik } from "formik";
import * as yup from "yup";
import { Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Grid, GridItem, Input, FormLabel, Select, Text, Button, } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import { setSearchValue, getSearchData, setGetTagValues } from '../../../../redux/slices/advanceSearchSlice';
import { useDispatch } from 'react-redux';



const OpprtunityAdvanceSearch = (props) => {
    const { state, allData, advanceSearch, setAdvanceSearch, isLoding, setSearchedData, setDisplaySearchData, setSearchClear, setSearchbox } = props;

    const dispatch = useDispatch();
    const initialValues = {
        name: '',
        officePhone: '',
        fax: '',
        emailAddress: '',
    }
    const validationSchema = yup.object({
        name: yup.string(),
        officePhone: yup.string(),
        fax: yup.string(),
        emailAddress: yup.string()
    });
    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: validationSchema,
        onSubmit: (values, { resetForm }) => {
            dispatch(setSearchValue(values))
            dispatch(getSearchData({ values: values, allData: allData, type: 'Account' }))
            // const searchResult = allData?.filter(
            //     (item) =>
            //         (!values?.senderName || (item?.senderName && item?.senderName.toLowerCase().includes(values?.senderName?.toLowerCase()))) &&
            //         (!values?.realetedTo || (values.realetedTo === "contact" ? item.createBy : item.createByLead)) &&
            //         (!values?.createByName || (item?.createByName && item?.createByName.toLowerCase().includes(values?.createByName?.toLowerCase())))
            // )
            // let getValue = [values.senderName, values?.realetedTo, values?.createByName].filter(value => value);
            const getValue = [
                {
                    name: ["name"],
                    value: values.name
                },
                {
                    name: ["officePhone"],
                    value: values.officePhone
                },
                {
                    name: ["fax"],
                    value: values.fax
                },
                {
                    name: ["emailAddress"],
                    value: values.emailAddress
                },
            ]
            dispatch(setGetTagValues(getValue.filter(item => item.value)))
            setDisplaySearchData(true)
            setAdvanceSearch(false)
            resetForm();
            setSearchbox('');
        }
    })

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm, dirty } = formik;

    return (
        <>
            <Modal onClose={() => { setAdvanceSearch(false); resetForm() }} isOpen={advanceSearch} isCentered>
                <ModalOverlay />
                <ModalContent>
                    <ModalHeader>Advance Search</ModalHeader>
                    <ModalCloseButton onClick={() => { setAdvanceSearch(false); resetForm() }} />
                    <ModalBody>
                        <Grid templateColumns="repeat(12, 1fr)" mb={3} gap={2}>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Account Name
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.name}
                                    name="name"
                                    placeholder='Enter Account Name'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.name && touched.name && errors.name}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Office Phone
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.officePhone}
                                    name="officePhone"
                                    type="number"
                                    placeholder='Enter Office Phone'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.officePhone && touched.officePhone && errors.officePhone}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Fax
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.fax}
                                    name="fax"
                                    placeholder='Enter Fax'
                                    type="number"
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.fax && touched.fax && errors.fax}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Email Address
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.emailAddress}
                                    name="emailAddress"
                                    placeholder='Enter Email Address'
                                    type="email"
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.emailAddress && touched.emailAddress && errors.emailAddress}</Text>
                            </GridItem>


                        </Grid>
                    </ModalBody>
                    <ModalFooter>
                        <Button size="sm" variant="brand" mr={2} onClick={handleSubmit} disabled={isLoding || !dirty ? true : false} >{isLoding ? <Spinner /> : 'Search'}</Button>
                        <Button size="sm" variant="outline" colorScheme="red" onClick={() => resetForm()}>Clear</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        </>
    )
}

export default OpprtunityAdvanceSearch

================
File: Client/src/views/admin/account/components/AccountImport.js
================
import React, { useState, useEffect } from 'react'
import { useLocation, useNavigate } from 'react-router-dom';
import Papa from 'papaparse';
import {
    Flex,
    useColorModeValue,
    Select,
    Button,
    Grid,
    GridItem,
    Text
} from "@chakra-ui/react";
import { useFormik } from "formik";
import { postApi } from 'services/api';
import { toast } from 'react-toastify';
import moment from 'moment';
import ExcelJS from 'exceljs';
import Card from 'components/card/Card';

function AccountImport() {

    const location = useLocation();
    const { fileData, customFields } = location.state || {};
    const [importedFileFields, setImportedFileFields] = useState([]);
    const [importedFileData, setImportedFileData] = useState([]);
    const [isLoding, setIsLoding] = useState(false);
    const navigate = useNavigate();
    const userId = JSON.parse(localStorage.getItem('user'))._id;
    const [filterContact, setFilterContact] = useState([]);

    const columns = [
        { Header: 'Fields In Crm', accessor: 'crmFields' },
        { Header: 'Fields In File', accessor: 'fileFields' },
    ];


    const initialFieldValues = Object.fromEntries(
        (customFields || []).map(field => [field?.name, ''])
    );
    const initialValues = {
        ...initialFieldValues
    };

    const fieldsInCrm = [
        ...customFields?.map((field) => ({ Header: field?.label, accessor: field?.name, type: field?.type, formikType: field?.validations?.find(obj => obj.hasOwnProperty('formikType')) }))
    ];

    const formik = useFormik({
        initialValues: initialValues,
        onSubmit: (values, { resetForm }) => {

            const opportunityData = importedFileData?.map((item, ind) => {
                const opportunity = {
                    createdDate: new Date(),
                    deleted: item[values.deleted || "deleted"] || false,
                    createBy: JSON.parse(localStorage.getItem('user'))._id,
                    modifiedBy: JSON.parse(localStorage.getItem('user'))._id,
                };

                fieldsInCrm?.forEach(field => {
                    const selectedField = values[field?.accessor];
                    const fieldValue = item[selectedField] || '';

                    if (field?.type?.toLowerCase() === "date") {
                        opportunity[field?.accessor] = moment(fieldValue).isValid() ? fieldValue : '';
                    } else if (field?.type?.toLowerCase() === "number" && ['positive', 'negative'].includes(field?.formikType?.toLowerCase())) {
                        opportunity[field?.accessor] = parseFloat(fieldValue) || '';
                    } else if (field?.type?.toLowerCase() === "number") {
                        opportunity[field?.accessor] = parseInt(fieldValue, 10) || '';
                    } else {
                        opportunity[field?.accessor] = fieldValue;
                    }
                });

                return opportunity;
            });

            AddData(opportunityData);
        }
    });

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik

    const AddData = async (opportunity) => {
        try {
            setIsLoding(true);
            let response = await postApi('api/account/addMany', opportunity)
            if (response.status === 200) {
                toast.success(`Accounts imported successfully`)
                resetForm();
                navigate('/account');
            }
        } catch (e) {
            console.error(e);
            toast.error(`Accounts import failed`)
            resetForm();
            navigate('/account');
        }
        finally {
            setIsLoding(false)
        }
    };

    const parseFileData = async (file) => {
        const reader = new FileReader();
        const extension = file.name.split('.').pop().toLowerCase();

        reader.onload = async ({ target }) => {

            if (extension === 'csv') {
                const csv = Papa.parse(target.result, {
                    header: true,
                });
                const parsedData = csv?.data;

                if (parsedData && parsedData.length > 0) {
                    setImportedFileData(parsedData);
                    const fileHeadingFields = Object.keys(parsedData[0]);
                    setImportedFileFields(fileHeadingFields);
                } else {
                    toast.error("Empty or invalid CSV file");
                    navigate("/account");
                }

            } else if (extension === 'xlsx') {
                const data = new Uint8Array(target.result);
                const workbook = new ExcelJS.Workbook();

                await workbook.xlsx.load(data);

                const worksheet = workbook.getWorksheet(1);
                const jsonData = [];

                // Iterate over rows and cells
                worksheet.eachRow({ includeEmpty: true }, (row, rowNumber) => {
                    const rowData = {};
                    row.eachCell({ includeEmpty: true }, (cell, colNumber) => {
                        rowData[worksheet.getCell(1, colNumber).value] = cell.value;
                    });
                    jsonData.push(rowData);
                });
                jsonData?.splice(0, 1);
                setImportedFileData(jsonData);

                if (jsonData && jsonData.length > 0) {
                    const fileHeadingFields = Object.keys(jsonData[0]);
                    setImportedFileFields(fileHeadingFields);
                } else {
                    toast.error("Empty or invalid XLSX file");
                    navigate("/account");
                }
            }
        };

        if (extension === 'csv') {
            reader.readAsText(file);
        } else if (extension === 'xlsx') {
            const blob = new Blob([file]);
            reader.readAsArrayBuffer(blob);
        }
    };

    useEffect(() => {
        if (fileData && fileData.length > 0) {
            const firstFile = fileData[0];
            parseFileData(firstFile);
        }
    }, [fileData]);


    useEffect(() => {
        const filterContactData = importedFileFields?.filter(field => {
            const result = fieldsInCrm?.find(data => field === data?.accessor || field === data?.Header);
            if (result) {
                setFieldValue(result?.accessor, field);
                return true;
            }
            return false;
        });
        setFilterContact(filterContactData);
    }, [importedFileFields]);

    return (
        <>
            <Card overflowY={"auto"} className="importTable">
                <Text color={"secondaryGray.900"}
                    fontSize="22px"
                    fontWeight="700"
                    mb='20px'
                >Import Opprtunities</Text>
                <Grid templateColumns="repeat(12, 1fr)" mb={3} pb={2} gap={1} borderBottom={'1px solid #e2e8f0'}>
                    {
                        columns.map((column, index) => (
                            <GridItem key={index} colSpan={{ base: 6 }} fontWeight={'600'} fontSize={{ sm: "14px", lg: "14px" }} color="secondaryGray.900" style={{ textTransform: "uppercase" }}>
                                {column.Header}
                            </GridItem>
                        ))
                    }
                </Grid>
                <Grid templateColumns="repeat(12, 1fr)" mb={3} gap={1} overflowY={'auto'}>
                    {
                        fieldsInCrm?.map((item, index) => (
                            <>
                                <GridItem colSpan={{ base: 6 }} key={item.id} mt='10px'>
                                    {item.Header}
                                </GridItem>
                                <GridItem colSpan={{ base: 4 }}>
                                    <Select
                                        variant="flushed"
                                        fontWeight='500'
                                        isSearchable
                                        value={values[item.accessor]}
                                        name={item.accessor}
                                        onChange={handleChange}
                                    >
                                        <option value=''> {filterContact ? filterContact.find((data) => (item.Header === data || item.accessor === data) && data) ? filterContact.find((data) => (item.Header === data || item.accessor === data) && data) : 'Select Field In File' : 'Select Field In File'}</option>
                                        {
                                            importedFileFields?.map(field => (
                                                <option value={field} key={field}>{field}</option>
                                            ))
                                        }
                                    </Select>
                                </GridItem>
                            </>
                        ))
                    }
                </Grid>

                <Flex Flex justifyContent={'end'} mt='5' >
                    <Button size="sm" onClick={() => handleSubmit()} variant="brand">Save</Button>
                </Flex>
            </Card>
        </>
    )
}

export default AccountImport

================
File: Client/src/views/admin/account/components/ImportModel.js
================
import { Button, Grid, GridItem, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text } from '@chakra-ui/react'
import Spinner from 'components/spinner/Spinner'
import { useFormik } from 'formik'
import { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import CommonFileUpload from 'components/commonFileUpload'

const ImportModal = (props) => {
    const { onClose, isOpen, text, customFields } = props
    const [isLoding, setIsLoding] = useState(false)
    const navigate = useNavigate();

    const initialValues = {
        accounts: ''
    }

    const formik = useFormik({
        initialValues: initialValues,
        onSubmit: (values, { resetForm }) => {
            AddData()
            resetForm();
        },
    });
    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik

    const AddData = async () => {
        try {
            setIsLoding(true)
            resetForm()

            if (values.accounts) {
                onClose();
                navigate('/accountImport', { state: { fileData: values.accounts, customFields: customFields } });
            }

        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };

    return (
        <Modal onClose={onClose} isOpen={isOpen} isCentered>
            <ModalOverlay />
            <ModalContent>
                <ModalHeader>Import Account</ModalHeader>
                <ModalCloseButton />
                <ModalBody>
                    <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                        <GridItem colSpan={{ base: 12 }}>
                            <CommonFileUpload count={values.accounts.length} onFileSelect={(file) => setFieldValue('accounts', file)} text={text} />
                            <Text mb='10px' color={'red'}> {errors.accounts && touched.accounts && <>Please Select {text}</>}</Text>
                        </GridItem>
                    </Grid>
                </ModalBody>
                <ModalFooter>
                    <Button size="sm" variant='brand' onClick={handleSubmit} disabled={isLoding ? true : false} >{isLoding ? <Spinner /> : 'Save'}</Button>
                    <Button sx={{
                        marginLeft: 2,
                        textTransform: "capitalize",
                    }} variant="outline"
                        colorScheme="red" size="sm" onClick={() => {
                            onClose()
                            formik.resetForm()
                        }}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    )
}

export default ImportModal

================
File: Client/src/views/admin/account/AddEdit.js
================
import { CloseIcon } from '@chakra-ui/icons';
import { Button, Checkbox, Drawer, DrawerBody, DrawerContent, DrawerFooter, DrawerHeader, DrawerOverlay, Flex, FormLabel, Grid, GridItem, IconButton, Input, Select, Text } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import dayjs from 'dayjs';
import { useFormik } from 'formik';
import { useState, useEffect } from 'react';
import { LiaMousePointerSolid } from 'react-icons/lia';
import { postApi, getApi, putApi } from 'services/api';
import { generateValidationSchema } from 'utils';
import CustomForm from 'utils/customForm';
import * as yup from 'yup'
import { accountSchema } from '../../../schema/accountSchema';
import UserModel from 'components/commonTableModel/UserModel';
import AccountModel from 'components/commonTableModel/AccountModel';
import { toast } from 'react-toastify';
import { useDispatch, useSelector } from 'react-redux';
import { fetchAccountData } from '../../../redux/slices/accountSlice';

const AddEdit = (props) => {
    const { isOpen, size, onClose, type, setAction, selectedId } = props;
    const [isLoding, setIsLoding] = useState(false)
    const [userModel, setUserModel] = useState(false)
    const [accountModel, setAccountModel] = useState(false)
    const [userData, setUserData] = useState([]);
    const [accountDetails, setAccountDetails] = useState({});
    const dispatch = useDispatch();
    const user = JSON.parse(localStorage.getItem("user"))

    const accountList = useSelector((state) => state?.accountData?.data?.data)
    // const { isLoding } = useSelector((state) => state?.accountData)

    const initialValues = {
        name: type === "edit" ? accountDetails?.name : "",
        officePhone: type === "edit" ? accountDetails?.officePhone : "",
        alternatePhone: type === "edit" ? accountDetails?.alternatePhone : "",
        assignUser: type === "edit" ? accountDetails?.assignUser : null,
        website: type === "edit" ? accountDetails?.website : "",
        fax: type === "edit" ? accountDetails?.fax : "",
        ownership: type === "edit" ? accountDetails?.ownership : "",
        emailAddress: type === "edit" ? accountDetails?.emailAddress : "",
        nonPrimaryEmail: type === "edit" ? accountDetails?.nonPrimaryEmail : "",
        billingStreet: type === "edit" ? accountDetails?.billingStreet : "",
        billingStreet2: type === "edit" ? accountDetails?.billingStreet2 : "",
        billingStreet3: type === "edit" ? accountDetails?.billingStreet3 : "",
        billingStreet4: type === "edit" ? accountDetails?.billingStreet4 : "",
        billingPostalcode: type === "edit" ? accountDetails?.billingPostalcode : "",
        billingCity: type === "edit" ? accountDetails?.billingCity : "",
        billingState: type === "edit" ? accountDetails?.billingState : "",
        billingCountry: type === "edit" ? accountDetails?.billingCountry : "",
        shippingStreet: type === "edit" ? accountDetails?.shippingStreet : "",
        shippingStreet2: type === "edit" ? accountDetails?.shippingStreet2 : "",
        shippingStreet3: type === "edit" ? accountDetails?.shippingStreet3 : "",
        shippingStreet4: type === "edit" ? accountDetails?.shippingStreet4 : "",
        shippingPostalcode: type === "edit" ? accountDetails?.shippingPostalcode : "",
        shippingCity: type === "edit" ? accountDetails?.shippingCity : "",
        shippingState: type === "edit" ? accountDetails?.shippingState : "",
        shippingCountry: type === "edit" ? accountDetails?.shippingCountry : "",
        description: type === "edit" ? accountDetails?.description : "",
        type: type === "edit" ? accountDetails?.type : "",
        industry: type === "edit" ? accountDetails?.industry : "",
        annualRevenue: type === "edit" ? accountDetails?.annualRevenue : "",
        rating: type === "edit" ? accountDetails?.rating : "",
        SICCode: type === "edit" ? accountDetails?.SICCode : "",
        emailOptOut: type === "edit" ? accountDetails?.emailOptOut : false,
        invalidEmail: type === "edit" ? accountDetails?.invalidEmail : false,
        memberOf: type === "edit" ? accountDetails?.memberOf : null,
        createBy: JSON.parse(localStorage.getItem('user'))._id,
        modifiedBy: JSON.parse(localStorage.getItem('user'))._id
    };


    const addData = async (values) => {
        try {
            setIsLoding(true)
            let response = await postApi('api/account/add', values)
            if (response.status === 200) {
                onClose();
                toast.success(`Account Save successfully`)
                formik.resetForm();
                setAction((pre) => !pre)
            }
        } catch (e) {
            console.log(e);
            toast.error(`server error`)
        }
        finally {
            setIsLoding(false)
        }
    };
    const editData = async (values) => {
        try {
            setIsLoding(true)
            let response = await putApi(`api/account/edit/${selectedId}`, values)
            if (response.status === 200) {
                onClose();
                toast.success(`Account Update successfully`)
                formik.resetForm();
                // setAction((pre) => !pre)
            }
        } catch (e) {
            console.log(e);
            toast.error(`server error`)
        }
        finally {
            setIsLoding(false)
        }
    };

    const handleCancel = () => {
        formik.resetForm();
        onClose()
    }

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: accountSchema,
        enableReinitialize: true,
        onSubmit: (values, { resetForm }) => {
            if (type === "add") {
                addData(values)
            } else {
                const payload = { ...values, modifiedDate: new Date() }
                editData(payload)
            }
        },
    });

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, } = formik

    const fetchData = async () => {
        setIsLoding(true)
        let result = await getApi('api/user/');
        setUserData(result?.data?.user);
        setIsLoding(false)
    }


    const fetchAccountDetails = async () => {
        if (type === "edit") {
            try {
                setIsLoding(true)
                let result = await getApi('api/account/view/', selectedId)
                if (result?.status === 200) {
                    setAccountDetails(result?.data)
                }

            }
            catch (e) {
                console.log(e);
            }
            finally {
                setIsLoding(false)
            }
        }
    }


    useEffect(() => {
        if (type === "edit") fetchAccountDetails();
        if (user.role === 'superAdmin') fetchData();
    }, [type, selectedId])

    // useEffect(() => {
    //     if (accountList?.length === 0) dispatch(fetchAccountData())
    // }, [])

    return (
        <div>
            {userModel && <UserModel onClose={() => setUserModel(false)} isOpen={userModel} fieldName={"assignUser"} setFieldValue={setFieldValue} data={userData} isLoding={isLoding} setIsLoding={setIsLoding} />}
            {accountModel && <AccountModel onClose={() => setAccountModel(false)} isOpen={accountModel} fieldName={"memberOf"} setFieldValue={setFieldValue} data={accountList} isLoding={isLoding} setIsLoding={setIsLoding} />}

            <Drawer isOpen={isOpen} size={size}>
                <DrawerOverlay />
                <DrawerContent>
                    <DrawerHeader alignItems={"center"} justifyContent='space-between' display='flex'  >
                        {type === "add" ? "Add" : "Edit"} Account
                        <IconButton onClick={() => handleCancel()} icon={<CloseIcon />} />
                    </DrawerHeader>
                    <DrawerBody>
                        <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Account Name<Text color={"red"}>*</Text>
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.name}
                                    name="name"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='Account Name'
                                    fontWeight='500'
                                    borderColor={errors.name && touched.name ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.name && touched.name && errors.name}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Office Phone
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.officePhone}
                                    name="officePhone"
                                    type="number"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='Office Phone'
                                    fontWeight='500'
                                    borderColor={errors.officePhone && touched.officePhone ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.officePhone && touched.officePhone && errors.officePhone}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Alternate Phone
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.alternatePhone}
                                    name="alternatePhone"
                                    type="number"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='Alternate Phone'
                                    fontWeight='500'
                                    borderColor={errors.alternatePhone && touched.alternatePhone ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.alternatePhone && touched.alternatePhone && errors.alternatePhone}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Website
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.website}
                                    name="website"
                                    type="url"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='Website URL'
                                    fontWeight='500'
                                    borderColor={errors.website && touched.website ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.website && touched.website && errors.website}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Fax
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.fax}
                                    name="fax"
                                    type="number"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='Fax'
                                    fontWeight='500'
                                    borderColor={errors.fax && touched.fax ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.fax && touched.fax && errors.fax}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Ownership
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.ownership}
                                    name="ownership"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='ownership'
                                    fontWeight='500'
                                    borderColor={errors.ownership && touched.ownership ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.ownership && touched.ownership && errors.ownership}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Email Address
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.emailAddress}
                                    name="emailAddress"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='Email Address'
                                    fontWeight='500'
                                    borderColor={errors.emailAddress && touched.emailAddress ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.emailAddress && touched.emailAddress && errors.emailAddress}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Non Primary Email
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.nonPrimaryEmail}
                                    name="nonPrimaryEmail"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='Non Primary Email'
                                    fontWeight='500'
                                    borderColor={errors.nonPrimaryEmail && touched.nonPrimaryEmail ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.nonPrimaryEmail && touched.nonPrimaryEmail && errors.nonPrimaryEmail}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Shipping Street
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.shippingStreet}
                                    name="shippingStreet"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='Shipping Street'
                                    fontWeight='500'
                                    borderColor={errors.shippingStreet && touched.shippingStreet ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.shippingStreet && touched.shippingStreet && errors.shippingStreet}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Billing Street
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.billingStreet}
                                    name="billingStreet"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='Billing Street'
                                    fontWeight='500'
                                    borderColor={errors.billingStreet && touched.billingStreet ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.billingStreet && touched.billingStreet && errors.billingStreet}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Shipping Street2
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.shippingStreet2}
                                    name="shippingStreet2"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='Shipping Street2'
                                    fontWeight='500'
                                    borderColor={errors.shippingStreet2 && touched.shippingStreet2 ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.shippingStreet2 && touched.shippingStreet2 && errors.shippingStreet2}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Billing Street2
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.billingStreet2}
                                    name="billingStreet2"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='Billing Street2'
                                    fontWeight='500'
                                    borderColor={errors.billingStreet2 && touched.billingStreet2 ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.billingStreet2 && touched.billingStreet2 && errors.billingStreet2}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Shipping Street3
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.shippingStreet3}
                                    name="shippingStreet3"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='Shipping Street3'
                                    fontWeight='500'
                                    borderColor={errors.shippingStreet3 && touched.shippingStreet3 ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.shippingStreet3 && touched.shippingStreet3 && errors.shippingStreet3}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Billing Street3
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.billingStreet3}
                                    name="billingStreet3"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='Billing Street3'
                                    fontWeight='500'
                                    borderColor={errors.billingStreet3 && touched.billingStreet3 ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.billingStreet3 && touched.billingStreet3 && errors.billingStreet3}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Shipping Street4
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.shippingStreet4}
                                    name="shippingStreet4"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='Shipping Street4'
                                    fontWeight='500'
                                    borderColor={errors.shippingStreet4 && touched.shippingStreet4 ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.shippingStreet4 && touched.shippingStreet4 && errors.shippingStreet4}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Billing Street4
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.billingStreet4}
                                    name="billingStreet4"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='Billing Street4'
                                    fontWeight='500'
                                    borderColor={errors.billingStreet4 && touched.billingStreet4 ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.billingStreet4 && touched.billingStreet4 && errors.billingStreet4}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Shipping Postal Code
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.shippingPostalcode}
                                    name="shippingPostalcode"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='Shipping Postal Code'
                                    fontWeight='500'
                                    borderColor={errors.shippingPostalcode && touched.shippingPostalcode ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.shippingPostalcode && touched.shippingPostalcode && errors.shippingPostalcode}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Billing Postal Code
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.billingPostalcode}
                                    name="billingPostalcode"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='Billing Postal Code'
                                    fontWeight='500'
                                    borderColor={errors.billingPostalcode && touched.billingPostalcode ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.billingPostalcode && touched.billingPostalcode && errors.billingPostalcode}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Shipping City
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.shippingCity}
                                    name="shippingCity"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='Shipping City'
                                    fontWeight='500'
                                    borderColor={errors.shippingCity && touched.shippingCity ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.shippingCity && touched.shippingCity && errors.shippingCity}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Billing City
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.billingCity}
                                    name="billingCity"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='Billing City'
                                    fontWeight='500'
                                    borderColor={errors.billingCity && touched.billingCity ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.billingCity && touched.billingCity && errors.billingCity}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Shipping State
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.shippingState}
                                    name="shippingState"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='Shipping State'
                                    fontWeight='500'
                                    borderColor={errors.shippingState && touched.shippingState ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.shippingState && touched.shippingState && errors.shippingState}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Billing State
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.billingState}
                                    name="billingState"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='Billing State'
                                    fontWeight='500'
                                    borderColor={errors.billingState && touched.billingState ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.billingState && touched.billingState && errors.billingState}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Shipping Country
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.shippingCountry}
                                    name="shippingCountry"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='Shipping Country'
                                    fontWeight='500'
                                    borderColor={errors.shippingCountry && touched.shippingCountry ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.shippingCountry && touched.shippingCountry && errors.shippingCountry}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Billing Country
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.billingCountry}
                                    name="billingCountry"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='Billing Country'
                                    fontWeight='500'
                                    borderColor={errors.billingCountry && touched.billingCountry ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.billingCountry && touched.billingCountry && errors.billingCountry}</Text>
                            </GridItem>


                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Type
                                </FormLabel>
                                <Select
                                    value={values.type}
                                    name="type"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    mb={errors.type && touched.type ? undefined : '10px'}
                                    fontWeight='500'
                                    placeholder={'Select Type'}
                                    borderColor={errors.type && touched.type ? "red.300" : null}
                                >
                                    <option value="Analyst">Analyst</option>
                                    <option value="Competitor">Competitor </option>
                                    <option value="Customer">Customer</option>
                                    <option value="Integrator">Integrator</option>
                                    <option value="Investor">Investor </option>
                                    <option value="Partner">Partner</option>
                                    <option value="Press">Press</option>
                                    <option value="Prospect">Prospect</option>
                                    <option value="Reseller">Reseller</option>
                                    <option value="Other">Other</option>
                                </Select>
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.type && touched.type && errors.type}</Text>
                            </GridItem>

                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Industry
                                </FormLabel>
                                <Select
                                    value={values.industry}
                                    name="industry"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    mb={errors.industry && touched.industry ? undefined : '10px'}
                                    fontWeight='500'
                                    placeholder={'Select Industry'}
                                    borderColor={errors.industry && touched.industry ? "red.300" : null}
                                >
                                    <option value="Apparel">Apparel</option>
                                    <option value="Banking">Banking </option>
                                    <option value="Biotechnology">Biotechnology</option>
                                    <option value="Chemicals">Chemicals</option>
                                    <option value="Communications">Communications </option>
                                    <option value="Construction">Construction</option>
                                    <option value="Consulting">Consulting</option>
                                    <option value="Education">Education</option>
                                    <option value="Electronics">Electronics</option>
                                    <option value="Energy">Energy</option>
                                    <option value="Engineering">Engineering</option>
                                    <option value="Entertainment">Entertainment</option>
                                    <option value="Finance">Finance</option>
                                    <option value="Government">Government</option>
                                    <option value="Healthcare">Healthcare</option>
                                    <option value="Hospitality">Hospitality</option>
                                    <option value="Insurance">Insurance</option>
                                    <option value="Machinery">Machinery</option>
                                    <option value="Manufacturing">Manufacturing</option>
                                    <option value="Media">Media</option>
                                    <option value="Not For Profit">Not For Profit</option>
                                    <option value="Recreation">Recreation</option>
                                    <option value="Retail">Retail</option>
                                    <option value="Shipping">Shipping</option>
                                    <option value="Technology">Technology</option>
                                    <option value="Telecommunications">Telecommunications</option>
                                    <option value="Transportation">Transportation</option>
                                    <option value="Utilities">Utilities</option>
                                    <option value="Other">Other</option>
                                </Select>
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.industry && touched.industry && errors.industry}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Description
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.description}
                                    name="description"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='Description'
                                    fontWeight='500'
                                    borderColor={errors.description && touched.description ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.description && touched.description && errors.description}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Annual Revenue
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.annualRevenue}
                                    name="annualRevenue"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='annualRevenue'
                                    fontWeight='500'
                                    borderColor={errors.annualRevenue && touched.annualRevenue ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.annualRevenue && touched.annualRevenue && errors.annualRevenue}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Rating
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.rating}
                                    name="rating"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='Rating'
                                    fontWeight='500'
                                    borderColor={errors.rating && touched.rating ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.rating && touched.rating && errors.rating}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    SIC Code
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.SICCode}
                                    name="SICCode"
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    placeholder='SIC Code'
                                    fontWeight='500'
                                    borderColor={errors.SICCode && touched.SICCode ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.SICCode && touched.SICCode && errors.SICCode}</Text>
                            </GridItem>
                            {
                                user.role === 'superAdmin' &&
                                <GridItem colSpan={{ base: 12, md: 6 }} >
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                        Assigned User
                                    </FormLabel>
                                    <Flex justifyContent={'space-between'}>
                                        <Select
                                            value={values.assignUser}
                                            name="assignUser"
                                            onChange={handleChange}
                                            onBlur={handleBlur}
                                            mb={errors.assignUser && touched.assignUser ? undefined : '10px'}
                                            fontWeight='500'
                                            placeholder={'Assign To'}
                                            borderColor={errors.assignUser && touched.assignUser ? "red.300" : null}
                                        >
                                            {userData?.map((item) => {
                                                return <option value={item._id} key={item._id}>{`${item?.firstName} ${item?.lastName}`}</option>
                                            })}
                                        </Select>
                                        <IconButton onClick={() => setUserModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />
                                    </Flex>
                                </GridItem>
                            }
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Member Of
                                </FormLabel>
                                <Flex justifyContent={'space-between'}>
                                    <Select
                                        value={values.memberOf}
                                        name="memberOf"
                                        onChange={handleChange}
                                        onBlur={handleBlur}
                                        mb={errors.memberOf && touched.memberOf ? undefined : '10px'}
                                        fontWeight='500'
                                        placeholder={'Member Of'}
                                        borderColor={errors.memberOf && touched.memberOf ? "red.300" : null}
                                    >
                                        {accountList?.length > 0 && accountList?.map((item) => {
                                            return <option value={item._id} key={item._id}>{`${item?.name}`}</option>
                                        })}
                                    </Select>
                                    <IconButton onClick={() => setAccountModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />
                                </Flex>
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.memberOf && touched.memberOf && errors.memberOf}</Text>
                            </GridItem>

                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <Checkbox isChecked={values?.emailOptOut} onChange={handleChange} name='emailOptOut' lable="Email Opt Out">Email Opt Out</Checkbox>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <Checkbox isChecked={values?.invalidEmail} onChange={handleChange} name='invalidEmail' lable="Invalid Email">Invalid Email</Checkbox>
                            </GridItem>

                        </Grid>
                    </DrawerBody>
                    <DrawerFooter>
                        <Button sx={{ textTransform: "capitalize" }} size="sm" disabled={isLoding ? true : false} variant="brand" type="submit" onClick={handleSubmit}                        >
                            {isLoding ? <Spinner /> : 'Save'}
                        </Button>
                        <Button
                            variant="outline"
                            colorScheme='red' size="sm"
                            sx={{
                                marginLeft: 2,
                                textTransform: "capitalize",
                            }}
                            onClick={handleCancel}
                        >
                            Close
                        </Button>
                    </DrawerFooter>
                </DrawerContent>
            </Drawer>
        </div>
    )
}

export default AddEdit

================
File: Client/src/views/admin/account/index.js
================
import { useEffect, useState } from 'react';
import { Link, useNavigate } from "react-router-dom";
import { DeleteIcon, EditIcon, ViewIcon } from '@chakra-ui/icons';
import { Button, Menu, MenuButton, MenuItem, MenuList, Text, useDisclosure } from '@chakra-ui/react';
import { getApi, deleteManyApi } from 'services/api';
import { HasAccess } from '../../../redux/accessUtils';
import CommonCheckTable from '../../../components/reactTable/checktable';
import { SearchIcon } from "@chakra-ui/icons";
import { CiMenuKebab } from 'react-icons/ci';
import moment from 'moment';
import { MdLeaderboard } from 'react-icons/md';
import { IoIosContact } from 'react-icons/io';
import AddEdit from './AddEdit';
import { useDispatch } from 'react-redux';
import { fetchEmailsData } from '../../../redux/slices/emailsSlice';
import { toast } from 'react-toastify';
import AccountAdvanceSearch from './components/AccountAdvanceSearch';
import { fetchAccountData } from '../../../redux/slices/accountSlice';
import CommonDeleteModel from '../../../components/commonDeleteModel'
import ImportModal from './components/ImportModel';

const Index = (props) => {
    const [action, setAction] = useState(false);
    const { isOpen, onOpen, onClose } = useDisclosure();
    const [selectedValues, setSelectedValues] = useState([]);
    const [advanceSearch, setAdvanceSearch] = useState(false);
    const [getTagValuesOutSide, setGetTagValuesOutside] = useState([]);
    const [searchboxOutside, setSearchboxOutside] = useState('');
    const user = JSON.parse(localStorage.getItem("user"));
    const navigate = useNavigate();
    const dispatch = useDispatch();
    const [isLoding, setIsLoding] = useState(false);
    const [data, setData] = useState([]);
    const [displaySearchData, setDisplaySearchData] = useState(false);
    const [searchedData, setSearchedData] = useState([]);
    const [selectedId, setSelectedId] = useState();
    const [deleteModel, setDelete] = useState(false);
    const [edit, setEdit] = useState(false);
    const [type, setType] = useState("")
    const [isImport, setIsImport] = useState(false);

    const [permission] = HasAccess(["Account"]);

    const actionHeader = {
        Header: "Action",
        accessor: "action",
        isSortable: false,
        center: true,
        cell: ({ row, i }) => (
            <Text fontSize="md" fontWeight="900" textAlign={"center"}>
                <Menu isLazy>
                    <MenuButton>
                        <CiMenuKebab />
                    </MenuButton>
                    <MenuList
                        minW={"fit-content"}
                        transform={"translate(1520px, 173px);"}
                    >
                        {permission?.update && (
                            <MenuItem
                                py={2.5}
                                icon={<EditIcon fontSize={15} mb={1} />}
                                onClick={() => {
                                    setType("edit");
                                    onOpen();
                                    setSelectedId(row?.values?._id);
                                }}
                            >
                                Edit
                            </MenuItem>
                        )}
                        {permission?.view && (
                            <MenuItem
                                py={2.5}
                                color={"green"}
                                icon={<ViewIcon mb={1} fontSize={15} />}
                                onClick={() => {
                                    navigate(`/accountView/${row?.values?._id}`);
                                }}
                            >
                                View
                            </MenuItem>
                        )}
                        {permission?.delete && (
                            <MenuItem
                                py={2.5}
                                color={"red"}
                                icon={<DeleteIcon fontSize={15} mb={1} />}
                                onClick={() => {
                                    setDelete(true);
                                    setSelectedValues([row?.values?._id]);
                                }}
                            >
                                Delete
                            </MenuItem>
                        )}
                    </MenuList>
                </Menu>
            </Text>
        ),
    };
    const tableColumns = [
        { Header: "#", accessor: "_id", isSortable: false, width: 10 },
        {
            Header: 'Account Name', accessor: 'name', cell: (cell) => (
                <div className="selectOpt">
                    <Text
                        onClick={() => handleViewOpen(cell?.row?.original._id)}
                        me="10px"
                        sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' }, cursor: 'pointer' }}
                        color='brand.600'
                        fontSize="sm"
                        fontWeight="700"
                    >
                        {cell?.value}
                    </Text>
                </div>
            )
        },
        {
            Header: 'Office Phone', accessor: 'officePhone',
        },
        {
            Header: 'Fax', accessor: 'fax',
        },
        {
            Header: 'Email Address', accessor: 'emailAddress',
        },
        ...(permission?.update || permission?.view || permission?.delete ? [actionHeader] : [])

    ];
    const handleViewOpen = (id) => {
        navigate(`/accountView/${id}`)
    }
    const customFields = [
        {
            "name": "name",
            "label": "Account Name",
            "type": "text",
            "fixed": false,
            "isDefault": false,
            "delete": false,
            "belongsTo": null,
            "backendType": "Mixed",
            "isTableField": false,
            "isView": false,
            "options": [
                {
                    "name": "",
                    "value": "",
                    "_id": "6694b8112cf3cbec6b5286c0"
                },
                {
                    "name": "",
                    "value": "",
                    "_id": "6694b8112cf3cbec6b5286c1"
                }
            ],
            "validation": [
                {
                    "require": true,
                    "message": "Account Name is required",
                    "_id": "6694b8112cf3cbec6b5286c2"
                },
                {
                    "min": false,
                    "value": "",
                    "message": "",
                    "_id": "6694b8112cf3cbec6b5286c3"
                },
                {
                    "max": false,
                    "value": "",
                    "message": "",
                    "_id": "6694b8112cf3cbec6b5286c4"
                },
                {
                    "value": "",
                    "message": "",
                    "match": false,
                    "_id": "6694b8112cf3cbec6b5286c5"
                },
                {
                    "message": "",
                    "formikType": "",
                    "_id": "6694b8112cf3cbec6b5286c6"
                }
            ],
            "_id": "6694b8112cf3cbec6b5286bf"
        },
        {
            "name": "officePhone",
            "label": "Office Phone",
            "type": "number",
            "fixed": false,
            "isDefault": false,
            "delete": false,
            "belongsTo": null,
            "backendType": "Mixed",
            "isTableField": false,
            "isView": false,
            "options": [
                {
                    "name": "",
                    "value": "",
                    "_id": "6694b8662cf3cbec6b5289fd"
                },
                {
                    "name": "",
                    "value": "",
                    "_id": "6694b8662cf3cbec6b5289fe"
                }
            ],
            "validation": [
                {
                    "require": false,
                    "message": "",
                    "_id": "6694b8662cf3cbec6b5289ff"
                },
                {
                    "min": false,
                    "value": "",
                    "message": "",
                    "_id": "6694b8662cf3cbec6b528a00"
                },
                {
                    "max": false,
                    "value": "",
                    "message": "",
                    "_id": "6694b8662cf3cbec6b528a01"
                },
                {
                    "value": "",
                    "message": "",
                    "match": false,
                    "_id": "6694b8662cf3cbec6b528a02"
                },
                {
                    "message": "",
                    "formikType": "",
                    "_id": "6694b8662cf3cbec6b528a03"
                }
            ],
            "_id": "6694b8662cf3cbec6b5289fc"
        },
        {
            "name": "fax",
            "label": "Fax",
            "type": "number",
            "fixed": false,
            "isDefault": false,
            "delete": false,
            "belongsTo": null,
            "backendType": "Mixed",
            "isTableField": false,
            "isView": false,
            "options": [
                {
                    "name": "",
                    "value": "",
                    "_id": "6694b8742cf3cbec6b528d52"
                },
                {
                    "name": "",
                    "value": "",
                    "_id": "6694b8742cf3cbec6b528d53"
                }
            ],
            "validation": [
                {
                    "require": false,
                    "message": "",
                    "_id": "6694b8742cf3cbec6b528d54"
                },
                {
                    "min": false,
                    "value": "",
                    "message": "",
                    "_id": "6694b8742cf3cbec6b528d55"
                },
                {
                    "max": false,
                    "value": "",
                    "message": "",
                    "_id": "6694b8742cf3cbec6b528d56"
                },
                {
                    "value": "",
                    "message": "",
                    "match": false,
                    "_id": "6694b8742cf3cbec6b528d57"
                },
                {
                    "message": "",
                    "formikType": "",
                    "_id": "6694b8742cf3cbec6b528d58"
                }
            ],
            "_id": "6694b8742cf3cbec6b528d51"
        },
        {
            "name": "emailAddress",
            "label": "Email Address",
            "type": "text",
            "fixed": false,
            "isDefault": false,
            "delete": false,
            "belongsTo": null,
            "backendType": "Mixed",
            "isTableField": false,
            "isView": false,
            "options": [
                {
                    "name": "",
                    "value": "",
                    "_id": "6694b8942cf3cbec6b5290bf"
                },
                {
                    "name": "",
                    "value": "",
                    "_id": "6694b8942cf3cbec6b5290c0"
                }
            ],
            "validation": [
                {
                    "require": false,
                    "message": "",
                    "_id": "6694b8942cf3cbec6b5290c1"
                },
                {
                    "min": false,
                    "value": "",
                    "message": "",
                    "_id": "6694b8942cf3cbec6b5290c2"
                },
                {
                    "max": false,
                    "value": "",
                    "message": "",
                    "_id": "6694b8942cf3cbec6b5290c3"
                },
                {
                    "value": "",
                    "message": "",
                    "match": false,
                    "_id": "6694b8942cf3cbec6b5290c4"
                },
                {
                    "message": "",
                    "formikType": "email",
                    "_id": "6694b8942cf3cbec6b5290c5"
                }
            ],
            "_id": "6694b8942cf3cbec6b5290be"
        }
    ]

    const handleOpenAdd = () => {
        onOpen();
        setType("add")
    }

    const handleDelete = async (ids) => {
        try {
            setIsLoding(true);
            let response = await deleteManyApi("api/account/deleteMany", ids);
            if (response.status === 200) {
                toast.success(`Account Delete successfully`)
                setSelectedValues([]);
                setDelete(false);
                setAction((pre) => !pre);
            }
        } catch (error) {
            console.log(error);
            toast.error(`server error`)

        } finally {
            setIsLoding(false);
        }
    };

    const fetchData = async () => {
        setIsLoding(true)
        const result = await dispatch(fetchAccountData())

        if (result.payload.status === 200) {
            setData(result?.payload?.data);
        } else {
            toast.error("Failed to fetch data", "error");
        }
        setIsLoding(false)
    }

    // const [columns, setColumns] = useState([...tableColumns]);
    // const [selectedColumns, setSelectedColumns] = useState([...tableColumns]);
    // const dataColumn = tableColumns?.filter(item => selectedColumns?.find(colum => colum?.Header === item.Header))


    useEffect(() => {
        fetchData();
    }, [action])

    return (
        <div>
            <CommonCheckTable
                title={"Account"}
                isLoding={isLoding}
                columnData={tableColumns ?? []}
                // dataColumn={dataColumn ?? []}
                allData={data ?? []}
                tableData={data}
                searchDisplay={displaySearchData}
                setSearchDisplay={setDisplaySearchData}
                searchedDataOut={searchedData}
                setSearchedDataOut={setSearchedData}
                tableCustomFields={[]}
                access={permission}
                // action={action}
                // setAction={setAction}
                // selectedColumns={selectedColumns}
                // setSelectedColumns={setSelectedColumns}
                // isOpen={isOpen}
                // onClose={onclose}
                setIsImport={setIsImport}
                onOpen={handleOpenAdd}
                selectedValues={selectedValues}
                setSelectedValues={setSelectedValues}
                setDelete={setDelete}
                deleteMany={false}
                AdvanceSearch={
                    <Button variant="outline" colorScheme='brand' leftIcon={<SearchIcon />} mt={{ sm: "5px", md: "0" }} size="sm" onClick={() => setAdvanceSearch(true)}>Advance Search</Button>
                }
                getTagValuesOutSide={getTagValuesOutSide}
                searchboxOutside={searchboxOutside}
                setGetTagValuesOutside={setGetTagValuesOutside}
                setSearchboxOutside={setSearchboxOutside}
                handleSearchType="AccountSearch"
            />

            <AccountAdvanceSearch
                advanceSearch={advanceSearch}
                setAdvanceSearch={setAdvanceSearch}
                setSearchedData={setSearchedData}
                setDisplaySearchData={setDisplaySearchData}
                allData={data ?? []}
                setAction={setAction}
                setGetTagValues={setGetTagValuesOutside}
                setSearchbox={setSearchboxOutside}
            />

            <AddEdit isOpen={isOpen} size={"lg"} onClose={onClose} setAction={setAction} type={type} selectedId={selectedId} />
            <CommonDeleteModel
                isOpen={deleteModel}
                onClose={() => setDelete(false)}
                type="Account"
                handleDeleteData={handleDelete}
                ids={selectedValues}
            />

            <ImportModal
                text="Account file"
                isOpen={isImport}
                onClose={setIsImport}
                customFields={customFields}
            />
        </div>
    )
}

export default Index

================
File: Client/src/views/admin/account/View.js
================
import { Button, Grid, GridItem, Flex, IconButton, Text, Menu, MenuButton, MenuDivider, MenuItem, MenuList, useDisclosure, Box, Heading, Input, Select } from '@chakra-ui/react'
import { AddIcon, ChevronDownIcon, DeleteIcon, EditIcon } from "@chakra-ui/icons";
import React from 'react'
import moment from 'moment'
import { Link, useNavigate, useParams } from 'react-router-dom'
import { BiLink } from 'react-icons/bi'
import { useEffect } from 'react'
import { useState } from 'react'
import Card from 'components/card/Card'
import { IoIosArrowBack } from "react-icons/io";
import { HasAccess } from '../../../redux/accessUtils';
import { HSeparator } from 'components/separator/Separator';
import AddEdit from './AddEdit';
import CommonDeleteModel from 'components/commonDeleteModel';
import { deleteManyApi, putApi, getApi } from '../../../services/api';
import { FaFilePdf } from "react-icons/fa";
import html2pdf from "html2pdf.js";
import { opprtunitiesSchema } from '../../../schema/opprtunitiesSchema';
import { useFormik } from 'formik';
import dayjs from 'dayjs';
import { toast } from 'react-toastify';
import { accountSchema } from '../../../schema/accountSchema';

const View = (props) => {
    const params = useParams()
    const { id } = params
    const user = JSON.parse(localStorage.getItem("user"))

    const [permission, contactAccess, leadAccess] = HasAccess(['Account', 'Contacts', 'Leads'])

    const [data, setData] = useState()
    const { onOpen, onClose } = useDisclosure()
    const [edit, setEdit] = useState(false);
    const [deleteModel, setDelete] = useState(false);
    const [deleteManyModel, setDeleteManyModel] = useState(false);
    const [loading, setLoading] = useState(false)
    const navigate = useNavigate()
    const [type, setType] = useState("")
    const [editableField, setEditableField] = useState(null);
    const [editableFieldName, setEditableFieldName] = useState(null);
    const today = new Date().toISOString().split('T')[0];
    const todayTime = new Date().toISOString().split('.')[0];

    const fetchViewData = async () => {
        if (id) {
            let result = await getApi('api/account/view/', id);
            setData(result?.data);
        }
    }
    const generatePDF = () => {
        setLoading(true)
        const element = document.getElementById("reports");
        const hideBtn = document.getElementById("hide-btn");

        if (element) {
            hideBtn.style.display = 'none';
            html2pdf()
                .from(element)
                .set({
                    margin: [0, 0, 0, 0],
                    filename: `Account_Details_${moment().format("DD-MM-YYYY")}.pdf`,
                    image: { type: "jpeg", quality: 0.98 },
                    html2canvas: { scale: 2, useCORS: true, allowTaint: true },
                    jsPDF: { unit: "in", format: "letter", orientation: "portrait" },
                })
                .save().then(() => {
                    setLoading(false)
                    hideBtn.style.display = '';
                })
            // }, 500);
        } else {
            console.error("Element with ID 'reports' not found.");
            setLoading(false)
        }
    };
    const handleDeleteAccount = async (ids) => {
        try {
            let response = await deleteManyApi('api/account/deleteMany', ids)
            if (response.status === 200) {
                navigate('/account')
                toast.success(`Account Delete successfully`)
                setDeleteManyModel(false)
            }
        } catch (error) {
            console.log(error)
            toast.error(`server error`)

        }

    }

    const initialValues = {
        name: data?.name,
        officePhone: data?.officePhone,
        alternatePhone: data?.alternatePhone,
        assignUser: data?.assignUser,
        website: data?.website,
        fax: data?.fax,
        ownership: data?.ownership,
        emailAddress: data?.emailAddress,
        nonPrimaryEmail: data?.nonPrimaryEmail,
        billingStreet: data?.billingStreet,
        billingStreet2: data?.billingStreet2,
        billingStreet3: data?.billingStreet3,
        billingStreet4: data?.billingStreet4,
        billingPostalcode: data?.billingPostalcode,
        billingCity: data?.billingCity,
        billingState: data?.billingState,
        billingCountry: data?.billingCountry,
        shippingStreet: data?.shippingStreet,
        shippingStreet2: data?.shippingStreet2,
        shippingStreet3: data?.shippingStreet3,
        shippingStreet4: data?.shippingStreet4,
        shippingPostalcode: data?.shippingPostalcode,
        shippingCity: data?.shippingCity,
        shippingState: data?.shippingState,
        shippingCountry: data?.shippingCountry,
        description: data?.description,
        type: data?.type,
        industry: data?.industry,
        annualRevenue: data?.annualRevenue,
        rating: data?.rating,
        SICCode: data?.SICCode,
        memberOf: data?.memberOf,
        modifiedBy: JSON.parse(localStorage.getItem('user'))._id
    }

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: accountSchema,
        enableReinitialize: true,
        onSubmit: async (values, { resetForm }) => {
            const payload = {
                ...values,
                modifiedDate: new Date()
            }
            let response = await putApi(`api/account/edit/${id}`, payload)
            setEditableField(null);
            if (response.status === 200) {
                fetchViewData()
                toast.success(`${editableFieldName} Update successfully`)
            } else {
                toast.error(`${editableFieldName} not Update`)
            }
        },
    });
    const handleDoubleClick = (fieldName, value, name) => {
        formik.setFieldValue(fieldName, value);
        setEditableField(fieldName)
        setEditableFieldName(name)
    };

    const handleBlur = (e) => {
        formik.handleSubmit();
    };
    useEffect(() => {
        fetchViewData()
    }, [id, edit])

    return (
        <div>
            <Grid templateColumns="repeat(4, 1fr)" gap={3} id="reports">
                <GridItem colSpan={{ base: 4 }}>
                    <Heading size="lg" m={3}>
                        {data?.name || " "}
                    </Heading>
                </GridItem>
                <GridItem colSpan={{ base: 4 }}>
                    <Card>
                        <Grid gap={4}>
                            <GridItem colSpan={2}>
                                <Box>
                                    <Box display={"flex"} justifyContent={"space-between"} >
                                        <Heading size="md" mb={3}>
                                            Account Details
                                        </Heading>
                                        <Flex id="hide-btn" >
                                            <Menu>
                                                {(user.role === 'superAdmin' || permission?.create || permission?.update || permission?.delete) && <MenuButton variant="outline" colorScheme='blackAlpha' size="sm" va mr={2.5} as={Button} rightIcon={<ChevronDownIcon />}>
                                                    Actions
                                                </MenuButton>}
                                                <MenuDivider />
                                                <MenuList minWidth={2}>
                                                    {(user.role === 'superAdmin' || permission?.create) && <MenuItem onClick={() => { setEdit(true); setType("add"); formik.resetForm() }
                                                    } alignItems={'start'} color={'blue'} icon={<AddIcon />}>Add</MenuItem>}
                                                    {(user.role === 'superAdmin' || permission?.update) && <MenuItem onClick={() => { setEdit(true); setType("edit") }} alignItems={'start'} icon={<EditIcon />}>Edit</MenuItem>}
                                                    <MenuItem onClick={generatePDF} alignItems={"start"} icon={<FaFilePdf />} display={"flex"} style={{ alignItems: "center" }}>Print as PDF</MenuItem >

                                                    {(user.role === 'superAdmin' || permission?.delete) && <>
                                                        <MenuDivider />
                                                        <MenuItem alignItems={'start'} onClick={() => setDeleteManyModel(true)} color={'red'} icon={<DeleteIcon />}>Delete</MenuItem>
                                                    </>}
                                                </MenuList>
                                            </Menu>
                                            <Button leftIcon={<IoIosArrowBack />} size='sm' variant="brand" onClick={() => navigate(-1)} >
                                                Back
                                            </Button>
                                        </Flex>
                                    </Box>
                                    <HSeparator />
                                </Box>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Account Name </Text>
                                {
                                    editableField === "name" ?
                                        <>
                                            <Input
                                                id="text"
                                                name="name"
                                                type="text"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.name}
                                                borderColor={formik?.errors?.name && formik?.touched?.name ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.name && formik?.touched.name && formik?.errors.name}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("name", data?.name, "Account Name")}>{data?.name ? data?.name : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Office Phone </Text>
                                {
                                    editableField === "officePhone" ?
                                        <>
                                            <Input
                                                name="officePhone"
                                                type="number"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.officePhone}
                                                borderColor={formik?.errors?.officePhone && formik?.touched?.officePhone ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.officePhone && formik?.touched.officePhone && formik?.errors.officePhone}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("officePhone", data?.officePhone, "Office Phone")}>{data?.officePhone ? data?.officePhone : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Alternate Phone</Text>
                                {
                                    editableField === "alternatePhone" ?
                                        <>
                                            <Input
                                                name="alternatePhone"
                                                type="number"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.alternatePhone}
                                                borderColor={formik?.errors?.alternatePhone && formik?.touched?.alternatePhone ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.alternatePhone && formik?.touched.alternatePhone && formik?.errors.alternatePhone}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("alternatePhone", data?.alternatePhone, "Alternate Phone")}>{data?.alternatePhone ? data?.alternatePhone : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Website</Text>
                                {
                                    editableField === "website" ?
                                        <>
                                            <Input
                                                name="website"
                                                type="url"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.website}
                                                borderColor={formik?.errors?.website && formik?.touched?.website ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.website && formik?.touched.website && formik?.errors.website}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("website", data?.website, "Website")}>{data?.website ? data?.website : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Fax</Text>
                                {
                                    editableField === "fax" ?
                                        <>
                                            <Input
                                                name="fax"
                                                type="number"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.fax}
                                                borderColor={formik?.errors?.fax && formik?.touched?.fax ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.fax && formik?.touched.fax && formik?.errors.fax}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("fax", data?.fax, "Fax")}>{data?.fax ? data?.fax : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Ownership</Text>
                                {
                                    editableField === "ownership" ?
                                        <>
                                            <Input
                                                name="ownership"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.ownership}
                                                borderColor={formik?.errors?.ownership && formik?.touched?.ownership ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.ownership && formik?.touched.ownership && formik?.errors.ownership}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("ownership", data?.ownership, "Ownership")}>{data?.ownership ? data?.ownership : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Email Address</Text>
                                {
                                    editableField === "emailAddress" ?
                                        <>
                                            <Input
                                                name="emailAddress"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.emailAddress}
                                                borderColor={formik?.errors?.emailAddress && formik?.touched?.emailAddress ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.emailAddress && formik?.touched.emailAddress && formik?.errors.emailAddress}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("emailAddress", data?.emailAddress, "Email Address")}>{data?.emailAddress ? data?.emailAddress : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Non Primary Email</Text>
                                {
                                    editableField === "nonPrimaryEmail" ?
                                        <>
                                            <Input
                                                name="nonPrimaryEmail"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.nonPrimaryEmail}
                                                borderColor={formik?.errors?.nonPrimaryEmail && formik?.touched?.nonPrimaryEmail ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.nonPrimaryEmail && formik?.touched.nonPrimaryEmail && formik?.errors.nonPrimaryEmail}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("nonPrimaryEmail", data?.nonPrimaryEmail, "Non Primary Email")}>{data?.nonPrimaryEmail ? data?.nonPrimaryEmail : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Shipping Street</Text>
                                {
                                    editableField === "shippingStreet" ?
                                        <>
                                            <Input
                                                name="shippingStreet"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.shippingStreet}
                                                borderColor={formik?.errors?.shippingStreet && formik?.touched?.shippingStreet ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.shippingStreet && formik?.touched.shippingStreet && formik?.errors.shippingStreet}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("shippingStreet", data?.shippingStreet, "Shipping Street")}>{data?.shippingStreet ? data?.shippingStreet : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Billing Street</Text>
                                {
                                    editableField === "billingStreet" ?
                                        <>
                                            <Input
                                                name="billingStreet"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.billingStreet}
                                                borderColor={formik?.errors?.billingStreet && formik?.touched?.billingStreet ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.billingStreet && formik?.touched.billingStreet && formik?.errors.billingStreet}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("billingStreet", data?.billingStreet, "Billing Street")}>{data?.billingStreet ? data?.billingStreet : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Shipping Street2</Text>
                                {
                                    editableField === "shippingStreet2" ?
                                        <>
                                            <Input
                                                name="shippingStreet2"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.shippingStreet2}
                                                borderColor={formik?.errors?.shippingStreet2 && formik?.touched?.shippingStreet2 ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.shippingStreet2 && formik?.touched.shippingStreet2 && formik?.errors.shippingStreet2}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("shippingStreet2", data?.shippingStreet2, "Shipping Street2")}>{data?.shippingStreet2 ? data?.shippingStreet2 : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Billing Street2</Text>
                                {
                                    editableField === "billingStreet2" ?
                                        <>
                                            <Input
                                                name="billingStreet2"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.billingStreet2}
                                                borderColor={formik?.errors?.billingStreet2 && formik?.touched?.billingStreet2 ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.billingStreet2 && formik?.touched.billingStreet2 && formik?.errors.billingStreet2}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("billingStreet2", data?.billingStreet2, "Billing Street2")}>{data?.billingStreet2 ? data?.billingStreet2 : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Shipping Street3</Text>
                                {
                                    editableField === "shippingStreet3" ?
                                        <>
                                            <Input
                                                name="shippingStreet3"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.shippingStreet3}
                                                borderColor={formik?.errors?.shippingStreet3 && formik?.touched?.shippingStreet3 ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.shippingStreet3 && formik?.touched.shippingStreet3 && formik?.errors.shippingStreet3}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("shippingStreet3", data?.shippingStreet3, "Shipping Street3")}>{data?.shippingStreet3 ? data?.shippingStreet3 : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Billing Street3</Text>
                                {
                                    editableField === "billingStreet3" ?
                                        <>
                                            <Input
                                                name="billingStreet3"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.billingStreet3}
                                                borderColor={formik?.errors?.billingStreet3 && formik?.touched?.billingStreet3 ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.billingStreet3 && formik?.touched.billingStreet3 && formik?.errors.billingStreet3}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("billingStreet3", data?.billingStreet3, "Billing Street3")}>{data?.billingStreet3 ? data?.billingStreet3 : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Shipping Street4</Text>
                                {
                                    editableField === "shippingStreet4" ?
                                        <>
                                            <Input
                                                name="shippingStreet4"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.shippingStreet4}
                                                borderColor={formik?.errors?.shippingStreet4 && formik?.touched?.shippingStreet4 ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.shippingStreet4 && formik?.touched.shippingStreet4 && formik?.errors.shippingStreet4}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("shippingStreet4", data?.shippingStreet4, "Shipping Street4")}>{data?.shippingStreet4 ? data?.shippingStreet4 : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Billing Street4</Text>
                                {
                                    editableField === "billingStreet4" ?
                                        <>
                                            <Input
                                                name="billingStreet4"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.billingStreet4}
                                                borderColor={formik?.errors?.billingStreet4 && formik?.touched?.billingStreet4 ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.billingStreet4 && formik?.touched.billingStreet4 && formik?.errors.billingStreet4}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("billingStreet4", data?.billingStreet4, "Billing Street4")}>{data?.billingStreet4 ? data?.billingStreet4 : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Shipping Postal Code</Text>
                                {
                                    editableField === "shippingPostalcode" ?
                                        <>
                                            <Input
                                                name="shippingPostalcode"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.shippingPostalcode}
                                                borderColor={formik?.errors?.shippingPostalcode && formik?.touched?.shippingPostalcode ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.shippingPostalcode && formik?.touched.shippingPostalcode && formik?.errors.shippingPostalcode}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("shippingPostalcode", data?.shippingPostalcode, "Shipping Postal Code")}>{data?.shippingPostalcode ? data?.shippingPostalcode : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Billing Postal Code</Text>
                                {
                                    editableField === "billingPostalcode" ?
                                        <>
                                            <Input
                                                name="billingPostalcode"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.billingPostalcode}
                                                borderColor={formik?.errors?.billingPostalcode && formik?.touched?.billingPostalcode ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.billingPostalcode && formik?.touched.billingPostalcode && formik?.errors.billingPostalcode}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("billingPostalcode", data?.billingPostalcode, "Billing Postal Code")}>{data?.billingPostalcode ? data?.billingPostalcode : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Shipping City
                                </Text>
                                {
                                    editableField === "shippingCity" ?
                                        <>
                                            <Input
                                                name="shippingCity"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.shippingCity}
                                                borderColor={formik?.errors?.shippingCity && formik?.touched?.shippingCity ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.shippingCity && formik?.touched.shippingCity && formik?.errors.shippingCity}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("shippingCity", data?.shippingCity, "Shipping City")}>{data?.shippingCity ? data?.shippingCity : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Billing City
                                </Text>
                                {
                                    editableField === "billingCity" ?
                                        <>
                                            <Input
                                                name="billingCity"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.billingCity}
                                                borderColor={formik?.errors?.billingCity && formik?.touched?.billingCity ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.billingCity && formik?.touched.billingCity && formik?.errors.billingCity}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("billingCity", data?.billingCity, "Billing City")}>{data?.billingCity ? data?.billingCity : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Shipping State</Text>
                                {
                                    editableField === "shippingState" ?
                                        <>
                                            <Input
                                                name="shippingState"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.shippingState}
                                                borderColor={formik?.errors?.shippingState && formik?.touched?.shippingState ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.shippingState && formik?.touched.shippingState && formik?.errors.shippingState}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("shippingState", data?.shippingState, "Shipping State")}>{data?.shippingState ? data?.shippingState : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Billing State</Text>
                                {
                                    editableField === "billingState" ?
                                        <>
                                            <Input
                                                name="billingState"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.billingState}
                                                borderColor={formik?.errors?.billingState && formik?.touched?.billingState ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.billingState && formik?.touched.billingState && formik?.errors.billingState}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("billingState", data?.billingState, "Billing State")}>{data?.billingState ? data?.billingState : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Shipping Country</Text>
                                {
                                    editableField === "shippingCountry" ?
                                        <>
                                            <Input
                                                name="shippingCountry"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.shippingCountry}
                                                borderColor={formik?.errors?.shippingCountry && formik?.touched?.shippingCountry ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.shippingCountry && formik?.touched.shippingCountry && formik?.errors.shippingCountry}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("shippingCountry", data?.shippingCountry, "Shipping Country")}>{data?.shippingCountry ? data?.shippingCountry : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Billing Country</Text>
                                {
                                    editableField === "billingCountry" ?
                                        <>
                                            <Input
                                                name="billingCountry"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.billingCountry}
                                                borderColor={formik?.errors?.billingCountry && formik?.touched?.billingCountry ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.billingCountry && formik?.touched.billingCountry && formik?.errors.billingCountry}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("billingCountry", data?.billingCountry, "Billing Country")}>{data?.billingCountry ? data?.billingCountry : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Type</Text>
                                {
                                    editableField === "type" ?
                                        <>
                                            <Select
                                                value={formik?.values.type}
                                                name="type"
                                                onChange={formik?.handleChange}
                                                onBlur={handleBlur}
                                                fontWeight='500'
                                                placeholder={'Select Type'}
                                                borderColor={formik?.errors.type && formik?.touched.type ? "red.300" : null}
                                            >
                                                <option value="Analyst">Analyst</option>
                                                <option value="Competitor">Competitor </option>
                                                <option value="Customer">Customer</option>
                                                <option value="Integrator">Integrator</option>
                                                <option value="Investor">Investor </option>
                                                <option value="Partner">Partner</option>
                                                <option value="Press">Press</option>
                                                <option value="Prospect">Prospect</option>
                                                <option value="Reseller">Reseller</option>
                                                <option value="Other">Other</option>
                                            </Select>
                                            <Text mb='10px' color={'red'}> {formik?.errors.type && formik?.touched.type && formik?.errors.type}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("type", data?.type, "Type")}>{data?.type ? data?.type : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Industry</Text>
                                {
                                    editableField === "industry" ?
                                        <>
                                            <Select
                                                value={formik?.values.industry}
                                                name="industry"
                                                onChange={formik?.handleChange}
                                                onBlur={handleBlur}
                                                fontWeight='500'
                                                placeholder={'Select Industry'}
                                                borderColor={formik?.errors.industry && formik?.touched.industry ? "red.300" : null}
                                            >
                                                <option value="Apparel">Apparel</option>
                                                <option value="Banking">Banking </option>
                                                <option value="Biotechnology">Biotechnology</option>
                                                <option value="Chemicals">Chemicals</option>
                                                <option value="Communications">Communications </option>
                                                <option value="Construction">Construction</option>
                                                <option value="Consulting">Consulting</option>
                                                <option value="Education">Education</option>
                                                <option value="Electronics">Electronics</option>
                                                <option value="Energy">Energy</option>
                                                <option value="Engineering">Engineering</option>
                                                <option value="Entertainment">Entertainment</option>
                                                <option value="Finance">Finance</option>
                                                <option value="Government">Government</option>
                                                <option value="Healthcare">Healthcare</option>
                                                <option value="Hospitality">Hospitality</option>
                                                <option value="Insurance">Insurance</option>
                                                <option value="Machinery">Machinery</option>
                                                <option value="Manufacturing">Manufacturing</option>
                                                <option value="Media">Media</option>
                                                <option value="Not For Profit">Not For Profit</option>
                                                <option value="Recreation">Recreation</option>
                                                <option value="Retail">Retail</option>
                                                <option value="Shipping">Shipping</option>
                                                <option value="Technology">Technology</option>
                                                <option value="Telecommunications">Telecommunications</option>
                                                <option value="Transportation">Transportation</option>
                                                <option value="Utilities">Utilities</option>
                                                <option value="Other">Other</option>
                                            </Select>
                                            <Text mb='10px' color={'red'}> {formik?.errors.industry && formik?.touched.industry && formik?.errors.industry}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("industry", data?.industry, "Industry")}>{data?.industry ? data?.industry : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Rating </Text>
                                <Text >{data?.rating ? data?.rating : ' - '}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>SIC Code</Text>
                                {
                                    editableField === "SICCode" ?
                                        <>
                                            <Input
                                                name="SICCode"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.SICCode}
                                                borderColor={formik?.errors?.SICCode && formik?.touched?.SICCode ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.SICCode && formik?.touched.SICCode && formik?.errors.SICCode}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("SICCode", data?.SICCode, "SIC Code")}>{data?.SICCode ? data?.SICCode : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Assigned User </Text>
                                {/* <Text>{data?.assignUserName ? data?.assignUserName : ' - '}</Text> */}
                                {
                                    data?.assignUser ?
                                        <Link to={user.role === 'superAdmin' && `/userView/${data?.assignUser}`}>
                                            <Text color={user.role === 'superAdmin' ? 'blue.500' : 'blackAlpha.900'} sx={{ '&:hover': { color: user.role === 'superAdmin' ? 'blue.500' : 'blackAlpha.900', textDecoration: user.role === 'superAdmin' ? 'underline' : 'none' } }} style={{ cursor: "pointer" }}>{data?.assignUserName ? data?.assignUserName : ' - '}</Text>
                                        </Link>
                                        :
                                        <Text color={user.role === 'superAdmin' ? 'blue.500' : 'blackAlpha.900'} sx={{ '&:hover': { color: user.role === 'superAdmin' ? 'blue.500' : 'blackAlpha.900', textDecoration: user.role === 'superAdmin' ? 'underline' : 'none' } }}>{data?.assignUserName ? data?.assignUserName : ' - '}</Text>

                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Member Of </Text>
                                {
                                    data?.memberOf ?
                                        <Link to={`/accountView/${data?.memberOf}`}>
                                            <Text color={permission?.view ? 'blue.500' : 'blackAlpha.900'} sx={{ '&:hover': { color: permission?.view ? 'blue.500' : 'blackAlpha.900', textDecoration: permission?.view ? 'underline' : 'none' } }} style={{ cursor: "pointer" }}>{data?.memberOfName ? data?.memberOfName : ' - '}</Text>
                                        </Link>
                                        :
                                        <Text color={permission?.view ? 'blue.500' : 'blackAlpha.900'} sx={{ '&:hover': { color: permission?.view ? 'blue.500' : 'blackAlpha.900', textDecoration: permission?.view ? 'underline' : 'none' } }}>{data?.memberOfName ? data?.memberOfName : ' - '}</Text>

                                }
                            </GridItem>

                            {/* <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Task reminder </Text>
                                <Text>{data?.reminder ? data?.reminder : ' - '}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Assign To  </Text>
                                <Link to={data?.assignTo ? contactAccess?.view && `/contactView/${data?.assignTo}` : leadAccess?.view && `/leadView/${data?.assignToLead}`}>
                                    <Text color={(data?.category === 'contact' && (contactAccess?.view || user?.role === 'superAdmin')) ? 'brand.600' : (leadAccess?.view || user?.role === 'superAdmin' && data?.category === 'lead') ? 'brand.600' : 'blackAlpha.900'} sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}>{data?.assignToName ? data?.assignToName : ' - '}</Text>
                                </Link>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Task createBy </Text>
                                <Text>{data?.createByName ? data?.createByName : ' - '}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 2 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Task Description</Text>
                                {
                                    editableField === "description" ?
                                        <>
                                            <Input
                                                id="text"
                                                name="description"
                                                type="text"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.description}
                                                autoFocus
                                                borderColor={formik?.errors?.description && formik?.touched?.description ? "red.300" : null}
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.description && formik?.touched.description && formik?.errors.description}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("description", data?.description)}>{data?.description ? data?.description : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Task notes </Text>
                                {
                                    editableField === "notes" ?
                                        <>
                                            <Input
                                                id="text"
                                                name="notes"
                                                type="text"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.notes}
                                                autoFocus
                                                borderColor={formik?.errors?.notes && formik?.touched?.notes ? "red.300" : null}
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.notes && formik?.touched.notes && formik?.errors.notes}</Text>

                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("notes", data?.notes)}>{data?.notes ? data?.notes : ' - '}</Text>
                                }
                            </GridItem> */}
                        </Grid>
                    </Card>
                </GridItem>

            </Grid>
            {
                (permission?.update || permission?.delete || user?.role === 'superAdmin') && <Card mt={3}>
                    <Grid templateColumns="repeat(6, 1fr)" gap={1}>
                        <GridItem colStart={6} >
                            <Flex justifyContent={"right"}>
                                {(permission?.update || user?.role === 'superAdmin') && <Button size="sm" onClick={() => { setEdit(true); setType("edit") }} leftIcon={<EditIcon />} mr={2.5} variant="outline" colorScheme="green">Edit</Button>}
                                {(permission?.delete || user?.role === 'superAdmin') && <Button size="sm" style={{ background: 'red.800' }} onClick={() => setDeleteManyModel(true)} leftIcon={<DeleteIcon />} colorScheme="red" >Delete</Button>}
                            </Flex>
                        </GridItem>
                    </Grid>
                </Card>
            }
            <AddEdit isOpen={edit} size="lg" onClose={() => setEdit(false)} viewClose={onClose} selectedId={id?.event ? id?.event?._def?.extendedProps?._id : id} type={type} />
            <CommonDeleteModel isOpen={deleteManyModel} onClose={() => setDeleteManyModel(false)} type='Account' handleDeleteData={handleDeleteAccount} ids={[id]} />
        </div >
    )
}

export default View

================
File: Client/src/views/admin/activeDeactiveModule/index.js
================
import { useEffect, useState } from "react";
import {
    Box,
    Button,
    Flex, GridItem,
    Text, Grid, useColorModeValue,
    Switch
} from "@chakra-ui/react";
import Card from "components/card/Card";
import { getApi, putApi } from "services/api";
import Spinner from "components/spinner/Spinner";
import { useFormik } from "formik";
import { HSeparator } from "components/separator/Separator";
import { useNavigate } from "react-router-dom";
import { IoIosArrowBack } from "react-icons/io";
import { useDispatch, useSelector } from "react-redux";
import { fetchModules } from "../../../redux/slices/moduleSlice";

const Index = () => {
    const textColor = useColorModeValue("gray.500", "white");

    const navigate = useNavigate();
    const dispatch = useDispatch()
    const modules = useSelector((state) => state?.modules?.data)

    const [isLoading, setIsLoading] = useState(false);
    const [initialValues, setInitialValues] = useState([])
    const [action, setAction] = useState(false);

    const formik = useFormik({
        initialValues: initialValues,
        enableReinitialize: true,
        onSubmit: (_values, { resetForm }) => {
            updateData();
            resetForm()
        },
    });
    const { values, dirty, handleSubmit, setFieldValue } = formik



    const fetchData = async () => {
        setIsLoading(true);
        try {
            dispatch(fetchModules())
        } catch (error) {
            console.error(error);
        } finally {
            setIsLoading(false);
        }
    };
    const updateData = async () => {
        try {
            setIsLoading(true);
            await putApi("api/modules/edit", values);
            fetchData()
            // setAction((pre) => !pre);
        } catch (error) {
            console.error(error);
        } finally {
            setIsLoading(false);
        }
    };
    // useEffect(() => {
    //     fetchData();
    // }, [action]);

    useEffect(() => {
        setInitialValues(modules);
    }, [modules]);

    return (
        <>
            <Card>
                <Flex justifyContent={"space-between"} alignItems={"center"} mb={5}>
                    <Box>
                        <Text color={"secondaryGray.900"} fontSize="22px" fontWeight="700">
                            Active Deactive Module
                        </Text>
                    </Box>
                    <Button
                        onClick={() => navigate("/admin-setting")}
                        variant="brand"
                        size="sm"
                        leftIcon={<IoIosArrowBack />}
                        ml={2}
                    >
                        Back
                    </Button>
                </Flex>
                <HSeparator />
                <Flex
                    mt={5}
                    alignItems={"center"}
                    fontSize="sm"
                >
                    {isLoading ? (
                        <Flex
                            justifyContent={"center"}
                            alignItems={"center"}
                            width="100%"
                            color={textColor}
                            fontSize="sm"
                            fontWeight="700"
                        >
                            <Spinner />
                        </Flex>
                    ) : (
                        <Grid templateColumns="repeat(12, 1fr)" p={3} gap={3} >
                            {values?.length > 0 && values?.map((item, index) => (
                                <>
                                    <GridItem colSpan={6} >
                                        <Text fontSize="15px" fontWeight="700"> {item?.moduleName} </Text>
                                    </GridItem>
                                    <GridItem colSpan={6} >
                                        <Switch
                                            onChange={(e) => setFieldValue(`[${index}].isActive`, e.target.checked)}
                                            isChecked={item?.isActive} />
                                    </GridItem>
                                </>
                            ))}

                            <GridItem colSpan={12} mt={3} >
                                <Button
                                    colorScheme="brand"
                                    onClick={handleSubmit}
                                    disabled={!dirty}
                                    size="sm"
                                >
                                    Update
                                </Button>
                            </GridItem>
                        </Grid>
                    )}
                </Flex>

            </Card>
        </>
    );
};

export default Index;

================
File: Client/src/views/admin/adminSetting/index.js
================
import { Icon, SimpleGrid } from '@chakra-ui/react';
import MiniStatistics from "components/card/MiniStatistics";
import IconBox from 'components/icons/IconBox';
import { FaCreativeCommonsBy, FaWpforms } from "react-icons/fa";
import { HiUsers } from "react-icons/hi";
import { TbExchange } from "react-icons/tb";
import { useNavigate } from 'react-router-dom';
import { GrValidate } from "react-icons/gr";
import { TbTableColumn } from "react-icons/tb";
import { VscFileSubmodule } from "react-icons/vsc";
import { IoIosSwitch } from "react-icons/io";

const Index = () => {
    const navigate = useNavigate();
    return (
        <div>
            <SimpleGrid columns={{ base: 1, md: 2, lg: 4 }} gap="20px" mb="20px">
                <MiniStatistics
                    fontsize="md"
                    onClick={() => navigate("/user")}
                    startContent={
                        <IconBox
                            w="56px"
                            h="56px"
                            bg="linear-gradient(90deg, #4481EB 0%, #04BEFE 100%)"
                            icon={<Icon w="28px" h="28px" as={HiUsers} color="white" />}
                        />
                    }
                    name="Users"
                />
                <MiniStatistics
                    fontsize="md"
                    onClick={() => navigate("/role")}
                    startContent={
                        <IconBox
                            w="56px"
                            h="56px"
                            bg="linear-gradient(90deg, #4481EB 0%, #04BEFE 100%)"
                            icon={<Icon w="28px" h="28px" as={FaCreativeCommonsBy} color="white" />}
                        />

                    }
                    name="Roles"
                />
                <MiniStatistics
                    fontsize="md"
                    onClick={() => navigate("/change-images")}
                    startContent={
                        <IconBox
                            w="56px"
                            h="56px"
                            bg="linear-gradient(90deg, #4481EB 0%, #04BEFE 100%)"
                            icon={<Icon w="28px" h="28px" as={TbExchange} color="white" />}
                        />

                    }
                    name="Change Images"
                />
                <MiniStatistics
                    fontsize="md"
                    onClick={() => navigate("/custom-Fields")}
                    startContent={
                        <IconBox
                            w="56px"
                            h="56px"
                            bg="linear-gradient(90deg, #4481EB 0%, #04BEFE 100%)"
                            icon={<Icon w="28px" h="28px" as={FaWpforms} color="white" />}
                        />

                    }
                    name="Custom Fields"
                />
                <MiniStatistics
                    fontsize="md"
                    onClick={() => navigate("/validations")}
                    startContent={
                        <IconBox
                            w="56px"
                            h="56px"
                            bg="linear-gradient(90deg, #4481EB 0%, #04BEFE 100%)"
                            icon={<Icon w="28px" h="28px" as={GrValidate} color="white" />}
                        />

                    }
                    name="Validations"

                />
                <MiniStatistics
                    fontsize="md"
                    onClick={() => navigate("/table-field")}
                    startContent={
                        <IconBox
                            w="56px"
                            h="56px"
                            bg="linear-gradient(90deg, #4481EB 0%, #04BEFE 100%)"
                            icon={<Icon w="28px" h="28px" as={TbTableColumn} color="white" />}
                        />
                    }
                    name="Table Fields"
                />
                <MiniStatistics
                    fontsize="md"
                    onClick={() => navigate("/module")}
                    startContent={
                        <IconBox
                            w="56px"
                            h="56px"
                            bg="linear-gradient(90deg, #4481EB 0%, #04BEFE 100%)"
                            icon={<Icon w="28px" h="28px" as={VscFileSubmodule} color="white" />}
                        />
                    }
                    name="Module"
                />
                <MiniStatistics
                    fontsize="md"
                    onClick={() => navigate("/active-deactive-module")}
                    startContent={
                        <IconBox
                            w="56px"
                            h="56px"
                            bg="linear-gradient(90deg, #4481EB 0%, #04BEFE 100%)"
                            icon={<Icon w="28px" h="28px" as={IoIosSwitch} color="white" />}
                        />
                    }
                    name="Active Deactive Module"
                />
            </SimpleGrid>
        </div>
    )
}

export default Index

================
File: Client/src/views/admin/calender/components/calender.js
================
import FullCalendar from '@fullcalendar/react';
import Card from 'components/card/Card';
import { useEffect, useState } from 'react'
import dayGridPlugin from "@fullcalendar/daygrid";
import interactionPlugin from "@fullcalendar/interaction";
import listPlugin from '@fullcalendar/list';
import multiMonthPlugin from '@fullcalendar/multimonth';
import timeGridPlugin from '@fullcalendar/timegrid';
import { Flex, useBreakpointValue, useDisclosure } from '@chakra-ui/react';
import EventView from 'views/admin/task/eventView';
import MeetingView from 'views/admin/meeting/meetingView';
import CallView from 'views/admin/phoneCall/callView';
import { GoDotFill } from "react-icons/go";
import EmailView from 'views/admin/emailHistory/emailView';
import { HasAccess } from '../../../../redux/accessUtils';
import AddEdit from 'views/admin/task/components/AddEdit'

const Calender = (props) => {
    const { data, fetchData } = props
    const [eventView, setEventView] = useState(false)
    const [meetingView, setMeetingView] = useState(false)
    const [callView, setCallView] = useState(false)
    const [emailView, setEmailView] = useState(false)
    const [taskInfo, setTaskInfo] = useState()
    const [meetingInfo, setMeetingInfo] = useState()
    const [callInfo, setCallInfo] = useState()
    const [emailInfo, setEmailInfo] = useState()
    const [date, setDate] = useState()
    const [taskAccess, meetingAccess, callAccess, emailAccess] = HasAccess(['Tasks', 'Meetings', 'Calls', 'Emails']);
    // const { isOpen, onOpen, onClose } = useDisclosure()
    const [taskModel, setTaskModel] = useState(false);

    const user = JSON.parse(localStorage.getItem("user"))

    const handleDateClick = (arg) => {
        setTaskModel(true)
        setDate(arg.dateStr)
    }

    function handleEventClick(info) {
        if (info.event.url) {
            info.jsEvent.preventDefault();
            window.open(info.event.url);
        }

        if (info?.event?.groupId === "task") {
            setTaskInfo(info)
            setEventView(true)
        } else if (info?.event?.groupId === "call") {
            setCallInfo(info)
            setCallView(true)
        } else if (info?.event?.groupId === "meeting") {
            setMeetingInfo(info)
            setMeetingView(true)
        } else if (info?.event?.groupId === "email") {
            setEmailInfo(info)
            setEmailView(true)
        }
    }
    const [currentView, setCurrentView] = useState('');

    useEffect(() => {
        setCurrentView('dayGridMonth');
    }, []);
    return (
        <div>
            <Card >
                {(taskAccess?.view || user?.role === "superAdmin") && <AddEdit isOpen={taskModel} onClose={setTaskModel} fetchData={fetchData} userAction={'add'} />}
                <EventView fetchData={fetchData} isOpen={eventView} onClose={setEventView} info={taskInfo} />
                <MeetingView fetchData={fetchData} isOpen={meetingView} onClose={setMeetingView} info={meetingInfo} />
                <CallView fetchData={fetchData} isOpen={callView} onClose={setCallView} info={callInfo} />
                <EmailView fetchData={fetchData} isOpen={emailView} onClose={setEmailView} info={emailInfo} />

                <div style={{ display: "flex", justifyContent: "end" }}>
                    {
                        (callAccess?.create || user?.role === "superAdmin") &&
                        <Flex alignItems={"center"} fontSize={"14px"} marginRight={"10px"}>
                            <GoDotFill color='green' fontSize={"18px"} /> Calls
                        </Flex>
                    }
                    {
                        (meetingAccess?.create || user?.role === "superAdmin") &&
                        <Flex alignItems={"center"} fontSize={"14px"} marginRight={"10px"}>
                            <GoDotFill color='red' fontSize={"18px"} /> Meetings
                        </Flex>
                    }
                    {
                        (emailAccess?.create || user?.role === "superAdmin") &&
                        <Flex alignItems={"center"} fontSize={"14px"}>
                            <GoDotFill color='blue' fontSize={"18px"} /> Emails
                        </Flex>
                    }
                </div>
                <FullCalendar
                    plugins={[dayGridPlugin, timeGridPlugin, listPlugin, interactionPlugin, multiMonthPlugin]}
                    initialView={currentView}
                    height="600px"
                    dateClick={handleDateClick}
                    events={data}
                    headerToolbar={{
                        left: 'prev,next today',
                        center: 'title',
                        right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek,multiMonthFourMonth'
                    }}
                    eventClick={handleEventClick}
                    buttonText={{
                        today: 'Today',
                        dayGridMonth: 'Month',
                        timeGridWeek: 'Week',
                        timeGridDay: 'Day',
                        listWeek: 'List',
                    }}
                    views={{
                        multiMonthFourMonth: {
                            type: 'multiMonth',
                            buttonText: 'Multi Month',
                            duration: { months: useBreakpointValue({ base: 4, lg: 4, xl: 6 }) },
                        }
                    }}
                    eventClassNames="custom-fullcalendar"
                />

            </Card>
        </div>
    )
}

export default Calender

================
File: Client/src/views/admin/calender/index.js
================
import { useEffect, useState } from "react";
import { getApi } from "services/api";
import Calender from './components/calender';


const Index = () => {

    const [data, setData] = useState([])
    const user = JSON.parse(localStorage.getItem("user"))

    const fetchData = async () => {
        let result = await getApi(user?.role === 'superAdmin' ? 'api/calendar/' : `api/calendar/?createBy=${user._id}`);
        if (result?.status === 200) {
            setData(result?.data)
        }
    }

    useEffect(() => {
        fetchData();
    }, [])

    return (
        <>
            <Calender fetchData={fetchData} data={data} />
        </>
    )
}

export default Index

================
File: Client/src/views/admin/communication/components/call.js
================
import { Button, FormLabel, Grid, GridItem, Heading, Input, List, ListItem, Text, Textarea, useDisclosure } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import { useFormik } from 'formik';
import { useEffect, useState } from 'react';
import { BsFillTelephoneFill } from 'react-icons/bs';
import { toast } from 'react-toastify';
import { phoneCallSchema } from 'schema';
import { getApi } from 'services/api';
import { postApi } from 'services/api';

const Call = () => {

    const [data, setData] = useState([])
    const user = JSON.parse(localStorage.getItem('user'))
    const { isOpen, onOpen, onClose } = useDisclosure();
    const [isLoding, setIsLoding] = useState(false)

    const initialValues = {
        sender: user?._id,
        recipient: '',
        callDuration: '',
        callNotes: '',
        createBy: '',
    };

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: phoneCallSchema,
        onSubmit: (values, { resetForm }) => {
            AddData();
        },
    });

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, } = formik

    if (touched.recipient && errors.createBy) {

        toast.error('Please select an authorized recipient');
        formik.resetForm();

    }

    const AddData = async () => {
        try {
            setIsLoding(true)
            let response = await postApi('api/phoneCall/add', values)
            if (response.status === 200) {

                toast.success(`Call ${values.recipient} successfully`)
                formik.resetForm();
            }
        } catch (e) {
            console.error(e);
        }
        finally {
            setIsLoding(false)
        }
    };

    const fetchData = async () => {

        let result = await getApi(user.role === 'superAdmin' ? 'api/contact/' : `api/contact/?createBy=${user._id}`);
        values.createBy = result?._id;
        setData(result.data);
    }

    useEffect(() => {
        fetchData()
    }, []);

    useEffect(() => {
        data?.map((item) => {
            let recipientExists = item?.phoneNumber === values.recipient
            if (recipientExists) {
                values.createBy = item._id
                setFieldValue('createBy', item._id)
            }
        })
    }, [values])

    return (
        <Grid templateColumns="repeat(12, 1fr)" gap={3}>
            <GridItem colSpan={{ base: 12 }} >
                <Heading as='h2' size='xl' noOfLines={1}>
                    Call
                </Heading>
            </GridItem>
            <GridItem colSpan={{ base: 12 }}>
                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                    To<Text color={"red"}>*</Text>
                </FormLabel>
                <Input
                    onFocus={onOpen}
                    fontSize='sm'
                    type='number'
                    onChange={handleChange}
                    onBlur={() => setTimeout(onClose, 200)}
                    value={values.recipient}
                    name="recipient"
                    placeholder='Recipient'
                    fontWeight='500'
                    borderColor={errors?.recipient && touched?.recipient ? "red.300" : null}
                />
                {isOpen && values?.recipient && (
                    <List position={'relative'} border={'1px solid'} bg={'gray.100'} width={'100%'} borderRadius={'0px 0px 20px 20px'} lineHeight={1} >
                        {data?.filter((option) => {
                            if (option && option.phoneNumber && typeof option.phoneNumber === 'number') {
                                return option.phoneNumber.toString().includes(values.recipient.toString().toLowerCase());
                            }
                            return false;
                        }).map((option, index) => (
                            <ListItem p={3} borderBottom={'2px solid #efefef'} sx={{ '&:last-child': { borderBottom: 'none' } }} key={option?._id} cursor={'pointer'}
                                onClick={() => {
                                    setFieldValue('createBy', option?._id)
                                    setFieldValue('recipient', option.phoneNumber.toString())
                                }}
                            >
                                {option.phoneNumber}
                            </ListItem>
                        ))}
                    </List>
                )}
                <Text mb='10px' color={'red'}> {errors.recipient && touched.recipient && errors.recipient}</Text>
            </GridItem>
            <GridItem colSpan={{ base: 12 }} >
                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                    Call Notes
                </FormLabel>
                <Textarea
                    fontSize='sm'
                    height={'20vh'}
                    resize={'none'}
                    onChange={handleChange}
                    value={values.callNotes}
                    name="callNotes"
                    placeholder='callNotes'
                    fontWeight='500'
                    borderColor={errors?.callNotes && touched?.callNotes ? "red.300" : null}
                />
                <Text mb='10px' color={'red'}> {errors.callNotes && touched.callNotes && errors.callNotes}</Text>
            </GridItem>

            <GridItem colSpan={{ base: 12 }} >
                <Button variant='brand' disabled={isLoding ? true : false} size="sm" onClick={handleSubmit} leftIcon={<BsFillTelephoneFill />}>{isLoding ? <Spinner /> : 'Call'}</Button>
                <Button onClick={() => formik.resetForm()} size="sm">Clear</Button>
            </GridItem>

        </Grid>
    )
}

export default Call

================
File: Client/src/views/admin/communication/components/email.js
================
import { Button, FormLabel, Grid, GridItem, Heading, Input, List, ListItem, Text, Textarea, useDisclosure } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import { useFormik } from 'formik';
import { useEffect, useState } from 'react';
import { BsFillSendFill } from 'react-icons/bs';
import { toast } from 'react-toastify';
import { emailSchema } from 'schema';
import { getApi } from 'services/api';
import { postApi } from 'services/api';

const Email = () => {
    const [data, setData] = useState([])
    const user = JSON.parse(localStorage.getItem('user'))
    const { isOpen, onOpen, onClose } = useDisclosure();
    const [isLoding, setIsLoding] = useState(false)

    const initialValues = {
        sender: user?._id,
        recipient: '',
        cc: '',
        bcc: '',
        subject: '',
        message: '',
        createBy: ''
    };

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: emailSchema,
        onSubmit: (values, { resetForm }) => {
            AddData();
        },
    });

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, } = formik

    if (touched.recipient && errors.createBy) {
        toast.error('Please select an authorized recipient');
        formik.resetForm();

    }

    const AddData = async () => {
        try {
            setIsLoding(true)
            let response = await postApi('api/email/add', values)
            if (response.status === 200) {
                toast.success('Email Send successfully')
                formik.resetForm();
            }
        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };


    const fetchData = async () => {
        let result = await getApi(user.role === 'superAdmin' ? 'api/contact/' : `api/contact/?createBy=${user._id}`);
        values.createBy = result?._id;
        setData(result.data);
    }

    useEffect(() => {
        fetchData()
    }, []);

    useEffect(() => {
        data?.map((item) => {
            let recipientExists = item.email === values.recipient
            if (recipientExists) {
                values.createBy = item._id
                setFieldValue('createBy', item._id)
            }
        })
    }, [values])

    return (
        <Grid templateColumns="repeat(12, 1fr)" gap={3}>
            <GridItem colSpan={{ base: 12 }} >
                <Heading as='h2' size='xl' noOfLines={1}>
                    Send Email
                </Heading>
            </GridItem>
            <GridItem colSpan={{ base: 12 }} >
                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                    To<Text color={"red"}>*</Text>
                </FormLabel>
                <Input
                    onFocus={onOpen}
                    fontSize='sm'
                    onChange={handleChange}
                    onBlur={() => setTimeout(onClose, 200)}
                    value={values.recipient}
                    name="recipient"
                    placeholder='Recipient'
                    fontWeight='500'
                    borderColor={errors?.recipient && touched?.recipient ? "red.300" : null}
                />
                {isOpen && values?.recipient && (
                    <List position={'relative'} border={'1px solid'} bg={'gray.100'} width={'100%'} borderRadius={'0px 0px 20px 20px'} lineHeight={1} >
                        {data?.filter((option) => option?.email?.includes(values?.recipient.toLowerCase())).map((option, index) => (
                            <ListItem p={3} borderBottom={'2px solid #efefef'} sx={{ '&:last-child': { borderBottom: 'none' } }} key={option?._id} cursor={'pointer'}
                                onClick={() => {
                                    setFieldValue('createBy', option?._id)
                                    setFieldValue('recipient', option?.email)
                                }}
                            >
                                {option?.email}
                            </ListItem>
                        ))}
                    </List>
                )}
                <Text mb='10px' color={'red'}> {errors.recipient && touched.recipient && errors.recipient}</Text>
            </GridItem>
            <GridItem colSpan={{ base: 12 }} >
                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                    Sc
                </FormLabel>
                <Input
                    fontSize='sm'
                    onChange={handleChange}
                    value={values.cc}
                    name="cc"
                    placeholder='cc'
                    fontWeight='500'
                    borderColor={errors?.cc && touched?.cc ? "red.300" : null}
                />

                <Text mb='10px' color={'red'}> {errors.cc && touched.cc && errors.cc}</Text>
            </GridItem>
            <GridItem colSpan={{ base: 12 }} >
                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                    Bcc
                </FormLabel>
                <Input
                    fontSize='sm'
                    onChange={handleChange}
                    value={values.bcc}
                    name="bcc"
                    placeholder='bcc'
                    fontWeight='500'
                    borderColor={errors?.bcc && touched?.bcc ? "red.300" : null}
                />
                <Text mb='10px' color={'red'}> {errors.bcc && touched.bcc && errors.bcc}</Text>
            </GridItem>
            <GridItem colSpan={{ base: 12 }} >
                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                    Subject
                </FormLabel>
                <Input
                    fontSize='sm'
                    onChange={handleChange}
                    value={values.subject}
                    name="subject"
                    placeholder='Subject'
                    fontWeight='500'
                    borderColor={errors?.subject && touched?.subject ? "red.300" : null}
                />
                <Text mb='10px' color={'red'}> {errors.subject && touched.subject && errors.subject}</Text>
            </GridItem>
            <GridItem colSpan={{ base: 12 }} >
                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                    Message<Text color={"red"}>*</Text>
                </FormLabel>
                <Textarea
                    height={240}
                    resize={'none'}
                    fontSize='sm'
                    onChange={handleChange}
                    value={values.message}
                    name="message"
                    placeholder='Enter Message Hear'
                    fontWeight='500'
                    borderColor={errors?.message && touched?.message ? "red.300" : null}
                />
                <Text mb='10px' color={'red'}> {errors.message && touched.message && errors.message}</Text>
            </GridItem>
            <GridItem colSpan={{ base: 12 }} >
                <Button size="sm" variant='brand' onClick={handleSubmit} disabled={isLoding ? true : false} rightIcon={<BsFillSendFill />}> {isLoding ? <Spinner /> : 'Send'}</Button>
                <Button size="sm" onClick={() => formik.resetForm()}>Clear</Button>
            </GridItem>

        </Grid>
    )
}

export default Email

================
File: Client/src/views/admin/communication/components/TextMsg.js
================
import { Button, FormLabel, Grid, GridItem, Heading, Input, List, ListItem, Text, Textarea, useDisclosure } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import { useFormik } from 'formik';
import { useEffect, useState } from 'react';
import { MdOutlineMessage } from 'react-icons/md';
import { toast } from 'react-toastify';
import { textMsgSchema } from 'schema';
import { getApi } from 'services/api';
import { postApi } from 'services/api';

const TextMsg = () => {

    const [data, setData] = useState([])
    const user = JSON.parse(localStorage.getItem('user'))
    const { isOpen, onOpen, onClose } = useDisclosure();
    const [isLoding, setIsLoding] = useState(false)

    const initialValues = {
        sender: user?._id,
        to: '',
        message: '',
        createFor: '',
    };

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: textMsgSchema,
        onSubmit: (values, { resetForm }) => {
            AddData();
        },
    });

    const { errors, touched, values, handleChange, handleSubmit, setFieldValue, } = formik

    if (touched.to && errors.createFor) {
        toast.error('Please select an authorized to');
        formik.resetForm();

    }

    const AddData = async () => {
        try {
            setIsLoding(true)
            let response = await postApi('api/text-msg/add', values)
            if (response.status === 200) {
                toast.success(`Text Msg send successfully to ${values.to} `)
                formik.resetForm();
            }
        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };

    const fetchData = async () => {
        let result = await getApi(user.role === 'superAdmin' ? 'api/contact/' : `api/contact/?createBy=${user._id}`);
        values.createFor = result?._id;
        setData(result.data);
    }

    useEffect(() => {
        fetchData()
    }, []);

    useEffect(() => {
        data?.map((item) => {
            let recipientExists = item?.phoneNumber === values.to
            if (recipientExists) {
                values.createFor = item._id
                setFieldValue('createFor', item._id)
            }
        })
    }, [values])

    return (
        <Grid templateColumns="repeat(12, 1fr)" gap={3}>
            <GridItem colSpan={{ base: 12 }} >
                <Heading as='h2' size='xl' noOfLines={1}>
                    Text Message
                </Heading>
            </GridItem>
            <GridItem colSpan={{ base: 12 }}>
                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                    To<Text color={"red"}>*</Text>
                </FormLabel>
                <Input
                    onFocus={onOpen}
                    fontSize='sm'
                    type='number'
                    onChange={handleChange}
                    onBlur={() => setTimeout(onClose, 200)}
                    value={values.to}
                    name="to"
                    placeholder='to'
                    fontWeight='500'
                    borderColor={errors?.to && touched?.to ? "red.300" : null}
                />
                {isOpen && values?.to && (
                    <List position={'relative'} border={'1px solid'} bg={'gray.100'} width={'100%'} borderRadius={'0px 0px 20px 20px'} lineHeight={1} >
                        {data?.filter((option) => {
                            if (option && option.phoneNumber && typeof option.phoneNumber === 'number') {
                                return option.phoneNumber.toString().includes(values.to.toString().toLowerCase());
                            }
                            return false;
                        }).map((option, index) => (
                            <ListItem p={3} borderBottom={'2px solid #efefef'} sx={{ '&:last-child': { borderBottom: 'none' } }} key={option?._id} cursor={'pointer'}
                                onClick={() => {
                                    setFieldValue('createFor', option?._id)
                                    setFieldValue('to', option.phoneNumber.toString())
                                }}
                            >
                                {option.phoneNumber}
                            </ListItem>
                        ))}
                    </List>
                )}
                <Text mb='10px' color={'red'}> {errors.to && touched.to && errors.to}</Text>
            </GridItem>
            <GridItem colSpan={{ base: 12 }} >
                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                    Message
                </FormLabel>
                <Textarea
                    height={'20vh'}
                    fontSize='sm'
                    resize={'none'}
                    onChange={handleChange}
                    value={values.message}
                    name="message"
                    placeholder='message'
                    fontWeight='500'
                    borderColor={errors?.message && touched?.message ? "red.300" : null}
                />
                <Text mb='10px' color={'red'}> {errors.message && touched.message && errors.message}</Text>
            </GridItem>

            <GridItem colSpan={{ base: 12 }} >
                <Button variant='brand' size="sm" onClick={handleSubmit} disabled={isLoding ? true : false} leftIcon={<MdOutlineMessage />}>  {isLoding ? <Spinner /> : 'Send Msg'}</Button>
                <Button onClick={() => formik.resetForm()} size="sm">Clear</Button>
            </GridItem>

        </Grid>
    )
}

export default TextMsg

================
File: Client/src/views/admin/communication/index.js
================
import { Tab, TabList, TabPanel, TabPanels, Tabs } from '@chakra-ui/react'
import Card from 'components/card/Card'
import React from 'react'
import Email from './components/email'
import Call from './components/call'
import TextMsg from './components/TextMsg'

const Index = () => {
    return (
        <div>
            <Tabs >
                <TabList sx={{ '& button:focus': { boxShadow: 'none', }, }}>
                    <Tab >Email</Tab>
                    <Tab>Call</Tab>
                    <Tab>Text Msg</Tab>
                </TabList>

                <TabPanels>
                    <TabPanel>
                        <Card>
                            <Email />
                        </Card>
                    </TabPanel>
                    <TabPanel>
                        <Card>
                            <Call />
                        </Card>
                    </TabPanel>
                    <TabPanel>
                        <Card>
                            <TextMsg />
                        </Card>
                    </TabPanel>
                </TabPanels>
            </Tabs>
        </div>
    )
}

export default Index

================
File: Client/src/views/admin/contact/components/ContactImport.js
================
import React, { useState, useEffect } from 'react'
import { useLocation, useNavigate } from 'react-router-dom';
import Papa from 'papaparse';
import {
    Flex,
    useColorModeValue,
    Select,
    Button,
    Grid,
    GridItem,
    Text
} from "@chakra-ui/react";
import { useFormik } from "formik";
import { postApi } from 'services/api';
import { toast } from 'react-toastify';
import moment from 'moment';
import ExcelJS from 'exceljs';
import Card from 'components/card/Card';

function ContactImport() {

    const location = useLocation();
    const { fileData, customFields } = location.state || {};
    const [importedFileFields, setImportedFileFields] = useState([]);
    const [importedFileData, setImportedFileData] = useState([]);
    const [isLoding, setIsLoding] = useState(false);
    const navigate = useNavigate();
    const userId = JSON.parse(localStorage.getItem('user'))._id;
    const [filterContact, setFilterContact] = useState([]);

    const columns = [
        { Header: 'Fields In Crm', accessor: 'crmFields' },
        { Header: 'Fields In File', accessor: 'fileFields' },
    ];


    const initialFieldValues = Object.fromEntries(
        (customFields || []).map(field => [field?.name, ''])
    );
    const initialValues = {
        ...initialFieldValues
    };

    const fieldsInCrm = [
        ...customFields?.map((field) => ({ Header: field?.label, accessor: field?.name, type: field?.type, formikType: field?.validations?.find(obj => obj.hasOwnProperty('formikType')) }))
    ];

    const formik = useFormik({
        initialValues: initialValues,
        onSubmit: (values, { resetForm }) => {

            const contactsData = importedFileData?.map((item, ind) => {
                const contact = {
                    createdDate: new Date(),
                    deleted: item[values.deleted || "deleted"] || false,
                    createBy: JSON.parse(localStorage.getItem('user'))._id,
                };

                fieldsInCrm?.forEach(field => {
                    const selectedField = values[field?.accessor];
                    const fieldValue = item[selectedField] || '';

                    if (field?.type?.toLowerCase() === "date") {
                        contact[field?.accessor] = moment(fieldValue).isValid() ? fieldValue : '';
                    } else if (field?.type?.toLowerCase() === "number" && ['positive', 'negative'].includes(field?.formikType?.toLowerCase())) {
                        contact[field?.accessor] = parseFloat(fieldValue) || '';
                    } else if (field?.type?.toLowerCase() === "number") {
                        contact[field?.accessor] = parseInt(fieldValue, 10) || '';
                    } else {
                        contact[field?.accessor] = fieldValue;
                    }
                });

                return contact;
            });

            AddData(contactsData);
        }
    });

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik

    const AddData = async (contacts) => {
        try {
            setIsLoding(true);
            let response = await postApi('api/contact/addMany', contacts)
            if (response.status === 200) {
                toast.success(`Contacts imported successfully`)
                resetForm();
                navigate('/contacts');
            }
        } catch (e) {
            console.error(e);
            toast.error(`Contacts import failed`)
            resetForm();
            navigate('/contacts');
        }
        finally {
            setIsLoding(false)
        }
    };

    const parseFileData = async (file) => {
        const reader = new FileReader();
        const extension = file.name.split('.').pop().toLowerCase();

        reader.onload = async ({ target }) => {

            if (extension === 'csv') {
                const csv = Papa.parse(target.result, {
                    header: true,
                });
                const parsedData = csv?.data;

                if (parsedData && parsedData.length > 0) {
                    setImportedFileData(parsedData);
                    const fileHeadingFields = Object.keys(parsedData[0]);
                    setImportedFileFields(fileHeadingFields);
                } else {
                    toast.error("Empty or invalid CSV file");
                    navigate("/contacts");
                }

            } else if (extension === 'xlsx') {
                const data = new Uint8Array(target.result);
                const workbook = new ExcelJS.Workbook();

                await workbook.xlsx.load(data);

                const worksheet = workbook.getWorksheet(1);
                const jsonData = [];

                // Iterate over rows and cells
                worksheet.eachRow({ includeEmpty: true }, (row, rowNumber) => {
                    const rowData = {};
                    row.eachCell({ includeEmpty: true }, (cell, colNumber) => {
                        rowData[worksheet.getCell(1, colNumber).value] = cell.value;
                    });
                    jsonData.push(rowData);
                });
                jsonData?.splice(0, 1);
                setImportedFileData(jsonData);

                if (jsonData && jsonData.length > 0) {
                    const fileHeadingFields = Object.keys(jsonData[0]);
                    setImportedFileFields(fileHeadingFields);
                } else {
                    toast.error("Empty or invalid XLSX file");
                    navigate("/contacts");
                }
            }
        };

        if (extension === 'csv') {
            reader.readAsText(file);
        } else if (extension === 'xlsx') {
            const blob = new Blob([file]);
            reader.readAsArrayBuffer(blob);
        }
    };

    useEffect(() => {
        if (fileData && fileData.length > 0) {
            const firstFile = fileData[0];
            parseFileData(firstFile);
        }
    }, [fileData]);


    useEffect(() => {
        const filterContactData = importedFileFields?.filter(field => {
            const result = fieldsInCrm?.find(data => field === data?.accessor || field === data?.Header);
            if (result) {
                setFieldValue(result?.accessor, field);
                return true;
            }
            return false;
        });
        setFilterContact(filterContactData);
    }, [importedFileFields]);

    return (
        <>
            <Card overflowY={"auto"} className="importTable">
                <Text color={"secondaryGray.900"}
                    fontSize="22px"
                    fontWeight="700"
                    mb='20px'
                >Import Contacts</Text>
                <Grid templateColumns="repeat(12, 1fr)" mb={3} pb={2} gap={1} borderBottom={'1px solid #e2e8f0'}>
                    {
                        columns.map((column, index) => (
                            <GridItem key={index} colSpan={{ base: 6 }} fontWeight={'600'} fontSize={{ sm: "14px", lg: "14px" }} color="secondaryGray.900" style={{ textTransform: "uppercase" }}>
                                {column.Header}
                            </GridItem>
                        ))
                    }
                </Grid>
                <Grid templateColumns="repeat(12, 1fr)" mb={3} gap={1} overflowY={'auto'}>
                    {
                        fieldsInCrm?.map((item, index) => (
                            <>
                                <GridItem colSpan={{ base: 6 }} key={item.id} mt='10px'>
                                    {item.Header}
                                </GridItem>
                                <GridItem colSpan={{ base: 4 }}>
                                    <Select
                                        variant="flushed"
                                        fontWeight='500'
                                        isSearchable
                                        value={values[item.accessor]}
                                        name={item.accessor}
                                        onChange={handleChange}
                                    >
                                        <option value=''> {filterContact ? filterContact.find((data) => (item.Header === data || item.accessor === data) && data) ? filterContact.find((data) => (item.Header === data || item.accessor === data) && data) : 'Select Field In File' : 'Select Field In File'}</option>
                                        {
                                            importedFileFields?.map(field => (
                                                <option value={field} key={field}>{field}</option>
                                            ))
                                        }
                                    </Select>
                                </GridItem>
                            </>
                        ))
                    }
                </Grid>

                <Flex Flex justifyContent={'end'} mt='5' >
                    <Button size="sm" onClick={() => handleSubmit()} variant="brand">Save</Button>
                </Flex>
            </Card>
        </>
    )
}

export default ContactImport

================
File: Client/src/views/admin/contact/components/ImportModel.js
================
import { Button, Grid, GridItem, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text } from '@chakra-ui/react'
import Spinner from 'components/spinner/Spinner'
import { useFormik } from 'formik'
import { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import CommonFileUpload from 'components/commonFileUpload'

const ImportModal = (props) => {
    const { onClose, isOpen, text, customFields } = props
    const [isLoding, setIsLoding] = useState(false)
    const navigate = useNavigate();

    const initialValues = {
        contact: ''
    }

    const formik = useFormik({
        initialValues: initialValues,
        onSubmit: (values, { resetForm }) => {
            AddData()
            resetForm();
        },
    });
    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik

    const AddData = async () => {
        try {
            setIsLoding(true)
            resetForm()

            if (values.contact) {
                onClose();
                navigate('/contactImport', { state: { fileData: values.contact, customFields: customFields } });
            }

        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };

    return (
        <Modal onClose={onClose} isOpen={isOpen} isCentered>
            <ModalOverlay />
            <ModalContent>
                <ModalHeader>Import Contacts</ModalHeader>
                <ModalCloseButton />
                <ModalBody>
                    <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                        <GridItem colSpan={{ base: 12 }}>
                            <CommonFileUpload count={values.contact.length} onFileSelect={(file) => setFieldValue('contact', file)} text={text} />
                            <Text mb='10px' color={'red'}> {errors.contact && touched.contact && <>Please Select {text}</>}</Text>
                        </GridItem>
                    </Grid>
                </ModalBody>
                <ModalFooter>
                    <Button size="sm" variant='brand' onClick={handleSubmit} disabled={isLoding ? true : false} >{isLoding ? <Spinner /> : 'Save'}</Button>
                    <Button sx={{
                        marginLeft: 2,
                        textTransform: "capitalize",
                    }} variant="outline"
                        colorScheme="red" size="sm" onClick={() => {
                            onClose()
                            formik.resetForm()
                        }}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    )
}

export default ImportModal

================
File: Client/src/views/admin/contact/components/phonCall.js
================
import {
  Box,
  Button,
  Flex,
  Heading,
  Table,
  Tbody,
  Td,
  Text,
  Th,
  Thead,
  Tr,
  useColorModeValue
} from "@chakra-ui/react";
import moment from 'moment';
import { useMemo, useState } from "react";
import {
  useGlobalFilter,
  usePagination,
  useSortBy,
  useTable,
} from "react-table";

// Custom components
import CountUpComponent from "components/countUpComponent/countUpComponent";
import Pagination from "components/pagination/Pagination";
import { MdOutlineMessage } from "react-icons/md";
import { Link, useNavigate, useParams } from "react-router-dom";
import AddPhoneCall from "../../phoneCall/components/AddPhoneCall";
import { AddIcon } from "@chakra-ui/icons";
import DataNotFound from "components/notFoundData";

export default function PhoneCall(props) {
  const { columnsData, tableData, title, fetchData, callAccess } = props;

  const columns = useMemo(() => columnsData, [columnsData]);
  const data = useMemo(() => tableData, [tableData]);
  const [addModel, setAddModel] = useState(false);
  const user = JSON.parse(localStorage.getItem("user"))
  const [gopageValue, setGopageValue] = useState()
  const tableInstance = useTable(
    {
      columns, data,
      initialState: { pageIndex: 0 }
    },
    useGlobalFilter,
    useSortBy,
    usePagination
  );

  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    prepareRow,
    page,
    canPreviousPage,
    canNextPage,
    pageOptions,
    pageCount,
    gotoPage,
    nextPage,
    previousPage,
    setPageSize,
    state: { pageIndex, pageSize }
  } = tableInstance;

  if (pageOptions.length < gopageValue) {
    setGopageValue(pageOptions.length)
  }
  const textColor = useColorModeValue("gray.500", "white");
  const borderColor = useColorModeValue("gray.200", "whiteAlpha.100");
  const buttonbg = useColorModeValue("gray.200", "white");
  const param = useParams()
  const navigate = useNavigate()
  return (
    <Box
      direction='column'
      w='100%'
      px='0px'
      style={{ border: '1px solid gray.200' }}
      overflowX={{ sm: "scroll", lg: "hidden" }}
    >
      <Flex justify='space-between' mb='10px' align='center'>
        <Heading size="md" mb={3}>
          {title} (<CountUpComponent key={data?.length} targetNumber={data?.length} />)
        </Heading>
        {/* <Menu /> */}
        {!props.text ? callAccess?.create && <Button onClick={() => setAddModel(true)} leftIcon={<AddIcon />} size="sm" colorScheme="gray" bg={buttonbg}>Add New</Button> : <Button onClick={() => navigate('/communication-integration')} size="sm" leftIcon={<MdOutlineMessage />} colorScheme="gray" >send text Msg</Button>}
        <AddPhoneCall lead={props.lead} fetchData={fetchData} isOpen={addModel} onClose={setAddModel} id={param.id} />
      </Flex>
      <Box overflowY={'auto'} className="table-container" >
        <Table  {...getTableProps()} variant='simple' color='gray.500' mb='24px'>
          <Thead >
            {headerGroups?.map((headerGroup, index) => (
              <Tr {...headerGroup.getHeaderGroupProps()} key={index}>
                {headerGroup.headers.map((column, index) => (
                  <Th
                    {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}
                    pe="10px"
                    key={index}
                    borderColor={borderColor}
                  >
                    <Flex
                      justifyContent={column.center ? "center" : "start"}
                      align="center"
                      fontSize={{ sm: "14px", lg: "16px" }}
                      color="secondaryGray.900"
                    >
                      <span style={{ textTransform: "capitalize", marginRight: "8px" }}>
                        {column.render("Header")}
                      </span>
                    </Flex>
                  </Th>
                ))}
              </Tr>
            ))}
          </Thead>
          <Tbody  {...getTableBodyProps()}>
            {data?.length === 0 && (
              <Tr>
                <Td colSpan={columns.length}>
                  <Text textAlign={'center'} width="100%" color={textColor} fontSize="sm" fontWeight="700">
                    <DataNotFound />
                  </Text>
                </Td>
              </Tr>
            )}
            {page?.map((row, index) => {
              prepareRow(row);
              return (
                <Tr {...row?.getRowProps()} key={index}>
                  {row?.cells.map((cell, index) => {
                    let data = "";
                    if (cell?.column.Header === "sender") {
                      data = (
                        <Flex align='center'>
                          <Text fontSize='sm'
                            color={textColor}
                            fontWeight='700'>
                            {cell?.value}
                          </Text>
                        </Flex>
                      );
                    } else if (cell?.column.Header === "recipient") {
                      data = (
                        <Flex align='center'>
                          <Link to={props.text ? `/text-msg/${cell?.row?.original._id}` : `/phone-call/${cell?.row?.original._id}`}>
                            <Text
                              me='10px'
                              sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}
                              color='brand.600'
                              fontSize='sm'
                              fontWeight='700'>
                              {cell?.value}
                            </Text>
                          </Link>
                        </Flex>
                      );
                    } else if (cell?.column.Header === "Created") {
                      data = (
                        <Text color={textColor} fontSize='sm' fontWeight='700'>
                          {moment(cell?.row?.values.timestamp).format('h:mma (DD/MM)')}
                        </Text>
                      );
                    } else if (cell?.column.Header === "time stamp") {
                      data = (
                        <Text color={textColor} fontSize='sm' fontWeight='700'>
                          {moment(cell?.value).fromNow()}
                        </Text>
                      );
                    }
                    return (
                      <Td
                        {...cell?.getCellProps()}
                        key={index}
                        fontSize={{ sm: "14px" }}
                        minW={{ sm: "150px", md: "200px", lg: "auto" }}
                        borderColor='transparent'>
                        {data}
                      </Td>
                    );
                  })}
                </Tr>
              );
            })}
          </Tbody>
        </Table>
      </Box>

      {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage} pageSize={pageSize} pageIndex={pageIndex} />}

    </Box >
  );
}

================
File: Client/src/views/admin/contact/components/propertyModel.js
================
import { Button, Flex, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react'
import Spinner from 'components/spinner/Spinner'
import { useEffect, useState } from 'react'
import { postApi } from 'services/api'
import { fetchPropertyData } from '../../../../redux/slices/propertySlice'
import { useDispatch, useSelector } from 'react-redux'
import CommonCheckTable from 'components/reactTable/checktable'
import { fetchPropertyCustomFiled } from '../../../../redux/slices/propertyCustomFiledSlice'

const PropertyModel = (props) => {
    const { onClose, isOpen, fetchData, id, interestProperty } = props
    const [selectedValues, setSelectedValues] = useState([]);
    const [isLoding, setIsLoding] = useState(false)
    // const [data, setData] = useState([])
    const [propertyData, setPropertyData] = useState([]);
    const [columns, setColumns] = useState([]);

    const dispatch = useDispatch()
    const data = useSelector((state) => state.propertyData.data)

    const fetchCustomDataFields = async () => {
        setIsLoding(true);
        const result = await dispatch(fetchPropertyCustomFiled())
        setPropertyData(result?.payload?.data);

        const tempTableColumns = [
            { Header: "#", accessor: "_id", isSortable: false, width: 10 },
            ...result?.payload?.data?.[0]?.fields?.filter((field) => field?.isTableField === true)?.map((field) => ({ Header: field?.label, accessor: field?.name })),
        ];

        setColumns(tempTableColumns);
        setIsLoding(false);
    }
    const uniqueValues = [...new Set(selectedValues)];

    const handleSubmit = async () => {
        try {
            setIsLoding(true)
            let result = await postApi(`api/contact/add-property-interest/${id}`, uniqueValues);
            if (result && result.status === 200) {
                fetchData()
                onClose()
            }
        }
        catch (e) {
            console.log(e)
        }
        finally {
            setIsLoding(false)
        }
    }
    useEffect(() => {
        dispatch(fetchPropertyData())
        fetchCustomDataFields()
    }, [])

    useEffect(() => {
        interestProperty?.map((item) => setSelectedValues((prevSelectedValues) => [...prevSelectedValues, item]))
    }, [interestProperty])

    return (
        <Modal onClose={onClose} size='full' isOpen={isOpen} >
            <ModalOverlay />
            <ModalContent>
                <ModalHeader>Select Interested Property</ModalHeader>
                <ModalCloseButton />
                <ModalBody>
                    {isLoding ?
                        <Flex justifyContent={'center'} alignItems={'center'} width="100%" >
                            <Spinner />
                        </Flex>
                        :
                        <CommonCheckTable
                            title={'Properties'}
                            isLoding={isLoding}
                            columnData={columns ?? []}
                            // dataColumn={columns ?? []}
                            allData={data ?? []}
                            tableData={data}
                            tableCustomFields={propertyData?.[0]?.fields?.filter((field) => field?.isTableField === true) || []}
                            AdvanceSearch={() => ""}
                            ManageGrid={false}
                            deleteMany={false}
                            selectedValues={selectedValues}
                            setSelectedValues={setSelectedValues}
                            selectType="multiple"
                            customSearch={false}
                        />
                    }
                </ModalBody>
                <ModalFooter>
                    <Button size="sm" variant='brand' onClick={handleSubmit} disabled={isLoding ? true : false}> {isLoding ? <Spinner /> : 'Save'}</Button>
                    <Button size="sm" sx={{
                        marginLeft: 2,
                        textTransform: "capitalize",
                    }} variant="outline"
                        colorScheme="red" onClick={() => onClose()}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>

    )
}

export default PropertyModel

================
File: Client/src/views/admin/contact/components/propertyTable.js
================
import {
  Box, Checkbox,
  Flex, Table,
  Tbody,
  Td,
  Text,
  Th,
  Thead,
  Tr,
  useColorModeValue
} from "@chakra-ui/react";
import { useMemo } from "react";
import {
  useGlobalFilter,
  usePagination,
  useSortBy,
  useTable,
} from "react-table";

// Custom components
import Card from "components/card/Card";
import Pagination from "components/pagination/Pagination";
import { useState } from "react";
import { Link } from "react-router-dom";
import DataNotFound from "components/notFoundData";

export default function PropertyTable(props) {
  const { columnsData, tableData, title, selectedValues, setSelectedValues } = props;

  const columns = useMemo(() => columnsData, [columnsData]);
  const data = useMemo(() => tableData, [tableData]);
  const user = JSON.parse(localStorage.getItem("user"))
  const [gopageValue, setGopageValue] = useState()

  const tableInstance = useTable(
    {
      columns, data,
      initialState: { pageIndex: 0 }
    },
    useGlobalFilter,
    useSortBy,
    usePagination
  );

  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    prepareRow,
    page,
    canPreviousPage,
    canNextPage,
    pageOptions,
    pageCount,
    gotoPage,
    nextPage,
    previousPage,
    setPageSize,
    state: { pageIndex, pageSize }
  } = tableInstance;

  if (pageOptions.length < gopageValue) {
    setGopageValue(pageOptions.length)
  }

  const textColor = useColorModeValue("gray.500", "white");
  const borderColor = useColorModeValue("gray.200", "whiteAlpha.100");

  const handleCheckboxChange = (event, value) => {
    if (event.target.checked) {
      setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);
    } else {
      setSelectedValues((prevSelectedValues) =>
        prevSelectedValues.filter((selectedValue) => selectedValue !== value)
      );
    }
  };


  return (
    <Card
      direction='column'
      w='100%'
      px='0px'
      style={{ border: '1px solid gray.200' }
      }
      overflowX={{ sm: "scroll", lg: "hidden" }}>
      <Box overflowY={'auto'} className="table-container-property" >
        <Table  {...getTableProps()} variant='simple' color='gray.500' mb='24px'>
          <Thead >
            {headerGroups?.map((headerGroup, index) => (
              <Tr {...headerGroup.getHeaderGroupProps()} key={index}>
                {headerGroup.headers.map((column, index) => (
                  <Th
                    {...column.getHeaderProps(column.getSortByToggleProps())}
                    pe='10px'
                    key={index}
                    borderColor={borderColor}>
                    <Flex
                      justify='space-between'
                      align='center'
                      fontSize={{ sm: "14px", lg: "14px" }}
                      color="secondaryGray.900">
                      {column.render("Header")}
                    </Flex>
                  </Th>
                ))}
              </Tr>
            ))}
          </Thead>
          <Tbody  {...getTableBodyProps()}>
            {data?.length === 0 && (
              <Tr>
                <Td colSpan={columns.length}>
                  <Text textAlign={'center'} width="100%" color={textColor} fontSize="sm" fontWeight="700">
                    <DataNotFound />
                  </Text>
                </Td>
              </Tr>
            )}
            {page?.map((row, index) => {
              prepareRow(row);
              return (
                <Tr {...row?.getRowProps()} key={index}>
                  {row?.cells?.map((cell, index) => {
                    let data = "";
                    if (cell?.column.Header === "#") {
                      data = (
                        <Flex align="center">
                          <Checkbox colorScheme="brandScheme" value={selectedValues} isChecked={selectedValues.includes(cell?.value)} onChange={(event) => handleCheckboxChange(event, cell?.value)} me="10px" />
                          <Text color={textColor} fontSize="sm" fontWeight="700">
                            {cell?.row?.index + 1}
                          </Text>
                        </Flex>
                      );
                    } else if (cell?.column.Header === "property Type") {
                      data = (
                        <Link to={user?.role !== 'superAdmin' ? `/propertyView/${cell?.row?.original?._id}` : `/propertyView/${cell?.row?.original?._id}`}>
                          <Text
                            me="10px"
                            sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}
                            color='brand.600'
                            fontSize="sm"
                            fontWeight="700"
                          >
                            {cell?.value}
                          </Text>
                        </Link>
                      );
                    } else if (cell?.column.Header === "property Address") {
                      data = (

                        <Text
                          me="10px"
                          color={textColor}
                          fontSize="sm"
                          fontWeight="700"
                        >
                          {cell?.value}
                        </Text>

                      );
                    } else if (cell?.column.Header === "listing Price") {
                      data = (
                        <Text
                          me="10px"
                          color={textColor}
                          fontSize="sm"
                          fontWeight="700"
                        >
                          {cell?.value}
                        </Text>
                      );
                    } else if (cell?.column.Header === "square Footage") {
                      data = (
                        <Text color={textColor} fontSize="sm" fontWeight="700">
                          {cell?.value}
                        </Text>
                      );
                    } else if (cell?.column.Header === "year Built") {
                      data = (
                        <Text color={textColor} fontSize="sm" fontWeight="700">
                          {cell?.value}
                        </Text>
                      );
                    } else if (cell?.column.Header === "number of Bedrooms") {
                      data = (
                        <Text color={textColor} fontSize="sm" fontWeight="700">
                          {cell?.value}
                        </Text>
                      );
                    } else if (cell?.column.Header === "number of Bathrooms") {
                      data = (
                        <Text color={textColor} fontSize="sm" fontWeight="700">
                          {cell?.value}
                        </Text>
                      );
                    }
                    return (
                      <Td
                        {...cell?.getCellProps()}
                        key={index}
                        fontSize={{ sm: "14px" }}
                        minW={{ sm: "150px", md: "200px", lg: "auto" }}
                        borderColor='transparent'>
                        {data}
                      </Td>
                    );
                  })}
                </Tr>
              );
            })}
          </Tbody>
        </Table>
      </Box>

      {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage} pageSize={pageSize} pageIndex={pageIndex} />}

    </Card >
  );
}

================
File: Client/src/views/admin/contact/Add.js
================
import { CloseIcon } from '@chakra-ui/icons';
import { Button, Drawer, DrawerBody, DrawerContent, DrawerFooter, DrawerHeader, DrawerOverlay, IconButton } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import { useFormik } from 'formik';
import { useState } from 'react';
import { postApi } from 'services/api';
import { generateValidationSchema } from 'utils';
import CustomForm from 'utils/customForm';
import * as yup from 'yup'

const Add = (props) => {
    const [isLoding, setIsLoding] = useState(false)

    const initialFieldValues = Object.fromEntries(
        (props?.contactData?.fields || []).map(field => [field?.name, ''])
    );
    const initialValues = {
        ...initialFieldValues,
        createBy: JSON.parse(localStorage.getItem('user'))._id
    };

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: yup.object().shape(generateValidationSchema(props?.contactData?.fields)),
        onSubmit: (values, { resetForm }) => {
            AddData();
            resetForm();
        },
    });

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, } = formik

    const AddData = async () => {
        try {
            setIsLoding(true)
            let response = await postApi('api/form/add', { ...values, moduleId: props?.contactData?._id })
            if (response.status === 200) {
                props.onClose();
                props.setAction((pre) => !pre)
            }
        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }

    };

    const handleCancel = () => {
        formik.resetForm();
        props.onClose()
    }

    return (
        <div>
            <Drawer isOpen={props.isOpen} size={props.size}>
                <DrawerOverlay />
                <DrawerContent>
                    <DrawerHeader alignItems={"center"} justifyContent='space-between' display='flex' >
                        Add Contact
                        <IconButton onClick={props.onClose} icon={<CloseIcon />} />
                    </DrawerHeader>
                    <DrawerBody>
                        <CustomForm moduleData={props.contactData} values={values} setFieldValue={setFieldValue} handleChange={handleChange} handleBlur={handleBlur} errors={errors} touched={touched} />
                    </DrawerBody>


                    <DrawerFooter>
                        <Button
                            sx={{ textTransform: "capitalize" }}
                            variant="brand"
                            disabled={isLoding ? true : false}
                            type="submit" size="sm"
                            onClick={handleSubmit}
                        >
                            {isLoding ? <Spinner /> : 'Save'}
                        </Button>
                        <Button
                            variant="outline"
                            colorScheme='red' size="sm"
                            sx={{
                                marginLeft: 2,
                                textTransform: "capitalize",
                            }}
                            onClick={handleCancel}
                        >
                            Close
                        </Button>
                    </DrawerFooter>

                </DrawerContent>
            </Drawer>
        </div>
    )
}

export default Add

================
File: Client/src/views/admin/contact/Edit.js
================
import { CloseIcon } from '@chakra-ui/icons';
import { Button, Drawer, DrawerBody, DrawerContent, DrawerFooter, DrawerHeader, DrawerOverlay, Flex, IconButton } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import { useFormik } from 'formik';
import { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { getApi, putApi } from 'services/api';
import { generateValidationSchema } from '../../../utils';
import * as yup from 'yup'
import CustomForm from 'utils/customForm';

const Edit = (props) => {
    const { data } = props;
    const [isLoding, setIsLoding] = useState(false)
    const initialFieldValues = Object.fromEntries(
        (props?.contactData?.fields || []).map(field => [field?.name, ''])
    );

    //     lastName: "",
    //     title: "",
    //     email: "",
    //     phoneNumber: "",
    //     mobileNumber: "",
    //     physicalAddress: "",
    //     mailingAddress: "",
    //     preferredContactMethod: "",
    //     // 2.Lead Source Information
    //     leadSource: "",
    //     referralSource: "",
    //     campaignSource: "",
    //     // 3. Status and Classifications
    //     leadStatus: "",
    //     leadRating: "",
    //     leadConversionProbability: "",
    //     // 4. Property of Interest
    //     // 5. History:
    //     notesandComments: "",
    //     // 6. Tags or Categories
    //     tagsOrLabelsForcategorizingcontacts: "",
    //     // 7. Important Dates::
    //     birthday: "",
    //     anniversary: "",
    //     keyMilestones: "",
    //     // 8. Additional Personal Information
    //     dob: "",
    //     gender: "",
    //     occupation: "",
    //     interestsOrHobbies: "",
    //     // 9. Preferred  Communication Preferences:
    //     communicationFrequency: "",
    //     preferences: "",
    //     // 10. Social Media Profiles:
    //     linkedInProfile: "",
    //     facebookProfile: "",
    //     twitterHandle: "",
    //     otherProfiles: "",
    //     // 11. Lead Assignment and Team Collaboration:
    //     agentOrTeamMember: "",
    //     internalNotesOrComments: "",
    //     createBy: JSON.parse(localStorage.getItem('user'))._id,
    // });
    const [initialValues, setInitialValues] = useState({
        ...initialFieldValues,
        createBy: JSON.parse(localStorage.getItem('user'))._id
    });
    const param = useParams()

    const formik = useFormik({
        initialValues: initialValues,
        enableReinitialize: true,
        validationSchema: yup.object().shape(generateValidationSchema(props?.contactData?.fields)),
        onSubmit: (values, { resetForm }) => {
            EditData();
        },
    });

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, } = formik

    const EditData = async () => {
        try {
            setIsLoding(true)
            let response = await putApi(`api/form/edit/${props?.selectedId || param.id}`, { ...values, moduleId: props?.moduleId })
            if (response.status === 200) {
                props.onClose();
                props.setAction((pre) => !pre)
            }
        } catch (e) {
            console.log(e);
        } finally {
            setIsLoding(false)
        }
    };

    const handleClose = () => {
        props.onClose(false)
        props.setSelectedId && props?.setSelectedId()
    }
    let response
    const fetchData = async () => {
        if (data) {
            setInitialValues((prev) => ({ ...prev, ...data }))
        } else if (props?.selectedId || param.id) {
            try {
                setIsLoding(true)
                response = await getApi('api/contact/view/', props?.selectedId ? props?.selectedId : param.id)
                setInitialValues((prev) => ({ ...prev, ...response?.data?.contact }))
            } catch (e) {
                console.error(e)
            } finally {
                setIsLoding(false)
            }
        }
    }
    useEffect(() => {
        fetchData()
    }, [props?.selectedId, data])

    return (
        <div>
            <Drawer isOpen={props.isOpen} size={props.size}>
                <DrawerOverlay />
                <DrawerContent>
                    <DrawerHeader alignItems={"center"} justifyContent='space-between' display='flex' >
                        Edit Contact
                        <IconButton onClick={handleClose} icon={<CloseIcon />} />
                    </DrawerHeader>
                    <DrawerBody>
                        {isLoding ?
                            <Flex justifyContent={'center'} alignItems={'center'} width="100%" >
                                <Spinner />
                            </Flex>
                            :

                            <CustomForm moduleData={props.contactData} values={values} setFieldValue={setFieldValue} handleChange={handleChange} handleBlur={handleBlur} errors={errors} touched={touched} />

                        }
                    </DrawerBody>

                    <DrawerFooter>
                        <Button
                            sx={{ textTransform: "capitalize" }}
                            variant="brand"
                            type="submit" size="sm"
                            disabled={isLoding ? true : false}
                            onClick={handleSubmit}
                        >
                            {isLoding ? <Spinner /> : 'Update'}
                        </Button>
                        <Button
                            variant="outline"
                            colorScheme='red' size="sm"
                            sx={{
                                marginLeft: 2,
                                textTransform: "capitalize",
                            }}
                            onClick={handleClose}
                        >
                            Close
                        </Button>
                    </DrawerFooter>
                </DrawerContent>
            </Drawer>
        </div>
    )
}

export default Edit

================
File: Client/src/views/admin/contact/index.js
================
import { useEffect, useState } from 'react';
import { useNavigate } from "react-router-dom";
import { Grid, GridItem, Text, useDisclosure, Menu, MenuButton, MenuItem, MenuList } from '@chakra-ui/react';
import { DeleteIcon, ViewIcon, EditIcon, EmailIcon, PhoneIcon } from "@chakra-ui/icons";
import { CiMenuKebab } from "react-icons/ci";
import { getApi } from 'services/api';
import Add from "./Add";
import Edit from './Edit';
import AddEmailHistory from "../emailHistory/components/AddEmail";
import AddPhoneCall from "../phoneCall/components/AddPhoneCall";
import { HasAccess } from "../../../redux/accessUtils";
import CommonCheckTable from "../../../components/reactTable/checktable";
import ImportModal from "./components/ImportModel";
import CommonDeleteModel from 'components/commonDeleteModel';
import { deleteManyApi } from 'services/api';
import { fetchContactData } from '../../../redux/slices/contactSlice';
import { useDispatch, useSelector } from 'react-redux';
import { fetchContactCustomFiled } from '../../../redux/slices/contactCustomFiledSlice';
import { toast } from 'react-toastify';

const Index = () => {
    const navigate = useNavigate();
    const [permission, emailAccess, callAccess] = HasAccess(['Contacts', 'Emails', 'Calls']);
    const { isOpen, onOpen, onClose } = useDisclosure();
    const dispatch = useDispatch();

    const [isLoding, setIsLoding] = useState(false);
    const [action, setAction] = useState(false);
    const [columns, setColumns] = useState([]);
    const [contactData, setContactData] = useState([]);
    const [edit, setEdit] = useState(false);
    const [deleteModel, setDelete] = useState(false);
    const [addPhoneCall, setAddPhoneCall] = useState(false);
    const [callSelectedId, setCallSelectedId] = useState();
    const [addEmailHistory, setAddEmailHistory] = useState(false);
    const [selectedId, setSelectedId] = useState();
    const [selectedValues, setSelectedValues] = useState([]);
    const [isImportContact, setIsImport] = useState(false);
    const [emailRec, setEmailRec] = useState('');
    const [phoneRec, setPhoneRec] = useState({});

    const data = useSelector((state) => state?.contactData?.data)

    const handleOpenEmail = (id, dataContact) => {
        if (id) {
            setEmailRec(dataContact?.email);
            setAddEmailHistory(true);
        }
    }

    const fetchCustomDataFields = async () => {
        setIsLoding(true);
        const result = await dispatch(fetchContactCustomFiled());
        if (result?.payload?.status === 200) {
            setContactData(result?.payload?.data);
        } else {
            toast.error("Failed to fetch data", "error");
        }
        const actionHeader = {
            Header: "Action", accessor: "action", isSortable: false, center: true,
            cell: ({ row }) => (
                <Text fontSize="md" fontWeight="900" textAlign={"center"} >
                    <Menu isLazy  >
                        <MenuButton><CiMenuKebab /></MenuButton>
                        <MenuList minW={'fit-content'} transform={"translate(1520px, 173px);"}>
                            {permission?.update &&
                                <MenuItem py={2.5} icon={<EditIcon fontSize={15} mb={1} />} onClick={() => { setEdit(true); setSelectedId(row?.values?._id); }}>Edit</MenuItem>}
                            {callAccess?.create &&
                                <MenuItem py={2.5} width={"165px"} onClick={() => { setPhoneRec(row?.original); setAddPhoneCall(true); setCallSelectedId(row?.values?._id); }} icon={<PhoneIcon fontSize={15} mb={1} />}>Create Call</MenuItem>}
                            {emailAccess?.create &&
                                <MenuItem py={2.5} width={"165px"} onClick={() => {
                                    handleOpenEmail(row?.values?._id, row?.original); setSelectedId(row?.values?._id)
                                }} icon={<EmailIcon fontSize={15} mb={1} />}>Send Email</MenuItem>}
                            {permission?.view &&
                                <MenuItem py={2.5} color={'green'} icon={<ViewIcon mb={1} fontSize={15} />} onClick={() => { navigate(`/contactView/${row?.values?._id}`) }}>View</MenuItem>}
                            {permission?.delete &&
                                <MenuItem py={2.5} color={'red'} icon={<DeleteIcon fontSize={15} mb={1} />} onClick={() => { setDelete(true); setSelectedValues([row?.values?._id]); }}>Delete</MenuItem>}
                        </MenuList>
                    </Menu>
                </Text>
            )
        };

        const tempTableColumns = [
            { Header: "#", accessor: "_id", isSortable: false, width: 10 },
            ...(result?.payload?.data && result.payload.data.length > 0
                ? result.payload.data[0]?.fields
                    ?.filter((field) => field?.isTableField === true && field?.isView)
                    ?.map(
                        (field) => ({
                            Header: field?.label,
                            accessor: field?.name,
                            cell: (cell) => (
                                <div className="selectOpt">
                                    <Text
                                        onClick={() => {
                                            navigate(`/contactView/${cell?.row?.original?._id}`);
                                        }}
                                        me="10px"
                                        sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' }, cursor: 'pointer' }}
                                        color='brand.600'
                                        fontSize="sm"
                                        fontWeight="700"
                                    >
                                        {cell?.value || "-"}
                                    </Text>
                                </div>
                            ),
                        })
                    ) || []
                : []),
            ...(result?.payload?.data?.[0]?.fields || []) // Check if fields is defined, if not, use empty array
                .filter(field => field?.isTableField === true && !field?.isView) // Filter out fields where isTableField is true
                .map(field => ({ Header: field?.label, accessor: field?.name })),
            ...(permission?.update || permission?.view || permission?.delete ? [actionHeader] : [])
        ];

        setColumns(tempTableColumns);
        setIsLoding(false);
    };

    const handleDeleteContact = async (ids) => {
        try {
            setIsLoding(true)
            let response = await deleteManyApi('api/contact/deleteMany', ids)
            if (response.status === 200) {
                setSelectedValues([])
                setDelete(false)
                setAction((pre) => !pre)
            }
        } catch (error) {
            console.log(error)
        }
        finally {
            setIsLoding(false)
        }
    }

    useEffect(async () => {
        // fetchData();
        await dispatch(fetchContactData())
        fetchCustomDataFields();
    }, [action]);

    return (
        <div>
            <Grid templateColumns="repeat(6, 1fr)" mb={3} gap={4}>
                {!isLoding &&
                    <GridItem colSpan={6}>
                        <CommonCheckTable
                            title={"Contacts"}
                            isLoding={isLoding}
                            columnData={columns ?? []}
                            // dataColumn={dataColumn ?? []}
                            allData={data ?? []}
                            tableData={data}
                            tableCustomFields={contactData?.[0]?.fields?.filter((field) => field?.isTableField === true) || []}
                            access={permission}
                            // action={action}
                            // setAction={setAction}
                            // selectedColumns={selectedColumns}
                            // setSelectedColumns={setSelectedColumns}
                            // isOpen={isOpen}
                            // onClose={onclose}
                            onOpen={onOpen}
                            selectedValues={selectedValues}
                            setSelectedValues={setSelectedValues}
                            setDelete={setDelete}
                            setIsImport={setIsImport}
                        />
                    </GridItem>
                }
            </Grid>

            {isOpen && <Add isOpen={isOpen} size={"lg"} contactData={contactData[0]} onClose={onClose} setAction={setAction} action={action} />}
            {edit && <Edit isOpen={edit} size={"lg"} contactData={contactData[0]} selectedId={selectedId} setSelectedId={setSelectedId} onClose={setEdit} setAction={setAction} moduleId={contactData?.[0]?._id} />}
            {deleteModel && <CommonDeleteModel isOpen={deleteModel} onClose={() => setDelete(false)} type='Contacts' handleDeleteData={handleDeleteContact} ids={selectedValues} />}
            {addEmailHistory && <AddEmailHistory fetchData={fetchContactData} isOpen={addEmailHistory} onClose={setAddEmailHistory} id={selectedId} contactEmail={emailRec} />}
            {addPhoneCall && <AddPhoneCall fetchData={fetchContactData} isOpen={addPhoneCall} onClose={setAddPhoneCall} id={callSelectedId} cData={phoneRec} />}
            {isImportContact && <ImportModal text='Contact file' isOpen={isImportContact} onClose={setIsImport} customFields={contactData?.[0]?.fields || []} />}

        </div>
    )
}

export default Index

================
File: Client/src/views/admin/contact/View.js
================
import { AddIcon, ChevronDownIcon, DeleteIcon, EditIcon } from "@chakra-ui/icons";
import { Box, Button, Flex, Grid, GridItem, Heading, IconButton, Menu, MenuButton, MenuDivider, MenuItem, MenuList, Tab, TabList, TabPanel, TabPanels, Tabs, Text, VStack, useColorModeValue, useDisclosure } from "@chakra-ui/react";
import FolderTreeView from 'components/FolderTreeView/folderTreeView';
import Card from "components/card/Card";
import { HSeparator } from "components/separator/Separator";
import Spinner from "components/spinner/Spinner";
import { constant } from "constant";
import { useEffect, useState } from "react";
import { BiLink, BiLogoLinkedin } from "react-icons/bi";
import { BsTwitter } from "react-icons/bs";
import { FaFacebook } from "react-icons/fa";
import { IoIosArrowBack } from "react-icons/io";
import { LuBuilding2 } from "react-icons/lu";
import { Link, useNavigate, useParams } from "react-router-dom";
import { toast } from "react-toastify";
import { getApi } from "services/api";
import AddEmailHistory from "../emailHistory/components/AddEmail";
import AddMeeting from "../meeting/components/Addmeeting";
import AddPhoneCall from "../phoneCall/components/AddPhoneCall";
import Add from "./Add";
import Edit from "./Edit";
import PhoneCall from "./components/phonCall";
import PropertyModel from "./components/propertyModel";
import PropertyTable from "./components/propertyTable";
import { HasAccess } from "../../../redux/accessUtils";
import DataNotFound from "components/notFoundData";
import CustomView from "utils/customView";
import AddDocumentModal from "utils/addDocumentModal";
import CommonDeleteModel from "components/commonDeleteModel";
import { deleteApi } from "services/api";
import CommonCheckTable from "components/reactTable/checktable";
import moment from 'moment';
import AddEdit from '../task/components/AddEdit'
import { useDispatch, useSelector } from "react-redux";
import { fetchContactCustomFiled } from '../../../redux/slices/contactCustomFiledSlice';
import { fetchPropertyCustomFiled } from "../../../redux/slices/propertyCustomFiledSlice";
import html2pdf from "html2pdf.js";
import { FaFilePdf } from "react-icons/fa";
import AddEditQuotes from '../quotes/AddEdit'
import AddEditInvoice from '../invoice/AddEdit'
const View = () => {

    const param = useParams()
    const textColor = useColorModeValue("gray.500", "white");

    const user = JSON.parse(localStorage.getItem("user"));
    const buttonbg = useColorModeValue("gray.200", "white");
    const [data, setData] = useState([])
    const [allData, setAllData] = useState([]);
    // const [contactData, setContactData] = useState([]);
    const { isOpen, onOpen, onClose } = useDisclosure()
    const [edit, setEdit] = useState(false);
    const [deleteModel, setDelete] = useState(false);
    const [propertyModel, setPropertyModel] = useState(false);
    const [isLoding, setIsLoding] = useState(false)
    const [action, setAction] = useState(false)

    const [taskModel, setTaskModel] = useState(false);
    const [addEmailHistory, setAddEmailHistory] = useState(false);
    const [addPhoneCall, setAddPhoneCall] = useState(false);
    const [addQuotes, setAddQuotes] = useState(false);
    const [addInvoice, setAddInvoice] = useState(false);
    const [addMeeting, setMeeting] = useState(false);
    const [showEmail, setShowEmail] = useState(false);
    const [showCall, setShowCall] = useState(false);
    const [showTasks, setShowTasks] = useState(false);
    const [showMeetings, setShowMeetings] = useState(false);
    const [showQuotes, setShowQuotes] = useState(false);
    const [showInvoices, setShowInvoices] = useState(false);
    const [addDocument, setAddDocument] = useState(false);

    const [selectedTab, setSelectedTab] = useState(0);
    const size = "lg";
    const navigate = useNavigate()
    const dispatch = useDispatch()

    const contactData = useSelector((state) => state?.contactCustomFiled?.data?.data)

    const [propertyData, setPropertyData] = useState([]);
    const [columns, setColumns] = useState([]);
    const [permission, callAccess, emailAccess, taskAccess, meetingAccess, quotesAccess, invoicesAccess, accountAccess] = HasAccess(['Contacts', 'Calls', 'Emails', 'Tasks', 'Meetings', 'Quotes', 'Invoices', 'Account']);
    const columnsDataColumns = [
        { Header: "sender", accessor: "senderName", },
        {
            Header: "recipient", accessor: "createByName", cell: (cell) => (
                <Link to={`/Email/${cell?.row?.original?._id}`}>
                    <Text
                        me="10px"
                        sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}
                        color='brand.600'
                        fontSize="sm"
                        fontWeight="700"
                    >
                        {cell?.value || '-'}
                    </Text>
                </Link>)
        },
        {
            Header: "time stamp", accessor: "timestamp",
            cell: (cell) => (
                <div className="selectOpt">
                    <Text color={textColor} fontSize='sm' fontWeight='700'>
                        {moment(cell?.value).fromNow()}
                    </Text>
                </div>
            )
        },
        {
            Header: "Created", accessor: "createBy",
            cell: (cell) => (
                <div className="selectOpt">
                    <Text color={textColor} fontSize='sm' fontWeight='700'>
                        {moment(cell?.row?.values.timestamp).format('h:mma (DD/MM)')}
                    </Text>
                </div>
            )
        },
    ];
    const callColumns = [
        { Header: "sender", accessor: "senderName", },
        {
            Header: "recipient", accessor: "createByName", cell: (cell) => (
                <Link to={`/phone-call/${cell?.row?.original?._id}`}>
                    <Text
                        me="10px"
                        sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}
                        color='brand.600'
                        fontSize="sm"
                        fontWeight="700"
                    >
                        {cell?.value || '-'}
                    </Text>
                </Link>)
        },
        {
            Header: "time stamp", accessor: "timestamp",
            cell: (cell) => (
                <div className="selectOpt">
                    <Text color={textColor} fontSize='sm' fontWeight='700'>
                        {moment(cell?.value).fromNow()}
                    </Text>
                </div>
            )
        },
        {
            Header: "Created", accessor: "createBy",
            cell: (cell) => (
                <div className="selectOpt">
                    <Text color={textColor} fontSize='sm' fontWeight='700'>
                        {moment(cell?.row?.values.timestamp).format('h:mma (DD/MM)')}
                    </Text>
                </div>
            )
        },
    ];

    const PropertyColumn = [
        { Header: 'property Type', accessor: 'propertyType' },
        { Header: "property Address", accessor: "propertyAddress", },
        { Header: "listing Price", accessor: "listingPrice", },
        { Header: "square Footage", accessor: "squareFootage", },
        { Header: "year Built", accessor: "yearBuilt", },
    ];
    const fetchCustomDataFields = async () => {
        setIsLoding(true);
        const result = await dispatch(fetchPropertyCustomFiled())
        setPropertyData(result?.payload?.data);

        const tempTableColumns = [
            { Header: "#", accessor: "_id", isSortable: false, width: 10 },
            ...result?.payload?.data?.[0]?.fields?.filter((field) => field?.isTableField === true)?.map((field) => ({ Header: field?.label, accessor: field?.name })),
        ];

        setColumns(tempTableColumns);
        setIsLoding(false);
    }
    const MeetingColumns = [
        {
            Header: 'agenda', accessor: 'agenda', cell: (cell) => (
                <Link to={`/metting/${cell?.row?.original?._id}`}>
                    <Text
                        me="10px"
                        sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}
                        color='brand.600'
                        fontSize="sm"
                        fontWeight="700"
                    >
                        {cell?.value || '-'}
                    </Text>
                </Link>)
        },
        { Header: "date Time", accessor: "dateTime", },
        {
            Header: "times tamp", accessor: "timestamp",
            cell: (cell) => (
                <div className="selectOpt">
                    <Text color={textColor} fontSize='sm' fontWeight='700'>
                        {moment(cell?.value).fromNow()}
                    </Text>
                </div>
            )
        },
        { Header: "create By", accessor: "createdByName", },
    ];
    const quotesColumns = [
        { Header: "Quote Number", accessor: "quoteNumber", isSortable: false, width: 10 },
        {
            Header: 'Title', accessor: 'title', cell: (cell) => (
                <div className="selectOpt">
                    <Text
                        onClick={() => navigate(`/quotesView/${cell?.row?.original._id}`)}
                        me="10px"
                        sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' }, cursor: 'pointer' }}
                        color='brand.600'
                        fontSize="sm"
                        fontWeight="700"
                    >
                        {cell?.value}
                    </Text>
                </div>
            )
        },
        { Header: 'Quote Stage', accessor: 'quoteStage' },
        {
            Header: 'Contact', accessor: 'contact',
            cell: (cell) => (
                <Text
                >
                    {cell?.row?.original?.contactName ? cell?.row?.original?.contactName : "-"}
                </Text>
            )
        },
        {
            Header: 'Account', accessor: 'account',
            cell: (cell) => (
                (user.role === 'superAdmin' || accountAccess?.view) ?
                    <div className="selectOpt">
                        <Text
                            onClick={() => navigate(cell?.row?.original.account !== null && `/accountView/${cell?.row?.original.account}`)}
                            me="10px"
                            sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' }, cursor: 'pointer' }}
                            color='brand.600'
                            fontSize="sm"
                            fontWeight="700"
                        >
                            {cell?.row?.original?.accountName ? cell?.row?.original?.accountName : "-"}
                        </Text>
                    </div>
                    :
                    <Text
                    >
                        {cell?.row?.original?.accountName ? cell?.row?.original?.accountName : "-"}
                    </Text>
            )
        },
        {
            Header: "Grand Total",
            accessor: "grandTotal",
            cell: (cell) => (
                <div className="selectOpt">
                    <Text
                    >
                        {cell?.row?.original?.grandTotal ? `$${cell?.row?.original?.grandTotal}` : '-'}
                    </Text>
                </div>
            )
        },
        { Header: "valid Until", accessor: "validUntil" },
    ];
    const invoicesColumns = [
        { Header: "Invoice Number", accessor: "invoiceNumber", isSortable: false, width: 10 },
        {
            Header: 'Title', accessor: 'title', cell: (cell) => (
                <div className="selectOpt">
                    <Text
                        onClick={() => navigate(`/invoicesView/${cell?.row?.original._id}`)}
                        me="10px"
                        sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' }, cursor: 'pointer' }}
                        color='brand.600'
                        fontSize="sm"
                        fontWeight="700"
                    >
                        {cell?.value}
                    </Text>
                </div>
            )
        },
        {
            Header: 'Status', accessor: 'status',
        },
        {
            Header: 'Contact', accessor: 'contact',
            cell: (cell) => (
                <Text
                >
                    {cell?.row?.original?.contactName ? cell?.row?.original?.contactName : "-"}
                </Text>
            )
        },
        {
            Header: 'Account', accessor: 'account',
            cell: (cell) => (
                (user.role === 'superAdmin' || accountAccess?.view) ?
                    <div className="selectOpt">
                        <Text
                            onClick={() => navigate(cell?.row?.original.account !== null && `/accountView/${cell?.row?.original.account}`)}
                            me="10px"
                            sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' }, cursor: 'pointer' }}
                            color='brand.600'
                            fontSize="sm"
                            fontWeight="700"
                        >
                            {cell?.row?.original?.accountName ? cell?.row?.original?.accountName : "-"}
                        </Text>
                    </div>
                    :
                    <Text
                    >
                        {cell?.row?.original?.accountName ? cell?.row?.original?.accountName : "-"}
                    </Text>
            )
        },
        {
            Header: "Grand Total",
            accessor: "grandTotal",
            cell: (cell) => (
                <div className="selectOpt">
                    <Text>
                        {cell?.row?.original?.grandTotal ? `$${cell?.row?.original?.grandTotal}` : '-'}
                    </Text>
                </div>
            )
        },
    ];



    const taskColumns = [
        {
            Header: "Title", accessor: "title", cell: (cell) => (
                <Link to={`/view/${cell?.row?.original?._id}`}>
                    <Text
                        me="10px"
                        sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}
                        color='brand.600'
                        fontSize="sm"
                        fontWeight="700"
                    >
                        {cell?.value || '-'}
                    </Text>
                </Link>)
        },
        { Header: "Category", accessor: "category", },
        { Header: "Assign To", accessor: "assignToName", },
        { Header: "Start Date", accessor: "start", },
        { Header: "End Date", accessor: "end", },
    ];

    const handleTabChange = (index) => {
        setSelectedTab(index);
    };

    const generatePDF = () => {
        const element = document.getElementById("reports");
        if (element) {
            element.style.display = 'block';
            element.style.width = '100%'; // Adjust width for mobile
            element.style.height = 'auto';
            // setTimeout(() => {
            html2pdf()
                .from(element)
                .set({
                    margin: [0, 0, 0, 0],
                    filename: `Contact_Details_${moment().format("DD-MM-YYYY")}.pdf`,
                    image: { type: "jpeg", quality: 0.98 },
                    html2canvas: { scale: 2, useCORS: true, allowTaint: true },
                    jsPDF: { unit: "in", format: "letter", orientation: "portrait" },
                })
                .save().then(() => {
                    element.style.display = '';
                })
            // }, 500);
        } else {
            console.error("Element with ID 'reports' not found.");
        }
    };

    const download = async (data) => {
        if (data) {
            let result = await getApi(`api/document/download/`, data)
            if (result && result.status === 200) {
                window.open(`${constant.baseUrl}api/document/download/${data}`)
                toast.success('file Download successful')
            } else if (result && result.response.status === 404) {
                toast.error('file Not Found')
            }
        }
    }

    const fetchData = async (i) => {
        setIsLoding(true)
        let response = await getApi('api/contact/view/', param.id)
        setData(response.data?.contact);
        setAllData(response?.data);
        setIsLoding(false)
        setSelectedTab(i)
    }

    const handleDeleteContact = async (id) => {
        try {
            setIsLoding(true)
            let response = await deleteApi('api/contact/delete/', id)
            if (response.status === 200) {
                setDelete(false)
                setAction((pre) => !pre)
                navigate('/contacts')
            }
        } catch (error) {
            console.log(error)
        }
        finally {
            setIsLoding(false)
        }
    }

    useEffect(() => {
        fetchData()
    }, [action])

    useEffect(() => {
        fetchCustomDataFields()
    }, [])

    function toCamelCase(text) {
        return text?.replace(/([a-z])([A-Z])/g, '$1 $2');
    }

    useEffect(() => {
        dispatch(fetchContactCustomFiled())
    }, [])

    const firstValue = Object?.values(param)[0];
    const splitValue = firstValue?.split('/')

    return (
        <>
            {isLoding ?
                <Flex justifyContent={'center'} alignItems={'center'} width="100%" >
                    <Spinner />
                </Flex> : <>
                    <Heading size="lg" mt={0} m={3}>
                        {data?.fullName || ""}
                    </Heading>
                    <Tabs onChange={handleTabChange} index={selectedTab}>
                        <Grid templateColumns="repeat(12, 1fr)" mb={3} gap={1}>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <TabList sx={{
                                    width: '100%',
                                    overflowX: 'auto',
                                    border: "none",
                                    '& button:focus': { boxShadow: 'none', },
                                    '& button': {
                                        margin: { sm: "0 3px", md: "0 5px" }, padding: { sm: "5px", md: "8px" }, fontSize: { sm: "12px", md: "16px" }, border: '2px solid #8080803d', borderTopLeftRadius: "10px", borderTopRightRadius: "10px", borderBottom: 0
                                    },
                                    '& button[aria-selected="true"]': {
                                        border: "2px solid brand.200", borderBottom: 0, zIndex: '0'
                                    },
                                }} >
                                    <Tab >Information</Tab>
                                    {(emailAccess?.view || callAccess?.view || taskAccess?.view || meetingAccess?.view) && <Tab> Communication</Tab>}
                                    <Tab>Document</Tab>
                                </TabList>

                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }} mt={{ sm: "3px", md: "5px" }} >
                                <Flex justifyContent={"right"}>
                                    <Menu>
                                        {(user.role === 'superAdmin' || permission?.create || permission?.update || permission?.delete) && <MenuButton size="sm" variant="outline" colorScheme='blackAlpha' va mr={2.5} as={Button} rightIcon={<ChevronDownIcon />}>
                                            Actions
                                        </MenuButton>}
                                        <MenuDivider />
                                        <MenuList minWidth={2} zIndex={"99"}>
                                            {(user.role === 'superAdmin' || permission?.create) && <MenuItem alignItems={'start'} onClick={() => onOpen()} color={'blue'} icon={<AddIcon />}>Add</MenuItem>}
                                            {(user.role === 'superAdmin' || permission?.update) && <MenuItem alignItems={'start'} onClick={() => setEdit(true)} icon={<EditIcon />}>Edit</MenuItem>}
                                            <MenuItem onClick={generatePDF} alignItems={"start"} icon={<FaFilePdf />} display={"flex"} style={{ alignItems: "center" }}>Print as PDF</MenuItem >

                                            {(user.role === 'superAdmin' || permission?.delete) &&
                                                <>
                                                    <MenuDivider />
                                                    <MenuItem alignItems={'start'} onClick={() => setDelete(true)} color={'red'} icon={<DeleteIcon />}>Delete</MenuItem>
                                                </>
                                            }
                                        </MenuList>
                                    </Menu>
                                    <Link to="/contacts">
                                        <Button leftIcon={<IoIosArrowBack />} size="sm" variant="brand">
                                            Back
                                        </Button>
                                    </Link>
                                </Flex>
                            </GridItem>
                        </Grid>
                        <TabPanels>
                            <TabPanel pt={4} p={0}>
                                <CustomView data={contactData?.[0]} fieldData={data} toCamelCase={toCamelCase} moduleId={contactData?.[0]?._id} fetchData={fetchData} id="reports" />
                                <GridItem colSpan={{ base: 12 }} mt={4}>
                                    <Card >
                                        <Grid templateColumns={{ base: "1fr" }} gap={4}>
                                            <GridItem colSpan={2}>
                                                <Box>
                                                    <Flex alignItems={'center'} mb={2} justifyContent={'space-between'}>
                                                        <Heading size="md">
                                                            Property of Interest ({allData?.interestProperty?.interestProperty?.length})
                                                        </Heading>
                                                        <Button onClick={() => setPropertyModel(true)} leftIcon={<LuBuilding2 />} size="sm" colorScheme="gray" bg={buttonbg}>Select Interested Property  </Button>
                                                    </Flex>
                                                </Box>

                                                <Grid templateColumns={'repeat(2, 1fr)'} gap={4}>
                                                    <GridItem colSpan={{ base: 2 }}>
                                                        {/* <PropertyTable fetchData={fetchData} columnsData={PropertyColumn} tableData={allData?.interestProperty?.interestProperty?.length > 0 ? allData?.interestProperty?.interestProperty : []} title={'Interested Property'} /> */}
                                                        <CommonCheckTable
                                                            isLoding={isLoding}
                                                            columnData={columns ?? []}
                                                            dataColumn={columns ?? []}
                                                            allData={allData?.interestProperty?.interestProperty || []}
                                                            tableData={allData?.interestProperty?.interestProperty || []}
                                                            tableCustomFields={propertyData?.[0]?.fields?.filter((field) => field?.isTableField === true) || []}
                                                            AdvanceSearch={() => ""}
                                                            ManageGrid={false}
                                                            deleteMany={false}
                                                            selectType="multiple"
                                                            customSearch={false}
                                                            checkBox={false}
                                                        />
                                                    </GridItem>
                                                </Grid>
                                            </GridItem>
                                        </Grid>
                                    </Card>
                                </GridItem>

                            </TabPanel>
                            <TabPanel pt={4} p={0}>
                                <GridItem colSpan={{ base: 12 }} >
                                    <Grid templateColumns={{ base: "1fr" }} gap={4}>
                                        <Grid templateColumns={'repeat(12, 1fr)'} gap={4}>
                                            {emailAccess?.view && <GridItem colSpan={{ base: 12, md: 6 }}>
                                                <Card overflow={'scroll'}>
                                                    <CommonCheckTable
                                                        title={"Email"}
                                                        isLoding={isLoding}
                                                        columnData={columnsDataColumns ?? []}
                                                        // dataColumn={columnsDataColumns ?? []}
                                                        allData={showEmail ? allData.EmailHistory : allData?.EmailHistory?.length > 0 ? [allData.EmailHistory[0]] : []}
                                                        tableData={showEmail ? allData.EmailHistory : allData?.EmailHistory?.length > 0 ? [allData.EmailHistory[0]] : []}
                                                        AdvanceSearch={false}
                                                        dataLength={allData?.EmailHistory?.length}
                                                        tableCustomFields={[]}
                                                        checkBox={false}
                                                        deleteMany={true}
                                                        ManageGrid={false}
                                                        onOpen={() => setAddEmailHistory(true)}
                                                        access={emailAccess}
                                                    />
                                                    {allData?.EmailHistory?.length > 1 &&
                                                        <div style={{ display: "flex", justifyContent: "end" }}>
                                                            <Button colorScheme="brand" variant="outline" size='sm' display="flex" justifyContant="end" onClick={() => showEmail ? setShowEmail(false) : setShowEmail(true)}>{showEmail ? "Show less" : "Show more"}</Button>
                                                        </div>}
                                                </Card>
                                            </GridItem>}
                                            {callAccess?.view && <GridItem colSpan={{ base: 12, md: 6 }}>
                                                <Card overflow={'scroll'}>
                                                    <CommonCheckTable
                                                        title={"Call"}
                                                        isLoding={isLoding}
                                                        columnData={callColumns ?? []}
                                                        // dataColumn={callColumns ?? []}
                                                        allData={showCall ? allData?.phoneCallHistory : allData?.phoneCallHistory?.length > 0 ? [allData?.phoneCallHistory[0]] : []}
                                                        tableData={showCall ? allData?.phoneCallHistory : allData?.phoneCallHistory?.length > 0 ? [allData?.phoneCallHistory[0]] : []}
                                                        AdvanceSearch={false}
                                                        tableCustomFields={[]}
                                                        dataLength={allData?.phoneCallHistory?.length}
                                                        checkBox={false}
                                                        deleteMany={true}
                                                        ManageGrid={false}
                                                        onOpen={() => setAddPhoneCall(true)}
                                                        access={callAccess}
                                                    />
                                                    {allData?.phoneCallHistory?.length > 1 && <div style={{ display: "flex", justifyContent: "end" }}>
                                                        <Button colorScheme="brand" variant="outline" size='sm' display="flex" justifyContant="end" onClick={() => showCall ? setShowCall(false) : setShowCall(true)}>{showCall ? "Show less" : "Show more"}</Button>
                                                    </div>}
                                                </Card>
                                            </GridItem>}
                                            {taskAccess?.view && <GridItem colSpan={{ base: 12, md: 6 }}>
                                                <Card overflow={'scroll'}>
                                                    <CommonCheckTable
                                                        title={"Task"}
                                                        isLoding={isLoding}
                                                        columnData={taskColumns ?? []}
                                                        // dataColumn={taskColumns ?? []}
                                                        allData={showTasks ? allData?.task : allData?.task?.length > 0 ? [allData?.task[0]] : []}
                                                        tableData={showTasks ? allData?.task : allData?.task?.length > 0 ? [allData?.task[0]] : []}
                                                        AdvanceSearch={false}
                                                        dataLength={allData?.task?.length}
                                                        tableCustomFields={[]}
                                                        checkBox={false}
                                                        deleteMany={true}
                                                        ManageGrid={false}
                                                        onOpen={() => setTaskModel(true)}
                                                        access={taskAccess}
                                                    />
                                                    {allData?.task?.length > 1 && <div style={{ display: "flex", justifyContent: "end" }}>
                                                        <Button colorScheme="brand" variant="outline" size='sm' display="flex" justifyContant="end" onClick={() => showTasks ? setShowTasks(false) : setShowTasks(true)}>{showTasks ? "Show less" : "Show more"}</Button>
                                                    </div>}
                                                </Card>
                                            </GridItem>}
                                            {meetingAccess?.view && <GridItem colSpan={{ base: 12, md: 6 }}>
                                                <Card overflow={'scroll'}>
                                                    <CommonCheckTable
                                                        title={"Meeting"}
                                                        isLoding={isLoding}
                                                        columnData={MeetingColumns ?? []}
                                                        // dataColumn={MeetingColumns ?? []}
                                                        dataLength={allData?.meetingHistory?.length}
                                                        allData={showMeetings ? allData?.meetingHistory : allData?.meetingHistory?.length > 0 ? [allData?.meetingHistory[0]] : []}
                                                        tableData={showMeetings ? allData?.meetingHistory : allData?.meetingHistory?.length > 0 ? [allData?.meetingHistory[0]] : []}
                                                        AdvanceSearch={false}
                                                        tableCustomFields={[]}
                                                        checkBox={false}
                                                        deleteMany={true}
                                                        ManageGrid={false}
                                                        onOpen={() => setMeeting(true)}
                                                        access={meetingAccess}
                                                    />
                                                    {allData?.meetingHistory?.length > 1 && <div style={{ display: "flex", justifyContent: "end" }}>
                                                        <Button colorScheme="brand" size='sm' variant="outline" display="flex" justifyContant="end" onClick={() => showMeetings ? setShowMeetings(false) : setShowMeetings(true)}>{showMeetings ? "Show less" : "Show more"}</Button>
                                                    </div>}
                                                </Card>
                                            </GridItem>}
                                            {quotesAccess?.view && <GridItem colSpan={{ base: 12, md: 6 }}>
                                                <Card overflow={'scroll'}>
                                                    <CommonCheckTable
                                                        title={"Quotes"}
                                                        isLoding={isLoding}
                                                        columnData={quotesColumns ?? []}
                                                        // dataColumn={quotesColumns ?? []}
                                                        dataLength={allData?.quotes?.length}
                                                        allData={showQuotes ? allData?.quotes : allData?.quotes?.length > 0 ? [allData?.quotes[0]] : []}
                                                        tableData={showQuotes ? allData?.quotes : allData?.quotes?.length > 0 ? [allData?.quotes[0]] : []}
                                                        AdvanceSearch={false}
                                                        tableCustomFields={[]}
                                                        checkBox={false}
                                                        deleteMany={true}
                                                        ManageGrid={false}
                                                        onOpen={() => setAddQuotes(true)}
                                                        access={quotesAccess}
                                                    />
                                                    {allData?.quotes?.length > 1 && <div style={{ display: "flex", justifyContent: "end" }}>
                                                        <Button colorScheme="brand" size='sm' variant="outline" display="flex" justifyContant="end" onClick={() => showQuotes ? setShowQuotes(false) : setShowQuotes(true)}>{showQuotes ? "Show less" : "Show more"}</Button>
                                                    </div>}
                                                </Card>
                                            </GridItem>}
                                            {invoicesAccess?.view && <GridItem colSpan={{ base: 12, md: 6 }}>
                                                <Card overflow={'scroll'}>
                                                    <CommonCheckTable
                                                        title={"Invoices"}
                                                        isLoding={isLoding}
                                                        columnData={invoicesColumns ?? []}
                                                        // dataColumn={invoicesColumns ?? []}
                                                        dataLength={allData?.invoice?.length}
                                                        allData={showInvoices ? allData?.invoice : allData?.invoice?.length > 0 ? [allData?.invoice[0]] : []}
                                                        tableData={showInvoices ? allData?.invoice : allData?.invoice?.length > 0 ? [allData?.invoice[0]] : []}
                                                        AdvanceSearch={false}
                                                        tableCustomFields={[]}
                                                        checkBox={false}
                                                        deleteMany={true}
                                                        ManageGrid={false}
                                                        onOpen={() => setAddInvoice(true)}
                                                        access={invoicesAccess}
                                                    />
                                                    {allData?.invoice?.length > 1 && <div style={{ display: "flex", justifyContent: "end" }}>
                                                        <Button colorScheme="brand" size='sm' variant="outline" display="flex" justifyContant="end" onClick={() => showInvoices ? setShowInvoices(false) : setShowInvoices(true)}>{showInvoices ? "Show less" : "Show more"}</Button>
                                                    </div>}
                                                </Card>
                                            </GridItem>}

                                        </Grid>
                                    </Grid>
                                </GridItem>

                            </TabPanel>
                            <TabPanel pt={4} p={0}>
                                <GridItem colSpan={{ base: 12 }} >
                                    <Card minH={'40vh'} >
                                        <Flex alignItems={'center'} justifyContent={'space-between'} mb='2'>
                                            <Heading size="md" mb={3}>
                                                Documents
                                            </Heading>
                                            <Button leftIcon={<AddIcon />} size='sm' variant='brand' onClick={() => setAddDocument(true)}>Add Document</Button>
                                        </Flex>
                                        <HSeparator />
                                        <VStack mt={4} alignItems="flex-start">
                                            {allData?.Document?.length > 0 ? allData?.Document?.map((item) => (
                                                <FolderTreeView name={item.folderName} item={item}>
                                                    {item?.files?.map((file) => (
                                                        <FolderTreeView download={download} data={file} name={file.fileName} isFile from="contact" />
                                                    ))}
                                                </FolderTreeView>
                                            )) :
                                                <Text textAlign={'center'} width="100%" color={textColor} fontSize="sm" fontWeight="700">
                                                    <DataNotFound />
                                                </Text>
                                            }

                                        </VStack>
                                    </Card>
                                </GridItem>
                            </TabPanel>

                            <TabPanel pt={4} p={0}>

                                <GridItem colSpan={{ base: 12 }} >
                                    <Card >
                                        <Grid templateColumns={{ base: "1fr" }} gap={4}>
                                            <GridItem colSpan={2}>
                                                <Box>
                                                    <Heading size="md" mb={3}>
                                                        Social Media Profiles
                                                    </Heading>
                                                    <HSeparator />
                                                </Box>
                                            </GridItem>
                                            {data?.linkedInProfile || data?.facebookProfile || data?.twitterHandle || data?.otherProfiles ?
                                                <Grid templateColumns={'repeat(12, 1fr)'} gap={4} my={3} flexWrap={'wrap'} display={'flex'} justifyContent={'center'}>
                                                    {data?.linkedInProfile && <GridItem textAlign={'center'} colSpan={{ base: 2, md: 1 }}>
                                                        <a target='_blank' href={data?.linkedInProfile}>
                                                            <IconButton colorScheme="brand" aria-label="Call Fred" borderRadius="10px" size="md" icon={<BiLogoLinkedin />} />
                                                        </a>
                                                        <Text fontSize="sm" mt={2} fontWeight="bold" color={'blackAlpha.900'}> LinkedIn Profile  </Text>
                                                    </GridItem>}
                                                    {data?.facebookProfile && <GridItem textAlign={'center'} colSpan={{ base: 2, md: 1 }}>
                                                        <a target='_blank' href={`https://www.facebook.com/${data.facebookProfile}`}>
                                                            <IconButton colorScheme="brand" aria-label="Call Fred" borderRadius="10px" size="md" icon={<FaFacebook />} />
                                                        </a>
                                                        <Text fontSize="sm" mt={2} fontWeight="bold" color={'blackAlpha.900'}> Facebook Profile  </Text>
                                                    </GridItem>}
                                                    {data?.linkedInProfile && <GridItem textAlign={'center'} colSpan={{ base: 2, md: 1 }}>
                                                        <a target='_blank' href={`https://www.facebook.com/${data.facebookProfile}`}>
                                                            <IconButton colorScheme="brand" aria-label="Call Fred" borderRadius="10px" size="md" icon={<BsTwitter />} />
                                                        </a>
                                                        <Text fontSize="sm" mt={2} px={2} fontWeight="bold" color={'blackAlpha.900'}>Twitter Handle </Text>
                                                    </GridItem>}

                                                    {data?.linkedInProfile && <GridItem textAlign={'center'} colSpan={{ base: 2, md: 1 }}>
                                                        <a target='_blank' href={data?.otherProfiles}>
                                                            <IconButton colorScheme="brand" aria-label="Call Fred" borderRadius="10px" size="md" icon={<BiLink />} />
                                                        </a>
                                                        <Text fontSize="sm" mt={2} fontWeight="bold" color={'blackAlpha.900'}> Other Profiles  </Text>
                                                    </GridItem>}
                                                </Grid>
                                                :
                                                <Grid templateColumns={'repeat(2, 1fr)'} gap={4}>
                                                    <GridItem colSpan={{ base: 2 }} textAlign={'center'}>
                                                        <Text textAlign={'center'} width="100%" color={textColor} fontSize="sm" fontWeight="700"> <DataNotFound /></Text>

                                                    </GridItem>
                                                </Grid>
                                            }
                                        </Grid>
                                    </Card>
                                </GridItem>

                            </TabPanel>
                        </TabPanels>
                    </Tabs>



                    {(user.role === 'superAdmin' || (permission?.update || permission?.delete)) && <Card mt={3}>
                        <Grid templateColumns="repeat(6, 1fr)" gap={1}>
                            <GridItem colStart={6} >
                                <Flex justifyContent={"right"}>
                                    {permission?.update && <Button size="sm" onClick={() => setEdit(true)} leftIcon={<EditIcon />} mr={2.5} variant="outline" colorScheme="green">Edit</Button>}
                                    {permission?.delete && <Button size="sm" style={{ background: 'red.800' }} onClick={() => setDelete(true)} leftIcon={<DeleteIcon />} colorScheme="red" >Delete</Button>}
                                </Flex>
                            </GridItem>
                        </Grid>
                    </Card>}
                </>}
            {isOpen && <Add isOpen={isOpen} size={size} onClose={onClose} contactData={contactData?.[0]} />}
            <Edit isOpen={edit} contactData={contactData?.[0]} size={size} onClose={setEdit} setAction={setAction} moduleId={contactData?.[0]?._id} data={data} />
            <CommonDeleteModel isOpen={deleteModel} onClose={() => setDelete(false)} type='Contact' handleDeleteData={handleDeleteContact} ids={param.id} />
            <AddEmailHistory lead="false" contactEmail={allData?.contact?.email} fetchData={fetchData} isOpen={addEmailHistory} onClose={setAddEmailHistory} id={param.id} />
            <AddDocumentModal addDocument={addDocument} setAddDocument={setAddDocument} linkId={param.id} from="contact" setAction={setAction} fetchData={fetchData} />
            <AddMeeting fetchData={fetchData} leadContect={splitValue[0]} isOpen={addMeeting} onClose={setMeeting} from="contact" id={param.id} setAction={setAction} view={true} />
            <AddEdit isOpen={taskModel} fetchData={fetchData} leadContect={splitValue[0]} onClose={setTaskModel} id={param.id} userAction={'add'} view={true} />
            <AddPhoneCall viewData={allData} fetchData={fetchData} setAction={setAction} isOpen={addPhoneCall} onClose={setAddPhoneCall} data={data?.contact} id={param.id} cData={data} />
            <AddEditQuotes isOpen={addQuotes} size={"lg"} onClose={() => setAddQuotes(false)} setAction={setAction} type={"add"} contactId={param.id} />
            <AddEditInvoice isOpen={addInvoice} size={"lg"} onClose={() => setAddInvoice(false)} setAction={setAction} type={"add"} contactId={param.id} />
            <PropertyModel fetchData={fetchData} isOpen={propertyModel} onClose={setPropertyModel} id={param.id} interestProperty={data?.interestProperty} />

        </>
    );
};

export default View;

================
File: Client/src/views/admin/customField/addEditHeading.js
================
import { Button, FormLabel, Grid, GridItem, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Spinner, Text } from '@chakra-ui/react'
import { useFormik } from 'formik'
import React, { useState } from 'react'
import { toast } from 'react-toastify'
import { postApi, putApi } from 'services/api'
import * as yup from 'yup'

const AddEditHeading = (props) => {

    const { moduleId, filed, updateData, setUpdateData } = props;

    const [isLoding, setIsLoding] = useState(false)

    const handleClose = () => {
        props.onClose(false);
        setUpdateData({});
    }

    const headingSchema = yup.object({
        heading: yup.string().required('Heading is required')
    })


    const initialValues = {
        heading: updateData && updateData?.heading ? updateData?.heading : '',
    };

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: headingSchema,
        enableReinitialize: true,
        onSubmit: (values, { resetForm }) => {

            if (updateData && updateData?.heading) {
                editData();
            } else {
                fetchAddData();
            }

            resetForm();
        },
    });

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik

    const fetchAddData = async () => {
        try {
            const addDataPayload = {
                moduleId: moduleId,
                headings: [values]
            }

            let response = await postApi('api/custom-field/add-heading', addDataPayload);
            if (response.status === 200) {
                props.onClose(false);
                props.fetchData();
            } else {
                toast.error(response.response.data)
            }
        }
        catch {
        }
        finally {
        }
    };

    const editData = async () => {
        try {
            const editDataPayload = {
                moduleId: moduleId,
                updatedHeading: values
            }

            let response = await putApi(`api/custom-field/change-single-heading/${updateData?._id}`, editDataPayload);
            if (response.status === 200) {
                handleClose();
                props.fetchData();
            }
        }
        catch {
        }
        finally {
        }
    };

    return (
        <div>
            <Modal onClose={() => handleClose()} isOpen={props.isOpen} isCentered>
                <ModalOverlay />
                <ModalContent maxWidth={"2xl"}>
                    <ModalHeader>{updateData && updateData?.heading ? 'Edit' : 'Add'} Heading</ModalHeader>
                    <ModalCloseButton />
                    <ModalBody>
                        <>
                            <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                                <GridItem colSpan={{ base: 12 }} >
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                        Heading<Text color={"red"}>*</Text>
                                    </FormLabel>
                                    <Input
                                        fontSize='sm'
                                        onChange={handleChange} onBlur={handleBlur}
                                        value={values.heading}
                                        name="heading"
                                        placeholder={`Enter Heading`}
                                        fontWeight='500'
                                        borderColor={errors.heading && touched.heading ? "red.300" : null}
                                    />
                                    <Text mb='10px' color={'red'}> {errors.heading && touched.heading && errors.heading}</Text>
                                </GridItem>
                            </Grid>
                        </>
                    </ModalBody>
                    <ModalFooter>
                        <Button colorScheme="brand" size="sm" mr={2} type='submit' disabled={isLoding ? true : false} onClick={handleSubmit} >{isLoding ? <Spinner /> : updateData && updateData?.heading ? 'Update' : 'Save'}</Button>
                        <Button variant="outline"
                            colorScheme='red' size="sm"
                            sx={{
                                textTransform: "capitalize",
                            }} onClick={() => { handleClose(); resetForm() }}>Close</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        </div>
    )
}

export default AddEditHeading

================
File: Client/src/views/admin/customField/addfield.js
================
import { DeleteIcon } from '@chakra-ui/icons'
import { Button, Checkbox, Flex, FormLabel, Grid, GridItem, Heading, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Select, Spinner, Text } from '@chakra-ui/react'
import { useFormik } from 'formik'
import React, { useState } from 'react'
import { toast } from 'react-toastify'
import { addFiledSchema } from 'schema'
import { postApi } from 'services/api'
import * as yup from 'yup'

const Addfield = (props) => {

    const { moduleId, filed, headingsData, validations } = props;

    const [isLoding, setIsLoding] = useState(false)
    const [validationType, setValidationType] = useState('')

    const handleClose = () => {
        props.onClose(false);
    }
    const initialValues = {
        label: "",
        name: "",
        type: "text",
        delete: false,
        fixed: false,
        belongsTo: null,
        options: [{
            name: '',
            value: ''
        }, {
            name: '',
            value: ''
        }],
        validate: false,
        validation: [
            {
                require: false,
                message: "",
            },
            {
                min: false,
                value: "",
                message: "",
            },
            {
                max: false,
                value: "",
                message: "",
            },
            {
                match: false,
                value: "",
                message: "",
            },
            {
                types: false,
                formikType: '',
                message: "",
            },
        ],
    };

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: addFiledSchema,
        validate: (values) => {
            const errors = {};
            if (values?.validation && (values.validation[1]?.min || values?.type === 'range') && values.validation[1]?.value === '') {
                errors.validation = errors.validation || [];
                errors.validation[1] = errors.validation[1] || {};
                errors.validation[1].value = 'Value is required';
            }

            if (values?.validation && (values.validation[2]?.max || values?.type === 'range') && values.validation[2]?.value === '') {
                errors.validation = errors.validation || [];
                errors.validation[2] = errors.validation[2] || {};
                errors.validation[2].value = 'Value is required';
            }
            if (values?.validation && values.validation[3]?.match && !values.validation[3]?.value) {
                errors.validation = errors.validation || [];
                errors.validation[3] = errors.validation[3] || {};
                errors.validation[3].value = 'Value is required';
            }
            if (values?.validation && values.validation[3]?.match && !values.validation[3]?.message) {
                errors.validation = errors.validation || [];
                errors.validation[3] = errors.validation[3] || {};
                errors.validation[3].message = 'Meassage is required';
            }
            if (values?.validation && values.validation[4]?.types && !values.validation[4]?.formikType) {
                errors.validation = errors.validation || [];
                errors.validation[4] = errors.validation[4] || {};
                errors.validation[4].formikType = 'FormikType is required';
            }
            if (values?.options && (values?.type === 'radio' || values?.type === 'select')) {

                values?.options?.forEach((option, index) => {
                    if (!option.name) {
                        if (!errors.options) {
                            errors.options = [];
                        }
                        if (!errors.options[index]) {
                            errors.options[index] = {};
                        }
                        errors.options[index].name = 'Name is required';
                    }
                    if (!option.value) {
                        if (!errors.options) {
                            errors.options = [];
                        }
                        if (!errors.options[index]) {
                            errors.options[index] = {};
                        }
                        errors.options[index].value = 'Value is required';
                    }
                });
            }
            return errors;
        },
        onSubmit: (values, { resetForm }) => {
            fetchAddData()

        },
    });

    const handleAddOption = () => {
        formik.setFieldValue('options', [...formik.values.options, { name: '', value: '' }]);
    };

    const handleRemoveOption = (index) => {
        const newOptions = [...formik.values.options];
        newOptions.splice(index, 1);
        formik.setFieldValue('options', newOptions);
    };

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik

    const fetchAddData = async () => {
        try {
            const addDataPayload = {
                moduleId: moduleId,
                fields: [values]
            }

            let response = await postApi('api/custom-field/add', addDataPayload);
            if (response.status === 200) {
                setValidationType('')
                props.onClose()
                resetForm()
                props.fetchData()
            }
            if (!response.response.data?.success) {
                toast.error(response.response.data?.message);
            }
        }
        catch {
        }
        finally {
        }
    }

    return (
        <div>
            <Modal onClose={props.onClose} isOpen={props.isOpen} isCentered>
                <ModalOverlay />
                <ModalContent maxWidth={"2xl"}>
                    <ModalHeader>Add Field</ModalHeader>
                    <ModalCloseButton onClick={() => resetForm()} />
                    <ModalBody>
                        <>
                            <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                        Label<Text color={"red"}>*</Text>
                                    </FormLabel>
                                    <Input
                                        fontSize='sm'
                                        onChange={handleChange} onBlur={handleBlur}
                                        value={values.label}
                                        name="label"
                                        placeholder={`Enter Label`}
                                        fontWeight='500'
                                        borderColor={errors.label && touched.label ? "red.300" : null}
                                    />
                                    <Text mb='10px' color={'red'}> {errors.label && touched.label && errors.label}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                        Name<Text color={"red"}>*</Text>
                                    </FormLabel>
                                    <Input
                                        fontSize='sm'
                                        onKeyDown={(e) => {
                                            if (e.code === 'Space') {
                                                e.preventDefault();
                                            }
                                        }}
                                        onChange={(e) => {
                                            const newValue = e.target.value.replace(/\s/g, '');
                                            handleChange({
                                                target: {
                                                    name: 'name',
                                                    value: newValue,
                                                },
                                            });
                                        }}
                                        onBlur={handleBlur}
                                        value={values.name}
                                        name="name"
                                        placeholder='Enter Name'
                                        fontWeight='500'
                                        borderColor={errors.name && touched.name ? "red.300" : null}
                                    />
                                    <Text mb='10px' color={'red'}> {errors.name && touched.name && errors.name}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                        Type
                                    </FormLabel>
                                    <Select
                                        value={values.type}
                                        name="type"
                                        onChange={(e) => {
                                            setFieldValue('type', e.target.value)
                                            setFieldValue(`validation[${4}].formikType`, e.target.value === 'date' ? 'date' : '')
                                            setFieldValue(`validation[${4}].types`, e.target.value === 'date' ? true : false)
                                        }}
                                        fontWeight='500'
                                        // placeholder={'Select Type'}
                                        borderColor={errors.type && touched.type ? "red.300" : null}
                                    >
                                        <option value='text'>Text</option>
                                        <option value='number'>Number</option>
                                        <option value='radio'>Radio</option>
                                        <option value='check'>Check</option>
                                        <option value='date'>Date</option>
                                        <option value='tel'>Tel</option>
                                        <option value='range'>Range</option>
                                        <option value='color'>Color</option>
                                        <option value='email'>Email</option>
                                        <option value='url'>Url</option>
                                        <option value='select'>Dropdown</option>
                                    </Select>
                                    <Text mb='10px' color={'red'}> {errors.type && touched.type && errors.type}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                        Belongs To
                                        {/* Belongs To */}
                                    </FormLabel>
                                    <Select
                                        value={values.belongsTo}
                                        name="belongsTo"
                                        onChange={(e) => {
                                            const selectedValue = e.target.value;
                                            const newValue = selectedValue === "" ? null : selectedValue;
                                            handleChange({
                                                target: {
                                                    name: "belongsTo",
                                                    value: newValue,
                                                },
                                            })
                                        }}
                                        onBlur={handleBlur}
                                        fontWeight='500'
                                        placeholder={'Select Heading'}
                                        borderColor={errors.belongsTo && touched.belongsTo ? "red.300" : null}
                                        isDisabled={headingsData?.length < 1}
                                    >
                                        {
                                            headingsData?.map(item => (
                                                <option value={item?._id} key={item?._id}>{item?.heading}</option>
                                            ))
                                        }
                                    </Select>
                                    <Text mb='10px' color={'red'}> {errors.belongsTo && touched.belongsTo && errors.belongsTo}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                    <Flex alignItems='center'>
                                        <FormLabel ms='4px' fontSize='sm' fontWeight='500' mb={0}>
                                            Fixed
                                        </FormLabel>
                                        <Checkbox colorScheme="brandScheme" me="10px" onChange={(e) => setFieldValue(`fixed`, e.target.checked)} />
                                    </Flex>
                                </GridItem>
                                {(values?.type === 'radio' || values?.type === 'select') ? <>
                                    <GridItem colSpan={{ base: 12, sm: 12, md: 12 }} borderBottom={'1px solid rgba(128, 128, 128, 0.705)'}>
                                        <Flex justifyContent={'space-between'} alignItems={'center'} mb={'8px'} >
                                            <Heading as="h1" size="md" >
                                                Option
                                            </Heading>
                                            <Button size="sm" variant="brand" onClick={() => handleAddOption()}>Add</Button>
                                        </Flex>
                                    </GridItem>
                                    {
                                        values?.options?.map((option, index) => (
                                            <>
                                                <GridItem colSpan={{ base: 12, sm: 6, md: 5 }}>
                                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                        Name
                                                    </FormLabel>
                                                    <Input
                                                        fontSize='sm'
                                                        onChange={handleChange} onBlur={handleBlur}
                                                        value={values.options[index]?.name}
                                                        name={`options[${index}].name`}
                                                        placeholder='Enter Name'
                                                        fontWeight='500'
                                                        borderColor={errors?.options && touched?.options && errors?.options[index]?.name && touched?.options[index]?.name ? "red.300" : null}
                                                    />
                                                    <Text mb='10px' color={'red'}> {errors?.options && touched?.options && touched?.options[index]?.name && errors?.options[index]?.name}</Text>

                                                </GridItem>
                                                <GridItem colSpan={{ base: 12, sm: 6, md: 5 }}>
                                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                        Value
                                                    </FormLabel>
                                                    <Input
                                                        fontSize='sm'
                                                        onChange={handleChange} onBlur={handleBlur}
                                                        value={values.options[index]?.value}
                                                        name={`options[${index}].value`}
                                                        placeholder='Enter Value'
                                                        fontWeight='500'
                                                        borderColor={errors?.options && touched?.options && errors?.options[index]?.value && touched?.options[index]?.value ? "red.300" : null}
                                                    />
                                                    <Text mb='10px' color={'red'}> {errors?.options && touched?.options && touched?.options[index]?.value && errors?.options[index]?.value}</Text>
                                                </GridItem>
                                                {values?.options?.length > 2 ? <GridItem colSpan={{ base: 12, sm: 6, md: 2 }}>
                                                    <DeleteIcon onClick={() => handleRemoveOption(index)} color={'red'} cursor={'pointer'} mt={'2.5rem'} ms={'60px'} />
                                                </GridItem> : <GridItem colSpan={{ base: 12, sm: 6, md: 2 }}>
                                                    <DeleteIcon color={'gray'} mt={'2.5rem'} ms={'60px'} />
                                                </GridItem>}
                                            </>
                                        ))
                                    }

                                </> : ''}
                                <GridItem colSpan={{ base: 12 }} borderBottom={'1px solid rgba(128, 128, 128, 0.705)'}>
                                    <Flex alignItems="center" justifyContent={"space-between"} mb={'8px'}>
                                        <Heading as="h1" size="md" >
                                            Validation
                                        </Heading>
                                        <Flex>
                                            {validations?.length > 0 && <Select
                                                value={validationType}
                                                name="validations"
                                                onChange={(e) => {
                                                    setValidationType(e.target.value)
                                                    if (e.target.value) {
                                                        const validationData = validations?.filter(item => item._id === e.target.value)
                                                        const filterData = validationData?.length > 0 ? validationData[0]?.validations : values?.validation
                                                        setFieldValue('validation', filterData)
                                                        setFieldValue('validate', true)
                                                    } else {
                                                        setFieldValue('validate', false)
                                                        setFieldValue('validation', [
                                                            {
                                                                require: false,
                                                                message: "",
                                                            },
                                                            {
                                                                min: false,
                                                                value: "",
                                                                message: "",
                                                            },
                                                            {
                                                                max: false,
                                                                value: "",
                                                                message: "",
                                                            },
                                                            {
                                                                match: false,
                                                                value: "",
                                                                message: "",
                                                            },
                                                            {
                                                                types: false,
                                                                formikType: '',
                                                                message: "",
                                                            },])
                                                    }

                                                }}
                                                me="10px"
                                                fontWeight='500'
                                                size='xs'
                                                placeholder={'Select Validation'}
                                            >
                                                {validations?.map((item, index) => (
                                                    <option key={index} value={item._id} >{item.name}</option>
                                                ))}
                                            </Select>}
                                            <Checkbox colorScheme="brandScheme" me="10px" isChecked={(values?.type === 'range' || values.validate) ? true : false} onChange={(e) => setFieldValue(`validate`, e.target.checked)} />
                                        </Flex>
                                    </Flex>
                                </GridItem>
                                {(values.validate === true || values?.type === 'range') ?
                                    <>

                                        <GridItem colSpan={{ base: 12, sm: 6, md: 4 }} mt={8}>
                                            <Flex>
                                                <Checkbox colorScheme="brandScheme" me="10px" isChecked={values?.validation[0]?.require}
                                                    onChange={(e) => {
                                                        const isChecked = e.target.checked;
                                                        setFieldValue(`validation[${0}].require`, isChecked);
                                                        setFieldValue(
                                                            'validation[0].message',
                                                            isChecked ? values?.validation[0]?.message : ''
                                                        );
                                                    }}
                                                />
                                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                                    Require
                                                </FormLabel>
                                            </Flex>
                                        </GridItem>
                                        <GridItem colSpan={{ base: 12, md: 8 }}>
                                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                Message
                                            </FormLabel>
                                            <Input
                                                disabled={values?.validation[0]?.require === true ? false : true}
                                                fontSize='sm'
                                                onChange={handleChange} onBlur={handleBlur}
                                                value={values?.validation[0]?.require === true ? values?.validation[0]?.message : ''}
                                                name={`validation[${0}].message`}
                                                placeholder='Enter Require  message'
                                                fontWeight='500'
                                            />
                                        </GridItem>

                                        {!(values?.type === 'radio' || values?.type === 'select' || values?.type === 'check') &&
                                            <>
                                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }} mt={8}>
                                                    <Flex>
                                                        <Checkbox colorScheme="brandScheme" isChecked={(values?.validation[1]?.min || values?.type === 'range') ? true : false} name={`validation[${1}].min`} me="10px" onChange={(e) => {
                                                            const isChecked = e.target.checked;
                                                            setFieldValue(`validation[${1}].min`, isChecked);
                                                            setFieldValue(
                                                                'validation[1].message',
                                                                (isChecked || values?.type === 'range') ? values?.validation[1]?.message : ''
                                                            );
                                                            setFieldValue(
                                                                'validation[1].value',
                                                                (isChecked || values?.type === 'range') ? values?.validation[1]?.value : ''
                                                            );
                                                        }} />
                                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                                            Min
                                                        </FormLabel>
                                                    </Flex>
                                                </GridItem>
                                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                        Value{(values.validation[1].min === true || values?.type === 'range') ? <Text color={"red"}>*</Text> : ''}
                                                    </FormLabel>
                                                    <Input
                                                        disabled={(values.validation[1].min === true || values?.type === 'range') ? false : true}
                                                        fontSize='sm'
                                                        type={values?.type === 'date' ? 'date' : 'number'}
                                                        onChange={handleChange} onBlur={handleBlur}
                                                        value={(values.validation[1].min === true || values?.type === 'range') ? values.validation[1].value : ''}
                                                        name={`validation[${1}].value`}
                                                        placeholder='Enter Min Value'
                                                        fontWeight='500'
                                                        borderColor={(values.validation[1].min === true || values?.type === 'range') && errors?.validation && touched?.validation && errors?.validation[1]?.value && touched?.validation[1]?.value ? "red.300" : null}
                                                    />
                                                    {(values.validation[1].min === true || values?.type === 'range') && <Text mb='10px' color={'red'}> {errors?.validation && touched?.validation && touched?.validation[1]?.value && errors?.validation[1]?.value}</Text>}
                                                </GridItem>
                                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                        Message
                                                    </FormLabel>
                                                    <Input
                                                        disabled={(values.validation[1].min === true || values?.type === 'range') ? false : true}
                                                        fontSize='sm'
                                                        onChange={handleChange} onBlur={handleBlur}
                                                        value={values.validation[1].min === true || values?.type === 'range' ? values.validation[1].message : ''}
                                                        name={`validation[${1}].message`}
                                                        placeholder='Enter Min message'
                                                        fontWeight='500'
                                                    />
                                                </GridItem>
                                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }} mt={8}>
                                                    <Flex>
                                                        <Checkbox colorScheme="brandScheme" me="10px" isChecked={(values?.validation[2].max || values?.type === 'range') ? true : false} name={`validation[${2}].max`} onChange={(e) => {
                                                            const isChecked = e.target.checked;
                                                            setFieldValue(`validation[${2}].max`, isChecked);
                                                            setFieldValue(
                                                                'validation[2].message',
                                                                (isChecked || values?.type === 'range') ? values?.validation[2]?.message : ''
                                                            );
                                                            setFieldValue(
                                                                'validation[2].value',
                                                                (isChecked || values?.type === 'range') ? values?.validation[2]?.value : ''
                                                            );
                                                        }} />
                                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                                            Max
                                                        </FormLabel>
                                                    </Flex>
                                                </GridItem>
                                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                        Value{(values.validation[2].max === true || values?.type === 'range') ? <Text color={"red"}>*</Text> : ''}
                                                    </FormLabel>
                                                    <Input
                                                        disabled={(values.validation[2].max === true || values?.type === 'range') ? false : true}
                                                        fontSize='sm'
                                                        type={values?.type === 'date' ? 'date' : 'number'}
                                                        onChange={handleChange} onBlur={handleBlur}
                                                        value={(values.validation[2].max === true || values?.type === 'range') ? values.validation[2].value : ''}
                                                        name={`validation[${2}].value`}
                                                        placeholder='Enter Max Value'
                                                        fontWeight='500'
                                                        borderColor={(values.validation[2].max === true || values?.type === 'range') && errors?.validation && touched?.validation && errors?.validation[2]?.value && touched?.validation[2]?.value ? "red.300" : null}
                                                    />
                                                    {(values.validation[2].max === true || values?.type === 'range') && <Text mb='10px' color={'red'}> {errors?.validation && touched?.validation && touched?.validation[2]?.value && errors?.validation[2]?.value}</Text>}
                                                </GridItem>
                                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                        Message
                                                    </FormLabel>
                                                    <Input
                                                        disabled={(values.validation[2].max === true || values?.type === 'range') ? false : true}
                                                        fontSize='sm'
                                                        onChange={handleChange} onBlur={handleBlur}
                                                        value={(values.validation[2].max === true || values?.type === 'range') ? values.validation[2].massage : ''}
                                                        name={`validation[${2}].message`}
                                                        placeholder='Enter Max Message'
                                                        fontWeight='500'
                                                        borderColor={errors.massage && touched.massage ? "red.300" : null}
                                                    />
                                                </GridItem>

                                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }} mt={8}>
                                                    <Flex>
                                                        <Checkbox colorScheme="brandScheme" me="10px" isChecked={values?.validation[3].match} name={`validation[${3}].match`} onChange={(e) => {
                                                            const isChecked = e.target.checked;
                                                            setFieldValue(`validation[${3}].match`, isChecked);
                                                            setFieldValue(
                                                                'validation[3].message',
                                                                isChecked ? values?.validation[3]?.message : ''
                                                            );
                                                            setFieldValue(
                                                                'validation[3].value',
                                                                isChecked ? values?.validation[3]?.value : ''
                                                            );
                                                        }} />
                                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                                            Match
                                                        </FormLabel>
                                                    </Flex>
                                                </GridItem>
                                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                        Value{values.validation[3].match === true ? <Text color={"red"}>*</Text> : ''}
                                                    </FormLabel>
                                                    <Input
                                                        disabled={values.validation[3].match === true ? false : true}
                                                        fontSize='sm'
                                                        onChange={handleChange} onBlur={handleBlur}
                                                        value={values.validation[3].match === true ? values.validation[3].value : ''}
                                                        name={`validation[${3}].value`}
                                                        placeholder='Enter Match Value'
                                                        fontWeight='500'
                                                        borderColor={values.validation[3].match === true && errors?.validation && touched?.validation && errors?.validation[3]?.value && touched?.validation[3]?.value ? "red.300" : null}
                                                    />
                                                    {values.validation[3].match === true && <Text mb='10px' color={'red'}> {errors?.validation && touched?.validation && touched?.validation[3]?.value && errors?.validation[3]?.value}</Text>}
                                                </GridItem>
                                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                        Message{values.validation[3].match === true ? <Text color={"red"}>*</Text> : ''}
                                                    </FormLabel>
                                                    <Input
                                                        disabled={values.validation[3].match === true ? false : true}
                                                        fontSize='sm'
                                                        onChange={handleChange} onBlur={handleBlur}
                                                        value={values.validation[3].match === true ? values.validation[3].massage : ''}
                                                        name={`validation[${3}].message`}
                                                        placeholder='Enter Match Message'
                                                        fontWeight='500'
                                                        borderColor={values.validation[3].match === true && errors?.validation && touched?.validation && errors?.validation[3]?.message && touched?.validation[3]?.message ? "red.300" : null}
                                                    />
                                                    {values.validation[3].match === true && <Text mb='10px' color={'red'}> {errors?.validation && touched?.validation && touched?.validation[3]?.message && errors?.validation[3]?.message}</Text>}
                                                </GridItem>

                                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }} mt={8}>
                                                    <Flex>
                                                        <Checkbox colorScheme="brandScheme" disabled={values?.type === 'date' ? true : false} isChecked={(values?.validation[4]?.types === true || values?.validation[4].formikType) ? true : false} name={`validation[${4}].types`} me="10px" onChange={(e) => {
                                                            const isChecked = e.target.checked;
                                                            setFieldValue(`validation[${4}].types`, isChecked);
                                                            setFieldValue(
                                                                'validation[4].formikType',
                                                                isChecked ? values?.validation[4]?.formikType : ''
                                                            );
                                                        }} />
                                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                                            Formik Type
                                                        </FormLabel>
                                                    </Flex>
                                                </GridItem>

                                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                        FormikType{(values?.validation[4]?.types === true || values?.validation[4].formikType) ? <Text color={"red"}>*</Text> : ''}
                                                    </FormLabel>
                                                    <Select
                                                        disabled={(values?.validation[4]?.types === true || values?.validation[4].formikType) ? values?.type === 'date' ? true : false : true}
                                                        value={values?.validation[4]?.types === true || values?.validation[4].formikType ? values.validation[4].formikType : ''}
                                                        name={`validation[${4}].formikType`}
                                                        onChange={handleChange}
                                                        fontWeight='500'
                                                        placeholder={'Select Type'}
                                                        borderColor={(values?.validation[4]?.types === true || values?.validation[4].formikType) && errors?.validation && touched?.validation && errors?.validation[4]?.formikType && touched?.validation[4]?.formikType ? "red.300" : null}
                                                    >
                                                        <option value='string'>String </option>
                                                        <option value='email'>Email </option>
                                                        <option value='date'>Date </option>
                                                        <option value='number'>Number </option>
                                                        <option value='object'>Object </option>
                                                        <option value='array'>Array </option>
                                                        <option value='url'>Url </option>
                                                        <option value='boolean'>Boolean </option>
                                                        <option value='positive'>Positive </option>
                                                        <option value='negative'>Negative  </option>
                                                        <option value='integer'>Integer  </option>
                                                    </Select>
                                                    {(values?.validation[4]?.types === true || values?.validation[4].formikType) && <Text mb='10px' color={'red'}> {errors?.validation && touched?.validation && touched?.validation[4]?.formikType && errors?.validation[4]?.formikType}</Text>}
                                                </GridItem>
                                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                        Message
                                                    </FormLabel>
                                                    <Input
                                                        disabled={(values?.validation[4]?.types === true || values?.validation[4].formikType) ? false : true}
                                                        fontSize='sm'
                                                        onChange={handleChange} onBlur={handleBlur}
                                                        value={(values?.validation[4]?.types === true || values?.validation[4].formikType) ? values.validation[3].massage : ''}
                                                        name={`validation[${4}].message`}
                                                        placeholder='Enter Formik Type Message'
                                                        fontWeight='500'
                                                    />
                                                </GridItem>
                                            </>
                                        }
                                    </>
                                    :
                                    ""}
                            </Grid>
                        </>
                    </ModalBody>
                    <ModalFooter>
                        <Button colorScheme="brand" size="sm" mr={2} type='submit' disabled={isLoding ? true : false} onClick={handleSubmit} >{isLoding ? <Spinner /> : 'Save'}</Button>
                        <Button variant="outline"
                            colorScheme='red' size="sm"
                            sx={{
                                textTransform: "capitalize",
                            }} onClick={() => { handleClose(); resetForm(); setValidationType('') }}>Close</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        </div>
    )
}

export default Addfield

================
File: Client/src/views/admin/customField/editfield.js
================
import { DeleteIcon } from '@chakra-ui/icons'
import { Button, Checkbox, Flex, FormLabel, Grid, GridItem, Heading, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Select, Spinner, Text } from '@chakra-ui/react'
import { useFormik } from 'formik'
import React, { useEffect, useState } from 'react'
import { addFiledSchema } from 'schema'
import { putApi } from 'services/api'
import * as yup from 'yup'



const EditField = (props) => {

    const { moduleId, filed, updateFiled, headingsData, validations } = props;

    const [isLoding, setIsLoding] = useState(false)
    const [data, setData] = useState([])
    const [validationType, setValidationType] = useState('')

    const initialValues = {
        label: updateFiled ? updateFiled?.label : '',
        name: updateFiled ? updateFiled?.name : '',
        type: updateFiled ? updateFiled?.type : '',
        delete: updateFiled ? updateFiled?.delete : '',
        fixed: updateFiled ? updateFiled?.fixed ? true : false : '',
        belongsTo: updateFiled ? updateFiled?.belongsTo : null,
        validate: updateFiled?.validation && (updateFiled?.validation[0]?.require || updateFiled?.validation[1]?.min || updateFiled?.validation[2]?.max || updateFiled?.validation[3]?.match || updateFiled?.validation[4]?.formikType) ? true : false,
        options: updateFiled?.options ? updateFiled?.options : '',
        validation: [
            {
                require: updateFiled?.validation ? updateFiled?.validation[0]?.require : '',
                message: updateFiled?.validation ? updateFiled?.validation[0]?.message : '',
            },
            {
                min: updateFiled?.validation ? updateFiled?.validation[1]?.min : '',
                value: updateFiled?.validation ? updateFiled?.validation[1]?.value : '',
                message: updateFiled?.validation ? updateFiled?.validation[1]?.message : '',
            },
            {
                max: updateFiled?.validation ? updateFiled?.validation[2]?.max : '',
                value: updateFiled?.validation ? updateFiled?.validation[2]?.value : '',
                message: updateFiled?.validation ? updateFiled?.validation[2]?.message : '',
            },
            {
                match: updateFiled?.validation ? updateFiled?.validation[3]?.match : '',
                value: updateFiled?.validation ? updateFiled?.validation[3]?.value : '',
                message: updateFiled?.validation ? updateFiled?.validation[3]?.message : '',
            },
            {
                types: updateFiled?.validation ? updateFiled?.validation[4]?.formikType ? true : false : '',
                formikType: updateFiled?.validation ? updateFiled?.validation[4]?.formikType : '',
                message: updateFiled?.validation ? updateFiled?.validation[4]?.message : '',
            },
        ],
    };

    const handleClose = () => {
        props.onClose(false);
    }

    const handleAddOption = () => {
        formik.setFieldValue('options', [...formik.values.options, { name: '', value: '' }]);
    };

    const handleRemoveOption = (index) => {
        const newOptions = [...formik.values.options];
        newOptions.splice(index, 1);
        formik.setFieldValue('options', newOptions);
    };

    const underHeadingSchema = yup.object({
        belongsTo: yup.string().required("Belongs to field is required")
    });

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: addFiledSchema,
        // validationSchema: headingsData?.length > 0 ? addFiledSchema.concat(underHeadingSchema) : addFiledSchema,
        enableReinitialize: true,
        validate: (values) => {
            const errors = {};

            if (values?.validation && (values.validation[1]?.min || values?.type === 'range') && values.validation[1]?.value === '') {
                errors.validation = errors.validation || [];
                errors.validation[1] = errors.validation[1] || {};
                errors.validation[1].value = 'Value is required';
            }
            if (values?.validation && (values.validation[2]?.max || values?.type === 'range') && values.validation[2]?.value === '') {
                errors.validation = errors.validation || [];
                errors.validation[2] = errors.validation[2] || {};
                errors.validation[2].value = 'Value is required';
            }
            if (values?.validation && values.validation[3]?.match && !values.validation[3]?.value) {
                errors.validation = errors.validation || [];
                errors.validation[3] = errors.validation[3] || {};
                errors.validation[3].value = 'Value is required';
            }
            if (values?.validation && values.validation[3]?.match && !values.validation[3]?.message) {
                errors.validation = errors.validation || [];
                errors.validation[3] = errors.validation[3] || {};
                errors.validation[3].message = 'Meassage is required';
            }
            if (values?.validation && values.validation[4]?.types && !values.validation[4]?.formikType) {
                errors.validation = errors.validation || [];
                errors.validation[4] = errors.validation[4] || {};
                errors.validation[4].formikType = 'FormikType is required';
            }

            if (values?.options && (values?.type === 'radio' || values?.type === 'select')) {
                values?.options?.forEach((option, index) => {
                    if (!option.name) {
                        if (!errors.options) {
                            errors.options = [];
                        }
                        if (!errors.options[index]) {
                            errors.options[index] = {};
                        }
                        errors.options[index].name = 'Name is required';
                    }
                    if (!option.value) {
                        if (!errors.options) {
                            errors.options = [];
                        }
                        if (!errors.options[index]) {
                            errors.options[index] = {};
                        }
                        errors.options[index].value = 'Value is required';
                    }
                });
            }
            return errors;
        },
        onSubmit: (values, { resetForm }) => {
            EditData()
        },
    });

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik
    const EditData = async () => {
        try {
            const editDataPayload = {
                moduleId: moduleId,
                updatedField: values
            }

            let response = await putApi(`api/custom-field/change-single-field/${updateFiled?._id}`, editDataPayload);
            if (response.status === 200) {
                props.onClose()
                props.fetchData()
            }
        }
        catch {
        }
        finally {
        }
    }

    return (
        <div>
            <Modal onClose={props.onClose} isOpen={props.isOpen} isCentered>
                <ModalOverlay />
                <ModalContent maxWidth={"2xl"} height={"580px"}>
                    <ModalHeader>Edit Field</ModalHeader>
                    <ModalCloseButton />
                    <ModalBody overflowY={"auto"} height={"400px"}>
                        <>
                            <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                        Label<Text color={"red"}>*</Text>
                                    </FormLabel>
                                    <Input
                                        fontSize='sm'
                                        onChange={handleChange} onBlur={handleBlur}
                                        value={values.label}
                                        name="label"
                                        placeholder={`Enter Label`}
                                        fontWeight='500'
                                        borderColor={errors.label && touched.label ? "red.300" : null}
                                    />
                                    <Text mb='10px' color={'red'}> {errors.label && touched.label && errors.label}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                        Name<Text color={"red"}>*</Text>
                                    </FormLabel>
                                    <Input
                                        fontSize='sm'
                                        onKeyDown={(e) => {
                                            if (e.code === 'Space') {
                                                e.preventDefault();
                                            }
                                        }}
                                        onChange={(e) => {
                                            const newValue = e.target.value.replace(/\s/g, '');
                                            handleChange({
                                                target: {
                                                    name: 'name',
                                                    value: newValue,
                                                },
                                            });
                                        }}
                                        onBlur={handleBlur}
                                        value={values.name}
                                        name="name"
                                        placeholder='Enter Name'
                                        fontWeight='500'
                                        borderColor={errors.name && touched.name ? "red.300" : null}
                                    />
                                    <Text mb='10px' color={'red'}> {errors.name && touched.name && errors.name}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                        Type
                                    </FormLabel>
                                    <Select
                                        value={values.type}
                                        name="type"
                                        onChange={handleChange}
                                        fontWeight='500'
                                        // placeholder={'Select Type'}
                                        borderColor={errors.type && touched.type ? "red.300" : null}
                                    >
                                        <option value='text'>Text</option>
                                        <option value='number'>Number</option>
                                        <option value='radio'>Radio</option>
                                        <option value='check'>Check</option>
                                        <option value='date'>Date</option>
                                        <option value='tel'>Tel</option>
                                        <option value='range'>Range</option>
                                        <option value='color'>Color</option>
                                        <option value='email'>Email</option>
                                        <option value='url'>Url</option>
                                        <option value='select'>Select</option>
                                    </Select>
                                    <Text mb='10px' color={'red'}> {errors.type && touched.type && errors.type}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                        {/* Belongs To{headingsData?.length > 0 ? <Text color={"red"}>*</Text> : ''} */}
                                        Belongs To
                                    </FormLabel>
                                    <Select
                                        value={values.belongsTo}
                                        name="belongsTo"
                                        onChange={(e) => {
                                            const selectedValue = e.target.value;
                                            const newValue = selectedValue === "" ? null : selectedValue;
                                            handleChange({
                                                target: {
                                                    name: "belongsTo",
                                                    value: newValue,
                                                },
                                            })
                                        }}
                                        onBlur={handleBlur}
                                        fontWeight='500'
                                        placeholder={'Select Heading'}
                                        borderColor={errors.belongsTo && touched.belongsTo ? "red.300" : null}
                                        isDisabled={headingsData?.length < 1}
                                    >
                                        {
                                            headingsData?.map(item => (
                                                <option value={item?._id} key={item?._id}>{item?.heading}</option>
                                            ))
                                        }
                                    </Select>
                                    <Text mb='10px' color={'red'}> {errors.belongsTo && touched.belongsTo && errors.belongsTo}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 6 }}>
                                    <Flex alignItems='center'>

                                        <FormLabel ms='4px' fontSize='sm' fontWeight='500' mb={0}>
                                            Fixed
                                        </FormLabel>
                                        <Checkbox colorScheme="brandScheme" me="10px" isChecked={values?.fixed} onChange={(e) => setFieldValue(`fixed`, e.target.checked)} />
                                    </Flex>
                                </GridItem>
                                {/* <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                        Validations
                                    </FormLabel>
                                    <Select
                                        value={validationType}
                                        name="validations"
                                        // onChange={handleChange}
                                        onChange={(e) => {
                                            setValidationType(e.target.value)
                                            if (e.target.value) {
                                                const validationData = validations?.filter(item => item._id === e.target.value)
                                                const filterData = validationData?.length > 0 ? validationData[0]?.validations : values?.validation
                                                setFieldValue('validation', filterData)
                                            } else {
                                                setFieldValue('validation', [
                                                    {
                                                        require: updateFiled?.validation ? updateFiled?.validation[0]?.require : '',
                                                        message: updateFiled?.validation ? updateFiled?.validation[0]?.message : '',
                                                    },
                                                    {
                                                        min: updateFiled?.validation ? updateFiled?.validation[1]?.min : '',
                                                        value: updateFiled?.validation ? updateFiled?.validation[1]?.value : '',
                                                        message: updateFiled?.validation ? updateFiled?.validation[1]?.message : '',
                                                    },
                                                    {
                                                        max: updateFiled?.validation ? updateFiled?.validation[2]?.max : '',
                                                        value: updateFiled?.validation ? updateFiled?.validation[2]?.value : '',
                                                        message: updateFiled?.validation ? updateFiled?.validation[2]?.message : '',
                                                    },
                                                    {
                                                        match: updateFiled?.validation ? updateFiled?.validation[3]?.match : '',
                                                        value: updateFiled?.validation ? updateFiled?.validation[3]?.value : '',
                                                        message: updateFiled?.validation ? updateFiled?.validation[3]?.message : '',
                                                    },
                                                    {
                                                        types: updateFiled?.validation ? updateFiled?.validation[4]?.formikType ? true : false : '',
                                                        formikType: updateFiled?.validation ? updateFiled?.validation[4]?.formikType : '',
                                                        message: updateFiled?.validation ? updateFiled?.validation[4]?.message : '',
                                                    }])
                                            }

                                        }}
                                        fontWeight='500'
                                        placeholder={'Select Validation'}
                                    >
                                        {validations?.map((item, index) => (
                                            <option key={index} value={item._id}>{item.name}</option>
                                        ))}
                                    </Select>
                                </GridItem> */}
                                {(values?.type === 'radio' || values?.type === 'select') ? <>
                                    <GridItem colSpan={{ base: 12, sm: 12, md: 12 }} borderBottom={'1px solid rgba(128, 128, 128, 0.705)'}>
                                        <Flex justifyContent={'space-between'} alignItems={'center'} mb={'8px'} >
                                            <Heading as="h1" size="md" >
                                                Option
                                            </Heading>
                                            <Button size="sm" variant="brand" onClick={() => handleAddOption()}>Add</Button>
                                        </Flex>
                                    </GridItem>
                                    {
                                        values?.options && values?.options?.map((option, index) => (
                                            <>
                                                <GridItem colSpan={{ base: 12, sm: 6, md: 5 }}>
                                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                        Name
                                                    </FormLabel>
                                                    <Input
                                                        fontSize='sm'
                                                        onChange={handleChange} onBlur={handleBlur}
                                                        value={values.options[index]?.name}
                                                        name={`options[${index}].name`}
                                                        placeholder='Enter Name'
                                                        fontWeight='500'
                                                        borderColor={errors?.options && touched?.options && errors?.options[index]?.name && touched?.options[index]?.name ? "red.300" : null}
                                                    />
                                                    <Text mb='10px' color={'red'}> {errors?.options && touched?.options && touched?.options[index]?.name && errors?.options[index]?.name}</Text>
                                                </GridItem>
                                                <GridItem colSpan={{ base: 12, sm: 6, md: 5 }}>
                                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                        Value
                                                    </FormLabel>
                                                    <Input
                                                        fontSize='sm'
                                                        onChange={handleChange} onBlur={handleBlur}
                                                        value={values.options[index]?.value}
                                                        name={`options[${index}].value`}
                                                        placeholder='Enter Value'
                                                        fontWeight='500'
                                                        borderColor={errors?.options && touched?.options && errors?.options[index]?.value && touched?.options[index]?.value ? "red.300" : null}
                                                    />
                                                    <Text mb='10px' color={'red'}> {errors?.options && touched?.options && touched?.options[index]?.value && errors?.options[index]?.value}</Text>
                                                </GridItem>
                                                {values?.options?.length > 2 ? <GridItem colSpan={{ base: 12, sm: 6, md: 2 }}>
                                                    <DeleteIcon onClick={() => handleRemoveOption(index)} color={'red'} cursor={'pointer'} mt={'2.5rem'} ms={'60px'} />
                                                </GridItem> : <GridItem colSpan={{ base: 12, sm: 6, md: 2 }}>
                                                    <DeleteIcon color={'gray'} mt={'2.5rem'} ms={'60px'} />
                                                </GridItem>}
                                            </>
                                        ))
                                    }
                                </> : ''}
                                <GridItem colSpan={{ base: 12 }} borderBottom={'1px solid rgba(128, 128, 128, 0.705)'}>
                                    <Flex alignItems="center" justifyContent={"space-between"} mb={'8px'}>
                                        <Heading as="h1" size="md" >
                                            Validation
                                        </Heading>
                                        <Flex>
                                            {validations?.length > 0 && <Select
                                                value={validationType}
                                                name="validations"
                                                // onChange={handleChange}
                                                onChange={(e) => {
                                                    setValidationType(e.target.value)
                                                    if (e.target.value) {
                                                        const validationData = validations?.filter(item => item._id === e.target.value)
                                                        const filterData = validationData?.length > 0 ? validationData[0]?.validations : values?.validation
                                                        setFieldValue('validation', filterData)
                                                        setFieldValue('validate', true)
                                                    } else {
                                                        setFieldValue('validation', [
                                                            {
                                                                require: updateFiled?.validation ? updateFiled?.validation[0]?.require : '',
                                                                message: updateFiled?.validation ? updateFiled?.validation[0]?.message : '',
                                                            },
                                                            {
                                                                min: updateFiled?.validation ? updateFiled?.validation[1]?.min : '',
                                                                value: updateFiled?.validation ? updateFiled?.validation[1]?.value : '',
                                                                message: updateFiled?.validation ? updateFiled?.validation[1]?.message : '',
                                                            },
                                                            {
                                                                max: updateFiled?.validation ? updateFiled?.validation[2]?.max : '',
                                                                value: updateFiled?.validation ? updateFiled?.validation[2]?.value : '',
                                                                message: updateFiled?.validation ? updateFiled?.validation[2]?.message : '',
                                                            },
                                                            {
                                                                match: updateFiled?.validation ? updateFiled?.validation[3]?.match : '',
                                                                value: updateFiled?.validation ? updateFiled?.validation[3]?.value : '',
                                                                message: updateFiled?.validation ? updateFiled?.validation[3]?.message : '',
                                                            },
                                                            {
                                                                types: updateFiled?.validation ? updateFiled?.validation[4]?.formikType ? true : false : '',
                                                                formikType: updateFiled?.validation ? updateFiled?.validation[4]?.formikType : '',
                                                                message: updateFiled?.validation ? updateFiled?.validation[4]?.message : '',
                                                            }])
                                                    }

                                                }}
                                                fontWeight='500'
                                                me="10px"
                                                size='xs'
                                                placeholder={'Select Validation'}
                                            >
                                                {validations?.map((item, index) => (
                                                    <option key={index} value={item._id}>{item.name}</option>
                                                ))}
                                            </Select>}
                                            <Checkbox isChecked={(values?.type === 'range' || values.validate) ? true : false} colorScheme="brandScheme" me="10px" onChange={(e) => { setFieldValue(`validate`, e.target.checked) }} />
                                        </Flex>
                                    </Flex>
                                </GridItem>
                                {(values.validate === true || values?.type === 'range') ?
                                    <>
                                        <GridItem colSpan={{ base: 12, sm: 6, md: 4 }} mt={8}>
                                            <Flex>
                                                <Checkbox colorScheme="brandScheme" me="10px" isChecked={values?.validation[0]?.require}
                                                    onChange={(e) => {
                                                        const isChecked = e.target.checked;
                                                        setFieldValue(`validation[${0}].require`, isChecked);
                                                        setFieldValue(
                                                            'validation[0].message',
                                                            isChecked ? values?.validation[0]?.message : ''
                                                        );
                                                    }}
                                                />
                                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                                    Require
                                                </FormLabel>
                                            </Flex>
                                        </GridItem>
                                        <GridItem colSpan={{ base: 12, md: 8 }}>
                                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                Message
                                            </FormLabel>
                                            <Input
                                                disabled={values?.validation[0]?.require === true ? false : true}
                                                fontSize='sm'
                                                onChange={handleChange} onBlur={handleBlur}
                                                value={values.validation[0].require === true ? values.validation[0].message : ''}
                                                name={`validation[${0}].message`}
                                                placeholder='Enter Require  message'
                                                fontWeight='500'
                                            />
                                        </GridItem>
                                        {!(values?.type === 'radio' || values?.type === 'select' || values?.type === 'check') && <>
                                            <GridItem colSpan={{ base: 12, sm: 6, md: 4 }} mt={8}>
                                                <Flex>
                                                    <Checkbox colorScheme="brandScheme" name={`validation[${1}].min`} me="10px" isChecked={(values?.validation[1]?.min || values?.type === 'range') ? true : false} onChange={(e) => {
                                                        const isChecked = e.target.checked;
                                                        setFieldValue(`validation[${1}].min`, isChecked);
                                                        setFieldValue(
                                                            'validation[1].message',
                                                            (isChecked || values?.type === 'range') ? values?.validation[1]?.message : ''
                                                        );
                                                        setFieldValue(
                                                            'validation[1].value',
                                                            (isChecked || values?.type === 'range') ? values?.validation[1]?.value : ''
                                                        );
                                                    }} />
                                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                                        Min
                                                    </FormLabel>
                                                </Flex>
                                            </GridItem>
                                            <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                    Value{(values.validation[1].min === true || values?.type === 'range') ? <Text color={"red"}>*</Text> : ''}
                                                </FormLabel>
                                                <Input
                                                    disabled={(values.validation[1].min === true || values?.type === 'range') ? false : true}
                                                    fontSize='sm'
                                                    type={values?.type === 'date' ? 'date' : 'number'}
                                                    onChange={handleChange} onBlur={handleBlur}
                                                    value={(values.validation[1].min === true || values?.type === 'range') ? values.validation[1].value : ''}
                                                    name={`validation[${1}].value`}
                                                    placeholder='Enter Min Value'
                                                    fontWeight='500'
                                                    borderColor={(values.validation[1].min === true || values?.type === 'range') && errors?.validation && touched?.validation && errors?.validation[1]?.value && touched?.validation[1]?.value ? "red.300" : null}
                                                />
                                                {(values.validation[1].min === true || values?.type === 'range') && <Text mb='10px' color={'red'}> {errors?.validation && touched?.validation && touched?.validation[1]?.value && errors?.validation[1]?.value}</Text>}
                                            </GridItem>
                                            <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                    Message
                                                </FormLabel>
                                                <Input
                                                    disabled={(values.validation[1].min === true || values?.type === 'range') ? false : true}
                                                    fontSize='sm'
                                                    onChange={handleChange} onBlur={handleBlur}
                                                    value={(values.validation[1].min === true || values?.type === 'range') ? values.validation[1].message : ''}
                                                    name={`validation[${1}].message`}
                                                    placeholder='Enter Min message'
                                                    fontWeight='500'
                                                />
                                            </GridItem>
                                            <GridItem colSpan={{ base: 12, sm: 6, md: 4 }} mt={8}>
                                                <Flex>
                                                    <Checkbox colorScheme="brandScheme" me="10px" isChecked={(values?.validation[2].max || values?.type === 'range') ? true : false} name={`validation[${2}].max`} onChange={(e) => {
                                                        const isChecked = e.target.checked;
                                                        setFieldValue(`validation[${2}].max`, isChecked);
                                                        setFieldValue(
                                                            'validation[2].message',
                                                            (isChecked || values?.type === 'range') ? values?.validation[2]?.message : ''
                                                        );
                                                        setFieldValue(
                                                            'validation[2].value',
                                                            (isChecked || values?.type === 'range') ? values?.validation[2]?.value : ''
                                                        );
                                                    }} />
                                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                                        Max
                                                    </FormLabel>
                                                </Flex>
                                            </GridItem>
                                            <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                    Value{(values.validation[2].max === true || values?.type === 'range') ? <Text color={"red"}>*</Text> : ''}
                                                </FormLabel>
                                                <Input
                                                    disabled={(values.validation[2].max === true || values?.type === 'range') ? false : true}
                                                    fontSize='sm'
                                                    type={values?.type === 'date' ? 'date' : 'number'}
                                                    onChange={handleChange} onBlur={handleBlur}
                                                    value={(values.validation[2].max === true || values?.type === 'range') ? values.validation[2].value : ''}
                                                    name={`validation[${2}].value`}
                                                    placeholder='Enter Max Value'
                                                    fontWeight='500'
                                                    borderColor={(values.validation[2].max === true || values?.type === 'range') && errors?.validation && touched?.validation && errors?.validation[2]?.value && touched?.validation[2]?.value ? "red.300" : null}
                                                />
                                                {(values.validation[2].max === true || values?.type === 'range') && <Text mb='10px' color={'red'}> {errors?.validation && touched?.validation && touched?.validation[2]?.value && errors?.validation[2]?.value}</Text>}
                                            </GridItem>
                                            <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                    Message
                                                </FormLabel>
                                                <Input
                                                    disabled={(values.validation[2].max === true || values?.type === 'range') ? false : true}
                                                    fontSize='sm'
                                                    onChange={handleChange} onBlur={handleBlur}
                                                    value={(values.validation[2].max === true || values?.type === 'range') ? values.validation[2].message : ''}
                                                    name={`validation[${2}].message`}
                                                    placeholder='Enter Max Message'
                                                    fontWeight='500'
                                                    borderColor={errors.massage && touched.massage ? "red.300" : null}
                                                />
                                            </GridItem>
                                            <GridItem colSpan={{ base: 12, sm: 6, md: 4 }} mt={8}>
                                                <Flex>
                                                    <Checkbox colorScheme="brandScheme" isChecked={values?.validation[3]?.match} me="10px" name={`validation[${3}].match`} onChange={(e) => {
                                                        const isChecked = e.target.checked;
                                                        setFieldValue(`validation[${3}].match`, isChecked);
                                                        setFieldValue(
                                                            'validation[3].message',
                                                            isChecked ? values?.validation[3]?.message : ''
                                                        );
                                                        setFieldValue(
                                                            'validation[3].value',
                                                            isChecked ? values?.validation[3]?.value : ''
                                                        );
                                                    }} />
                                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                                        Match
                                                    </FormLabel>
                                                </Flex>
                                            </GridItem>
                                            <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                    Value{values.validation[3].match === true ? <Text color={"red"}>*</Text> : ''}
                                                </FormLabel>
                                                <Input
                                                    disabled={values.validation[3].match === true ? false : true}
                                                    fontSize='sm'
                                                    onChange={handleChange} onBlur={handleBlur}
                                                    value={values.validation[3].match === true ? values.validation[3].value : ''}
                                                    name={`validation[${3}].value`}
                                                    placeholder='Enter Match Value'
                                                    fontWeight='500'
                                                    borderColor={values.validation[3].match === true && errors?.validation && touched?.validation && errors?.validation[3]?.value && touched?.validation[3]?.value ? "red.300" : null}
                                                />
                                                {values.validation[3].match === true && <Text mb='10px' color={'red'}> {errors?.validation && touched?.validation && touched?.validation[3]?.value && errors?.validation[3]?.value}</Text>}
                                            </GridItem>
                                            <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                    Message{values.validation[3].match === true ? <Text color={"red"}>*</Text> : ''}
                                                </FormLabel>
                                                <Input
                                                    disabled={values.validation[3].match === true ? false : true}
                                                    fontSize='sm'
                                                    onChange={handleChange} onBlur={handleBlur}
                                                    value={values.validation[3].match === true ? values.validation[3].message : ''}
                                                    name={`validation[${3}].message`}
                                                    placeholder='Enter Match Message'
                                                    fontWeight='500'
                                                    borderColor={values.validation[3].match === true && errors?.validation && touched?.validation && errors?.validation[3]?.message && touched?.validation[3]?.message ? "red.300" : null}
                                                />
                                                {values.validation[3].match === true && <Text mb='10px' color={'red'}> {errors?.validation && touched?.validation && touched?.validation[3]?.message && errors?.validation[3]?.message}</Text>}
                                            </GridItem>
                                            <GridItem colSpan={{ base: 12, sm: 6, md: 4 }} mt={8}>
                                                <Flex>
                                                    <Checkbox colorScheme="brandScheme" disabled={values?.type === 'date' ? true : false} isChecked={values?.validation[4]?.types} name={`validation[${4}].types`} me="10px" onChange={(e) => {
                                                        const isChecked = e.target.checked;
                                                        setFieldValue(`validation[${4}].types`, isChecked);
                                                        setFieldValue(
                                                            'validation[4].formikType',
                                                            isChecked ? values?.validation[4]?.formikType : ''
                                                        );
                                                        setFieldValue(
                                                            'validation[4].message',
                                                            isChecked ? values?.validation[4]?.message : ''
                                                        );
                                                    }} />
                                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                                        Formik Type
                                                    </FormLabel>
                                                </Flex>
                                            </GridItem>
                                            <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                    FormikType{values.validation[4].types === true ? <Text color={"red"}>*</Text> : ''}
                                                </FormLabel>
                                                <Select
                                                    disabled={(values?.validation[4]?.types === true || values?.validation[4].formikType) ? values?.type === 'date' ? true : false : true}
                                                    value={values.validation[4].types === true ? values.validation[4].formikType : ''}
                                                    name={`validation[${4}].formikType`}
                                                    onChange={handleChange}
                                                    fontWeight='500'
                                                    placeholder={'Select Type'}
                                                    borderColor={values.validation[4].types === true && errors?.validation && touched?.validation && errors?.validation[4]?.formikType && touched?.validation[4]?.formikType ? "red.300" : null}
                                                >
                                                    <option value='string'>String </option>
                                                    <option value='email'>Email </option>
                                                    <option value='date'>Date </option>
                                                    <option value='number'>Number </option>
                                                    <option value='object'>Object </option>
                                                    <option value='array'>Array </option>
                                                    <option value='url'>Url </option>
                                                    <option value='boolean'>Boolean </option>
                                                    <option value='positive'>Positive </option>
                                                    <option value='negative'>Negative  </option>
                                                    <option value='integer'>Integer  </option>
                                                </Select>
                                                {values.validation[4].types === true && <Text mb='10px' color={'red'}> {errors?.validation && touched?.validation && touched?.validation[4]?.formikType && errors?.validation[4]?.formikType}</Text>}
                                            </GridItem>
                                            <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                    Message
                                                </FormLabel>
                                                <Input
                                                    disabled={values?.validation[4]?.types === true ? false : true}
                                                    fontSize='sm'
                                                    onChange={handleChange} onBlur={handleBlur}
                                                    value={values.validation[4].types === true ? values.validation[4].message : ''}
                                                    name={`validation[${4}].message`}
                                                    placeholder='Enter Formik Type Message'
                                                    fontWeight='500'
                                                />
                                            </GridItem></>}
                                    </>
                                    :
                                    ""}
                            </Grid>
                        </>
                    </ModalBody>
                    <ModalFooter>
                        <Button colorScheme="brand" size="sm" mr={2} type='submit' disabled={isLoding ? true : false} onClick={handleSubmit} >{isLoding ? <Spinner /> : 'Update'}</Button>
                        <Button variant="outline"
                            colorScheme='red' size="sm"
                            sx={{
                                textTransform: "capitalize",
                            }} onClick={() => { handleClose(); resetForm() }}>Close</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        </div>
    )
}

export default EditField

================
File: Client/src/views/admin/customField/index.js
================
import React, { useEffect, useState } from 'react'
import { AddIcon, ChevronDownIcon, DeleteIcon, EditIcon } from '@chakra-ui/icons';
import { Box, Button, Flex, Menu, MenuButton, Checkbox, GridItem, Text, MenuItem, Grid, MenuList, useColorModeValue } from '@chakra-ui/react';
import Card from 'components/card/Card'
import Addfield from './addfield'
import { getApi, putApi } from 'services/api';
import EditField from './editfield';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import { BiGridVertical } from "react-icons/bi";
import AddEditHeading from "./addEditHeading";
import { useNavigate } from 'react-router-dom';
import { IoIosArrowBack } from 'react-icons/io';
import Spinner from "components/spinner/Spinner";
import CommonDeleteModel from 'components/commonDeleteModel';
import { deleteApi } from 'services/api';
import { deleteManyApi } from 'services/api';

const CustomField = () => {
    const [addFieldModel, setAddFieldModel] = useState(false);
    const [moduleName, setModuleName] = useState('')
    const [moduleId, setModuleId] = useState('')
    const [data, setData] = useState([])
    const [dataFilter, setDataFilter] = useState([])
    const [fields, setFields] = useState([])
    const [editModal, setEditModal] = useState(false)
    const [updateField, setUpdateField] = useState({})
    const [deleteMany, setDeleteMany] = useState(false)
    const [selectedValues, setSelectedValues] = useState([]);

    const [addHeadingModel, setAddHeadingModel] = useState(false);
    const [deleteManyHeadings, setDeleteManyHeadings] = useState(false);
    const [editHeadingModal, setEditHeadingModal] = useState(false);
    const [updateHeading, setUpdateHeading] = useState({});
    const [selectedHeadings, setSelectedHeadings] = useState([]);
    const [headingId, setHeadingId] = useState('');
    const [heading, setHeading] = useState('');
    const [isLoding, setIsLoding] = useState(false)
    const [method, setMethod] = useState('')
    const [selectedId, setSelectedId] = useState('')
    const [validations, setValidations] = useState([])
    const [isLoading, setIsLoading] = useState(false)

    const handleHeadigsCheckboxChange = (event, value) => {
        if (event.target.checked) {
            setSelectedHeadings((prevSelectedHeadings) => [...prevSelectedHeadings, value]);
        } else {
            setSelectedHeadings((prevSelectedHeadings) =>
                prevSelectedHeadings.filter((selectedHeading) => selectedHeading !== value)
            );
        }
    };

    const handleHeadingsDragEnd = async (result) => {
        if (!result.destination) {
            return;
        }

        const newData = [...data[0]?.headings];
        const [removed] = newData.splice(result.source.index, 1);
        newData.splice(result.destination.index, 0, removed);
        setData((prev) => [{ ...prev[0], headings: newData }]);

        const response = await putApi(`api/custom-field/change-headings/${moduleId}`, newData)
        fetchData();
    };

    const textColor = useColorModeValue("gray.500", "white");

    const getValidationData = async () => {
        const response = await getApi('api/validation')
        setValidations(response.data)
    }

    useEffect(() => {
        getValidationData()
    }, [moduleName])

    const navigate = useNavigate()

    const handleCheckboxChange = (event, value) => {
        if (event.target.checked) {
            setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);
        } else {
            setSelectedValues((prevSelectedValues) =>
                prevSelectedValues.filter((selectedValue) => selectedValue !== value)
            );
        }
    };

    const handleDragEnd = async (result) => {
        if (!result.destination) {
            return;
        }

        const newData = [...data[0]?.fields];
        const newFilterData = [...dataFilter];
        const [removed] = newData.splice(result.source.index, 1);
        newData.splice(result.destination.index, 0, removed);
        const [removed1] = newFilterData.splice(result.source.index, 1);
        newFilterData.splice(result.destination.index, 0, removed1);
        setData((prev) => [{ ...prev[0], fields: newData }]);
        setDataFilter(newFilterData);

        const mergedArray = [...newFilterData, ...newData];

        const unique = [...new Set(mergedArray.map(item => item))]

        await putApi(`api/custom-field/change-fields/${moduleId}`, unique);
        fetchData();
    };

    const fetchData = async () => {
        setIsLoading(true)
        let responseAllData = await getApi(`api/custom-field`);
        setFields(responseAllData?.data);
        if (moduleName) {
            let response = await getApi(`api/custom-field/?moduleName=${moduleName}`);
            const filterData = response?.data[0]?.fields?.filter(field => (headingId ? headingId : field?.belongsTo) === field?.belongsTo);

            setDataFilter(filterData);
            setData(response?.data);
        } else if (!moduleName) {
            setData([]);
            setDataFilter([])
        }
        setIsLoading(false)
    }

    const handleDeleteFiled = async (id, fieldsIds) => {
        if (method === 'one') {
            try {
                setIsLoding(true)
                const response = await deleteApi(`api/custom-field/delete/${id}?moduleId=`, moduleId)
                if (response.status === 200) {
                    setDeleteMany(false)
                    fetchData()
                }
            } catch (error) {
                console.log(error)
            }
            finally {
                setIsLoding(false)
            }
        } else if (method === 'many') {
            try {
                setIsLoding(true)
                const payload = {
                    moduleId: data[0]?._id,
                    fieldsIds: fieldsIds
                }
                let response = await deleteManyApi('api/custom-field/deleteMany', payload)
                if (response.status === 200) {
                    setSelectedValues([])
                    setDeleteMany(false)
                    fetchData()
                }
            } catch (error) {
                console.log(error)
            }
            finally {
                setIsLoding(false)
            }
        }
    };

    const handleDeleteHeading = async (id, headingsIds) => {
        if (method === 'one') {
            try {
                setIsLoding(true)
                const response = await deleteApi(`api/custom-field/delete-heading/${id}?moduleId=`, moduleId)
                if (response.status === 200) {
                    setDeleteManyHeadings(false)
                    fetchData()
                }
            } catch (error) {
                console.log(error)
            }
            finally {
                setIsLoding(false)
            }
        } else if (method === 'many') {
            try {
                setIsLoding(true)
                const payload = {
                    moduleId: data[0]?._id,
                    headingsIds: headingsIds
                }
                let response = await deleteManyApi('api/custom-field/deleteMany-headings', payload)
                if (response.status === 200) {
                    setSelectedHeadings([])
                    setDeleteManyHeadings(false)
                    fetchData()
                }
            } catch (error) {
                console.log(error)
            }
            finally {
                setIsLoding(false)
            }
        }
    };

    const handleOpenDeleteMany = (id, type) => {
        setMethod(type)
        setSelectedId(id);
        setDeleteMany(true);
    }

    const handleOpenDeleteModel = (id, type) => {
        setMethod(type)
        setSelectedId(id);
        setDeleteManyHeadings(true);
    }

    useEffect(() => {
        if (fetchData) fetchData()
    }, [moduleName, headingId])

    return (
        <>
            <Card minHeight='250px'>
                <Flex justifyContent={'space-between'} alignItems={'center'}>
                    <Flex alignItems='center'>
                        <Text color={"secondaryGray.900"}
                            fontSize="22px"
                            fontWeight="700"
                        >{moduleName ? 'Custom Heading' : 'Select Module'}</Text>
                        {selectedHeadings.length > 0 && <Button color="red" ml='2' onClick={() => handleOpenDeleteModel('', 'many')} size='sm' ><DeleteIcon /></Button>}
                    </Flex>
                    <Box>
                        <Flex>
                            {!isLoading && (
                                <Menu>
                                    <MenuButton as={Button} mr={2} size='sm' rightIcon={<ChevronDownIcon />} variant="outline">
                                        {moduleName ? moduleName : 'Select Module'}
                                    </MenuButton>
                                    <MenuList minWidth={"10rem"} maxHeight={'15rem'} overflow={'auto'}>
                                        <MenuItem onClick={() => { setModuleName(''); setData([]); setDataFilter([]); }}>Select Module</MenuItem>
                                        {fields?.map((item, id) => (
                                            <MenuItem key={id} onClick={() => { setModuleName(item.moduleName); setModuleId(item._id); setHeadingId('') }}>{item.moduleName}</MenuItem>
                                        ))}
                                    </MenuList>
                                </Menu>
                            )}

                            {data?.length > 0 && <Button ml={2} onClick={() => setAddHeadingModel(true)} leftIcon={<AddIcon />} variant="brand" size='sm'>Add Heading</Button>}
                            <Button onClick={() => navigate('/admin-setting')} variant="brand" size="sm" leftIcon={<IoIosArrowBack />} ml={2}>Back</Button>
                        </Flex>
                    </Box>
                </Flex>
                {!data?.length > 0 && !isLoading && <Text
                    textAlign={"center"}
                    width="100%"
                    color={'gray.500'}
                    fontSize="sm"
                    my='7'
                    fontWeight="700"
                >-- Please Select Module --</Text>}
                {isLoading ? <Flex justifyContent={'center'} alignItems={'center'} width="100%" color={textColor} fontSize="sm" fontWeight="700">
                    <Spinner />
                </Flex> : <DragDropContext DragDropContext onDragEnd={handleHeadingsDragEnd} >
                    <Droppable droppableId="droppable">
                        {(provided) => (
                            <div ref={provided.innerRef} {...provided.droppableProps}>
                                {
                                    data[0]?.headings?.length === 0 ? <Text
                                        textAlign={"center"}
                                        width="100%"
                                        color={'gray.500'}
                                        fontSize="sm"
                                        my='7'
                                        fontWeight="700"
                                    >-- No Data Found --</Text> : <Grid templateColumns="repeat(12, 1fr)" gap={3} mt={5}>
                                        {data[0]?.headings?.map((item, i) => (
                                            <GridItem colSpan={{ base: 12, md: 6 }} key={item._id}>
                                                <Draggable draggableId={item._id} index={i}>
                                                    {(provided, snapshot) => (
                                                        <div
                                                            ref={provided.innerRef}
                                                            {...provided.draggableProps}
                                                        >
                                                            <Flex
                                                                alignItems="center"
                                                                justifyContent="space-between"
                                                                className="CustomFieldName"
                                                            >

                                                                <Text display='flex' alignItems='center' size='sm' colorScheme='gray' ms='4px' mt={4} fontSize='md' fontWeight='500' mb='8px' >
                                                                    {!item.fixed && <div {...provided.dragHandleProps} style={{ marginRight: '10px', cursor: 'grab' }} size={18} >
                                                                        <BiGridVertical size={18} />
                                                                    </div>}
                                                                    {!item.fixed && <Checkbox colorScheme="brandScheme" value={selectedHeadings} isChecked={selectedHeadings.includes(item?._id)} onChange={(event) => handleHeadigsCheckboxChange(event, item?._id)} me="10px" />}
                                                                    {item?.heading}
                                                                </Text>
                                                                <span className="EditDelete">
                                                                    {item?.editable ?
                                                                        <Button size='sm' variant='outline' me={2} color={'green'} onClick={() => { setEditHeadingModal(true); setUpdateHeading(item) }}><EditIcon /></Button> :
                                                                        <Button size='sm' variant='outline' me={2} color={'gray'} pointer="none" ><EditIcon /></Button>}
                                                                    {item.fixed ? <Button size='sm' variant='outline' me={2} color={'gray'}><DeleteIcon /></Button> : <Button size='sm' variant='outline' me={2} color={'red'} onClick={() => { handleOpenDeleteModel(item?._id, 'one') }}><DeleteIcon /></Button>}
                                                                </span>
                                                            </Flex>
                                                        </div>
                                                    )}
                                                </Draggable>
                                            </GridItem>
                                        ))}
                                    </Grid>
                                }

                            </div>
                        )}
                    </Droppable>
                </DragDropContext>}

            </Card>
            {data?.length > 0 && <Card mt='5'>
                <Flex justifyContent={'space-between'} alignItems={'center'} mt='5'>
                    <Flex alignItems='center'>
                        <Text color={"secondaryGray.900"}
                            fontSize="22px"
                            fontWeight="700"
                        >{moduleName && 'Custom Field'}</Text>
                        {selectedValues.length > 0 && <Button color="red" ml='2' onClick={() => handleOpenDeleteMany('', 'many')} size='sm' ><DeleteIcon /></Button>}
                    </Flex>

                    <Box>
                        {(!isLoading && data[0]?.headings.length > 0) && <Menu>
                            <MenuButton as={Button} size='sm' rightIcon={<ChevronDownIcon />} variant="outline">
                                {heading ? heading : 'Select All Headings'}
                            </MenuButton>
                            <MenuList minWidth={"10rem"} maxHeight={'15rem'} overflow={'auto'}>
                                <MenuItem onClick={() => { setHeading(''); setHeadingId('') }}>Select All Headings</MenuItem>
                                {data[0]?.headings?.map((item, id) => (
                                    <MenuItem key={id} onClick={() => { setHeading(item.heading); setHeadingId(item._id) }}>{item.heading}</MenuItem>
                                ))}
                            </MenuList>
                        </Menu>}
                        {data?.length > 0 && <Button me={2} ml='2' onClick={() => setAddFieldModel(true)} variant="brand" leftIcon={<AddIcon />} size='sm'>Add Field</Button>}
                    </Box>

                </Flex>
                {isLoading && moduleName ? <Flex justifyContent={'center'} alignItems={'center'} width="100%" color={textColor} fontSize="sm" fontWeight="700">
                    <Spinner />
                </Flex> :
                    <>
                        <DragDropContext DragDropContext onDragEnd={handleDragEnd} >
                            <Droppable droppableId="droppable">
                                {(provided) => (
                                    <div ref={provided.innerRef} {...provided.droppableProps}>
                                        {
                                            dataFilter.length === 0 ?
                                                <Text
                                                    textAlign={"center"}
                                                    width="100%"
                                                    color={'gray.500'}
                                                    fontSize="sm"
                                                    my='7'
                                                    fontWeight="700"
                                                >-- No Data Found --</Text>
                                                : <Grid templateColumns="repeat(12, 1fr)" gap={3} mt={5}>
                                                    {dataFilter && dataFilter?.map((item, i) => (
                                                        <GridItem colSpan={{ base: 12, md: 6 }} key={item._id}>
                                                            <Draggable draggableId={item._id} index={i}>
                                                                {(provided, snapshot) => (
                                                                    <div
                                                                        ref={provided.innerRef}
                                                                        {...provided.draggableProps}
                                                                    >
                                                                        <Flex
                                                                            alignItems="center"
                                                                            justifyContent="space-between"
                                                                            className="CustomFieldName"
                                                                        >

                                                                            <Text display='flex' alignItems='center' size='sm' colorScheme='gray' ms='4px' mt={4} fontSize='md' fontWeight='500' mb='8px' >
                                                                                <div {...provided.dragHandleProps} style={{ marginRight: '10px', cursor: 'grab' }} size={18} >
                                                                                    <BiGridVertical size={18} />
                                                                                </div>
                                                                                {!item.fixed && <Checkbox colorScheme="brandScheme" value={selectedValues} isChecked={selectedValues.includes(item?._id)} onChange={(event) => handleCheckboxChange(event, item?._id)} me="10px" />}
                                                                                {item?.label}
                                                                            </Text>
                                                                            <span className="EditDelete">
                                                                                {item?.editable ?
                                                                                    <Button size='sm' variant='outline' me={2} color={'green'} onClick={() => { setEditModal(true); setUpdateField(item) }}><EditIcon /></Button> :
                                                                                    <Button size='sm' variant='outline' me={2} color={'gray'} ><EditIcon /></Button>
                                                                                }
                                                                                {item.fixed ? <Button size='sm' variant='outline' me={2} color={'gray'}><DeleteIcon /></Button> : <Button size='sm' variant='outline' me={2} color={'red'} onClick={() => { handleOpenDeleteMany(item?._id, "one"); }}><DeleteIcon /></Button>}
                                                                            </span>
                                                                        </Flex>
                                                                    </div>
                                                                )}
                                                            </Draggable>
                                                        </GridItem>
                                                    ))}
                                                </Grid>
                                        }

                                    </div>
                                )}
                            </Droppable>
                        </DragDropContext>

                    </>
                }
            </Card>}
            <Addfield isOpen={addFieldModel} onClose={setAddFieldModel} moduleName={moduleName} field={data[0]?.fields} validations={validations} moduleId={data[0]?._id} fetchData={fetchData} headingsData={data?.[0]?.headings} />
            <EditField isOpen={editModal} onClose={setEditModal} field={data[0]?.fields} moduleId={data[0]?._id} validations={validations} fetchData={fetchData} updateFiled={updateField} headingsData={data?.[0]?.headings} />

            <AddEditHeading isOpen={addHeadingModel || editHeadingModal} onClose={editHeadingModal ? setEditHeadingModal : setAddHeadingModel} moduleName={moduleName} moduleId={data[0]?._id} fetchData={fetchData} updateData={updateHeading} setUpdateData={setUpdateHeading} />

            <CommonDeleteModel isOpen={deleteMany} onClose={() => setDeleteMany(false)} type={method === "one" ? 'Leads Filed' : 'Leads Fileds'} handleDeleteData={handleDeleteFiled} ids={selectedId} selectedValues={selectedValues} />
            <CommonDeleteModel isOpen={deleteManyHeadings} onClose={() => setDeleteManyHeadings(false)} type={method === "one" ? 'Leads Heading' : 'Leads Headings'} handleDeleteData={handleDeleteHeading} ids={selectedId} selectedValues={selectedHeadings} />

        </>
    )
}

export default CustomField

================
File: Client/src/views/admin/default/components/PieCard.js
================
// Chakra imports
import { Box, Flex, Text, Select, useColorModeValue } from "@chakra-ui/react";
// Custom components
import Card from "components/card/Card.js";
import PieChart from "components/charts/PieChart";
import { pieChartData, pieChartOptions } from "variables/charts";
import { VSeparator } from "components/separator/Separator";
import React from "react";

export default function Conversion(props) {
  const { ...rest } = props;

  // Chakra Color Mode
  const textColor = useColorModeValue("secondaryGray.900", "white");
  const cardColor = useColorModeValue("white", "navy.700");
  const cardShadow = useColorModeValue(
    "0px 18px 40px rgba(112, 144, 176, 0.12)",
    "unset"
  );
  return (
    <Card p='20px' align='center' direction='column' w='100%' {...rest}>
      <Flex
        px={{ base: "0px", "2xl": "10px" }}
        justifyContent='space-between'
        alignItems='center'
        w='100%'
        mb='8px'>
        <Text color={textColor} fontSize='md' fontWeight='600' mt='4px'>
          Your Pie Chart
        </Text>
        <Select
          fontSize='sm'
          variant='subtle'
          defaultValue='monthly'
          width='unset'
          fontWeight='700'>
          <option value='daily'>Daily</option>
          <option value='monthly'>Monthly</option>
          <option value='yearly'>Yearly</option>
        </Select>
      </Flex>

      <PieChart
        h='100%'
        w='100%'
        chartData={pieChartData}
        chartOptions={pieChartOptions}
      />
      <Card
        bg={cardColor}
        flexDirection='row'
        boxShadow={cardShadow}
        w='100%'
        p='15px'
        px='20px'
        mt='15px'
        mx='auto'>
        <Flex direction='column' py='5px'>
          <Flex align='center'>
            <Box h='8px' w='8px' bg='brand.500' borderRadius='50%' me='4px' />
            <Text
              fontSize='xs'
              color='secondaryGray.600'
              fontWeight='700'
              mb='5px'>
              Your files
            </Text>
          </Flex>
          <Text fontSize='lg' color={textColor} fontWeight='700'>
            63%
          </Text>
        </Flex>
        <VSeparator mx={{ base: "60px", xl: "60px", "2xl": "60px" }} />
        <Flex direction='column' py='5px' me='10px'>
          <Flex align='center'>
            <Box h='8px' w='8px' bg='#6AD2FF' borderRadius='50%' me='4px' />
            <Text
              fontSize='xs'
              color='secondaryGray.600'
              fontWeight='700'
              mb='5px'>
              System
            </Text>
          </Flex>
          <Text fontSize='lg' color={textColor} fontWeight='700'>
            25%
          </Text>
        </Flex>
      </Card>
    </Card>
  );
}

================
File: Client/src/views/admin/default/index.jsx
================
// Chakra imports
import {
  Flex,
  Heading,
  Icon,
  IconButton,
  SimpleGrid,
  useColorModeValue,
  Grid,
  GridItem,
  Progress,
  Box,
  Text,
} from "@chakra-ui/react";
// Assets
// Custom components
import { ViewIcon } from "@chakra-ui/icons";
import Card from "components/card/Card";
import MiniStatistics from "components/card/MiniStatistics";
import IconBox from "components/icons/IconBox";
import { HSeparator } from "components/separator/Separator";
import { useEffect, useState } from "react";
import { LuBuilding2 } from "react-icons/lu";
import { MdAddTask, MdContacts, MdLeaderboard } from "react-icons/md";
import { useNavigate } from "react-router-dom";
import { getApi } from "services/api";
import ReportChart from "../reports/components/reportChart";
import Chart from "components/charts/LineChart.js";
import { HasAccess } from "../../../redux/accessUtils";
import PieChart from "components/charts/PieChart";
import CountUpComponent from "../../../../src/components/countUpComponent/countUpComponent";
import Spinner from 'components/spinner/Spinner';
import { useSelector } from "react-redux";

export default function UserReports() {
  // Chakra Color Mode
  const brandColor = useColorModeValue("brand.500", "white");
  const boxBg = useColorModeValue("secondaryGray.300", "whiteAlpha.100");
  const user = JSON.parse(localStorage.getItem("user"));
  const [isLoding, setIsLoding] = useState(false);

  const [allData, setAllData] = useState([]);
  const [data, setData] = useState([]);
  const navigate = useNavigate();
  const modules = useSelector((state) => state?.modules?.data)
  const [contactsView, taskView, leadView, proprtyView] = HasAccess(["Contacts", "Tasks", "Leads", "Properties"]);

  const fetchData = async () => {
    let responseData = await getApi(user?.role === 'superAdmin' ? `api/status/` : `api/status/?createBy=${user?._id}`);
    setAllData(responseData?.data?.data);
  };


  const fetchProgressChart = async () => {
    setIsLoding(true);
    let result = await getApi(user?.role === 'superAdmin' ? 'api/reporting/line-chart' : `api/reporting/line-chart?createBy=${user?._id}`);
    if (result && result?.status === 200) {
      setData(result?.data)
    }
    setIsLoding(false);
  }
  useEffect(() => {
    fetchProgressChart()
  }, [])


  const findModuleData = (title) => {
    const filterData = data?.find(item => item?.name === title)
    return filterData?.length || 0
  }

  const findLeadStatus = (title) => {
    const filterData = allData?.leadData?.filter(item => item?.leadStatus === title)
    return filterData?.length || 0
  }
  const findTaskStatus = (title) => {
    const filterData = allData?.taskData?.filter(item => item?.status === title)
    return filterData?.length || 0
  }

  const leadModule = modules?.find(({ moduleName }) => moduleName === "Leads")
  const contactModule = modules?.find(({ moduleName }) => moduleName === "Contacts")
  const propertiesModule = modules?.find(({ moduleName }) => moduleName === "Properties")
  const tasksModule = modules?.find(({ moduleName }) => moduleName === "Tasks")
  const reportModule = modules?.find(({ moduleName }) => moduleName === "Reporting and Analytics")
  const emailModule = modules?.find(({ moduleName }) => moduleName === "Emails")
  const callModule = modules?.find(({ moduleName }) => moduleName === "Calls")

  const taskStatus = [
    {
      name: "Completed",
      status: 'completed',
      length: findTaskStatus('completed'),
      color: "#4d8f3a"
    },
    {
      name: "Pending",
      status: 'pending',
      length: findTaskStatus('pending'),
      color: "#a37f08"
    },
    {
      name: "In Progress",
      status: 'inProgress',
      length: findTaskStatus('inProgress'),
      color: "#7038db"
    },
    {
      name: "Todo",
      status: 'todo',
      length: findTaskStatus('todo'),
      color: "#1f7eeb"
    },
    {
      name: "On Hold",
      status: 'onHold',
      length: findTaskStatus('onHold'),
      color: "#DB5436"
    },
  ]
  const navigateTo = {
    Lead: '/lead',
    Contact: '/contacts',
    Meeting: '/metting',
    Call: '/phone-call',
    Task: '/task',
    Email: '/email',
    Property: '/properties',
  };

  useEffect(() => {
    fetchData();
  }, [user?._id]);

  return (
    <>
      <SimpleGrid columns={{ base: 1, md: 2, lg: 4 }} gap="20px" mb="20px">
        {(taskView?.create || taskView?.update || taskView?.delete || taskView?.view) && (tasksModule?.isActive) &&
          <MiniStatistics
            onClick={() => navigate("/task")}
            startContent={
              <IconBox
                w="56px"
                h="56px"
                bg="linear-gradient(90deg, #4481EB 0%, #04BEFE 100%)"
                icon={<Icon w="28px" h="28px" as={MdAddTask} color="white" />}
              />
            }
            name="Tasks"
            value={findModuleData("Tasks")}
          />}
        {(contactsView?.create || contactsView?.update || contactsView?.delete || contactsView?.view) && (contactModule?.isActive) &&
          < MiniStatistics
            onClick={() => navigate("/contacts")}
            startContent={
              <IconBox
                w="56px"
                h="56px"
                bg={boxBg}
                icon={
                  <Icon w="32px" h="32px" as={MdContacts} color={brandColor} />
                }
              />
            }
            name="Contacts"
            value={findModuleData("Contacts")}
          />}
        {(leadView?.create || leadView?.update || leadView?.delete || leadView?.view) && (leadModule?.isActive) &&
          <MiniStatistics
            onClick={() => navigate("/lead")}
            startContent={
              <IconBox
                w="56px"
                h="56px"
                bg={boxBg}
                icon={
                  <Icon w="32px" h="32px" as={MdLeaderboard} color={brandColor} />
                }
              />
            }
            name="Leads"
            value={findModuleData("Leads")}
          />}
        {(proprtyView?.create || proprtyView?.update || proprtyView?.delete || proprtyView?.view) && (propertiesModule?.isActive) &&
          <MiniStatistics
            onClick={() => navigate("/properties")}
            startContent={
              <IconBox
                w="56px"
                h="56px"
                bg={boxBg}
                icon={
                  <Icon w="32px" h="32px" as={LuBuilding2} color={brandColor} />
                }
              />
            }
            name="Property"
            value={findModuleData("Properties")}
          />}
      </SimpleGrid>

      <Grid Grid templateColumns="repeat(12, 1fr)" gap={3} >
        {
          (emailModule?.isActive || callModule?.isActive) &&
          <GridItem rowSpan={2} colSpan={{ base: 12, md: 6 }}>
            <Card>
              <Flex mb={3} alignItems={"center"} justifyContent={"space-between"}>
                <Heading size="md">{(emailModule?.isActive && callModule?.isActive) ? "Email and Call" : emailModule?.isActive ? "Email" : callModule?.isActive ? "Call" : ""} Report</Heading>
                {
                  reportModule?.isActive &&
                  <IconButton
                    color={"green.500"}
                    onClick={() => navigate("/reporting-analytics")}
                    aria-label="Call Fred"
                    borderRadius="10px"
                    size="md"
                    icon={<ViewIcon />}
                  />
                }
              </Flex>
              <HSeparator />
              <ReportChart dashboard={"dashboard"} />
            </Card>
          </GridItem>
        }
        <GridItem rowSpan={2} colSpan={{ base: 12, md: 6 }}>
          <Card>
            <Flex mb={5} alignItems={"center"} justifyContent={"space-between"}>
              <Heading size="md">Module Data Report</Heading>

            </Flex>
            <Box mb={3}>
              <HSeparator />
            </Box>
            <Chart dashboard={"dashboard"} data={data} />
          </Card>
        </GridItem>
      </Grid>
      <SimpleGrid gap="20px" columns={{
        base: 1, md: leadView?.view && taskView?.view ? 2 : 2, lg:
          leadView?.view && taskView?.view ? 3 : 2
      }} my="20px">

        {
          data && data.length > 0 &&
          <Card >
            <Heading size="md" pb={3}>Statistics</Heading>
            {
              !isLoding ?
                data && data.length > 0 && data?.map((item, i) => (
                  <>
                    <Box border={"1px solid #e5e5e5"} p={2} m={1} cursor={'pointer'} key={i} onClick={() => navigate(navigateTo[item.name])}>
                      <Flex justifyContent={"space-between"}>
                        <Text fontSize="sm" fontWeight={600} pb={2}>{item?.name}</Text>
                        <Text fontSize="sm" fontWeight={600} pb={2}><CountUpComponent targetNumber={item?.length} /></Text>
                      </Flex>
                      <Progress
                        colorScheme={item?.color}
                        size='xs' value={item?.length} width={"100%"} />
                    </Box>
                  </>

                )) : <div style={{ display: "flex", justifyContent: "center", alignItems: "center" }}><Spinner /></div>
            }
          </Card>
        }

        {leadView?.view && (leadModule?.isActive) && <Card>
          <Heading size="md" pb={2}>Lead Statistics</Heading>
          {(leadView?.view) &&
            <Grid templateColumns="repeat(12, 1fr)" gap={2}>
              <GridItem colSpan={{ base: 12, md: 6 }}>
                <Box backgroundColor={"#ebf5ff"}
                  borderRadius={"10px"}
                  cursor={"pointer"}
                  onClick={() => navigate('/lead')}
                  p={2} m={1} textAlign={"center"}>
                  <Heading size="sm" pb={3} color={"#1f7eeb"}>Total Leads </Heading>
                  <Text fontWeight={600} color={"#1f7eeb"}><CountUpComponent targetNumber={allData?.leadData?.length || 0} /> </Text>
                </Box>
              </GridItem>
              <GridItem colSpan={{ base: 12, md: 6 }}>
                <Box backgroundColor={"#eaf9e6"}
                  borderRadius={"10px"}
                  cursor={"pointer"}
                  onClick={() => navigate('/lead', { state: 'active' })}
                  p={2} m={1} textAlign={"center"}>
                  <Heading size="sm" pb={3} color={"#43882f"} >Active Leads </Heading>
                  <Text fontWeight={600} color={"#43882f"}><CountUpComponent targetNumber={findLeadStatus("active")} /></Text>
                </Box>
              </GridItem>
              <GridItem colSpan={{ base: 12, md: 6 }}>
                <Box backgroundColor={"#fbf4dd"}
                  onClick={() => navigate('/lead', { state: 'pending' })}
                  borderRadius={"10px"}
                  cursor={"pointer"}
                  p={2} m={1} textAlign={"center"}>
                  <Heading size="sm" pb={3} color={"#a37f08"}>Pending Leads</Heading>
                  <Text fontWeight={600} color={"#a37f08"}><CountUpComponent targetNumber={findLeadStatus("pending")} /></Text>
                </Box>
              </GridItem>

              <GridItem colSpan={{ base: 12, md: 6 }}>
                <Box backgroundColor={"#ffeeeb"}
                  borderRadius={"10px"}
                  cursor={"pointer"}
                  onClick={() => navigate('/lead', { state: 'sold' })}
                  p={2} m={1} textAlign={"center"}>
                  <Heading size="sm" pb={3} color={"#d6401d"}>Sold Leads </Heading>
                  <Text fontWeight={600} color={"#d6401d"}><CountUpComponent targetNumber={findLeadStatus("sold")} /></Text>
                </Box>
              </GridItem>
            </Grid>
          }
          <Flex justifyContent={"center"}  >
            <PieChart leadData={allData?.leadData} />
          </Flex>

        </Card>}

        {taskView?.view && (tasksModule?.isActive) && <Card >
          <Heading size="md" pb={3}>Task Statistics</Heading>
          <Grid templateColumns="repeat(12, 1fr)" gap={2} mb={2}>
            <GridItem colSpan={{ base: 12 }}>
              <Box backgroundColor={"#ebf5ff"}
                onClick={() => navigate('/task')}
                borderRadius={"10px"} cursor={'pointer'}
                p={2} m={1} textAlign={"center"}>
                <Heading size="sm" pb={3} color={"#1f7eeb"}>Total Tasks </Heading>
                <Text fontWeight={600} color={"#1f7eeb"}><CountUpComponent targetNumber={allData?.taskData?.length || 0} /></Text>
              </Box>
            </GridItem>
          </Grid>
          {taskStatus && taskStatus.length > 0 && taskStatus?.map((item, i) => (
            <Box my={1.5} key={i}>
              {/* <Flex justifyContent={"space-between"} cursor={'pointer'} onClick={() => navigate('/task', { state: item.status })} alignItems={"center"} padding={4} backgroundColor={"#0b0b0b17"} borderRadius={"10px"}> */}
              <Flex justifyContent={"space-between"} cursor={'pointer'} alignItems={"center"} padding={4} backgroundColor={"#0b0b0b17"} borderRadius={"10px"}>
                <Flex alignItems={"center"}>
                  <Box height={"18px"} width={"18px"} lineHeight={"18px"} textAlign={"center"} border={`1px solid ${item.color}`} display={"flex"} justifyContent={"center"} alignItems={"center"} borderRadius={"50%"} margin={"0 auto"} >
                    <Box backgroundColor={`${item.color}`} height={"10px"} width={"10px"} borderRadius={"50%"}></Box>
                  </Box>

                  <Text ps={2} fontWeight={"bold"} color={`${item.color}`}>{item.name}</Text>

                </Flex>
                <Box fontWeight={"bold"} color={`${item.color}`}><CountUpComponent targetNumber={item?.length} /></Box>
              </Flex>
            </Box>
          ))}
        </Card>}
      </SimpleGrid>

    </>
  );
}

================
File: Client/src/views/admin/document/component/Delete.js
================
import { Button, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from '@chakra-ui/react';
import { deleteManyApi } from 'services/api';

const Delete = (props) => {
    const handleDeleteClick = async () => {
        if (props.method === 'one') {
            props.deleteFile(props.id)
            props.onClose(false)
        } else if (props.method === 'many') {
            try {
                let response = await deleteManyApi(props.url, props.data)
                if (response.status === 200) {
                    props.setSelectedValues([])
                    props.onClose(false)
                }
            } catch (error) {
                console.log(error)
            }
        }
    };

    const handleClose = () => {
        props.onClose(false)
    }

    return (
        <div>
            <Modal onClose={props.onClose} isOpen={props.isOpen} isCentered>
                <ModalOverlay />
                <ModalContent>
                    <ModalHeader>Delete Document{props.method === 'one' ? '' : 's'}</ModalHeader>
                    <ModalCloseButton />
                    <ModalBody>
                        Are You Sure To Delete selected Document{props.method === 'one' ? '' : 's'} ?
                    </ModalBody>
                    <ModalFooter>
                        <Button size="sm" colorScheme="red" mr={2} onClick={handleDeleteClick}>Yes</Button>
                        <Button size="sm" variant="outline" onClick={handleClose}>No</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        </div>
    )
}

export default Delete

================
File: Client/src/views/admin/document/component/LinkModel.js
================
import { LinkIcon } from '@chakra-ui/icons';
import { Button, Flex, FormLabel, Grid, GridItem, IconButton, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Radio, RadioGroup, Select, Stack, Text, useDisclosure } from '@chakra-ui/react';
import { useFormik } from 'formik';
import { useEffect, useState } from 'react';
import { toast } from 'react-toastify';
import { getApi, postApi } from 'services/api';
import ContactModel from 'components/commonTableModel/ContactModel';
import LeadModel from "components/commonTableModel/LeadModel";
import { LiaMousePointerSolid } from 'react-icons/lia';

const Link = (props) => {
    const { setLinkDocument } = props;
    const [isLoding, setIsLoding] = useState(false)
    const [data, setData] = useState([])
    const [contactModelOpen, setContactModel] = useState(false);
    const [leadModelOpen, setLeadModel] = useState(false);
    const user = JSON.parse(localStorage.getItem('user'))

    const initialValues = {
        linkWith: '',
        linkContact: '',
        linkLead: '',
    }

    const formik = useFormik({
        initialValues: initialValues,
        onSubmit: (values, { resetForm }) => {
            handleClick();
            resetForm();
        },
    });
    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik

    const handleClick = async () => {
        try {
            setIsLoding(true)
            let data = values.linkContact ? { linkContact: values.linkContact } : { linkLead: values.linkLead }
            let response = await postApi(`api/document/link-document/${props.id}`, data)
            if (response && response.status === 200) {
                setLinkDocument((pre) => !pre)
                props.onClose();
            } else {
                toast.error(response.response.data?.message)
            }
        } catch (error) {
            console.log(error)
        }
        finally {
            setIsLoding(false)
        }
    }

    const handleClose = () => {
        props.onClose(false)
    }

    const fetchData = async () => {
        if (values.linkWith === 'Contact') {
            let result = await getApi(user.role === 'superAdmin' ? 'api/contact/' : `api/contact/?createBy=${user._id}`);
            values.createBy = result?._id;
            setData(prevData => [
                // ...prevData,
                ...(result?.data?.map(item => ({ label: item.firstName + ' ' + item.lastName, value: item._id })) || [])
            ]);
        } else if (values.linkWith === 'lead') {
            let result = await getApi(user.role === 'superAdmin' ? 'api/lead/' : `api/lead/?createBy=${user._id}`);
            values.createBy = result?._id;
            setData(prevData => [
                // ...prevData,
                ...(result?.data?.map(item => ({ label: item.leadName, value: item._id })) || [])
            ]);
        }
    }

    useEffect(() => {
        fetchData()
    }, [values.linkWith]);

    return (
        <>

            <Modal onClose={props.onClose} isOpen={props.isOpen} >
                <ModalOverlay />
                <ModalContent>
                    <ModalHeader>Link With Document</ModalHeader>
                    <ModalCloseButton />
                    <ModalBody>

                        <Grid templateColumns="repeat(12, 1fr)" gap={3}>

                            <GridItem colSpan={{ base: 12 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Link With
                                </FormLabel>
                                <RadioGroup onChange={(e) => { resetForm(); setFieldValue('linkWith', e) }} value={values.linkWith}>
                                    <Stack direction='row'>
                                        <Radio value='Contact'>Contact</Radio>
                                        <Radio value='lead'>Lead</Radio>
                                    </Stack>
                                </RadioGroup>
                                <Text mb='10px' color={'red'}> {errors.linkWith && touched.linkWith && errors.linkWith}</Text>
                            </GridItem>

                            {values.linkWith === 'Contact' ?
                                <GridItem colSpan={{ base: 12 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                        Link Contact
                                    </FormLabel>
                                   
                                    <Flex>

                                        <Select
                                            value={values.linkContact}
                                            name="linkContact"
                                            onChange={handleChange}
                                            mb={errors.linkContact && touched.linkContact ? undefined : '10px'}
                                            fontWeight='500'
                                            placeholder='Link Contact'
                                            borderColor={errors.linkContact && touched.linkContact ? "red.300" : null}
                                        >
                                            {data?.map((item) => {
                                                return <option value={item.value} key={item.value}>{values.linkWith === 'Contact' && `${item.label}`}</option>
                                            })}
                                        </Select>
                                        <IconButton onClick={() => setContactModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />
                                        <Text mb='10px' color={'red'}> {errors.linkContact && touched.linkContact && errors.linkContact}</Text>
                                    </Flex>
                                </GridItem>
                                : values.linkWith === 'lead' &&
                                <GridItem colSpan={{ base: 12 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                        Link Lead
                                    </FormLabel>
                                    
                                    <Flex>

                                        <Select
                                            value={values.linkLead}
                                            name="linkLead"
                                            onChange={handleChange}
                                            mb={errors.linkLead && touched.linkLead ? undefined : '10px'}
                                            fontWeight='500'
                                            placeholder='Link Lead'
                                            borderColor={errors.linkLead && touched.linkLead ? "red.300" : null}
                                        >
                                            {data?.map((item) => {
                                                return <option value={item.value} key={item.value}>{values.linkWith === 'lead' && `${item.label}`}</option>
                                            })}
                                        </Select>
                                        <IconButton onClick={() => setContactModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />
                                        <Text mb='10px' color={'red'}> {errors.linkLead && touched.linkLead && errors.linkLead}</Text>
                                    </Flex>
                                    <Text mb='10px' color={'red'}> {errors.linkLead && touched.linkLead && errors.linkLead}</Text>
                                </GridItem>

                            }

                        </Grid>


                    </ModalBody>
                    <ModalFooter>
                        <Button size="sm" colorScheme='brand' rightIcon={<LinkIcon />} mr={2} onClick={handleClick}>Link</Button>
                        <Button size="sm" variant="outline" colorScheme='red' onClick={() => { handleClose(); resetForm() }}>Cancel</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal >
            <ContactModel data={data} isOpen={contactModelOpen} onClose={setContactModel} fieldName='linkContact' setFieldValue={setFieldValue} />
            {/* Lead Model  */}
            <LeadModel data={data} isOpen={leadModelOpen} onClose={setLeadModel} fieldName='linkLead' setFieldValue={setFieldValue} />
        </>
    )
}

export default Link

================
File: Client/src/views/admin/document/component/Upload.js
================
// Chakra imports
import {
  Box, Flex,
  Grid,
  GridItem,
  Icon,
  Text,
  useColorModeValue
} from "@chakra-ui/react";
// Assets
import Dropzone from "components/Dropzone";
import { MdUpload } from "react-icons/md";

export default function Upload(props) {
  const { used, total, count, ...rest } = props;
  // Chakra Color Mode
  const textColorPrimary = useColorModeValue("secondaryGray.900", "white");
  const brandColor = useColorModeValue("brand.500", "white");
  const textColorSecondary = "gray.400";
  return (
    <Grid templateColumns="repeat(12, 1fr)" mb={3} gap={2}>
      <GridItem colSpan={{ base: 12, '2xl': 5 }} >
        <Dropzone
          w={{ base: "100%", "2xl": "240px" }}
          me='36px'
          minH={200}
          height={'100%'}
          onFileSelect={props.onFileSelect}
          content={
            <Box>
              <Icon as={MdUpload} w='70px' h='70px' color={brandColor} />
              <Flex justify='center' mx='auto' mb='12px'>
                <Text fontSize='xl' fontWeight='700' color={brandColor}>
                  Upload Files
                </Text>
              </Flex>
              <Text fontSize='sm' fontWeight='500' color='secondaryGray.500'>
                {count > 0 && <Text fontSize='sm' fontWeight='500' color='secondaryGray.500'>
                  Selected Files : {count}
                </Text>}
              </Text>
            </Box>
          }
        />
      </GridItem>
      <GridItem colSpan={{ base: 12, '2xl': 7 }} >
        <Flex direction='column' >
          <Text
            color={textColorPrimary}
            fontWeight='bold'
            textAlign='start'
            fontSize='2xl'
            mt={{ base: "20px", "2xl": "50px" }}>
            Upload Files
          </Text>
          <Text
            color={textColorSecondary}
            fontSize='md'
            my={{ base: "auto", "2xl": "10px" }}
            mx='auto'
            textAlign='start'>
            Accepted File Types (Images, PDFs, Word docs, Powerpoint, Excel, ZIP, and video files - 15MB max)
          </Text>
        </Flex>
      </GridItem>
    </Grid>
  );
}

================
File: Client/src/views/admin/document/index.js
================
import { Button, Flex, FormLabel, Grid, GridItem, Heading, Input, List, ListItem, Text, VStack, useDisclosure } from '@chakra-ui/react';
import FolderTreeView from 'components/FolderTreeView/folderTreeView';
import Card from 'components/card/Card';
import { HSeparator } from 'components/separator/Separator';
import Spinner from 'components/spinner/Spinner';
import { constant } from 'constant';
import { useFormik } from 'formik';
import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';
import { documentSchema } from 'schema';
import { deleteApi, getApi } from 'services/api';
import Upload from './component/Upload';
import { postApi } from 'services/api';


const Index = () => {

    const [data, setData] = useState([])
    const { isOpen, onOpen, onClose } = useDisclosure();
    const user = JSON.parse(localStorage.getItem("user"))
    const [isLoding, setIsLoding] = useState(false)
    const [linkDocument, setLinkDocument] = useState(false)

    const fetchData = async () => {
        setIsLoding(true)
        let result = await getApi(user.role === 'superAdmin' ? 'api/document' : `api/document?createBy=${user._id}`);
        setData(result?.data);
        setIsLoding(false)
    }

    const initialValues = {
        folderName: '',
        files: '',
        filename: '',
        createBy: user._id
    };

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: documentSchema,
        onSubmit: (values, { resetForm }) => {
            AddData();
        },
    });
    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik
    const navigate = useNavigate()

    const download = async (data) => {
        if (data) {
            let result = await getApi(`api/document/download/`, data)
            if (result && result.status === 200) {
                window.open(`${constant.baseUrl}api/document/download/${data}`)
                toast.success('File Download successful')
            } else if (result && result.response.status === 404) {
                toast.error('File Not Found')
            }
        }
    }
    const deleteFile = async (data) => {
        if (data) {
            let result = await deleteApi(`api/document/delete/`, data)
            if (result && result.status === 200) {
                fetchData()
            }
        }
    }

    const AddData = async () => {
        try {
            setIsLoding(true)
            const formData = new FormData();
            formData?.append('folderName', values.folderName);
            formData?.append('createBy', values.createBy);
            formData?.append('filename', values.filename);

            // Append files to the formData
            values.files.forEach((file) => {
                formData?.append('files', file);
            });

            let response = await postApi('api/document/add', formData);
            if (response && response.status === 200) {
                fetchData();
                formik.resetForm();
            }
        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };

    useEffect(() => {
        fetchData()
    }, [linkDocument, handleSubmit])

    return (
        <div>
            <Grid templateColumns="repeat(12, 1fr)" mb={3} gap={2}>
                <GridItem colSpan={{ base: 12, md: 7 }}  >
                    <Card minH={'20em'}>
                        <Heading size="lg" mb={4} >
                            File Explorer
                        </Heading>
                        <HSeparator />
                        <VStack mt={4} alignItems="flex-start">
                            {isLoding ?
                                <Flex justifyContent={'center'} alignItems={'center'} width="100%" >
                                    <Spinner />
                                </Flex>
                                : data?.length === 0 ? (
                                    <Text textAlign={'center'} width="100%" fontSize="sm" fontWeight="700">
                                        -- No Document Found --
                                    </Text>
                                ) : data?.map((item) => (
                                    <FolderTreeView name={item.folderName} item={item}>
                                        {item?.files?.map((file) => (
                                            <FolderTreeView download={download} setLinkDocument={setLinkDocument} deleteFile={deleteFile} data={file} name={file.fileName} isFile />
                                        ))}
                                    </FolderTreeView>
                                ))}
                        </VStack>
                    </Card>
                </GridItem>
                <GridItem colSpan={{ base: 12, md: 5 }} colStart={{ base: 1, md: 8 }} >
                    <Card >
                        <GridItem colSpan={{ base: 12 }} >
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Folder Name<Text color={"red"}>*</Text>
                            </FormLabel>
                            <Input
                                onFocus={onOpen}
                                fontSize='sm'
                                onChange={handleChange}
                                onBlur={() => setTimeout(onClose, 200)}
                                value={values.folderName}
                                name="folderName"
                                placeholder='Enter Folder Name'
                                fontWeight='500'
                                borderColor={errors?.folderName && touched?.folderName ? "red.300" : null}
                            />
                            {isOpen && values?.folderName && data?.filter((option) => option?.folderName?.toLowerCase()?.includes(values?.folderName.toLowerCase())).length > 0 && (
                                <List position={'relative'} border={'1px solid'} bg={'gray.100'} width={'100%'} borderRadius={'0px 0px 20px 20px'} lineHeight={1} >
                                    {data?.filter((option) => option?.folderName?.toLowerCase()?.includes(values?.folderName.toLowerCase())).map((option, index) => (
                                        <ListItem p={3} borderBottom={'2px solid #efefef'} sx={{ '&:last-child': { borderBottom: 'none' } }} key={option?._id} cursor={'pointer'}
                                            onClick={() => {
                                                setFieldValue('folderName', option?.folderName)
                                            }}
                                        >
                                            {option?.folderName}
                                        </ListItem>
                                    ))}
                                </List>
                            )}
                            <Text mb='10px' color={'red'}> {errors.folderName && touched.folderName && errors.folderName}</Text>
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }} >
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                File Name
                            </FormLabel>
                            <Input
                                fontSize='sm'
                                onChange={handleChange}
                                onBlur={() => setTimeout(onClose, 200)}
                                value={values.filename}
                                name="filename"
                                placeholder='Enter File Name'
                                fontWeight='500'
                                borderColor={errors?.filename && touched?.filename ? "red.300" : null}
                            />
                            <Text mb='10px' color={'red'}> {errors.filename && touched.filename && errors.filename}</Text>
                        </GridItem>
                        <Upload count={values.files.length} onFileSelect={(file) => setFieldValue('files', file)} />
                        <Button size="sm" disabled={isLoding ? true : false} onClick={handleSubmit} variant='brand' fontWeight='500'>
                            {isLoding ? <Spinner /> : 'Publish now'}
                        </Button>
                    </Card>
                </GridItem>

            </Grid>


        </div>
    )
}

export default Index

================
File: Client/src/views/admin/dynamicPage/add.js
================
import { CloseIcon } from '@chakra-ui/icons';
import { Button, Drawer, DrawerBody, DrawerContent, DrawerFooter, DrawerHeader, DrawerOverlay, IconButton } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import { useFormik } from 'formik';
import { useState } from 'react';
import { postApi } from 'services/api';
import { generateValidationSchema } from 'utils';
import CustomForm from 'utils/customForm';
import * as yup from 'yup'

const Add = (props) => {
    const [isLoding, setIsLoding] = useState(false)

    const initialFieldValues = Object.fromEntries(
        (props?.moduleData?.fields || []).map(field => [field?.name, ''])
    );

    const initialValues = {
        ...initialFieldValues,
        createBy: JSON.parse(localStorage.getItem('user'))._id
    };

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: yup.object().shape(generateValidationSchema(props?.moduleData?.fields)),
        onSubmit: (values, { resetForm }) => {
            AddData();
        },
    });

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, } = formik

    const AddData = async () => {
        try {
            setIsLoding(true)
            let response = await postApi('api/form/add', { ...values, moduleId: props?.moduleData?._id })
            if (response.status === 200) {
                props.onClose();
                formik.resetForm();
                props.setAction((pre) => !pre)
            }
        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };

    const handleCancel = () => {
        formik.resetForm();
        props.onClose()
    }

    return (
        <div>
            <Drawer isOpen={props.isOpen} size={props.size}>
                <DrawerOverlay />
                <DrawerContent>
                    <DrawerHeader alignItems={"center"} justifyContent='space-between' display='flex'  >
                        Add {props.title}
                        <IconButton onClick={props.onClose} icon={<CloseIcon />} />
                    </DrawerHeader>
                    <DrawerBody>
                        <CustomForm moduleData={props.moduleData} values={values} setFieldValue={setFieldValue} handleChange={handleChange} handleBlur={handleBlur} errors={errors} touched={touched} />
                    </DrawerBody>
                    <DrawerFooter>
                        <Button sx={{ textTransform: "capitalize" }} size="sm" disabled={isLoding ? true : false} variant="brand" type="submit" onClick={handleSubmit}                        >
                            {isLoding ? <Spinner /> : 'Save'}
                        </Button>
                        <Button
                            variant="outline"
                            colorScheme='red' size="sm"
                            sx={{
                                marginLeft: 2,
                                textTransform: "capitalize",
                            }}
                            onClick={handleCancel}
                        >
                            Close
                        </Button>
                    </DrawerFooter>
                </DrawerContent>
            </Drawer>
        </div>
    )
}

export default Add

================
File: Client/src/views/admin/dynamicPage/DynamicPageview.js
================
import { AddIcon, ChevronDownIcon, DeleteIcon, EditIcon } from "@chakra-ui/icons";
import {
    Box, Button, Flex, Grid, GridItem, Menu, MenuButton, MenuDivider, MenuItem, MenuList,

    useColorModeValue,
    useDisclosure,
} from "@chakra-ui/react";
import Card from "components/card/Card";
import Spinner from "components/spinner/Spinner";
import { constant } from "constant";
import { useEffect, useState } from "react";
import { IoIosArrowBack } from "react-icons/io";
import { Link, useNavigate, useParams } from "react-router-dom";
import { toast } from "react-toastify";
import { getApi } from "services/api";
import { HasAccess } from "../../../redux/accessUtils";
import CustomView from "utils/customView";
import { useLocation } from 'react-router-dom';
import { FaFilePdf } from "react-icons/fa";
import html2pdf from "html2pdf.js";
import moment from "moment";

const View = () => {

    const param = useParams()

    const user = JSON.parse(localStorage.getItem("user"));

    const buttonbg = useColorModeValue("gray.200", "white");
    const textColor = useColorModeValue("gray.500", "white");

    const [data, setData] = useState()
    const { isOpen, onOpen, onClose } = useDisclosure()
    const [edit, setEdit] = useState(false);
    const [deleteModel, setDelete] = useState(false);
    const [isLoding, setIsLoding] = useState(false)
    const [action, setAction] = useState(false)
    const [leadData, setLeadData] = useState([])
    const location = useLocation()
    const navigate = useNavigate()
    const module = location.state.module;
    const size = "lg";

    const pathName = (name) => {
        return `/${name.toLowerCase().replace(/ /g, '-')}`;
    }

    const [permission, taskPermission, meetingPermission, callAccess, emailAccess, taskAccess, meetingAccess] = HasAccess(['Leads', 'Tasks', 'Meetings', 'Calls', 'Emails', 'Tasks', 'Meetings']);

    const download = async (data) => {
        if (data) {
            let result = await getApi(`api/document/download/`, data)
            if (result && result.status === 200) {
                window.open(`${constant.baseUrl}api/document/download/${data}`)
                toast.success('file Download successful')
            } else if (result && result.response.status === 404) {
                toast.error('file Not Found')
            }
        }
    }

    const fetchData = async () => {
        if (param.id) {
            try {
                setIsLoding(true)
                let response = await getApi(`api/form/view/${param.id}?moduleId=${module._id}`)
                setData(response?.data?.data);
            } catch (e) {
                console.error(e)
            } finally {
                setIsLoding(false)
            }
        }
    }
    useEffect(() => {
        fetchData()
    }, [action])
    // }, [edit, addEmailHistory, addPhoneCall])

    function toCamelCase(text) {
        return text?.replace(/([a-z])([A-Z])/g, '$1 $2');
    }
    const generatePDF = () => {
        const element = document.getElementById("reports");
        if (element) {
            element.style.display = 'block';
            element.style.width = '100%'; // Adjust width for mobile
            element.style.height = 'auto';
            html2pdf()
                .from(element)
                .set({
                    margin: [0, 0, 0, 0],
                    filename: `${module.moduleName}_Details_${moment().format("DD-MM-YYYY")}.pdf`,
                    image: { type: "jpeg", quality: 0.98 },
                    html2canvas: { scale: 2, useCORS: true, allowTaint: true },
                    jsPDF: { unit: "in", format: "letter", orientation: "portrait" },
                })
                .save().then(() => {
                    element.style.display = '';
                })
            // }, 500);
        } else {
            console.error("Element with ID 'reports' not found.");
        }
    };
    const fetchCustomData = async () => {
        const response = await getApi('api/custom-field?moduleName=Leads')
        setLeadData(response.data)
    }

    useEffect(() => {
        if (fetchCustomData) fetchCustomData()
    }, [action])

    return (
        <>
            {isLoding ?
                <Flex justifyContent={'center'} alignItems={'center'} width="100%" >
                    <Spinner />
                </Flex> :
                <>
                    <GridItem colSpan={{ base: 12, md: 6 }} mt={{ sm: "3px", md: "5px" }} >
                        <Flex justifyContent={"right"}>
                            <Menu>
                                <MenuButton size="sm" variant="outline" colorScheme='blackAlpha' mr={2.5} as={Button} rightIcon={<ChevronDownIcon />}>
                                    Actions
                                </MenuButton>
                                <MenuDivider />
                                <MenuList minWidth={2}>
                                    <MenuItem color={'blue'} onClick={() => onOpen()} alignItems={"start"} icon={<AddIcon />}>Add</MenuItem>
                                    <MenuItem onClick={() => setEdit(true)} alignItems={"start"} icon={<EditIcon />}>Edit</MenuItem>
                                    <MenuItem onClick={generatePDF} alignItems={"start"} icon={<FaFilePdf />} display={"flex"} style={{ alignItems: "center" }}>Print as PDF</MenuItem >
                                    <>
                                        <MenuDivider />
                                        <MenuItem alignItems={"start"} color={'red'} onClick={() => setDelete(true)} icon={<DeleteIcon />}>Delete</MenuItem>
                                    </>
                                </MenuList>
                            </Menu>
                            <Link to={pathName(module.moduleName)}>
                                <Button leftIcon={<IoIosArrowBack />} size='sm' variant="brand">
                                    Back
                                </Button>
                            </Link>
                        </Flex>
                    </GridItem>
                    <Box style={{ margin: "10px 0" }}>
                        <CustomView data={module} fieldData={data} id="reports" />
                    </Box>
                    <Card mt={3}>
                        <Grid templateColumns="repeat(6, 1fr)" gap={1}>
                            <GridItem colStart={6} >
                                <Flex justifyContent={"right"}>
                                    <Button size='sm' onClick={() => setEdit(true)} leftIcon={<EditIcon />} mr={2.5} variant="outline" colorScheme="green">Edit</Button>
                                    <Button size='sm' style={{ background: 'red.800' }} onClick={() => setDelete(true)} leftIcon={<DeleteIcon />} colorScheme="red" >Delete</Button>
                                </Flex>
                            </GridItem>
                        </Grid>
                    </Card>

                </>
            }
        </>
    );
};

export default View;

================
File: Client/src/views/admin/dynamicPage/Edit.js
================
import { CloseIcon } from '@chakra-ui/icons';
import { Button, Drawer, DrawerBody, DrawerContent, DrawerFooter, DrawerHeader, DrawerOverlay, Flex,  IconButton} from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import { useFormik } from 'formik';
import { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { putApi } from 'services/api';
import { getApi } from 'services/api';
import { generateValidationSchema } from '../../../utils';
import CustomForm from '../../../utils/customForm';
import * as yup from 'yup'

const Edit = (props) => {
    const [isLoding, setIsLoding] = useState(false);
    const initialFieldValues = Object.fromEntries(
        (props?.moduleData?.fields || []).map(field => [field?.name, ''])
    );

    const [initialValues, setInitialValues] = useState({
        ...initialFieldValues,
        createBy: JSON.parse(localStorage.getItem('user'))._id
    })
    const param = useParams()
    const formik = useFormik({
        initialValues: initialValues,
        enableReinitialize: true,
        validationSchema: yup.object().shape(generateValidationSchema(props?.moduleData?.fields)),
        onSubmit: (values, { resetForm }) => {
            EditData();
        },
    });

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, } = formik

    const EditData = async () => {
        try {
            setIsLoding(true)
            let response = await putApi(`api/form/edit/${props?.selectedId || param.id}`, { ...values, moduleId: props.moduleId })
            if (response.status === 200) {
                props.onClose();
                props.setAction((pre) => !pre)
            }
        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };

    const handleClose = () => {
        props.onClose(false)
        props.setSelectedId && props?.setSelectedId()
        formik.resetForm();
    }
    let response;
    const fetchData = async () => {
        if (props?.selectedId || param.id) {
            try {
                setIsLoding(true)
                response = await getApi(`api/form/view/${props?.selectedId || param.id}?moduleId=${props.moduleId}`)
                let editData = response?.data?.data;
                setInitialValues((prev) => ({ ...prev, ...editData }));

            } catch (e) {
                console.error(e)
            } finally {
                setIsLoding(false)
            }
        }
    }

    useEffect(() => {
        fetchData()
    }, [props?.selectedId])

    return (
        <div>
            <Drawer isOpen={props.isOpen} size={props.size}>
                <DrawerOverlay />
                <DrawerContent>
                    <DrawerHeader alignItems={"center"} justifyContent='space-between' display='flex' >
                        Edit {props.title}
                        <IconButton onClick={handleClose} icon={<CloseIcon />} />
                    </DrawerHeader>
                    <DrawerBody>

                        {isLoding ?
                            <Flex justifyContent={'center'} alignItems={'center'} width="100%" >
                                <Spinner />
                            </Flex>
                            :
                            <CustomForm moduleData={props.moduleData} values={values} setFieldValue={setFieldValue} handleChange={handleChange} handleBlur={handleBlur} errors={errors} touched={touched} />

                        }
                    </DrawerBody>
                    <DrawerFooter>
                        <Button
                            sx={{ textTransform: "capitalize" }}
                            variant="brand" size="sm"
                            type="submit"
                            disabled={isLoding ? true : false}
                            onClick={handleSubmit}
                        >
                            {isLoding ? <Spinner /> : 'Update'}
                        </Button>
                        <Button
                            variant="outline"
                            colorScheme='red' size="sm"
                            sx={{
                                marginLeft: 2,
                                textTransform: "capitalize",
                            }}
                            onClick={handleClose}
                        >
                            Close
                        </Button>
                    </DrawerFooter>

                </DrawerContent>
            </Drawer>
        </div>
    )
}

export default Edit

================
File: Client/src/views/admin/dynamicPage/index.js
================
import { useEffect, useState } from 'react';
import { useNavigate } from "react-router-dom";
import { HasAccess } from "../../../redux/accessUtils";
import { Grid, GridItem, Text, Menu, MenuButton, MenuItem, MenuList, useDisclosure, Flex } from '@chakra-ui/react';
import { DeleteIcon, ViewIcon, EditIcon } from "@chakra-ui/icons";
import { CiMenuKebab } from "react-icons/ci";
import { getApi } from "services/api";
import CommonCheckTable from '../../../components/reactTable/checktable';
import Add from './add';
import Edit from './Edit';
import Spinner from 'components/spinner/Spinner';
import CommonDeleteModel from 'components/commonDeleteModel';
import { deleteManyApi } from 'services/api';


const Index = () => {
    const pathName = window.location.pathname.split('/')
    const title = pathName[1];
    const size = "lg";
    const user = JSON.parse(localStorage.getItem("user"));
    const navigate = useNavigate();
    const [permission] = HasAccess([title]);
    const [isLoding, setIsLoding] = useState(false);
    const [data, setData] = useState([]);
    const [tableColumns, setTableColumns] = useState([]);
    const [columns, setColumns] = useState([]);
    // const [dataColumn, setDataColumn] = useState([]);
    const [selectedColumns, setSelectedColumns] = useState([]);
    const [action, setAction] = useState(false);
    const { isOpen, onOpen, onClose } = useDisclosure();
    const [moduleData, setModuleData] = useState({});
    const [edit, setEdit] = useState(false);
    const [deleteModel, setDelete] = useState(false);
    const [selectedId, setSelectedId] = useState();
    const [selectedValues, setSelectedValues] = useState([]);
    const [isImport, setIsImport] = useState(false);

    const path = (name) => {
        return `${name.toLowerCase().replace(/ /g, '-')}`;
    }

    const fetchData = async (id) => {
        setIsLoding(true);
        let result = await getApi(`api/form?moduleId=${id}`);
        if (result.status === 200) {
            setData(result?.data?.data);
            setIsLoding(false);
        }
    };

    const fetchCustomDataFields = async () => {
        setIsLoding(true);
        const result = await getApi(`api/custom-field`);
        const singaleData = result?.data?.find((item) => path(item?.moduleName) === title)
        setModuleData(singaleData);
        fetchData(singaleData?._id);

        const actionHeader = {
            Header: "Action", isSortable: false, center: true,
            cell: ({ row }) => (
                <Text fontSize="md" fontWeight="900" textAlign={"center"} >
                    <Menu isLazy  >
                        <MenuButton><CiMenuKebab /></MenuButton>
                        <MenuList minW={'fit-content'} transform={"translate(1520px, 173px);"}>
                            {permission?.update &&
                                <MenuItem py={2.5} icon={<EditIcon fontSize={15} mb={1} />} onClick={() => { setEdit(true); setSelectedId(row?.values?._id); }}>Edit</MenuItem>}
                            {permission?.view &&
                                <MenuItem py={2.5} color={'green'} icon={<ViewIcon mb={1} fontSize={15} />} onClick={() => { navigate(`/${title}/${row?.values?._id}`, { state: { module: singaleData } }) }}>View</MenuItem>}
                            {permission?.delete &&
                                <MenuItem py={2.5} color={'red'} icon={<DeleteIcon fontSize={15} mb={1} />} onClick={() => { setDelete(true); setSelectedValues([row?.values?._id]); }}>Delete</MenuItem>}
                        </MenuList>
                    </Menu>
                </Text>
            )
        };

        const tempTableColumns = [
            { Header: "#", accessor: "_id", isSortable: false, width: 10 },
            ...(singaleData?.fields?.filter((field) => field?.isTableField === true && field?.isView)?.map((field) => ({
                Header: field?.label,
                accessor: field?.name,
                cell: (cell) => (
                    <div className="selectOpt">
                        <Text
                            onClick={() => {
                                navigate(`/${title}/${cell?.row?.original?._id}`, { state: { module: singaleData } });
                            }}
                            me="10px"
                            sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' }, cursor: 'pointer' }}
                            color='brand.600'
                            fontSize="sm"
                            fontWeight="700"
                        >
                            {cell?.value || "-"}
                        </Text>
                    </div>
                ),
            })) || []),
            ...(singaleData?.fields?.filter((field) => field?.isTableField === true && !field?.isView)?.map((field) => ({ Header: field?.label, accessor: field?.name })) || []),
            ...(permission?.update || permission?.view || permission?.delete ? [actionHeader] : []),
        ];

        setColumns(tempTableColumns);
        setIsLoding(false);
    }
    const handleDelete = async (id, moduleId) => {
        try {
            setIsLoding(true)
            const payload = {
                moduleId: moduleId,
                ids: id
            }
            let response = await deleteManyApi('api/form/deleteMany', payload)
            if (response.status === 200) {
                setSelectedValues([])
                setDelete(false)
                setAction((pre) => !pre)
            }
        } catch (error) {
            console.log(error)
        }
        finally {
            setIsLoding(false)
        }
    }

    useEffect(() => {
        fetchCustomDataFields();
    }, [action, title])

    // useEffect(() => {
    //     setDataColumn(tableColumns?.filter(item => selectedColumns?.find(colum => colum?.Header === item.Header)));
    // }, [tableColumns, selectedColumns])

    return (
        <div>
            {isLoding ? <Flex justifyContent={'center'} alignItems={'center'} width="100%" color={'black'} fontSize="sm" fontWeight="700">
                <Spinner />
            </Flex> :
                <Grid templateColumns="repeat(6, 1fr)" mb={3} gap={4}>
                    <GridItem colSpan={6}>
                        <CommonCheckTable
                            title={moduleData?.moduleName}
                            isLoding={isLoding}
                            columnData={columns ?? []}
                            // dataColumn={dataColumn ?? []}
                            allData={data ?? []}
                            tableData={data}
                            tableCustomFields={moduleData?.fields?.filter((field) => field?.isTableField === true) || []}
                            access={permission}
                            // action={action}
                            // setAction={setAction}
                            // selectedColumns={selectedColumns}
                            // setSelectedColumns={setSelectedColumns}
                            // isOpen={isOpen}
                            // onClose={onclose}
                            onOpen={onOpen}
                            selectedValues={selectedValues}
                            setSelectedValues={setSelectedValues}
                            setDelete={setDelete}
                            setIsImport={setIsImport}
                        />
                    </GridItem>
                </Grid>
            }
            {isOpen && <Add isOpen={isOpen} title={title} size={size} moduleData={moduleData} onClose={onClose} setAction={setAction} action={action} />}
            {deleteModel && <CommonDeleteModel isOpen={deleteModel} onClose={() => setDelete(false)} type={title} handleDeleteData={handleDelete} ids={selectedValues} selectedValues={moduleData?._id} />}

            {edit && <Edit isOpen={edit} title={title} size={size} moduleData={moduleData} selectedId={selectedId} setSelectedId={setSelectedId} onClose={setEdit} setAction={setAction} moduleId={moduleData?._id} />}

        </div>
    )
}

export default Index

================
File: Client/src/views/admin/emailHistory/components/AddEmail.js
================
import { Button, FormLabel, Grid, GridItem, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Radio, RadioGroup, Select, Stack, Text, Textarea } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import dayjs from 'dayjs';
import { useFormik } from 'formik';
import { useEffect, useState } from 'react';
import { useDispatch } from 'react-redux';
import { toast } from 'react-toastify';
import { emailSchema } from 'schema';
import { postApi } from 'services/api';
import { fetchEmailTempData } from '../../../../redux/slices/emailTempSlice';


const AddEmailHistory = (props) => {
    const { onClose, isOpen, fetchData, setAction } = props
    const user = JSON.parse(localStorage.getItem('user'))
    const [isLoding, setIsLoding] = useState(false)
    const todayTime = new Date().toISOString().split('.')[0];
    const [data, setData] = useState([]);
    const dispatch = useDispatch();

    const initialValues = {
        sender: user?._id,
        recipient: props.lead !== true ? props?.contactEmail : props?.leadEmail,
        subject: '',
        message: '',
        createByContact: props?.id && props?.lead !== true ? props?.id : '',
        createByLead: props?.id && props?.lead === true ? props?.id : '',
        startDate: '',
        type: 'message',
        html: '',
        createBy: user?._id,
    }

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: emailSchema,
        enableReinitialize: true,
        onSubmit: (values, { resetForm }) => {
            AddData();
            resetForm();
        },
    });
    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, } = formik

    const AddData = async () => {
        try {
            setIsLoding(true)
            let response = await postApi('api/email/add', values)
            if (response.status === 200) {
                props.onClose();
                fetchData(1)
                // setAction((pre) => !pre)
            }
        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };
    const fetchEmailTemp = async () => {
        setIsLoding(true)
        const result = await dispatch(fetchEmailTempData())
        if (result.payload.status === 200) {
            setData(result?.payload?.data);
        } else {
            toast.error("Failed to fetch data", "error");
        }
        setIsLoding(false)
    }
    useEffect(() => {
        if (values?.type === "template") fetchEmailTemp()
    }, [values?.type])
    // useEffect(() => {
    //    if (props.id && props.lead !== true) {
    //         setFieldValue('createByContact', props.id);
    //     } else if (props.id && props.lead === true) {
    //         setFieldValue('createByLead', props.id);
    //     }
    // }, [props.id, props.lead])

    return (
        <Modal onClose={onClose} isOpen={isOpen} isCentered>
            <ModalOverlay />
            <ModalContent>
                <ModalHeader>Send Email </ModalHeader>
                <ModalCloseButton />
                <ModalBody>

                    <Grid templateColumns="repeat(12, 1fr)" gap={3}>

                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Recipient<Text color={"red"}>*</Text>
                            </FormLabel>
                            <Input
                                fontSize='sm'
                                onChange={handleChange} onBlur={handleBlur}
                                value={values.recipient}
                                name="recipient"
                                disabled
                                placeholder='Recipient'
                                fontWeight='500'
                                borderColor={errors.recipient && touched.recipient ? "red.300" : null}
                            />
                            <Text fontSize='sm' mb='10px' color={'red'}> {errors.recipient && touched.recipient && errors.recipient}</Text>
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Subject<Text color={"red"}>*</Text>
                            </FormLabel>
                            <Input
                                fontSize='sm'
                                placeholder='Enter subject'
                                onChange={handleChange} onBlur={handleBlur}
                                value={values.subject}
                                name="subject"
                                fontWeight='500'
                                borderColor={errors.subject && touched.subject ? "red.300" : null}
                            />
                            <Text fontSize='sm' mb='10px' color={'red'}> {errors.subject && touched.subject && errors.subject}</Text>
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }} >
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Start Date<Text color={"red"}>*</Text>
                            </FormLabel>
                            <Input
                                type="datetime-local"
                                fontSize='sm'
                                onChange={handleChange}
                                onBlur={handleBlur}
                                min={dayjs(todayTime).format('YYYY-MM-DD HH:mm')}
                                value={values.startDate}
                                name="startDate"
                                fontWeight='500'
                                borderColor={errors?.startDate && touched?.startDate ? "red.300" : null}
                            />
                            <Text fontSize='sm' mb='10px' color={'red'}> {errors.startDate && touched.startDate && errors.startDate}</Text>
                        </GridItem>

                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Message
                            </FormLabel>
                            <RadioGroup onChange={(e) => { setFieldValue('type', e) }} value={values.type}>
                                <Stack direction='row'>
                                    <Radio value='message'>Message</Radio>
                                    <Radio value='template'>Template</Radio>
                                </Stack>
                            </RadioGroup>
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }}>
                            {
                                values?.type === "message" ?
                                    <>
                                        <Textarea
                                            resize={'none'}
                                            fontSize='sm'
                                            placeholder='Enter Message'
                                            onChange={handleChange} onBlur={handleBlur}
                                            value={values.message}
                                            name="message"
                                            fontWeight='500'
                                            borderColor={errors.message && touched.message ? "red.300" : null}
                                        />
                                        <Text fontSize='sm' mb='10px' color={'red'}> {errors.message && touched.message && errors.message}</Text>
                                    </>
                                    :
                                    <Select
                                        // value={values.assignTo}
                                        name="html"
                                        onChange={handleChange} onBlur={handleBlur}
                                        value={values.html}
                                        fontWeight='500'
                                        placeholder={'Select Template'}
                                    // borderColor={errors.assignTo && touched.assignTo ? "red.300" : null}
                                    >
                                        {data?.map((item) => {
                                            return <option value={item?.html} key={item._id}>{item?.templateName}</option>
                                        })}
                                    </Select>
                            }
                        </GridItem>

                    </Grid>


                </ModalBody>
                <ModalFooter>
                    <Button size="sm" variant='brand' onClick={handleSubmit} disabled={isLoding ? true : false} >{isLoding ? <Spinner /> : 'Save'}</Button>
                    <Button sx={{
                        marginLeft: 2,
                        textTransform: "capitalize",
                    }} variant="outline"
                        colorScheme="red" size="sm" onClick={() => {
                            formik.resetForm()
                            onClose()
                        }}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    )
}

export default AddEmailHistory

================
File: Client/src/views/admin/emailHistory/components/EmailAdvanceSearch.js
================
import React from 'react';
import { useFormik } from "formik";
import * as yup from "yup";
import { Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Grid, GridItem, Input, FormLabel, Select, Text, Button, } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import { setSearchValue, getSearchData, setGetTagValues } from '../../../../redux/slices/advanceSearchSlice';
import { useDispatch } from 'react-redux';



const EmailAdvanceSearch = (props) => {
    const { state, allData, advanceSearch, setAdvanceSearch, isLoding, setSearchedData, setDisplaySearchData, setSearchClear, setSearchbox } = props;

    const dispatch = useDispatch();
    const initialValues = {
        senderName: '',
        realetedTo: '',
        createByName: '',
    }
    const validationSchema = yup.object({
        senderName: yup.string(),
        realetedTo: yup.string(),
        createByName: yup.string()
    });
    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: validationSchema,
        onSubmit: (values, { resetForm }) => {
            dispatch(setSearchValue(values))
            dispatch(getSearchData({ values: values, allData: allData, type: 'Email' }))
            // const searchResult = allData?.filter(
            //     (item) =>
            //         (!values?.senderName || (item?.senderName && item?.senderName.toLowerCase().includes(values?.senderName?.toLowerCase()))) &&
            //         (!values?.realetedTo || (values.realetedTo === "contact" ? item.createBy : item.createByLead)) &&
            //         (!values?.createByName || (item?.createByName && item?.createByName.toLowerCase().includes(values?.createByName?.toLowerCase())))
            // )
            // let getValue = [values.senderName, values?.realetedTo, values?.createByName].filter(value => value);
            const getValue = [
                {
                    name: ["senderName"],
                    value: values.senderName
                },
                {
                    name: ["realetedTo"],
                    value: values.realetedTo
                },
                {
                    name: ["createByName"],
                    value: values.createByName
                },
            ]
            dispatch(setGetTagValues(getValue.filter(item => item.value)))
            setDisplaySearchData(true)
            setAdvanceSearch(false)
            resetForm();
            setSearchbox('');
        }
    })

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm, dirty } = formik;

    return (
        <>
            <Modal onClose={() => { setAdvanceSearch(false); resetForm() }} isOpen={advanceSearch} isCentered>
                <ModalOverlay />
                <ModalContent>
                    <ModalHeader>Advance Search</ModalHeader>
                    <ModalCloseButton onClick={() => { setAdvanceSearch(false); resetForm() }} />
                    <ModalBody>
                        <Grid templateColumns="repeat(12, 1fr)" mb={3} gap={2}>
                            <GridItem colSpan={{ base: 12 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Sender Name
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.senderName}
                                    name="senderName"
                                    placeholder='Enter Sender Name'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.senderName && touched.senderName && errors.senderName}</Text>

                            </GridItem>
                            <GridItem colSpan={{ base: 12 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Realeted To
                                </FormLabel>
                                <Select
                                    value={values?.realetedTo}
                                    fontSize='sm'
                                    name="realetedTo"
                                    onChange={handleChange}
                                    fontWeight='500'
                                    placeholder={'Select Realeted To'}
                                >
                                    <option value='contact'>Contact</option>
                                    <option value='lead'>Lead</option>
                                </Select>
                                <Text mb='10px' color={'red'}> {errors.realetedTo && touched.realetedTo && errors.realetedTo}</Text>

                            </GridItem>

                            <GridItem colSpan={{ base: 12 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2} >
                                    CreateBy Name
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.createByName}
                                    name="createByName"
                                    placeholder='Enter CreateBy Name'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.createByName && touched.createByName && errors.createByName}</Text>
                            </GridItem>
                        </Grid>
                    </ModalBody>
                    <ModalFooter>
                        <Button size="sm" variant="brand" mr={2} onClick={handleSubmit} disabled={isLoding || !dirty ? true : false} >{isLoding ? <Spinner /> : 'Search'}</Button>
                        <Button size="sm" variant="outline" colorScheme="red" onClick={() => resetForm()}>Clear</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        </>
    )
}

export default EmailAdvanceSearch

================
File: Client/src/views/admin/emailHistory/add.js
================
import { Button, Flex, FormLabel, Grid, GridItem, IconButton, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Radio, RadioGroup, Select, Stack, Text, Textarea } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import ContactModel from "components/commonTableModel/ContactModel";
import LeadModel from "components/commonTableModel/LeadModel";
import { useFormik } from 'formik';
import { useEffect, useState } from 'react';
import { LiaMousePointerSolid } from 'react-icons/lia';
import { emailSchema } from 'schema';
import { getApi, postApi } from 'services/api';
import dayjs from 'dayjs';
import { fetchEmailTempData } from '../../../redux/slices/emailTempSlice';
import { useDispatch } from 'react-redux';
import { toast } from 'react-toastify';

const AddEmailHistory = (props) => {
    const { onClose, isOpen } = props
    const [isLoding, setIsLoding] = useState(false)
    const [assignToLeadData, setAssignToLeadData] = useState([]);
    const [assignToContactData, setAssignToContactData] = useState([]);
    const [contactModelOpen, setContactModel] = useState(false);
    const [leadModelOpen, setLeadModel] = useState(false);
    const [data, setData] = useState([]);
    const dispatch = useDispatch();

    const user = JSON.parse(localStorage.getItem('user'))
    const todayTime = new Date().toISOString().split('.')[0];

    const initialValues = {
        sender: user?._id,
        recipient: '',
        subject: '',
        callNotes: '',
        createByContact: '',
        createByLead: '',
        startDate: '',
        type: 'message',
        html: '',
        category: 'contact',
        // assignTo: '',
        // assignToLead: '',
        createBy: user?._id,
    }
    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: emailSchema,
        onSubmit: (values, { resetForm }) => {
            AddData();
            resetForm();
        },
    });
    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue } = formik

    const AddData = async () => {
        try {
            setIsLoding(true)
            let response = await postApi('api/email/add', values)
            if (response.status === 200) {
                props.onClose();
                props.setAction((pre) => !pre)
            }
        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };
    useEffect(async () => {
        values.start = props?.date
        try {
            let result
            if (values.category === "Contact" && assignToContactData.length <= 0) {
                result = await getApi(user.role === 'superAdmin' ? 'api/contact/' : `api/contact/?createBy=${user._id}`)
                setAssignToContactData(result?.data)

            } else if (values.category === "Lead" && assignToLeadData <= 0) {
                result = await getApi(user.role === 'superAdmin' ? 'api/lead/' : `api/lead/?createBy=${user._id}`);
                setAssignToLeadData(result?.data)
            }
        }
        catch (e) {
            console.log(e);
        }
    }, [props, values.category])

    const fetchRecipientData = async () => {
        if (values.createByContact) {
            let findEmail = assignToContactData.find((item) => item._id === values.createByContact);
            if (findEmail) {
                setFieldValue('recipient', findEmail.email);
            }
        } else if (values.createByLead) {
            let findEmail = assignToLeadData.find((item) => item._id === values.createByLead);
            if (findEmail) {
                setFieldValue('recipient', findEmail.leadEmail);
            }
        } else {
            setFieldValue('recipient', "");

        }
    }

    const fetchData = async () => {
        setIsLoding(true)
        const result = await dispatch(fetchEmailTempData())
        if (result.payload.status === 200) {
            setData(result?.payload?.data);
        } else {
            toast.error("Failed to fetch data", "error");
        }
        setIsLoding(false)
    }

    useEffect(() => {
        if (values?.type === "template") fetchData()
    }, [values?.type])

    useEffect(() => {
        fetchRecipientData()
    }, [values.createByContact, values.createByLead])

    return (
        <Modal onClose={onClose} isOpen={isOpen} isCentered>
            <ModalOverlay />
            <ModalContent height={"580px"}>
                <ModalHeader>Add Email </ModalHeader>
                <ModalCloseButton />
                <ModalBody overflowY={"auto"} height={"400px"}>
                    {/* Contact Model  */}
                    <ContactModel isOpen={contactModelOpen} data={assignToContactData} onClose={setContactModel} fieldName='createByContact' setFieldValue={setFieldValue} />
                    {/* Lead Model  */}
                    <LeadModel isOpen={leadModelOpen} data={assignToLeadData} onClose={setLeadModel} fieldName='createByLead' setFieldValue={setFieldValue} />

                    <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                        <GridItem colSpan={{ base: 12, md: 6 }} >
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Related
                            </FormLabel>
                            <RadioGroup onChange={(e) => { setFieldValue('category', e); setFieldValue('createByContact', ''); setFieldValue('createByLead', ''); }} value={values.category}>
                                <Stack direction='row'>
                                    <Radio value='Contact'>Contact</Radio>
                                    <Radio value='Lead'>Lead</Radio>
                                </Stack>
                            </RadioGroup>
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }}>
                            {values.category === "Contact" ?
                                <>
                                    <GridItem colSpan={{ base: 12, md: 6 }} >
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                            Recipient  (Contact)
                                        </FormLabel>
                                        <Flex justifyContent={'space-between'}>
                                            <Select
                                                value={values.createByContact}
                                                name="createByContact"
                                                onChange={handleChange}
                                                mb={errors.createByContact && touched.createByContact ? undefined : '10px'}
                                                fontWeight='500'
                                                placeholder={'Assign To'}
                                                borderColor={errors.createByContact && touched.createByContact ? "red.300" : null}
                                            >
                                                {assignToContactData?.map((item) => {
                                                    return <option value={item._id} key={item._id}>{values.category === 'Contact' ? `${item.firstName} ${item.lastName}` : item.leadName}</option>
                                                })}
                                            </Select>
                                            <IconButton onClick={() => setContactModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />
                                        </Flex>
                                    </GridItem>
                                </>
                                : values.category === "Lead" ?
                                    <>
                                        <GridItem colSpan={{ base: 12, md: 6 }} >
                                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                Recipient (Lead)
                                            </FormLabel>
                                            <Flex justifyContent={'space-between'}>
                                                <Select
                                                    value={values.createByLead}
                                                    name="createByLead"
                                                    onChange={handleChange}
                                                    mb={errors.createByLead && touched.createByLead ? undefined : '10px'}
                                                    fontWeight='500'
                                                    placeholder={'Assign To'}
                                                    borderColor={errors.createByLead && touched.createByLead ? "red.300" : null}
                                                >
                                                    {assignToLeadData?.map((item) => {
                                                        return <option value={item._id} key={item._id}>{values.category === 'Contact' ? `${item.firstName} ${item.lastName}` : item.leadName}</option>
                                                    })}
                                                </Select>
                                                <IconButton onClick={() => setLeadModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />
                                            </Flex>
                                        </GridItem>
                                    </>
                                    : ''
                            }
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Recipient<Text color={"red"}>*</Text>
                            </FormLabel>
                            <Input
                                fontSize='sm'
                                disabled
                                value={values.recipient}
                                name="recipient"
                                placeholder='Recipient'
                                fontWeight='500'
                                borderColor={errors.recipient && touched.recipient ? "red.300" : null}
                            />
                            <Text mb='10px' fontSize='sm' color={'red'}> {errors.recipient && touched.recipient && errors.recipient}</Text>
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }} >
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Start Date<Text color={"red"}>*</Text>
                            </FormLabel>
                            <Input
                                type="datetime-local"
                                fontSize='sm'
                                onChange={handleChange}
                                onBlur={handleBlur}
                                min={dayjs(todayTime).format('YYYY-MM-DD HH:mm')}
                                value={values.startDate}
                                name="startDate"
                                fontWeight='500'
                                borderColor={errors?.startDate && touched?.startDate ? "red.300" : null}
                            />
                            <Text fontSize='sm' mb='10px' color={'red'}> {errors.startDate && touched.startDate && errors.startDate}</Text>
                        </GridItem>

                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Subject<Text color={"red"}>*</Text>
                            </FormLabel>
                            <Input
                                fontSize='sm'
                                onChange={handleChange} onBlur={handleBlur}
                                value={values.subject}
                                name="subject"
                                placeholder='subject'
                                fontWeight='500'
                                borderColor={errors.subject && touched.subject ? "red.300" : null}
                            />
                            <Text fontSize='sm' mb='10px' color={'red'}> {errors.subject && touched.subject && errors.subject}</Text>
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Message
                            </FormLabel>
                            <RadioGroup onChange={(e) => { setFieldValue('type', e) }} value={values.type}>
                                <Stack direction='row'>
                                    <Radio value='message'>Message</Radio>
                                    <Radio value='template'>Template</Radio>
                                </Stack>
                            </RadioGroup>
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }}>
                            {
                                values?.type === "message" ?
                                    <>
                                        <Textarea
                                            resize={'none'}
                                            fontSize='sm'
                                            placeholder='Enter Message'
                                            onChange={handleChange} onBlur={handleBlur}
                                            value={values.message}
                                            name="message"
                                            fontWeight='500'
                                            borderColor={errors.message && touched.message ? "red.300" : null}
                                        />
                                        <Text fontSize='sm' mb='10px' color={'red'}> {errors.message && touched.message && errors.message}</Text>
                                    </>
                                    :
                                    <Select
                                        // value={values.assignTo}
                                        name="html"
                                        onChange={handleChange} onBlur={handleBlur}
                                        value={values.html}
                                        fontWeight='500'
                                        placeholder={'Select Template'}
                                    // borderColor={errors.assignTo && touched.assignTo ? "red.300" : null}
                                    >
                                        {data?.map((item) => {
                                            return <option value={item?.html} key={item._id}>{item?.templateName}</option>
                                        })}
                                    </Select>
                            }
                        </GridItem>
                    </Grid>


                </ModalBody>
                <ModalFooter>
                    <Button variant='brand' size="sm" disabled={isLoding ? true : false} onClick={handleSubmit}>{isLoding ? <Spinner /> : 'Save'}</Button>
                    <Button sx={{
                        marginLeft: 2,
                        textTransform: "capitalize",
                    }} variant="outline"
                        colorScheme="red" onClick={() => {
                            formik.resetForm()
                            onClose()
                        }} size="sm">Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    )
}

export default AddEmailHistory

================
File: Client/src/views/admin/emailHistory/emailView.js
================
import { CloseIcon, DeleteIcon, EditIcon, ViewIcon } from '@chakra-ui/icons'
import { DrawerFooter, Flex, Grid, GridItem, IconButton, Modal, ModalBody, ModalContent, ModalHeader, ModalOverlay, Text } from '@chakra-ui/react'
import Spinner from "components/spinner/Spinner"
import moment from 'moment'
import { useEffect, useState } from 'react'
import { getApi } from 'services/api'
import { useNavigate } from 'react-router-dom';

const EmailView = (props) => {
    const { onClose, isOpen, info, fetchData, setAction, action, access, contactAccess, leadAccess } = props
    const [data, setData] = useState();
    const [edit, setEdit] = useState(false);
    const [deleteModel, setDelete] = useState(false);
    const user = JSON.parse(localStorage.getItem("user"))
    const [isLoding, setIsLoding] = useState(false)
    const navigate = useNavigate()

    const fetchViewData = async () => {
        if (info) {
            setIsLoding(true)
            let result = await getApi('api/email/view/', info?.event ? info?.event?.id : info);
            setData(result?.data);
            setIsLoding(false)
        }
    }
    useEffect(() => {
        fetchViewData()
    }, [action, info])

    const handleViewOpen = () => {
        if (info?.event) {
            navigate(`/view/${info?.event?.id}`)
        }
        else {
            navigate(`/view/${info}`)
        }
    }

    return (
        <Modal isOpen={isOpen} size={'md'} isCentered>
            <ModalOverlay />
            <ModalContent>
                <ModalHeader justifyContent='space-between' display='flex' >
                    Email
                    <IconButton onClick={() => onClose(false)} icon={<CloseIcon />} />
                </ModalHeader>
                {isLoding ?
                    <Flex justifyContent={'center'} alignItems={'center'} mb={30} width="100%" >
                        <Spinner />
                    </Flex> : <>

                        <ModalBody>
                            <Grid templateColumns="repeat(12, 1fr)" gap={3} >

                                <GridItem colSpan={{ base: 12, md: 6 }} >
                                    <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Recipient </Text>
                                    <Text>{data?.recipient ? data?.recipient : ' - '}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, md: 6 }} >
                                    <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Sender Email  </Text>
                                    <Text>{data?.senderEmail ? data?.senderEmail : '-'}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, md: 6 }} >
                                    <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Start Date </Text>
                                    <Text>{data?.startDate ? moment(data?.startDate).format('lll ') : ' - '}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, md: 6 }} >
                                    <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> End Date </Text>
                                    <Text>{data?.endDate ? moment(data?.endDate).format('lll ') : ' - '}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, md: 6 }} >
                                    <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Subject </Text>
                                    <Text>{data?.subject ? data?.subject : '-'}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, md: 6 }} >
                                    <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Message </Text>
                                    <Text>{data?.message ? data?.message : '-'}</Text>
                                </GridItem>
                            </Grid>

                        </ModalBody>
                        <DrawerFooter>
                            {access?.view && <IconButton variant='outline' colorScheme={'green'} onClick={() => handleViewOpen()} borderRadius="10px" size="md" icon={<ViewIcon />} />}
                            {access?.update && <IconButton variant='outline' onClick={() => setEdit(true)} ml={3} borderRadius="10px" size="md" icon={<EditIcon />} />}
                            {access?.delete && <IconButton colorScheme='red' onClick={() => setDelete(true)} ml={3} borderRadius="10px" size="md" icon={<DeleteIcon />} />}
                        </DrawerFooter>
                    </>}
            </ModalContent>
        </Modal>
    )
}

export default EmailView

================
File: Client/src/views/admin/emailHistory/index.js
================
import { useEffect, useState } from 'react';
import { Link, useNavigate } from "react-router-dom";
import { ViewIcon } from '@chakra-ui/icons';
import { Button, Menu, MenuButton, MenuItem, MenuList, Text, useDisclosure } from '@chakra-ui/react';
import { getApi } from 'services/api';
import { HasAccess } from '../../../redux/accessUtils';
import CommonCheckTable from '../../../components/reactTable/checktable';
import { SearchIcon } from "@chakra-ui/icons";
import { CiMenuKebab } from 'react-icons/ci';
import EmailAdvanceSearch from './components/EmailAdvanceSearch';
import moment from 'moment';
import { MdLeaderboard } from 'react-icons/md';
import { IoIosContact } from 'react-icons/io';
import AddEmailHistory from './add';
import { useDispatch } from 'react-redux';
import { fetchEmailsData } from '../../../redux/slices/emailsSlice';
import { toast } from 'react-toastify';

const Index = (props) => {
    const title = "Email";
    const [action, setAction] = useState(false);
    const { isOpen, onOpen, onClose } = useDisclosure();
    const [selectedId, setDelete] = useState(false);
    const [selectedValues, setSelectedValues] = useState([]);
    const [advanceSearch, setAdvanceSearch] = useState(false);
    const [getTagValuesOutSide, setGetTagValuesOutside] = useState([]);
    const [searchboxOutside, setSearchboxOutside] = useState('');
    const user = JSON.parse(localStorage.getItem("user"));
    const navigate = useNavigate();
    const dispatch = useDispatch();
    const [isLoding, setIsLoding] = useState(false);
    const [data, setData] = useState([]);
    const [displaySearchData, setDisplaySearchData] = useState(false);
    const [searchedData, setSearchedData] = useState([]);
    const [permission, leadAccess, contactAccess] = HasAccess(["Emails", 'Leads', 'Contacts']);
    const actionHeader = {
        Header: "Action", accessor: 'action', isSortable: false, center: true,
        cell: ({ row }) => (
            <Text fontSize="md" fontWeight="900" textAlign={"center"}>
                <Menu isLazy  >
                    <MenuButton><CiMenuKebab /></MenuButton>
                    <MenuList minW={'fit-content'} transform={"translate(1520px, 173px);"}>
                        {permission?.view && <MenuItem py={2.5} color={'green'} onClick={() => navigate(`/Email/${row?.values._id}`)} icon={<ViewIcon mb={'2px'} fontSize={15} />}>View</MenuItem>}
                        {row?.original?.createByContact && contactAccess?.view ?
                            <MenuItem width={"165px"} py={2.5} color={'black'} onClick={() => navigate(row?.original?.createByContact && `/contactView/${row?.original.createByContact}`)} icon={row?.original.createByContact && <IoIosContact fontSize={15} />}>  {(row?.original.createByContact && contactAccess?.view) && "contact"}
                            </MenuItem>
                            : ''}
                        {row?.original.createByLead && leadAccess?.view ? <MenuItem width={"165px"} py={2.5} color={'black'} onClick={() => navigate(`/leadView/${row?.original.createByLead}`)} icon={row?.original.createByLead && leadAccess?.view && <MdLeaderboard style={{ marginBottom: '4px' }} fontSize={15} />}>{row?.original.createByLead && leadAccess?.view && 'lead'}</MenuItem> : ''}
                    </MenuList>
                </Menu>
            </Text>
        )
    };
    const tableColumns = [
        { Header: "#", accessor: "_id", isSortable: false, width: 10 },
        {
            Header: "recipient", accessor: "createByName", cell: (cell) => (
                <Link to={`/Email/${cell?.row?.values._id}`}>
                    <Text
                        me="10px"
                        sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}
                        color='brand.600'
                        fontSize="sm"
                        fontWeight="700"
                    >
                        {cell?.value || '-'}
                    </Text>
                </Link>)
        },
        { Header: 'sender Name', accessor: 'senderName' },
        {
            Header: "Realeted To", accessor: 'realeted', cell: ({ row }) => (
                <Text  >
                    {row?.original.createByContact && contactAccess?.view ? <Link to={`/contactView/${row?.original.createByContact}`}>
                        <Text
                            me="10px"
                            sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}
                            color={'brand.600'}
                            fontSize="sm"
                            fontWeight="700"
                        >
                            {row?.original.createByContact && "Contact"}
                        </Text>
                    </Link> :
                        <Text
                            me="10px"
                            fontSize="sm"
                            fontWeight="700"
                        >
                            {row?.original.createByContact && "Contact"}
                        </Text>}

                    {leadAccess?.view && row?.original.createByLead ? <Link to={`/leadView/${row?.original.createByLead}`}>
                        <Text
                            me="10px"
                            sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}
                            color={'brand.600'}
                            fontSize="sm"
                            fontWeight="700"
                        >
                            {row?.original.createByLead && "Lead"}
                        </Text>
                    </Link> : <Text
                        me="10px"
                        fontSize="sm"
                        fontWeight="700"
                    >
                        {row?.original.createByLead && "Lead"}
                    </Text>}
                </Text>
            )
        },
        { Header: "timestamp", accessor: "timestamp", },
        {
            Header: "Created", accessor: 'created', cell: ({ row }) => (
                <Text fontSize="sm" fontWeight="700">
                    {moment(row?.values.timestamp).format('(DD/MM) h:mma')}
                </Text>
            )
        },
        ...(permission?.update || permission?.view || permission?.delete ? [actionHeader] : [])

    ];

    const fetchData = async () => {
        setIsLoding(true)
        const result = await dispatch(fetchEmailsData())
        let response = [...result?.payload?.data]

        response && response?.length > 0 && response?.forEach(element => {

            if (Object.isExtensible(element)) {
                if (element.createByLead) {
                    element.realeted = 'Lead';
                }
                if (element.createBy) {
                    element.realeted = 'Contact';
                }
            } else {
                const modifiedElement = { ...element };
                if (element.createByLead) {
                    modifiedElement.realeted = 'Lead';
                }
                if (element.createBy) {
                    modifiedElement.realeted = 'Contact';
                }
                element = modifiedElement;
            }
        });
        if (result.payload.status === 200) {
            setData(response);
        } else {
            toast.error("Failed to fetch data", "error");
        }
        setIsLoding(false)
    }

    // const [columns, setColumns] = useState([...tableColumns]);
    // const [selectedColumns, setSelectedColumns] = useState([...tableColumns]);
    // const dataColumn = tableColumns?.filter(item => selectedColumns?.find(colum => colum?.Header === item.Header))


    useEffect(() => {
        fetchData();
    }, [action])

    return (
        <div>
            <CommonCheckTable
                title={title}
                isLoding={isLoding}
                columnData={tableColumns ?? []}
                // dataColumn={dataColumn ?? []}
                allData={data ?? []}
                tableData={data}
                searchDisplay={displaySearchData}
                setSearchDisplay={setDisplaySearchData}
                searchedDataOut={searchedData}
                setSearchedDataOut={setSearchedData}
                tableCustomFields={[]}
                access={permission}
                // action={action}
                // setAction={setAction}
                // selectedColumns={selectedColumns}
                // setSelectedColumns={setSelectedColumns}
                // isOpen={isOpen}
                // onClose={onclose}
                onOpen={onOpen}
                selectedValues={selectedValues}
                setSelectedValues={setSelectedValues}
                setDelete={setDelete}
                deleteMany={true}
                AdvanceSearch={
                    <Button variant="outline" colorScheme='brand' leftIcon={<SearchIcon />} mt={{ sm: "5px", md: "0" }} size="sm" onClick={() => setAdvanceSearch(true)}>Advance Search</Button>
                }
                getTagValuesOutSide={getTagValuesOutSide}
                searchboxOutside={searchboxOutside}
                setGetTagValuesOutside={setGetTagValuesOutside}
                setSearchboxOutside={setSearchboxOutside}
                handleSearchType="EmailSearch"
            />

            <EmailAdvanceSearch
                advanceSearch={advanceSearch}
                setAdvanceSearch={setAdvanceSearch}
                setSearchedData={setSearchedData}
                setDisplaySearchData={setDisplaySearchData}
                allData={data ?? []}
                setAction={setAction}
                setGetTagValues={setGetTagValuesOutside}
                setSearchbox={setSearchboxOutside}
            />

            <AddEmailHistory isOpen={isOpen} size={"sm"} onClose={onClose} setAction={setAction} />
        </div>
    )
}

export default Index

================
File: Client/src/views/admin/emailHistory/View.js
================
import { Box, Button, Flex, Grid, GridItem, Heading, Text, useDisclosure } from "@chakra-ui/react";
import Card from "components/card/Card";
import { HSeparator } from "components/separator/Separator";
import Spinner from "components/spinner/Spinner";
import moment from "moment";
import { useEffect, useState } from "react";
import { IoIosArrowBack } from "react-icons/io";
import { Link, useParams, useNavigate } from "react-router-dom";
import { HasAccess } from "../../../redux/accessUtils";
import { getApi } from "services/api";
import { FaFilePdf } from "react-icons/fa";
import html2pdf from "html2pdf.js";
const View = () => {

    const param = useParams()

    const [data, setData] = useState()
    const { isOpen, onOpen, onClose } = useDisclosure()
    const [edit, setEdit] = useState(false);
    const [deleteModel, setDelete] = useState(false);
    const user = JSON.parse(localStorage.getItem("user"))
    const [isLoding, setIsLoding] = useState(false)
    const navigate = useNavigate()
    const [loading, setLoading] = useState(false)

    const size = "lg";

    const fetchData = async () => {
        setIsLoding(true)
        let response = await getApi('api/email/view/', param.id)
        setData(response?.data);
        setIsLoding(false)
    }

    const generatePDF = () => {
        setLoading(true)
        const element = document.getElementById("reports");
        const hideBtn = document.getElementById("hide-btn");

        if (element) {
            hideBtn.style.display = 'none';
            html2pdf()
                .from(element)
                .set({
                    margin: [0, 0, 0, 0],
                    filename: `Email_Details_${moment().format("DD-MM-YYYY")}.pdf`,
                    image: { type: "jpeg", quality: 0.98 },
                    html2canvas: { scale: 2, useCORS: true, allowTaint: true },
                    jsPDF: { unit: "in", format: "letter", orientation: "portrait" },
                })
                .save().then(() => {
                    setLoading(false)
                    hideBtn.style.display = '';
                })
            // }, 500);
        } else {
            console.error("Element with ID 'reports' not found.");
            setLoading(false)
        }
    };

    useEffect(() => {
        fetchData()
    }, [])

    const [contactAccess, leadAccess] = HasAccess(['Contacts', 'Leads'])

    return (
        <>
            {isLoding ?
                <Flex justifyContent={'center'} alignItems={'center'} width="100%" >
                    <Spinner />
                </Flex> : <>
                    <Grid templateColumns="repeat(4, 1fr)" gap={3} id="reports">
                        <GridItem colSpan={{ base: 4 }}>
                            <Heading size="lg" m={3}>
                                {data?.senderEmail}
                            </Heading>
                        </GridItem>
                        <GridItem colSpan={{ base: 4 }}>
                            <Card >
                                <Grid gap={4}>
                                    <GridItem colSpan={2}>
                                        <Box>
                                            <Box display={"flex"} justifyContent={"space-between"}>
                                                <Heading size="md" mb={3}>
                                                    Email Details
                                                </Heading>
                                                <Box id="hide-btn">
                                                    <Button leftIcon={<FaFilePdf />} size='sm' variant="brand" onClick={generatePDF} disabled={loading}>
                                                        {loading ? "Please Wait..." : "Print as PDF"}
                                                    </Button>
                                                    <Button leftIcon={<IoIosArrowBack />} size='sm' variant="brand" onClick={() => navigate(-1)} style={{ marginLeft: 10 }}>
                                                        Back
                                                    </Button>
                                                </Box>
                                            </Box>
                                            <HSeparator />
                                        </Box>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 2, md: 1 }}>
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Sender </Text>
                                        <Text>{data?.senderEmail ? data?.senderEmail : ' - '}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 2, md: 1 }}>
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Recipient </Text>
                                        <Text>{data?.recipient ? data?.recipient : ' - '}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 2, md: 1 }}>
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Create From </Text>
                                        {data?.createBy ?
                                            <Link to={`/contactView/${data?.createBy}`}>
                                                <Text color={contactAccess?.view ? 'brand.600' : 'blackAlpha.900'} sx={{ '&:hover': { color: contactAccess?.view ? 'blue.500' : 'blackAlpha.900', textDecoration: contactAccess?.view ? 'underline' : 'none' } }}>{data?.createByName ? data?.createByName : ' - '}</Text>
                                            </Link> : <Link to={`/leadView/${data?.createByLead}`}>
                                                <Text color={leadAccess?.view ? 'brand.600' : 'blackAlpha.900'} sx={{ '&:hover': { color: leadAccess?.view ? 'blue.500' : 'blackAlpha.900', textDecoration: leadAccess?.view ? 'underline' : 'none' } }}>{data?.createByName ? data?.createByName : ' - '}</Text>
                                            </Link>
                                        }
                                    </GridItem>
                                    <GridItem colSpan={{ base: 2, md: 1 }}>
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Realeted To </Text>
                                        <Text>{data?.createBy ? "Contact" : data?.createByLead && "Lead"}</Text>
                                    </GridItem>

                                    <GridItem colSpan={{ base: 2, md: 1 }}>
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Start Date </Text>
                                        <Text> {data?.startDate ? moment(data?.startDate).format('lll ') : ' - '} </Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 2, md: 1 }}>
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>End Date </Text>
                                        <Text> {data?.endDate ? moment(data?.endDate).format('lll ') : ' - '} </Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 2, md: 1 }}>
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Time stamp </Text>
                                        <Text> {data?.timestamp ? moment(data?.timestamp).format('lll ') : ' - '} [{data?.timestamp ? moment(data?.timestamp).toNow() : ' - '}]</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 2 }}>
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Subject </Text>
                                        <Text>{data?.subject ? data?.subject : ' - '}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 2 }} >
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Message </Text>
                                        {
                                            data?.type === "message" ?
                                                <Text>{data?.message ? data?.message : '-'}</Text>
                                                :
                                                <div dangerouslySetInnerHTML={{ __html: data?.html }} />
                                        }
                                    </GridItem>
                                </Grid>
                            </Card>
                        </GridItem>

                    </Grid>

                </>}
        </>
    );
};

export default View;

================
File: Client/src/views/admin/emailTemplate/AddEdit.js
================
import { Button, Grid, GridItem, Flex, IconButton, Text, Menu, MenuButton, MenuDivider, MenuItem, MenuList, useDisclosure, Input, FormLabel } from '@chakra-ui/react'
import { AddIcon, ChevronDownIcon, DeleteIcon, EditIcon } from "@chakra-ui/icons";
import React from 'react'
import moment from 'moment'
import { Link, useLocation, useNavigate, useParams } from 'react-router-dom'
import { BiLink } from 'react-icons/bi'
import { useEffect, useRef } from 'react'
import { useState } from 'react'
import { getApi } from 'services/api'
import Card from 'components/card/Card'
import { IoIosArrowBack } from "react-icons/io";
import { HasAccess } from '../../../redux/accessUtils';
import { HSeparator } from 'components/separator/Separator';
import CommonDeleteModel from 'components/commonDeleteModel';
import { deleteManyApi, } from 'services/api';
import { EmailEditor } from 'react-email-editor';
import { toast } from 'react-toastify';
import { postApi } from 'services/api';
import { putApi } from 'services/api';

const AddEdit = () => {
    const user = JSON.parse(localStorage.getItem("user"))
    const navigate = useNavigate()
    const loction = useLocation()
    const { type, id } = loction?.state || {}
    const [permission] = HasAccess(['Email Template'])
    const emailEditorRef = useRef(null);
    const [preview, setPreview] = useState(false);
    const [name, setName] = useState('');
    const [description, setDescription] = useState('');

    const togglePreview = () => {
        if (preview) {
            emailEditorRef.current?.editor?.hidePreview();
            setPreview(false);
        } else {
            emailEditorRef.current?.editor?.showPreview('desktop');
            setPreview(true);
        }
    };

    const fetchData = async () => {
        const result = await getApi(`api/email-temp/view/${id}`)
        if (result && result.status === 200) {
            setName(result?.data?.templateName)
            setDescription(result?.data?.description)
            emailEditorRef?.current?.editor?.loadDesign(result?.data?.design);
        }
    }

    const saveDesign = () => {
        if (name !== "") {
            emailEditorRef.current?.editor?.exportHtml(async (allData) => {
                const { html } = allData
                const { design } = allData

                const data = {
                    html: html,
                    design: design,
                    templateName: name,
                    description: description,
                    createBy: user?._id
                }
                const result = await postApi('api/email-temp/add', data)
                if (result && result.status === 200) {
                    toast.success(result.data.message)
                    setName('')
                }
                navigate('/email-template')
            });
        } else {
            toast.error("Template Name is required")
        }

    };

    const editDesign = () => {
        if (name !== "") {
            emailEditorRef.current?.editor?.exportHtml(async (allData) => {
                const { html } = allData
                const { design } = allData

                const data = {
                    html: html,
                    design: design,
                    templateName: name,
                    description: description,
                    createBy: user?._id
                }
                const result = await putApi(`api/email-temp/edit/${id}`, data)
                if (result && result.status === 200) {
                    toast.success(result.data.message)
                    navigate('/email-template')
                }
            });
        } else {
            toast.error("Template Name is required")
        }

    };

    const handleSave = () => {
        type === "add" ? saveDesign() : editDesign()
    }


    useEffect(() => {
        if (type === "edit") fetchData()
    }, [type])

    return (
        <div>
            <Card>
                <Grid templateColumns="repeat(12, 1fr)" mb={3} gap={1} justifyContent={"space-between"} alignItem={"center"}>
                    <GridItem colSpan={{ base: 12, md: 6 }}>
                        <Text fontSize="xl" fontWeight="bold" color={'blackAlpha.900'}>{type === "add" ? "Create" : "Edit"} Template </Text>
                    </GridItem>

                    <GridItem colSpan={{ base: 12, md: 6 }}>
                        <Flex justifyContent={"right"}>
                            <Button size="sm" variant="brand" onClick={togglePreview}>
                                {preview ? "Hide Preview" : "Show Preview"}
                            </Button>
                            <Button size="sm" variant="brand" style={{ marginLeft: "10px" }} onClick={handleSave}>
                                Save
                            </Button>
                            <Link to="/email-template" style={{ marginLeft: "10px" }}>
                                <Button size="sm" leftIcon={<IoIosArrowBack />} variant="brand">
                                    Back
                                </Button>
                            </Link>
                        </Flex>
                    </GridItem>
                </Grid>
                <HSeparator />
                <div>
                    <Grid templateColumns="repeat(12, 1fr)" gap={3} mt={2}>
                        <GridItem colSpan={{ base: 12, md: 6 }} >
                            <Input
                                fontSize='sm'
                                name="templateName"
                                placeholder='Template Name'
                                fontWeight='500'
                                value={name}
                                onChange={(e) => setName(e.target.value)}
                            />
                        </GridItem>
                        <GridItem colSpan={{ base: 12, md: 6 }} >
                            <Input
                                fontSize='sm'
                                name="description"
                                placeholder='Description'
                                fontWeight='500'
                                value={description}
                                onChange={(e) => setDescription(e.target.value)}
                            />
                        </GridItem>
                        <GridItem colSpan={{ base: 12, md: 12 }} mt={2}>
                            <EmailEditor ref={emailEditorRef} />
                        </GridItem>
                    </Grid>
                </div>
            </Card>
        </div>
    )
}

export default AddEdit

================
File: Client/src/views/admin/emailTemplate/index.js
================
import { useEffect, useState } from 'react';
import { DeleteIcon, EditIcon, ViewIcon } from '@chakra-ui/icons';
import { Button, Menu, MenuButton, MenuItem, MenuList, Select, Text, useDisclosure } from '@chakra-ui/react';
import { getApi } from 'services/api';
import { HasAccess } from '../../../redux/accessUtils';
import CommonCheckTable from '../../../components/reactTable/checktable';
import { CiMenuKebab } from 'react-icons/ci';
import { putApi } from 'services/api';
import { useLocation } from 'react-router-dom';
import { deleteManyApi } from 'services/api';
import { useNavigate } from 'react-router-dom';
import { useDispatch } from 'react-redux';
import { toast } from 'react-toastify';
import CommonDeleteModel from 'components/commonDeleteModel';
import { fetchEmailTempData } from '../../../redux/slices/emailTempSlice';

const Index = () => {
    const [action, setAction] = useState(false);
    const { isOpen, onOpen, onClose } = useDisclosure();
    const [edit, setEdit] = useState(false);
    const [eventView, setEventView] = useState(false)
    const [id, setId] = useState('')
    const [selectedId, setSelectedId] = useState();
    const [selectedValues, setSelectedValues] = useState([]);
    // const [advanceSearch, setAdvanceSearch] = useState(false);
    const [getTagValuesOutSide, setGetTagValuesOutside] = useState([]);
    const [searchboxOutside, setSearchboxOutside] = useState('');
    const user = JSON.parse(localStorage.getItem("user"));
    const [deleteMany, setDeleteMany] = useState(false);
    const [isImportLead, setIsImportLead] = useState(false);
    const [isLoding, setIsLoding] = useState(false);
    const [data, setData] = useState([]);
    const [displaySearchData, setDisplaySearchData] = useState(false);
    const [searchedData, setSearchedData] = useState([]);
    const [userAction, setUserAction] = useState("");
    const [permission] = HasAccess(["Email Template"]);
    const location = useLocation();
    // const state = location.state;
    const navigate = useNavigate()
    const dispatch = useDispatch();

    const handleEditOpen = (row) => {
        onOpen();
        setUserAction("edit")
        navigate(`/email-template/email-template-addEdit`, { state: { type: 'edit', id: row?.values?._id } })
        setSelectedId(row?.values?._id);
    }

    const actionHeader = {
        Header: "Action", isSortable: false, center: true,
        cell: ({ row }) => (
            <Text fontSize="md" fontWeight="900" textAlign={"center"}>
                <Menu isLazy >
                    <MenuButton ><CiMenuKebab /></MenuButton>
                    <MenuList minW={'fit-content'} transform={"translate(1520px, 173px);"}>
                        {permission?.update &&
                            <MenuItem py={2.5} icon={<EditIcon fontSize={15} mb={1} />} onClick={() => handleEditOpen(row)}>Edit</MenuItem>}
                        {permission?.view &&
                            <MenuItem py={2.5} color={"green"} icon={<ViewIcon fontSize={15} mb={1} />} onClick={() => navigate(`/email-template/${row?.values?._id}`)}>View</MenuItem>}
                        {permission?.delete &&
                            <MenuItem py={2.5} color={'red'} icon={<DeleteIcon fontSize={15} mb={1} />} onClick={() => { setDeleteMany(true); setSelectedValues([row?.values?._id]); }}>Delete</MenuItem>}
                    </MenuList>
                </Menu>
            </Text>
        )
    }
    const tableColumns = [
        {
            Header: "#",
            accessor: "_id",
            isSortable: false,
            width: 5
        },
        {
            Header: 'Template Name', accessor: 'templateName',
            cell: (cell) => (
                <div className="selectOpt">
                    <Text
                        onClick={() => navigate(`/email-template/${cell?.row?.original._id}`)}
                        me="10px"
                        sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' }, cursor: 'pointer' }}
                        color='brand.600'
                        fontSize="sm"
                        fontWeight="700"
                    >
                        {cell?.value}
                    </Text>
                </div>
            )
        },
        { Header: "Description", accessor: "description" },
        ...(permission?.update || permission?.delete ? [actionHeader] : []),
    ];

    const fetchData = async () => {
        setIsLoding(true)
        const result = await dispatch(fetchEmailTempData())
        if (result.payload.status === 200) {
            setData(result?.payload?.data);
        } else {
            toast.error("Failed to fetch data", "error");
        }
        setIsLoding(false)
    }

    const handleDeleteTask = async (ids) => {
        try {
            setIsLoding(true)
            let response = await deleteManyApi('api/email-temp/deleteMany', ids)
            if (response.status === 200) {
                setSelectedValues([])
                setDeleteMany(false)
                setAction((pre) => !pre)
            }
        } catch (error) {
            console.log(error)
        }
        finally {
            setIsLoding(false)
        }
    }


    // const [selectedColumns, setSelectedColumns] = useState([...tableColumns]);
    // const dataColumn = tableColumns?.filter(item => selectedColumns?.find(colum => colum?.Header === item.Header))

    const addBtn = () => {
        navigate(`/email-template/email-template-addEdit`, { state: { type: 'add' } })
        setUserAction("add");
    }

    useEffect(() => {
        fetchData();
    }, [action])

    return (
        <div>
            <CommonCheckTable
                title={"Email Template"}
                isLoding={isLoding}
                columnData={tableColumns ?? []}
                // dataColumn={dataColumn ?? []}
                allData={data ?? []}
                searchDisplay={displaySearchData}
                setSearchDisplay={setDisplaySearchData}
                searchedDataOut={searchedData}
                setSearchedDataOut={setSearchedData}
                tableCustomFields={[]}
                access={permission}
                // selectedColumns={selectedColumns}
                // setSelectedColumns={setSelectedColumns}
                // state={state}
                onOpen={addBtn}
                selectedValues={selectedValues}
                setSelectedValues={setSelectedValues}
                setDelete={setDeleteMany}
                AdvanceSearch={false}
                getTagValuesOutSide={getTagValuesOutSide}
                searchboxOutside={searchboxOutside}
                setGetTagValuesOutside={setGetTagValuesOutside}
                setSearchboxOutside={setSearchboxOutside}
                handleSearchType="template"
            />
            <CommonDeleteModel isOpen={deleteMany} onClose={() => setDeleteMany(false)} type='Email Template' handleDeleteData={handleDeleteTask} ids={selectedValues} />
        </div>
    )
}

export default Index

================
File: Client/src/views/admin/emailTemplate/view.js
================
import { Button, Grid, GridItem, Heading, Flex, IconButton, Text, Menu, MenuButton, MenuDivider, MenuItem, MenuList, useDisclosure, Input, FormLabel } from '@chakra-ui/react'
import { AddIcon, ChevronDownIcon, DeleteIcon, EditIcon } from "@chakra-ui/icons";
import React from 'react'
import moment from 'moment'
import { Link, useLocation, useNavigate, useParams } from 'react-router-dom'
import { BiLink } from 'react-icons/bi'
import { useEffect, useRef } from 'react'
import { useState } from 'react'
import { getApi } from 'services/api'
import Card from 'components/card/Card'
import { IoIosArrowBack } from "react-icons/io";
import { HasAccess } from '../../../redux/accessUtils';
import { HSeparator } from 'components/separator/Separator';
import CommonDeleteModel from 'components/commonDeleteModel';
import { deleteManyApi, } from 'services/api';
import { EmailEditor } from 'react-email-editor';
import { toast } from 'react-toastify';
import { postApi } from 'services/api';
import { putApi } from 'services/api';

const View = () => {
    const user = JSON.parse(localStorage.getItem("user"))
    const navigate = useNavigate()
    const { id } = useParams()
    const [permission, contactAccess, leadAccess] = HasAccess(['Email Template', 'Contacts', 'Leads'])
    const emailEditorRef = useRef(null);
    const [preview, setPreview] = useState(true);
    const [name, setName] = useState('');
    const [description, setDescription] = useState('');


    const fetchData = async () => {
        const result = await getApi(`api/email-temp/view/${id}`)
        if (result && result.status === 200) {
            setName(result?.data?.templateName)
            setDescription(result?.data?.description)
            emailEditorRef?.current?.editor?.loadDesign(result?.data?.design);
            emailEditorRef.current?.editor?.showPreview('desktop');
        }
    }


    useEffect(() => {
        fetchData()
    }, [])

    return (
        <div>
            <GridItem colSpan={{ base: 4 }}>
                <Heading size="lg" m={3}>
                    {name || ""}
                </Heading>
            </GridItem>
            <Card>
                <Grid templateColumns="repeat(12, 1fr)" mb={3} gap={1} justifyContent={"space-between"} alignItem={"center"}>
                    <GridItem colSpan={{ base: 12, md: 6 }}>
                        <Text fontSize="xl" fontWeight="bold" color={'blackAlpha.900'}>View Template </Text>
                    </GridItem>

                    <GridItem colSpan={{ base: 12, md: 6 }}>
                        <Flex justifyContent={"right"}>
                            <Link to="/email-template" style={{ marginLeft: "10px" }}>
                                <Button size="sm" leftIcon={<IoIosArrowBack />} variant="brand">
                                    Back
                                </Button>
                            </Link>
                        </Flex>
                    </GridItem>
                </Grid>
                <HSeparator />
                <div>
                    <Grid templateColumns="repeat(12, 1fr)" gap={3} mt={2}>
                        <GridItem colSpan={{ base: 12, md: 6 }} >
                            <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Template Name </Text>
                            <Text >{name ? name : ' - '}</Text>
                        </GridItem>
                        <GridItem colSpan={{ base: 12, md: 6 }} >
                            <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Description </Text>
                            <Text >{description ? description : ' - '}</Text>
                        </GridItem>
                        <GridItem colSpan={{ base: 12, md: 12 }} mt={2}>
                            <EmailEditor ref={emailEditorRef} />
                        </GridItem>
                    </Grid>
                </div>
            </Card>
        </div>
    )
}

export default View

================
File: Client/src/views/admin/image/components/Upload.js
================
// Chakra imports
import {
    Box, Flex,
    Grid,
    GridItem,
    Icon,
    Text,
    useColorModeValue
} from "@chakra-ui/react";
// Custom components
// Assets
import Dropzone from "components/Dropzone";
import { MdUpload } from "react-icons/md";

export default function Upload(props) {
    const { used, total, count, ...rest } = props;
    // Chakra Color Mode
    const textColorPrimary = useColorModeValue("secondaryGray.900", "white");
    const brandColor = useColorModeValue("brand.500", "white");
    const textColorSecondary = "gray.400";
    return (
        <Grid templateColumns="repeat(12, 1fr)" gap={2}>
            <GridItem colSpan={{ base: 12 }} >
                <Dropzone
                    w={{ base: "100%" }}
                    me='36px'
                    minH={100}
                    img={props.text === 'Property Photos' ? 'img' : ''}
                    isMultipleAllow={false}
                    height={'100%'}
                    onFileSelect={props.onFileSelect}
                    content={
                        <Box>
                            <Icon as={MdUpload} w='50px' h='50px' color={brandColor} />
                            <Flex justify='center' mx='auto' mb='12px'>
                                <Text fontSize='sm' fontWeight='700' color={brandColor}>
                                    Upload File
                                </Text>
                            </Flex>
                            {count > 0 && <Text fontSize='sm' fontWeight='500' color='secondaryGray.500'>
                                Selected Files : {count}
                            </Text>}
                        </Box>
                    }
                />
            </GridItem>
            <GridItem colSpan={{ base: 12 }} >
                <Flex direction='column' >
                    <Text
                        color={textColorPrimary}
                        fontWeight='bold'
                        textAlign='start'
                        fontSize='xl'
                        my={{ base: "5px" }}>
                        Upload {props.text}
                    </Text>
                    <Text
                        color={textColorSecondary}
                        fontSize='md'
                        my={{ base: "auto" }}
                        mx='auto'
                        textAlign='start'>
                        Accepted File Types (Images files - 15MB max) only 1 file
                    </Text>
                </Flex>
            </GridItem>
        </Grid>
    );
}

================
File: Client/src/views/admin/image/addImage.js
================
import {  Button, Grid, GridItem, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, useBreakpointValue } from '@chakra-ui/react'
import Spinner from 'components/spinner/Spinner'
import { useFormik } from 'formik'
import { useState } from 'react'
import { postApi } from 'services/api'
import UploadImg from './components/Upload';
import { toast } from 'react-toastify'
import { fetchImage } from '../../../redux/slices/imageSlice'
import { useDispatch } from 'react-redux'

const AddImage = (props) => {
    const { imageModal, setImageModal } = props
    const [isLoding, setIsLoding] = useState(false)

    const dispatch = useDispatch()

    const initialValues = {
        authImg: '',
        logoSmImg: '',
        logoLgImg: ''
    }

    const formik = useFormik({
        initialValues: initialValues,
        onSubmit: (values, { resetForm }) => {
            AddData()
            resetForm();
        },
    });
    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm, dirty } = formik

    const AddData = async () => {
        try {
            setIsLoding(true);
            const formData = new FormData();

            if (values?.authImg) {
                formData?.append('authImg', values?.authImg?.[0]);
            }

            if (values?.logoSmImg) {
                formData?.append('logoSmImg', values?.logoSmImg?.[0]);
            }

            if (values?.logoLgImg) {
                formData?.append('logoLgImg', values?.logoLgImg?.[0]);
            }

            if (values?.authImg || values?.logoSmImg || values?.logoLgImg) {
                const response = await postApi('api/images/add-auth-logo-img', formData);

                if (response.status === 200) {
                    setImageModal(false);
                    resetForm();
                    dispatch(fetchImage());
                    toast.success(response?.data?.message);
                } else {
                    toast.error(response?.response?.data?.message);
                }
            }

        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };

    return (
        <Modal onClose={() => setImageModal(false)} size={"xl"} isOpen={imageModal} isCentered={useBreakpointValue({ base: false, md: true })}>
            <ModalOverlay />
            <ModalContent>
                <ModalHeader>Add Image</ModalHeader>
                <ModalCloseButton />
                <ModalBody>
                    <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                        <GridItem colSpan={{ base: 6, md: 12, sm: 12, lg: 6 }}>
                            <UploadImg id='logoLgImg' count={values?.logoLgImg?.length} onFileSelect={(file) => setFieldValue('logoLgImg', file)} text="Large Logo " />
                        </GridItem>
                        <GridItem colSpan={{ base: 6, md: 12, sm: 12, lg: 6 }}>
                            <UploadImg id='logoSmImg' count={values?.logoSmImg?.length} onFileSelect={(file) => setFieldValue('logoSmImg', file)} text="Small Logo " />
                        </GridItem>
                        <GridItem display={{ lg: 'flex' }} justifyContent={{ lg: 'center' }} colSpan={{ base: 12, md: 12, sm: 12, lg: 12 }}>
                            <UploadImg id='authImg' count={values?.authImg?.length} onFileSelect={(file) => setFieldValue('authImg', file)} text="Login Page Image" />
                        </GridItem>
                    </Grid>
                </ModalBody>
                <ModalFooter>
                    <Button me={2} variant='brand' onClick={handleSubmit} disabled={isLoding || !(values?.authImg && values?.logoSmImg && values?.logoLgImg) ? true : false} size='sm' >{isLoding ? <Spinner /> : 'Save'}</Button>
                    <Button variant="outline"
                        size='sm'
                        colorScheme="red" onClick={() => {
                            setImageModal(false)
                            formik.resetForm()
                        }}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    )
}

export default AddImage

================
File: Client/src/views/admin/image/imageView.js
================
import { Button, Grid, GridItem, Image, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import React from 'react';
import { useState } from 'react';
import { putApi } from 'services/api';
import Dropzone from "components/Dropzone";
import { toast } from 'react-toastify';
import { useDispatch } from 'react-redux';
import { fetchImage } from '../../../redux/slices/imageSlice'

const ImageView = (props) => {
    const { data, fetchData, setImageData, handleDeleteOpen, imageviewData } = props;
    const [isLoding, setIsLoding] = useState(false)
    const dispatch = useDispatch()

    const authimg = 'authimage';
    const logoimg = 'logoimg'
    const largelogoimg = 'largelogoimg'

    const changeImage = async (file, type) => {
        try {
            setIsLoding(true);
            const formData = new FormData();

            if (type === authimg) {
                formData?.append('authImg', file?.[0]);
            }

            if (type === logoimg) {
                formData?.append('logoSmImg', file?.[0]);
            }

            if (type === largelogoimg) {
                formData?.append('logoLgImg', file?.[0]);
            }
            if (type === authimg || type === logoimg || type === largelogoimg) {
                const response = await putApi(`api/images/change-auth-logo-img/${data?._id}`, formData);
                if (response.status === 200) {
                    fetchData(data?._id);
                    dispatch(fetchImage());
                    toast.success(response?.data?.message);
                } else {
                    toast.error(response?.response?.data?.message);
                }
            }
        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };

    return (
        <div>
            <Modal onClose={props.onClose} isOpen={props.isOpen} isCentered size='xl'>
                <ModalOverlay />
                <ModalContent>
                    <ModalHeader>View Images</ModalHeader>
                    <ModalCloseButton />
                    <ModalBody>

                        <Grid templateColumns={'repeat(12, 1fr)'} gap={5}>
                            <GridItem colSpan={{ base: 12, md: 6 }} display={"flex"} justifyContent={"center"}>
                                <div>
                                    <Text fontWeight={"600"} ps={3}>Navbar Small Logo Image</Text>
                                    <div className="imageCard" style={{ margin: "10px" }}>
                                        <Image src={data?.logoSmImg} height={"100px"} width={"100%"} />
                                        <div className='imageContent'>
                                            <Dropzone
                                                borderRadius="0"
                                                isMultipleAllow={false}
                                                onFileSelect={(file) => changeImage(file, logoimg)}
                                                content={
                                                    <Button size='sm' variant="brand">Change</Button>
                                                }
                                            />
                                        </div>
                                    </div>
                                </div>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }} display={"flex"} justifyContent={"center"}>
                                <div>
                                    <Text fontWeight={"600"} ps={3}>Navbar Large Logo Image</Text>
                                    <div className="imageCard" style={{ margin: "10px" }}>
                                        <Image src={data?.logoLgImg} height={"100px"} width={"100%"} />
                                        <div className='imageContent'>
                                            <Dropzone
                                                borderRadius="0"
                                                isMultipleAllow={false}
                                                onFileSelect={(file) => changeImage(file, largelogoimg)}
                                                content={
                                                    <Button size='sm' variant="brand">Change</Button>
                                                }
                                            />
                                        </div>
                                    </div>
                                </div>
                            </GridItem>
                            <GridItem colSpan={{ base: 12 }} display={"flex"} justifyContent={"center"}>
                                <div>
                                    <Text fontWeight={"600"} ps={3}>Login page Image</Text>
                                    <div className="imageCard" style={{ margin: "10px" }}>
                                        <Image src={data?.authImg} height={"100px"} width={"100%"} />
                                        <div className='imageContent'>
                                            <Dropzone
                                                borderRadius="0"
                                                isMultipleAllow={false}
                                                onFileSelect={(file) => changeImage(file, authimg)}
                                                content={
                                                    <Button size='sm' variant="brand" >Change</Button>
                                                }
                                            />
                                        </div>
                                    </div>
                                </div>
                            </GridItem>
                        </Grid>
                    </ModalBody>
                    <ModalFooter>
                        <Button colorScheme="brand" mr={2} size='sm' onClick={() => setImageData(data)} disabled={isLoding ? true : false}>{isLoding ? <Spinner /> : 'Set Image'}</Button>
                        <Button colorScheme="red"
                            size='sm'
                            disabled={data?.isActive === true ? true : false}
                            onClick={() => { handleDeleteOpen(imageviewData); }}
                        >Delete</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        </div>
    )
}

export default ImageView

================
File: Client/src/views/admin/image/index.js
================
import { Box, Button, Flex, Grid, GridItem, Image, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text } from '@chakra-ui/react'
import Card from 'components/card/Card'
import React, { useEffect, useState } from 'react'
import { fetchImage } from "../../../redux/slices/imageSlice";
import { useDispatch, useSelector } from 'react-redux'
import ImageView from './imageView';
import AddImage from './addImage';
import { getApi } from 'services/api';
import { IoIosArrowBack } from 'react-icons/io';
import { useNavigate } from 'react-router-dom';
import { putApi } from 'services/api';
import { AddIcon } from '@chakra-ui/icons';
import DataNotFound from 'components/notFoundData';
import { deleteApi } from 'services/api';
import Spinner from 'components/spinner/Spinner';

const ChangeImage = () => {
    const [imageModal, setImageModal] = useState(false)
    const dispatch = useDispatch();
    const [imageview, setImageView] = useState(false)
    const [imageviewData, setImageViewData] = useState({})
    const [deleteOpen, setDelete] = useState(false)
    const [data, setData] = useState(false)
    const [selectedId, setSelectedId] = useState(false)
    const [isLoding, setIsLoding] = useState(false)
    const navigate = useNavigate()



    const fetchData = async (selectedId) => {
        setIsLoding(true)
        let result = await getApi(`api/images/view/${selectedId}`);
        setData(result.data)
        setIsLoding(false)
    }
    const image = useSelector((state) => state?.images?.images);
    const load = useSelector((state) => state?.images);
    const handleViewOpen = (item) => {
        fetchData(item._id)
        setImageView(!imageview)
    }
    const handleViewClose = () => {
        setImageView(false)
    }
    const handleDeleteClose = () => { setDelete(false) }
    const handleDeleteOpen = (item) => {
        setDelete(!deleteOpen);
        setSelectedId(item._id)
    }

    const handleDelete = async () => {
        try {
            setIsLoding(true)
            let response = await deleteApi(`api/images/delete/`, selectedId);
            if (response.status === 200) {
                dispatch(fetchImage());
                setDelete(false);
                setImageView(false)
            }
        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    }

    const setImageData = async (item) => {
        try {
            setIsLoding(true)
            let response = await putApi(`api/images/isActive/${item?._id}`, { isActive: true });
            if (response.status === 200) {
                handleViewClose();
                dispatch(fetchImage());
            }
        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    }
    useEffect(() => {
        dispatch(fetchImage());
    }, [dispatch]);

    useEffect(() => {
        if (image?.length === 0) {
            localStorage.removeItem('persist:image')
        }
    }, [image])

    return (
        <>
            <Card>
                <Flex justifyContent={'end'}>
                    <Button variant='brand' size='sm' onClick={() => setImageModal(true)} leftIcon={<AddIcon />}>Add New</Button>
                    <Button onClick={() => navigate('/admin-setting')} variant="brand" size="sm" leftIcon={<IoIosArrowBack />} ml={2}>Back</Button>
                </Flex>
                {!(load.status === 'succeeded') ? <Flex justifyContent={'center'} alignItems={'center'} width="100%" color={'black'} fontSize="sm" fontWeight="700">
                    <Spinner />
                </Flex> : <Card>
                    <Grid templateColumns={'repeat(12, 1fr)'} gap={5}>
                        {image?.length > 0 && image?.map((item, i) => (
                            <GridItem colSpan={{ base: 12, md: 4, lg: 3 }}>
                                <div className="imageCard">
                                    <Image src={item?.authImg} height={"200px"} width={"100%"} />
                                    {item?.isActive === true ? <Box backgroundColor={"#422afb"} color={"#fff"} height={"20px"} width={"140px"} position={"absolute"} top={"18px"} right={"-40px"} transform={"rotate(45deg)"} fontSize={"16px"} display={"flex"} justifyContent={"center"} alignItems={"center"}>
                                        Active
                                    </Box> : ""}
                                    <div className='imageContent'>
                                        <Button size='sm' variant="brand" onClick={() => setImageData(item)}>Set Image</Button>
                                        <Button size='sm' variant="brand" mx={1} onClick={() => { handleViewOpen(item); setImageViewData(item) }}>View</Button>
                                        <Button size="sm" colorScheme="red" disabled={item?.isActive === true ? true : false} onClick={() => { handleDeleteOpen(item) }}>Delete</Button>
                                    </div>
                                </div>
                            </GridItem>
                        ))}
                    </Grid>
                    {!image?.length > 0 && <Text textAlign={'center'} width="100%" color={'gray.500'} fontSize="sm" fontWeight="700"><DataNotFound /></Text>}
                </Card>}
            </Card>

            <ImageView isOpen={imageview}
                onClose={handleViewClose}
                image={image}
                handleDeleteOpen={handleDeleteOpen}
                imageviewData={imageviewData}
                fetchData={fetchData}
                data={data}
                setImageData={setImageData}
            />
            <AddImage imageModal={imageModal} setImageModal={setImageModal} fetchData={fetchImage} />
            {/* Delete modal */}
            <Modal onClose={handleDeleteClose} isOpen={deleteOpen} isCentered>
                <ModalOverlay />
                <ModalContent>
                    <ModalHeader>Delete Images</ModalHeader>
                    <ModalCloseButton />
                    <ModalBody>
                        Are You Sure To Delete selected Images ?
                    </ModalBody>
                    <ModalFooter>
                        <Button colorScheme="red" size="sm" mr={2} onClick={handleDelete} disabled={isLoding ? true : false} >{isLoding ? <Spinner /> : 'Yes'}</Button>
                        <Button variant="outline" size="sm" onClick={handleDeleteClose}>No</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        </>
    )
}

export default ChangeImage

================
File: Client/src/views/admin/invoice/components/ImportModel.js
================
import { Button, Grid, GridItem, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text } from '@chakra-ui/react'
import Spinner from 'components/spinner/Spinner'
import { useFormik } from 'formik'
import { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import CommonFileUpload from 'components/commonFileUpload'

const ImportModal = (props) => {
    const { onClose, isOpen, text, customFields } = props
    const [isLoding, setIsLoding] = useState(false)
    const navigate = useNavigate();

    const initialValues = {
        invoices: ''
    }

    const formik = useFormik({
        initialValues: initialValues,
        onSubmit: (values, { resetForm }) => {
            AddData()
            resetForm();
        },
    });
    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik

    const AddData = async () => {
        try {
            setIsLoding(true)
            resetForm()

            if (values.invoices) {
                onClose();
                navigate('/invoicesImport', { state: { fileData: values.invoices, customFields: customFields } });
            }

        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };

    return (
        <Modal onClose={onClose} isOpen={isOpen} isCentered>
            <ModalOverlay />
            <ModalContent>
                <ModalHeader>Import Invoices</ModalHeader>
                <ModalCloseButton />
                <ModalBody>
                    <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                        <GridItem colSpan={{ base: 12 }}>
                            <CommonFileUpload count={values.invoices.length} onFileSelect={(file) => setFieldValue('invoices', file)} text={text} />
                            <Text mb='10px' color={'red'}> {errors.invoices && touched.invoices && <>Please Select {text}</>}</Text>
                        </GridItem>
                    </Grid>
                </ModalBody>
                <ModalFooter>
                    <Button size="sm" variant='brand' onClick={handleSubmit} disabled={isLoding ? true : false} >{isLoding ? <Spinner /> : 'Save'}</Button>
                    <Button sx={{
                        marginLeft: 2,
                        textTransform: "capitalize",
                    }} variant="outline"
                        colorScheme="red" size="sm" onClick={() => {
                            onClose()
                            formik.resetForm()
                        }}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    )
}

export default ImportModal

================
File: Client/src/views/admin/invoice/components/InvoiceAdvanceSearch.js
================
import React from 'react';
import { useFormik } from "formik";
import * as yup from "yup";
import { Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Grid, GridItem, Input, FormLabel, Select, Text, Button, } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import { setSearchValue, getSearchData, setGetTagValues } from '../../../../redux/slices/advanceSearchSlice';
import { useDispatch } from 'react-redux';



const InvoiceAdvanceSearch = (props) => {
    const { state, allData, advanceSearch, setAdvanceSearch, isLoding, setSearchedData, setDisplaySearchData, setSearchClear, setSearchbox } = props;

    const dispatch = useDispatch();
    const initialValues = {
        invoiceNumber: '',
        title: '',
        status: '',
        contactName: '',
        accountName: '',
        grandTotal: '',
    }
    const validationSchema = yup.object({
        invoiceNumber: yup.string(),
        title: yup.string(),
        status: yup.string(),
        contactName: yup.string(),
        accountName: yup.string(),
        grandTotal: yup.string(),
    });
    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: validationSchema,
        onSubmit: (values, { resetForm }) => {
            dispatch(setSearchValue(values))
            dispatch(getSearchData({ values: values, allData: allData, type: 'invoice' }))

            const getValue = [
                {
                    name: ["invoiceNumber"],
                    value: values.invoiceNumber
                },
                {
                    name: ["title"],
                    value: values.title
                },
                {
                    name: ["status"],
                    value: values.status
                },
                {
                    name: ["contactName"],
                    value: values.contactName
                },
                {
                    name: ["accountName"],
                    value: values.accountName
                },
                {
                    name: ["grandTotal"],
                    value: values.grandTotal
                },
            ]
            dispatch(setGetTagValues(getValue.filter(item => item.value)))
            setDisplaySearchData(true)
            setAdvanceSearch(false)
            resetForm();
            setSearchbox('');
        }
    })

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm, dirty } = formik;

    return (
        <>
            <Modal onClose={() => { setAdvanceSearch(false); resetForm() }} isOpen={advanceSearch} isCentered>
                <ModalOverlay />
                <ModalContent>
                    <ModalHeader>Advance Search</ModalHeader>
                    <ModalCloseButton onClick={() => { setAdvanceSearch(false); resetForm() }} />
                    <ModalBody>
                        <Grid templateColumns="repeat(12, 1fr)" mb={3} gap={2}>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Invoice Number
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.invoiceNumber}
                                    name="invoiceNumber"
                                    type='number'
                                    placeholder='Enter Invoice Number'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.invoiceNumber && touched.invoiceNumber && errors.invoiceNumber}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Title
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.title}
                                    name="title"
                                    placeholder='Enter Title'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.title && touched.title && errors.title}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Status
                                </FormLabel>
                                <Select
                                    value={values.status}
                                    name="status"
                                    onChange={handleChange}
                                    mb={errors.status && touched.status ? undefined : '10px'}
                                    fontWeight='500'
                                    placeholder={'Status'}
                                    borderColor={errors.status && touched.status ? "red.300" : null}
                                >
                                    <option value="Paid">Paid</option>
                                    <option value="Unpaid">Unpaid</option>
                                    <option value="Cancelled">Cancelled</option>
                                </Select>
                                <Text mb='10px' color={'red'}> {errors.status && touched.status && errors.status}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Contact Name
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.contactName}
                                    name="contactName"
                                    placeholder='Enter Contact Name'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.contactName && touched.contactName && errors.contactName}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Account Name
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.accountName}
                                    name="accountName"
                                    placeholder='Enter Account Name'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.accountName && touched.accountName && errors.accountName}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Grand Total
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.grandTotal}
                                    name="grandTotal"
                                    placeholder='Enter Grand Total'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.grandTotal && touched.grandTotal && errors.grandTotal}</Text>
                            </GridItem>
                        </Grid>
                    </ModalBody>
                    <ModalFooter>
                        <Button size="sm" variant="brand" mr={2} onClick={handleSubmit} disabled={isLoding || !dirty ? true : false} >{isLoding ? <Spinner /> : 'Search'}</Button>
                        <Button size="sm" variant="outline" colorScheme="red" onClick={() => resetForm()}>Clear</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        </>
    )
}

export default InvoiceAdvanceSearch

================
File: Client/src/views/admin/invoice/components/InvoiceImport.js
================
import React, { useState, useEffect } from 'react'
import { useLocation, useNavigate } from 'react-router-dom';
import Papa from 'papaparse';
import {
    Flex,
    useColorModeValue,
    Select,
    Button,
    Grid,
    GridItem,
    Text
} from "@chakra-ui/react";
import { useFormik } from "formik";
import { postApi } from 'services/api';
import { toast } from 'react-toastify';
import moment from 'moment';
import ExcelJS from 'exceljs';
import Card from 'components/card/Card';

function InvoiceImport() {

    const location = useLocation();
    const { fileData, customFields } = location.state || {};
    const [importedFileFields, setImportedFileFields] = useState([]);
    const [importedFileData, setImportedFileData] = useState([]);
    const [isLoding, setIsLoding] = useState(false);
    const navigate = useNavigate();
    const userId = JSON.parse(localStorage.getItem('user'))._id;
    const [filterContact, setFilterContact] = useState([]);

    const columns = [
        { Header: 'Fields In Crm', accessor: 'crmFields' },
        { Header: 'Fields In File', accessor: 'fileFields' },
    ];

    const initialFieldValues = Object.fromEntries(
        (customFields || []).map(field => [field?.name, ''])
    );
    const initialValues = {
        ...initialFieldValues
    };

    const fieldsInCrm = [
        ...customFields?.map((field) => ({ Header: field?.label, accessor: field?.name, type: field?.type, formikType: field?.validations?.find(obj => obj.hasOwnProperty('formikType')) }))
    ];

    const formik = useFormik({
        initialValues: initialValues,
        onSubmit: (values, { resetForm }) => {

            const invoiceData = importedFileData?.map((item, ind) => {
                const invoices = {
                    createdDate: new Date(),
                    deleted: item[values.deleted || "deleted"] || false,
                    createBy: JSON.parse(localStorage.getItem('user'))._id,
                    modifiedBy: JSON.parse(localStorage.getItem('user'))._id,
                };

                fieldsInCrm?.forEach(field => {
                    const selectedField = values[field?.accessor];
                    const fieldValue = item[selectedField] || '';

                    if (field?.type?.toLowerCase() === "date") {
                        invoices[field?.accessor] = moment(fieldValue).isValid() ? fieldValue : '';
                    } else if (field?.type?.toLowerCase() === "number" && ['positive', 'negative'].includes(field?.formikType?.toLowerCase())) {
                        invoices[field?.accessor] = parseFloat(fieldValue) || '';
                    } else if (field?.type?.toLowerCase() === "number") {
                        invoices[field?.accessor] = parseInt(fieldValue, 10) || '';
                    } else {
                        invoices[field?.accessor] = fieldValue;
                    }
                });

                return invoices;
            });

            AddData(invoiceData);
        }
    });

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik

    const AddData = async (invoices) => {
        try {
            setIsLoding(true);
            let response = await postApi('api/invoices/addMany', invoices)
            if (response.status === 200) {
                toast.success(`Invoices imported successfully`)
                resetForm();
                navigate('/invoices');
            }
        } catch (e) {
            console.error(e);
            toast.error(`Invoices import failed`)
            resetForm();
            navigate('/invoices');
        }
        finally {
            setIsLoding(false)
        }
    };

    const parseFileData = async (file) => {
        const reader = new FileReader();
        const extension = file.name.split('.').pop().toLowerCase();

        reader.onload = async ({ target }) => {

            if (extension === 'csv') {
                const csv = Papa.parse(target.result, {
                    header: true,
                });
                const parsedData = csv?.data;

                if (parsedData && parsedData.length > 0) {
                    setImportedFileData(parsedData);
                    const fileHeadingFields = Object.keys(parsedData[0]);
                    setImportedFileFields(fileHeadingFields);
                } else {
                    toast.error("Empty or invalid CSV file");
                    navigate("/invoices");
                }

            } else if (extension === 'xlsx') {
                const data = new Uint8Array(target.result);
                const workbook = new ExcelJS.Workbook();

                await workbook.xlsx.load(data);

                const worksheet = workbook.getWorksheet(1);
                const jsonData = [];

                // Iterate over rows and cells
                worksheet.eachRow({ includeEmpty: true }, (row, rowNumber) => {
                    const rowData = {};
                    row.eachCell({ includeEmpty: true }, (cell, colNumber) => {
                        rowData[worksheet.getCell(1, colNumber).value] = cell.value;
                    });
                    jsonData.push(rowData);
                });
                jsonData?.splice(0, 1);
                setImportedFileData(jsonData);

                if (jsonData && jsonData.length > 0) {
                    const fileHeadingFields = Object.keys(jsonData[0]);
                    setImportedFileFields(fileHeadingFields);
                } else {
                    toast.error("Empty or invalid XLSX file");
                    navigate("/invoices");
                }
            }
        };

        if (extension === 'csv') {
            reader.readAsText(file);
        } else if (extension === 'xlsx') {
            const blob = new Blob([file]);
            reader.readAsArrayBuffer(blob);
        }
    };

    useEffect(() => {
        if (fileData && fileData.length > 0) {
            const firstFile = fileData[0];
            parseFileData(firstFile);
        }
    }, [fileData]);


    useEffect(() => {
        const filterContactData = importedFileFields?.filter(field => {
            const result = fieldsInCrm?.find(data => field === data?.accessor || field === data?.Header);
            if (result) {
                setFieldValue(result?.accessor, field);
                return true;
            }
            return false;
        });
        setFilterContact(filterContactData);
    }, [importedFileFields]);

    return (
        <>
            <Card overflowY={"auto"} className="importTable">
                <Text color={"secondaryGray.900"}
                    fontSize="22px"
                    fontWeight="700"
                    mb='20px'
                >Import Quotes</Text>
                <Grid templateColumns="repeat(12, 1fr)" mb={3} pb={2} gap={1} borderBottom={'1px solid #e2e8f0'}>
                    {
                        columns.map((column, index) => (
                            <GridItem key={index} colSpan={{ base: 6 }} fontWeight={'600'} fontSize={{ sm: "14px", lg: "14px" }} color="secondaryGray.900" style={{ textTransform: "uppercase" }}>
                                {column.Header}
                            </GridItem>
                        ))
                    }
                </Grid>
                <Grid templateColumns="repeat(12, 1fr)" mb={3} gap={1} overflowY={'auto'}>
                    {
                        fieldsInCrm?.map((item, index) => (
                            <>
                                <GridItem colSpan={{ base: 6 }} key={item.id} mt='10px'>
                                    {item.Header}
                                </GridItem>
                                <GridItem colSpan={{ base: 4 }}>
                                    <Select
                                        variant="flushed"
                                        fontWeight='500'
                                        isSearchable
                                        value={values[item.accessor]}
                                        name={item.accessor}
                                        onChange={handleChange}
                                    >
                                        <option value=''> {filterContact ? filterContact.find((data) => (item.Header === data || item.accessor === data) && data) ? filterContact.find((data) => (item.Header === data || item.accessor === data) && data) : 'Select Field In File' : 'Select Field In File'}</option>
                                        {
                                            importedFileFields?.map(field => (
                                                <option value={field} key={field}>{field}</option>
                                            ))
                                        }
                                    </Select>
                                </GridItem>
                            </>
                        ))
                    }
                </Grid>

                <Flex Flex justifyContent={'end'} mt='5' >
                    <Button size="sm" onClick={() => handleSubmit()} variant="brand">Save</Button>
                </Flex>
            </Card>
        </>
    )
}

export default InvoiceImport

================
File: Client/src/views/admin/invoice/AddEdit.js
================
import { AddIcon, CloseIcon } from '@chakra-ui/icons';
import { Box, Button, Checkbox, Drawer, DrawerBody, DrawerContent, DrawerFooter, DrawerHeader, DrawerOverlay, Flex, FormControl, FormLabel, Grid, GridItem, Heading, IconButton, Image, Input, Select, Table, Tbody, Td, Text, Textarea, Th, Thead, Tr } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import dayjs from 'dayjs';
import { ErrorMessage, Field, FieldArray, useFormik, Form } from 'formik';
import { useState, useEffect, useCallback } from 'react';
import { LiaMousePointerSolid } from 'react-icons/lia';
import { postApi, getApi, putApi } from 'services/api';
import { generateValidationSchema } from 'utils';
import CustomForm from 'utils/customForm';
import * as yup from 'yup'
import { invoicesSchema } from '../../../schema/invoicesSchema';
import UserModel from 'components/commonTableModel/UserModel';
import OpprtunityModel from 'components/commonTableModel/OpprtunityModel';
import { toast } from 'react-toastify';
import { useDispatch, useSelector } from 'react-redux';
import { fetchOpportunityData } from '../../../redux/slices/opportunitySlice';
import AccountModel from 'components/commonTableModel/AccountModel';
import { fetchAccountData } from '../../../redux/slices/accountSlice';
import ContactModel from 'components/commonTableModel/ContactModel';
import { HasAccess } from '../../../redux/accessUtils';
import { fetchInvoicesData } from '../../../redux/slices/invoicesSlice';
import moment from 'moment';

const AddEdit = (props) => {
    const { isOpen, size, onClose, type, setAction, selectedId, contactId, action } = props;
    const [isLoding, setIsLoding] = useState(false)
    const [userModel, setUserModel] = useState(false)
    const [opprtunityModel, setOpprtunityModel] = useState(false)
    const [userData, setUserData] = useState([]);
    const [accountModel, setAccountModel] = useState(false)
    const [contactModel, setContactModel] = useState(false)
    const [invoiceDetails, setInvoiceDetails] = useState({});
    const [items, setItems] = useState([{ id: 1, productName: "", qty: 0, rate: 0, amount: 0 }]);
    const [total, setTotal] = useState(0);
    const [discounts, setDiscount] = useState(0);
    const [netAmount, setNetAmount] = useState(0);
    const dispatch = useDispatch();
    const user = JSON.parse(localStorage.getItem("user"))
    const [accountAccess, contactAccess] = HasAccess(['Account', 'Contacts'])
    const [isOpenPreview, setIsOpenPreview] = useState(false)

    const opportunityList = useSelector((state) => state?.opportunityData?.data?.data)
    const accountList = useSelector((state) => state?.accountData?.data?.data)
    const contactList = useSelector((state) => state?.contactData?.data)
    const largeLogo = useSelector((state) => state?.images?.images?.filter(item => item?.isActive === true));

    const initialValues = {
        title: type === "edit" ? invoiceDetails?.title : "",
        quoteNumber: type === "edit" ? invoiceDetails?.quoteNumber : null,
        quoteDate: type === "edit" ? invoiceDetails?.quoteDate : "",
        dueDate: type === "edit" ? invoiceDetails?.dueDate : "",
        invoiceDate: type === "edit" ? invoiceDetails?.invoiceDate : "",
        status: type === "edit" ? invoiceDetails?.status : "Paid",
        assignedTo: type === "edit" ? invoiceDetails?.assignedTo : null,
        description: type === "edit" ? invoiceDetails?.description : "",
        account: type === "edit" ? invoiceDetails?.account : null,
        contact: type === "edit" ? invoiceDetails?.contact : contactId ? contactId : null,
        billingStreet: type === "edit" ? invoiceDetails?.billingStreet : "",
        shippingStreet: type === "edit" ? invoiceDetails?.shippingStreet : "",
        billingCity: type === "edit" ? invoiceDetails?.billingCity : "",
        shippingCity: type === "edit" ? invoiceDetails?.shippingCity : "",
        billingState: type === "edit" ? invoiceDetails?.billingState : "",
        shippingState: type === "edit" ? invoiceDetails?.shippingState : "",
        billingPostalCode: type === "edit" ? invoiceDetails?.billingPostalCode : "",
        shippingPostalCode: type === "edit" ? invoiceDetails?.shippingPostalCode : "",
        billingCountry: type === "edit" ? invoiceDetails?.billingCountry : "",
        shippingCountry: type === "edit" ? invoiceDetails?.shippingCountry : "",
        isCheck: type === "edit" ? invoiceDetails?.isCheck : false,
        currency: type === "edit" ? invoiceDetails?.currency : "$",
        total: type === "edit" ? invoiceDetails?.total : "0",
        discount: type === "edit" ? invoiceDetails?.discount : "",
        subtotal: type === "edit" ? invoiceDetails?.subtotal : "0",
        shipping: type === "edit" ? invoiceDetails?.shipping : "0",
        shippingTax: type === "edit" ? invoiceDetails?.shippingTax : "",
        ptax: type === "edit" ? invoiceDetails?.ptax : "0",
        tax: type === "edit" ? invoiceDetails?.tax : "0",
        grandTotal: type === "edit" ? invoiceDetails?.grandTotal : "0",
        discountType: type === "edit" ? invoiceDetails?.discountType : "none",
        items: type === "edit" ? invoiceDetails?.items : [],
        createBy: JSON.parse(localStorage.getItem('user'))._id,
        modifiedBy: JSON.parse(localStorage.getItem('user'))._id
    };


    const addData = async (values) => {
        try {
            setIsLoding(true)
            let response = await postApi('api/invoices/add', values)
            if (response.status === 200) {
                onClose();
                toast.success(`Invoice Save successfully`)
                formik.resetForm();
                setAction((pre) => !pre)
            }
        } catch (e) {
            console.log(e);
            toast.error(`server error`)
        }
        finally {
            setIsLoding(false)
        }
    };
    const editData = async (values) => {
        try {
            setIsLoding(true)
            let response = await putApi(`api/invoices/edit/${selectedId}`, values)
            if (response.status === 200) {
                onClose();
                toast.success(`Invoice Update successfully`)
                formik.resetForm();
                setAction((pre) => !pre)
            }
        } catch (e) {
            console.log(e);
            toast.error(`server error`)
        }
        finally {
            setIsLoding(false)
        }
    };

    const handleCancel = () => {
        formik.resetForm();
        onClose()
        setIsOpenPreview(false)
    }

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: invoicesSchema,
        enableReinitialize: true,
        onSubmit: (values, { resetForm }) => {
            if (type === "add") {
                addData(values)
            } else {
                const payload = { ...values, modifiedDate: new Date() }
                editData(payload)
            }
        },
    });
    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, } = formik

    const handleCheck = (e) => {
        setFieldValue("isCheck", e.target.checked)
        if (e.target.checked) {
            setFieldValue("shippingStreet", values?.billingStreet)
            setFieldValue("shippingCity", values?.billingCity)
            setFieldValue("shippingState", values?.billingState)
            setFieldValue("shippingPostalCode", values?.billingPostalCode)
            setFieldValue("shippingCountry", values?.billingCountry)
        } else {
            setFieldValue("shippingStreet", "")
            setFieldValue("shippingCity", "")
            setFieldValue("shippingState", "")
            setFieldValue("shippingPostalCode", "")
            setFieldValue("shippingCountry", "")
        }
    }

    const fetchData = async () => {
        setIsLoding(true)
        let result = await getApi('api/user/');
        setUserData(result?.data?.user);
        setIsLoding(false)
    }

    const fetchInvoiceDetails = async () => {
        if (type === "edit") {
            try {
                setIsLoding(true)
                let result = await getApi('api/invoices/view/', selectedId)
                if (result?.status === 200) {
                    setInvoiceDetails(result?.data?.result)
                }

            }
            catch (e) {
                console.log(e);
            }
            finally {
                setIsLoding(false)
            }
        }
    }
    const calculateAmounts = (items) => {
        const totalAmount = items.reduce((sum, item) => sum + item.amount, 0);
        const totalDiscount = items.reduce((sum, item) => sum + item.totalDiscount, 0);
        const netAmount = Number(totalAmount) - Number(totalDiscount);
        return { totalAmount, netAmount, discount: totalDiscount };
    };

    const handleAddItem = () => {
        setFieldValue("items", [
            ...values.items,
            { id: values.items.length + 1, productName: "", qty: 0, rate: 0, discount: 0, discountType: "none", totalDiscount: 0, amount: 0 }
        ]);
    };

    const handleRemoveItem = (index) => {
        const newItems = values.items.filter((_, idx) => idx !== index);
        setFieldValue("items", newItems);
        const { totalAmount, netAmount, discount } = calculateAmounts(newItems);
        setFieldValue("total", totalAmount);
        setFieldValue("grandTotal", netAmount);
        setFieldValue("discount", discount);
    };

    const handleChangeCalculation = (index, field, value) => {
        const newItems = values.items.map((item, idx) => {
            if (idx === index) {
                const updatedItem = { ...item, [field]: value };
                if (['qty', 'rate', 'discount', 'discountType'].includes(field)) {
                    const discountValue = updatedItem.discountType === 'percent'
                        ? (updatedItem.rate * updatedItem.qty * updatedItem.discount / 100)
                        : updatedItem.discountType === 'none'
                            ? 0
                            : updatedItem.discount;
                    updatedItem.amount = updatedItem.rate * updatedItem.qty - discountValue;
                    updatedItem.totalDiscount = discountValue;
                }
                return updatedItem;
            }
            return item;
        });

        setFieldValue("items", newItems);
        const { totalAmount, netAmount, discount } = calculateAmounts(newItems);
        setFieldValue("discount", discount);
        setFieldValue("total", totalAmount);
        setFieldValue("subtotal", totalAmount);
        setFieldValue("grandTotal", netAmount);
    };

    const calculateValues = useCallback(() => {
        const subtotal = values.subtotal;
        const shipping = Number(values.shipping);
        const ptax = Number(values.ptax);
        const shippingTax = Number(subtotal) + Number(shipping);
        const tax = shippingTax * ptax / 100;
        const grandTotal = Number(shippingTax) + Number(tax);

        setFieldValue('shippingTax', shippingTax?.toFixed(2));
        setFieldValue('tax', tax?.toFixed(2));
        setFieldValue('grandTotal', grandTotal?.toFixed(2));
    }, [values.subtotal, values.shipping, values.ptax]);

    useEffect(() => {
        calculateValues();
    }, [calculateValues]);

    useEffect(() => {
        if (type === "edit") fetchInvoiceDetails();
        if (user.role === 'superAdmin') fetchData();
    }, [type, selectedId, action])

    useEffect(() => {
        if (opportunityList?.length === 0 || opportunityList === undefined) { dispatch(fetchOpportunityData()) }
        if (accountList?.length === 0 || accountList === undefined) { dispatch(fetchAccountData()) }
    }, [])

    return (
        <div>
            {userModel && <UserModel onClose={() => setUserModel(false)} isOpen={userModel} fieldName={"assignedTo"} setFieldValue={setFieldValue} data={userData} isLoding={isLoding} setIsLoding={setIsLoding} />}
            {/* {opprtunityModel && <OpprtunityModel onClose={() => setOpprtunityModel(false)} isOpen={opprtunityModel} fieldName={"oppotunity"} setFieldValue={setFieldValue} data={opportunityList} isLoding={isLoding} setIsLoding={setIsLoding} type="quotes" billingState="billingState" billingCity="billingCity" billingPostalCode="billingPostalCode" billingCountry="billingCountry" billingStreet="billingStreet" />} */}
            {accountModel && <AccountModel onClose={() => setAccountModel(false)} isOpen={accountModel} fieldName={"account"} setFieldValue={setFieldValue} data={accountList} />}
            {contactModel && <ContactModel isOpen={contactModel} data={contactList} onClose={setContactModel} values={values} fieldName='contact' setFieldValue={setFieldValue} />}

            <Drawer isOpen={isOpen} size={size}>
                <DrawerOverlay />
                <DrawerContent>
                    <DrawerHeader alignItems={"center"} justifyContent='space-between' display='flex'  >
                        {type === "add" ? !isOpenPreview ? "Add" : "Preview" : !isOpenPreview ? "Edit" : "Preview"} Invoice
                        <IconButton onClick={() => handleCancel()} icon={<CloseIcon />} />
                    </DrawerHeader>
                    {
                        !isOpenPreview ?
                            <DrawerBody>
                                <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                                    <GridItem colSpan={{ base: 12 }}>
                                        <Heading as="h1" size="md" mt='10px'>
                                            Overview
                                        </Heading>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12, md: 6 }}>
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                            Title<Text color={"red"}>*</Text>
                                        </FormLabel>
                                        <Input
                                            fontSize='sm'
                                            value={values.title}
                                            name="title"
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            placeholder='Title'
                                            fontWeight='500'
                                            borderColor={errors.title && touched.title ? "red.300" : null}
                                        />
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.title && touched.title && errors.title}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12, md: 6 }}>
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                            Quote Number
                                        </FormLabel>
                                        <Input
                                            fontSize='sm'
                                            value={values.quoteNumber}
                                            name="quoteNumber"
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            placeholder='Quote Number'
                                            fontWeight='500'
                                            borderColor={errors.quoteNumber && touched.quoteNumber ? "red.300" : null}
                                        />
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.quoteNumber && touched.quoteNumber && errors.quoteNumber}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12, md: 6 }}>
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                            Quote Date
                                        </FormLabel>
                                        <Input
                                            fontSize='sm'
                                            value={values.quoteDate && dayjs(values.quoteDate).format("YYYY-MM-DD")}
                                            name="quoteDate"
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            type='date'
                                            fontWeight='500'
                                            borderColor={errors.quoteDate && touched.quoteDate ? "red.300" : null}
                                        />
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.quoteDate && touched.quoteDate && errors.quoteDate}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12, md: 6 }}>
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                            Due Date
                                        </FormLabel>
                                        <Input
                                            fontSize='sm'
                                            value={values.dueDate && dayjs(values.dueDate).format("YYYY-MM-DD")}
                                            name="dueDate"
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            type='date'
                                            fontWeight='500'
                                            borderColor={errors.dueDate && touched.dueDate ? "red.300" : null}
                                        />
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.dueDate && touched.dueDate && errors.dueDate}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12, md: 6 }}>
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                            Invoice Date
                                        </FormLabel>
                                        <Input
                                            fontSize='sm'
                                            value={values.invoiceDate && dayjs(values.invoiceDate).format("YYYY-MM-DD")}
                                            name="invoiceDate"
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            type='date'
                                            fontWeight='500'
                                            borderColor={errors.invoiceDate && touched.invoiceDate ? "red.300" : null}
                                        />
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.invoiceDate && touched.invoiceDate && errors.invoiceDate}</Text>
                                    </GridItem>
                                    {
                                        user.role === 'superAdmin' &&
                                        <GridItem colSpan={{ base: 12, md: 6 }} >
                                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                Assigned To
                                            </FormLabel>
                                            <Flex justifyContent={'space-between'}>
                                                <Select
                                                    value={values.assignedTo}
                                                    name="assignedTo"
                                                    onBlur={handleBlur}
                                                    onChange={handleChange}
                                                    mb={errors.assignedTo && touched.assignedTo ? undefined : '10px'}
                                                    fontWeight='500'
                                                    placeholder={'Assigned To'}
                                                    borderColor={errors.assignedTo && touched.assignedTo ? "red.300" : null}
                                                >
                                                    {userData?.map((item) => {
                                                        return <option value={item._id} key={item._id}>{`${item?.firstName} ${item?.lastName}`}</option>
                                                    })}
                                                </Select>
                                                <IconButton onClick={() => setUserModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />
                                            </Flex>
                                        </GridItem>
                                    }
                                    <GridItem colSpan={{ base: 12, md: 6 }}>
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                            Status
                                        </FormLabel>
                                        <Select
                                            value={values.status}
                                            name="status"
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            mb={errors.status && touched.status ? undefined : '10px'}
                                            fontWeight='500'
                                            placeholder={'Status'}
                                            borderColor={errors.status && touched.status ? "red.300" : null}
                                        >
                                            <option value="Paid">Paid</option>
                                            <option value="Unpaid">Unpaid</option>
                                            <option value="Cancelled">Cancelled</option>
                                        </Select>
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.status && touched.status && errors.status}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12 }}>
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                            Description
                                        </FormLabel>
                                        <Textarea
                                            fontSize='sm'
                                            value={values.description}
                                            name="description"
                                            resize={"none"}
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            placeholder='Description'
                                            fontWeight='500'
                                            borderColor={errors.description && touched.description ? "red.300" : null}
                                        />
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.description && touched.description && errors.description}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12 }}>
                                        <Heading as="h1" size="md" mt='10px'>
                                            Address Information
                                        </Heading>
                                    </GridItem>
                                    {
                                        (user.role === 'superAdmin' || accountAccess?.view) &&
                                        <GridItem colSpan={{ base: 12, md: 6 }}>
                                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                Account
                                            </FormLabel>
                                            <Flex justifyContent={'space-between'}>
                                                <Select
                                                    value={values.account}
                                                    name="account"
                                                    onBlur={handleBlur}
                                                    onChange={handleChange}
                                                    mb={errors.account && touched.account ? undefined : '10px'}
                                                    fontWeight='500'
                                                    placeholder={'Account'}
                                                    borderColor={errors.account && touched.account ? "red.300" : null}
                                                >
                                                    {accountList?.length > 0 && accountList?.map((item) => {
                                                        return <option value={item._id} key={item._id}>{`${item?.name}`}</option>
                                                    })}
                                                </Select>
                                                <IconButton onClick={() => setAccountModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />
                                            </Flex>
                                            <Text mb='10px' fontSize='sm' color={'red'}> {errors.account && touched.account && errors.account}</Text>
                                        </GridItem>
                                    }
                                    {
                                        (user.role === 'superAdmin' || contactAccess?.view) &&
                                        <GridItem colSpan={{ base: 12, md: 6 }}>
                                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                Contact
                                            </FormLabel>
                                            <Flex justifyContent={'space-between'}>
                                                <Select
                                                    value={values.contact}
                                                    name="contact"
                                                    onBlur={handleBlur}
                                                    onChange={handleChange}
                                                    mb={errors.contact && touched.contact ? undefined : '10px'}
                                                    fontWeight='500'
                                                    placeholder={'Contact'}
                                                    borderColor={errors.contact && touched.contact ? "red.300" : null}
                                                >
                                                    {contactList?.length > 0 && contactList?.map((item) => {
                                                        return <option value={item._id} key={item._id}>{`${item.firstName} ${item.lastName}`}</option>
                                                    })}
                                                </Select>
                                                <IconButton onClick={() => setContactModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />
                                            </Flex>
                                            <Text mb='10px' fontSize='sm' color={'red'}> {errors.contact && touched.contact && errors.contact}</Text>
                                        </GridItem>
                                    }

                                    <GridItem colSpan={{ base: 12, md: 6 }}>
                                        <Heading as="h1" size="md" mt='10px'>
                                            Billing Address
                                        </Heading>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12, md: 6 }}>
                                        <Heading as="h1" size="md" mt='10px'>
                                            Shipping Address
                                        </Heading>
                                    </GridItem>

                                    <GridItem colSpan={{ base: 12, md: 6 }}>
                                        <Checkbox isChecked={values?.isCheck} onChange={(e) => handleCheck(e)} visibility={"hidden"}>
                                            Copy address from left
                                        </Checkbox>
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px' mt={3}>
                                            Billing Street
                                        </FormLabel>
                                        <Input
                                            fontSize='sm'
                                            value={values.billingStreet}
                                            name="billingStreet"
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            placeholder='Billing Street'
                                            fontWeight='500'
                                            borderColor={errors.billingStreet && touched.billingStreet ? "red.300" : null}
                                        />
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.billingStreet && touched.billingStreet && errors.billingStreet}</Text>
                                    </GridItem>

                                    <GridItem colSpan={{ base: 12, md: 6 }}>
                                        <Checkbox isChecked={values?.isCheck} onChange={(e) => handleCheck(e)}>
                                            Copy address from left
                                        </Checkbox>
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px' mt={3}>
                                            Shipping Street
                                        </FormLabel>
                                        <Input
                                            fontSize='sm'
                                            value={values.shippingStreet}
                                            name="shippingStreet"
                                            disabled={values?.isCheck}
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            placeholder='Shipping Street'
                                            fontWeight='500'
                                            borderColor={errors.shippingStreet && touched.shippingStreet ? "red.300" : null}
                                        />
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.shippingStreet && touched.shippingStreet && errors.shippingStreet}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12, md: 6 }}>
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                            Billing City
                                        </FormLabel>
                                        <Input
                                            fontSize='sm'
                                            value={values.billingCity}
                                            name="billingCity"
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            placeholder='Billing City'
                                            fontWeight='500'
                                            borderColor={errors.billingCity && touched.billingCity ? "red.300" : null}
                                        />
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.billingCity && touched.billingCity && errors.billingCity}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12, md: 6 }}>
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                            Shipping City
                                        </FormLabel>
                                        <Input
                                            fontSize='sm'
                                            value={values.shippingCity}
                                            name="shippingCity"
                                            disabled={values?.isCheck}
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            placeholder='Shipping City'
                                            fontWeight='500'
                                            borderColor={errors.shippingCity && touched.shippingCity ? "red.300" : null}
                                        />
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.shippingCity && touched.shippingCity && errors.shippingCity}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12, md: 6 }}>
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                            Billing State
                                        </FormLabel>
                                        <Input
                                            fontSize='sm'
                                            value={values.billingState}
                                            name="billingState"
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            placeholder='Billing State'
                                            fontWeight='500'
                                            borderColor={errors.billingState && touched.billingState ? "red.300" : null}
                                        />
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.billingState && touched.billingState && errors.billingState}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12, md: 6 }}>
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                            Shipping State
                                        </FormLabel>
                                        <Input
                                            fontSize='sm'
                                            value={values.shippingState}
                                            disabled={values?.isCheck}
                                            name="shippingState"
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            placeholder='Shipping State'
                                            fontWeight='500'
                                            borderColor={errors.shippingState && touched.shippingState ? "red.300" : null}
                                        />
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.shippingState && touched.shippingState && errors.shippingState}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12, md: 6 }}>
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                            Billing Postal Code
                                        </FormLabel>
                                        <Input
                                            fontSize='sm'
                                            value={values.billingPostalCode}
                                            name="billingPostalCode"
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            type='number'
                                            placeholder='Billing Postal Code'
                                            fontWeight='500'
                                            borderColor={errors.billingPostalCode && touched.billingPostalCode ? "red.300" : null}
                                        />
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.billingPostalCode && touched.billingPostalCode && errors.billingPostalCode}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12, md: 6 }}>
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                            Shipping Postal Code
                                        </FormLabel>
                                        <Input
                                            fontSize='sm'
                                            value={values.shippingPostalCode}
                                            disabled={values?.isCheck}
                                            name="shippingPostalCode"
                                            type='number'
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            placeholder='Shipping Postal Code'
                                            fontWeight='500'
                                            borderColor={errors.shippingPostalCode && touched.shippingPostalCode ? "red.300" : null}
                                        />
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.shippingPostalCode && touched.shippingPostalCode && errors.shippingPostalCode}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12, md: 6 }}>
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                            Billing Country
                                        </FormLabel>
                                        <Input
                                            fontSize='sm'
                                            value={values.billingCountry}
                                            name="billingCountry"
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            placeholder='Billing Country'
                                            fontWeight='500'
                                            borderColor={errors.billingCountry && touched.billingCountry ? "red.300" : null}
                                        />
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.billingCountry && touched.billingCountry && errors.billingCountry}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12, md: 6 }}>
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                            Shipping Country
                                        </FormLabel>
                                        <Input
                                            fontSize='sm'
                                            value={values.shippingCountry}
                                            name="shippingCountry"
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            disabled={values?.isCheck}
                                            placeholder='Shipping Country'
                                            fontWeight='500'
                                            borderColor={errors.shippingCountry && touched.shippingCountry ? "red.300" : null}
                                        />
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.shippingCountry && touched.shippingCountry && errors.shippingCountry}</Text>
                                    </GridItem>

                                    <GridItem colSpan={{ base: 12 }}>
                                        <Heading as="h1" size="md" mt='10px'>
                                            Line Items
                                        </Heading>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12 }}>
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                            Currency
                                        </FormLabel>
                                        <Select
                                            value={values.currency}
                                            name="currency"
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            mb={errors.currency && touched.currency ? undefined : '10px'}
                                            fontWeight='500'
                                            placeholder={'Select Currency'}
                                            borderColor={errors.currency && touched.currency ? "red.300" : null}
                                        >
                                            <option value="$" selected>USD</option>
                                        </Select>
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.currency && touched.currency && errors.currency}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12 }}>
                                        <Box>
                                            <Table variant="simple" size="sm" mt={5} backgroundColor="#f9f9f9">
                                                <Thead>
                                                    <Tr>
                                                        <Th></Th>
                                                        <Th>#</Th>
                                                        <Th>Item</Th>
                                                        <Th>Qty</Th>
                                                        <Th>Rate</Th>
                                                        <Th>Discount</Th>
                                                        <Th>Amount</Th>
                                                    </Tr>
                                                </Thead>
                                                <Tbody>
                                                    {values?.items?.length > 0 && values?.items?.map((item, index) => (
                                                        <Tr key={item.id}>
                                                            <Td className="text-center">
                                                                <IconButton
                                                                    icon={<CloseIcon />}
                                                                    onClick={() => handleRemoveItem(index)}
                                                                    colorScheme="red"
                                                                    variant="outline"
                                                                    size="sm"
                                                                    style={{ fontSize: "10px" }}
                                                                />
                                                            </Td>
                                                            <Td>{index + 1}</Td>
                                                            <Td>
                                                                <FormControl>
                                                                    <Input
                                                                        type="text"
                                                                        value={item?.productName}
                                                                        onChange={(e) => handleChangeCalculation(index, 'productName', e.target.value)}
                                                                        size="sm"
                                                                    />
                                                                </FormControl>
                                                            </Td>
                                                            <Td>
                                                                <FormControl>
                                                                    <Input
                                                                        type="number"
                                                                        value={item?.qty}
                                                                        onChange={(e) => handleChangeCalculation(index, 'qty', Number(e.target.value))}
                                                                        size="sm"
                                                                    />
                                                                </FormControl>
                                                            </Td>
                                                            <Td>
                                                                <FormControl>
                                                                    <Input
                                                                        type="number"
                                                                        value={item?.rate}
                                                                        onChange={(e) => handleChangeCalculation(index, 'rate', Number(e.target.value))}
                                                                        size="sm"
                                                                    />
                                                                </FormControl>
                                                            </Td>
                                                            <Td style={{ display: "flex" }}>
                                                                <FormControl>
                                                                    <Input
                                                                        type="number"
                                                                        value={item?.discount}
                                                                        onChange={(e) => handleChangeCalculation(index, 'discount', Number(e.target.value))}
                                                                        size="sm"
                                                                        disabled={item?.discountType === "none"}
                                                                    />
                                                                    <Select
                                                                        value={item?.discountType}
                                                                        onChange={(e) => { handleChangeCalculation(index, 'discountType', e.target.value); }}
                                                                        size="sm"
                                                                    >
                                                                        <option value="none">none</option>
                                                                        <option value="percent">%</option>
                                                                        <option value="flatAmount">{values?.currency}</option>
                                                                    </Select>
                                                                </FormControl>
                                                            </Td>
                                                            <Td>
                                                                <FormControl>
                                                                    <Input
                                                                        type="number"
                                                                        value={item?.amount}
                                                                        readOnly
                                                                        size="sm"
                                                                    />
                                                                </FormControl>
                                                            </Td>
                                                        </Tr>
                                                    ))}
                                                    <Tr>
                                                        <Td colSpan={4} display="flex" justifyContent={"end"}>
                                                            <IconButton
                                                                icon={<AddIcon />}
                                                                onClick={handleAddItem}
                                                                colorScheme="green"
                                                                variant="outline"
                                                                size="sm"
                                                                style={{ fontSize: "10px" }}
                                                            />
                                                        </Td>
                                                        <Td></Td>
                                                        <Td></Td>
                                                        <Td></Td>
                                                    </Tr>
                                                </Tbody>
                                            </Table>

                                        </Box>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12 }}>
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                            Total
                                        </FormLabel>
                                        <Input
                                            fontSize='sm'
                                            value={values.total}
                                            name="total"
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            placeholder='Total'
                                            fontWeight='500'
                                            type='number'
                                            borderColor={errors.total && touched.total ? "red.300" : null}
                                        />
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.total && touched.total && errors.total}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12 }}>
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                            Total Discount
                                        </FormLabel>
                                        <Input
                                            fontSize='sm'
                                            value={values.discount}
                                            name="discount"
                                            onBlur={handleBlur}
                                            type='number'
                                            onChange={handleChange}
                                            fontWeight='500'
                                            borderColor={errors.discount && touched.discount ? "red.300" : null}
                                        />
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.discount && touched.discount && errors.discount}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12 }}>
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                            Subtotal
                                        </FormLabel>
                                        <Input
                                            fontSize='sm'
                                            value={values.subtotal}
                                            name="subtotal"
                                            type='number'
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            placeholder='Subtotal'
                                            fontWeight='500'
                                            borderColor={errors.subtotal && touched.subtotal ? "red.300" : null}
                                        />
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.subtotal && touched.subtotal && errors.subtotal}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12 }}>
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                            Shipping
                                        </FormLabel>
                                        <Input
                                            fontSize='sm'
                                            value={values.shipping}
                                            name="shipping"
                                            type='number'
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            placeholder='Shipping'
                                            fontWeight='500'
                                            borderColor={errors.shipping && touched.shipping ? "red.300" : null}
                                        />
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.shipping && touched.shipping && errors.shipping}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12, md: 10 }}>
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                            Shipping Tax
                                        </FormLabel>
                                        <Input
                                            fontSize='sm'
                                            value={values.shippingTax}
                                            name="shippingTax"
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            placeholder='Shipping Tax'
                                            type='number'
                                            fontWeight='500'
                                            borderColor={errors.shippingTax && touched.shippingTax ? "red.300" : null}
                                        />
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.shippingTax && touched.shippingTax && errors.shippingTax}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12, md: 2 }}>
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px' visibility={"hidden"}>
                                            -
                                        </FormLabel>
                                        <Select
                                            value={values.ptax}
                                            name="ptax"
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            mb={errors.ptax && touched.ptax ? undefined : '10px'}
                                            fontWeight='500'
                                            borderColor={errors.ptax && touched.ptax ? "red.300" : null}
                                        >
                                            <option value="0">0%</option>
                                            <option value="10">10%</option>
                                            <option value="18">18%</option>
                                        </Select>
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.ptax && touched.ptax && errors.ptax}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12 }}>
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px' >
                                            Tax
                                        </FormLabel>
                                        <Input
                                            fontSize='sm'
                                            value={values.tax}
                                            name="tax"
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            fontWeight='500'
                                            type="number"
                                            placeholder='Tax'
                                            borderColor={errors.tax && touched.tax ? "red.300" : null}
                                        />
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.tax && touched.tax && errors.tax}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12 }}>
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px' >
                                            Grand Total
                                        </FormLabel>
                                        <Input
                                            fontSize='sm'
                                            value={values.grandTotal}
                                            name="grandTotal"
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            fontWeight='500'
                                            type="number"
                                            placeholder='Grand Total'
                                            borderColor={errors.grandTotal && touched.grandTotal ? "red.300" : null}
                                        />
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.grandTotal && touched.grandTotal && errors.grandTotal}</Text>
                                    </GridItem>
                                </Grid>
                            </DrawerBody>
                            :
                            <DrawerBody>
                                <div className="invoice-container" >
                                    <div className="invoice-header">
                                        <div className="">
                                            <Image
                                                style={{ width: "100%", height: '52px' }}
                                                src={largeLogo[0]?.logoLgImg}
                                                alt="Logo"
                                                cursor="pointer"
                                                userSelect="none"
                                                my={2}
                                            />
                                        </div>
                                        <div className="invoice-details">
                                            <table>
                                                <tr>
                                                    <th style={{ textAlign: "start" }}>Invoice No.</th>
                                                    <td>:</td>
                                                    <td style={{ textAlign: "start" }}>{type === "edit" ? invoiceDetails?.invoiceNumber : ""}</td>
                                                </tr>
                                                <tr>
                                                    <th style={{ textAlign: "start" }}>Invoice Date</th>
                                                    <td>:</td>
                                                    <td style={{ textAlign: "start" }}>{values?.invoiceDate && moment(values?.invoiceDate).format("DD-MM-YYYY")}</td>
                                                </tr>
                                                <tr>
                                                    <th style={{ textAlign: "start" }}>Name</th>
                                                    <td>:</td>
                                                    <td style={{ textAlign: "start" }}>{values?.title}</td>
                                                </tr>
                                                <tr>
                                                    <th style={{ textAlign: "start" }}>Status</th>
                                                    <td>:</td>
                                                    <td style={{ textAlign: "start" }}>{values?.status}</td>
                                                </tr>
                                            </table>
                                        </div>
                                    </div>
                                    <div className="address-section">
                                        <div className="address">
                                            <strong>Billing Address</strong><br />
                                            <p style={{ width: "250px", wordBreak: "break-all" }}>
                                                {values?.billingStreet ? `${values?.billingStreet},${values?.billingCity},` : ""}
                                            </p>
                                            <p style={{ width: "250px", wordBreak: "break-all" }}>
                                                {values?.billingState ? `${values?.billingState},` : ""}
                                            </p>
                                            <p style={{ width: "250px", wordBreak: "break-all" }}>
                                                {`${values?.billingCountry} - ${values?.billingPostalCode}`}
                                            </p>
                                        </div>
                                        <div className="address">
                                            <strong>Shipping Address</strong><br />
                                            <p style={{ width: "250px", wordBreak: "break-all" }}>
                                                {values?.shippingStreet ? `${values?.shippingStreet},${values?.shippingCity},` : ""}
                                            </p>
                                            <p style={{ width: "250px", wordBreak: "break-all" }}>
                                                {values?.shippingState ? `${values?.shippingState},` : ""}
                                            </p>
                                            <p style={{ width: "250px", wordBreak: "break-all" }}>
                                                {`${values?.shippingCountry} - ${values?.shippingPostalCode}`}
                                            </p>
                                        </div>
                                    </div>
                                    <table className="invoice-table">
                                        <thead>
                                            <tr>
                                                <th style={{ width: "50px" }}>S No</th>
                                                <th style={{ width: "100px" }}>ITEM</th>
                                                <th style={{ width: "50px" }}>QTY</th>
                                                <th style={{ width: "50px" }}>RATE</th>
                                                <th style={{ width: "50px" }}>DISCOUNT</th>
                                                <th style={{ width: "50px" }}>AMOUNT</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {
                                                values?.items?.length > 0 && values?.items?.map((item, index) => (
                                                    <tr key={index}>
                                                        <td>{item?.id}</td>
                                                        <td>{item?.productName}</td>
                                                        <td>{item?.qty}</td>
                                                        <td>{item?.rate}</td>
                                                        <td>{`${item?.discountType === "percent" ? `${item?.discount}%` : item?.discountType === "flatAmount" ? `${values?.currency}${item?.discount}` : item?.discountType === "none" ? 0 : ""}`}</td>
                                                        <td>{item?.amount}</td>
                                                    </tr>
                                                ))
                                            }
                                        </tbody>
                                    </table>
                                    <div className="totals">
                                        <table>
                                            <tr>
                                                <th style={{ textAlign: "start" }}>Total</th>
                                                <td>:</td>
                                                <td style={{ textAlign: "start" }}>{`${values?.currency} ${values?.total || 0}`}</td>
                                            </tr>
                                            <tr>
                                                <th style={{ textAlign: "start" }}>Discount</th>
                                                <td>:</td>
                                                <td style={{ textAlign: "start" }}>{`${values?.currency} ${values?.discount || 0}`}</td>
                                            </tr>
                                            <tr>
                                                <th style={{ textAlign: "start" }}>Subtotal</th>
                                                <td>:</td>
                                                <td style={{ textAlign: "start" }}>{`${values?.currency} ${values?.subtotal || 0}`}</td>
                                            </tr>
                                            <tr>
                                                <th style={{ textAlign: "start" }}>Shipping </th>
                                                <td>:</td>
                                                <td style={{ textAlign: "start" }}>{`${values?.currency} ${values?.shipping || 0}`}</td>
                                            </tr>
                                            <tr>
                                                <th style={{ textAlign: "start" }}>Shipping Tax</th>
                                                <td>:</td>
                                                <td style={{ textAlign: "start" }}>{`${values?.currency} ${values?.shippingTax || 0}`}</td>
                                            </tr>
                                            <tr>
                                                <th style={{ textAlign: "start" }}>Tax ({values?.ptax}%)</th>
                                                <td>:</td>
                                                <td style={{ textAlign: "start" }}>{`${values?.currency} ${values?.tax || 0}`}</td>
                                            </tr>
                                            <tr>
                                                <th style={{ textAlign: "start" }}>Grand Total</th>
                                                <td>:</td>
                                                <td style={{ textAlign: "start" }}>{`${values?.currency} ${values?.grandTotal || 0}`}</td>

                                            </tr>
                                        </table>

                                    </div>
                                    <div className="footer">
                                        <div>{values?.description}</div>
                                    </div>
                                </div>
                            </DrawerBody>
                    }
                    <DrawerFooter>
                        <Button size="sm" sx={{
                            marginRight: 2,
                            textTransform: "capitalize",
                        }} variant='brand' onClick={() => setIsOpenPreview(!isOpenPreview)}>{isOpenPreview ? "Hide" : "Preview"}</Button>
                        {
                            !isOpenPreview &&
                            <>
                                <Button sx={{ textTransform: "capitalize" }} size="sm" disabled={isLoding ? true : false} variant="brand" type="submit" onClick={handleSubmit}                        >
                                    {isLoding ? <Spinner /> : 'Save'}
                                </Button>
                                <Button
                                    variant="outline"
                                    colorScheme='red' size="sm"
                                    sx={{
                                        marginLeft: 2,
                                        textTransform: "capitalize",
                                    }}
                                    onClick={handleCancel}
                                >
                                    Close
                                </Button>
                            </>
                        }
                    </DrawerFooter>
                </DrawerContent>
            </Drawer>
        </div >
    )
}

export default AddEdit

================
File: Client/src/views/admin/invoice/index.js
================
import { DeleteIcon, EditIcon, SearchIcon, ViewIcon } from '@chakra-ui/icons';
import { Button, Menu, MenuButton, MenuItem, MenuList, Text, useDisclosure } from '@chakra-ui/react';
import html2pdf from "html2pdf.js";
import moment from 'moment';
import { useEffect, useState } from 'react';
import { CiMenuKebab } from 'react-icons/ci';
import { useDispatch } from 'react-redux';
import { useNavigate } from "react-router-dom";
import { toast } from 'react-toastify';
import { deleteManyApi } from 'services/api';
import CommonDeleteModel from '../../../components/commonDeleteModel';
import CommonCheckTable from '../../../components/reactTable/checktable';
import { HasAccess } from '../../../redux/accessUtils';
import { fetchInvoicesData } from '../../../redux/slices/invoicesSlice';
import AddEdit from './AddEdit';
import ImportModal from './components/ImportModel';
import InvoiceAdvanceSearch from './components/InvoiceAdvanceSearch';
import Preview from './preview';
import { TbFileInvoice } from 'react-icons/tb';

const Index = (props) => {
    const [action, setAction] = useState(false);
    const { isOpen, onOpen, onClose } = useDisclosure();
    const [selectedValues, setSelectedValues] = useState([]);
    const [advanceSearch, setAdvanceSearch] = useState(false);
    const [getTagValuesOutSide, setGetTagValuesOutside] = useState([]);
    const [searchboxOutside, setSearchboxOutside] = useState('');
    const user = JSON.parse(localStorage.getItem("user"));
    const navigate = useNavigate();
    const dispatch = useDispatch();
    const [isLoding, setIsLoding] = useState(false);
    const [loading, setLoading] = useState(false);
    const [data, setData] = useState([]);
    const [displaySearchData, setDisplaySearchData] = useState(false);
    const [searchedData, setSearchedData] = useState([]);
    const [selectedId, setSelectedId] = useState();
    const [selectedPreviewId, setSelectedPreviewId] = useState();
    const [deleteModel, setDelete] = useState(false);
    const [edit, setEdit] = useState(false);
    const [type, setType] = useState("")
    const [isImport, setIsImport] = useState(false);
    const [isOpenPreview, setIsOpenPreview] = useState(false)

    const [permission, accountAccess, contactAccess] = HasAccess(["Invoices", "Account", "Contacts"]);

    const actionHeader = {
        Header: "Action",
        accessor: "action",
        isSortable: false,
        center: true,
        cell: ({ row, i }) => (
            <Text fontSize="md" fontWeight="900" textAlign={"center"}>
                <Menu isLazy>
                    <MenuButton>
                        <CiMenuKebab />
                    </MenuButton>
                    <MenuList
                        minW={"fit-content"}
                        transform={"translate(1520px, 173px);"}
                    >
                        {permission?.update && (
                            <MenuItem
                                py={2.5}
                                icon={<EditIcon fontSize={15} mb={1} />}
                                onClick={() => {
                                    setType("edit");
                                    onOpen();
                                    setSelectedId(row?.values?._id);
                                }}
                            >
                                Edit
                            </MenuItem>
                        )}
                        {permission?.view && (
                            <MenuItem
                                py={2.5}
                                color={"green"}
                                icon={<ViewIcon mb={1} fontSize={15} />}
                                onClick={() => {
                                    navigate(`/invoicesView/${row?.values?._id}`);
                                }}
                            >
                                View
                            </MenuItem>
                        )}
                        <MenuItem
                            py={2.5}
                            color={"black"}
                            icon={<TbFileInvoice mb={1} fontSize={15} />}
                            onClick={() => {
                                setSelectedId(row?.values?._id)
                                setIsOpenPreview(true)
                            }}
                        >
                            Invoice
                        </MenuItem>
                        {permission?.delete && (
                            <MenuItem
                                py={2.5}
                                color={"red"}
                                icon={<DeleteIcon fontSize={15} mb={1} />}
                                onClick={() => {
                                    setDelete(true);
                                    setSelectedValues([row?.values?._id]);
                                }}
                            >
                                Delete
                            </MenuItem>
                        )}
                    </MenuList>
                </Menu>
            </Text>
        ),
    };
    const tableColumns = [
        { Header: "#", accessor: "_id", isSortable: false, width: 10 },
        { Header: "Invoice Number", accessor: "invoiceNumber", isSortable: false, width: 10 },
        {
            Header: 'Title', accessor: 'title', cell: (cell) => (
                <div className="selectOpt">
                    <Text
                        onClick={() => handleViewOpen(cell?.row?.original._id)}
                        me="10px"
                        sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' }, cursor: 'pointer' }}
                        color='brand.600'
                        fontSize="sm"
                        fontWeight="700"
                    >
                        {cell?.value}
                    </Text>
                </div>
            )
        },
        {
            Header: 'Status', accessor: 'status',
        },
        {
            Header: 'Contact',
            accessor: 'contact',
            cell: (cell) => (
                (user.role === 'superAdmin' || contactAccess?.view) ?
                    <div className="selectOpt">
                        <Text
                            onClick={() => navigate(cell?.row?.original.contact !== null && `/contactView/${cell?.row?.original.contact}`)}
                            me="10px"
                            sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' }, cursor: 'pointer' }}
                            color='brand.600'
                            fontSize="sm"
                            fontWeight="700"
                        >
                            {cell?.row?.original?.contactName ? cell?.row?.original?.contactName : "-"}
                        </Text>
                    </div>
                    :
                    <Text
                    >
                        {cell?.row?.original?.contactName ? cell?.row?.original?.contactName : "-"}
                    </Text>
            )
        },
        {
            Header: 'Account',
            accessor: 'account',
            cell: (cell) => (
                (user.role === 'superAdmin' || accountAccess?.view) ?
                    <div className="selectOpt">
                        <Text
                            onClick={() => navigate(cell?.row?.original.account !== null && `/accountView/${cell?.row?.original.account}`)}
                            me="10px"
                            sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' }, cursor: 'pointer' }}
                            color='brand.600'
                            fontSize="sm"
                            fontWeight="700"
                        >
                            {cell?.row?.original?.accountName ? cell?.row?.original?.accountName : "-"}
                        </Text>
                    </div>
                    :
                    <Text
                    >
                        {cell?.row?.original?.accountName ? cell?.row?.original?.accountName : "-"}
                    </Text>
            )
        },
        {
            Header: "Grand Total",
            accessor: "grandTotal",
            cell: (cell) => (
                <div className="selectOpt">
                    <Text>
                        {cell?.row?.original?.grandTotal ? `${cell?.row?.original?.currency} ${cell?.row?.original?.grandTotal}` : '-'}
                    </Text>
                </div>
            )
        },

        ...(permission?.update || permission?.view || permission?.delete ? [actionHeader] : [])

    ];
    const handleViewOpen = (id) => {
        navigate(`/invoicesView/${id}`)
    }
    const customFields = [
        {
            "name": "invoiceNumber",
            "label": "Invoice Number",
            "type": "number",
            "fixed": false,
            "isDefault": false,
            "delete": false,
            "belongsTo": null,
            "backendType": "Mixed",
            "isTableField": false,
            "isView": false,
            "options": [
                {
                    "name": "",
                    "value": "",
                    "_id": "669508bc20a9be3594c8652f"
                },
                {
                    "name": "",
                    "value": "",
                    "_id": "669508bc20a9be3594c86530"
                }
            ],
            "validation": [
                {
                    "require": true,
                    "message": "Quote Number is required",
                    "_id": "669508bc20a9be3594c86531"
                },
                {
                    "min": false,
                    "value": "",
                    "message": "",
                    "_id": "669508bc20a9be3594c86532"
                },
                {
                    "max": false,
                    "value": "",
                    "message": "",
                    "_id": "669508bc20a9be3594c86533"
                },
                {
                    "value": "",
                    "message": "",
                    "match": false,
                    "_id": "669508bc20a9be3594c86534"
                },
                {
                    "message": "",
                    "formikType": "",
                    "_id": "669508bc20a9be3594c86535"
                }
            ],
            "_id": "669508bc20a9be3594c8652e"
        },
        {
            "name": "title",
            "label": "Title",
            "type": "text",
            "fixed": false,
            "isDefault": false,
            "delete": false,
            "belongsTo": null,
            "backendType": "Mixed",
            "isTableField": false,
            "isView": false,
            "options": [
                {
                    "name": "",
                    "value": "",
                    "_id": "669508f820a9be3594c8686c"
                },
                {
                    "name": "",
                    "value": "",
                    "_id": "669508f820a9be3594c8686d"
                }
            ],
            "validation": [
                {
                    "require": true,
                    "message": "Title is required ",
                    "_id": "669508f820a9be3594c8686e"
                },
                {
                    "min": false,
                    "value": "",
                    "message": "",
                    "_id": "669508f820a9be3594c8686f"
                },
                {
                    "max": false,
                    "value": "",
                    "message": "",
                    "_id": "669508f820a9be3594c86870"
                },
                {
                    "value": "",
                    "message": "",
                    "match": false,
                    "_id": "669508f820a9be3594c86871"
                },
                {
                    "message": "",
                    "formikType": "",
                    "_id": "669508f820a9be3594c86872"
                }
            ],
            "_id": "669508f820a9be3594c8686b"
        },
        {
            "name": "status",
            "label": "Status",
            "type": "select",
            "fixed": false,
            "isDefault": false,
            "delete": false,
            "belongsTo": null,
            "backendType": "Mixed",
            "isTableField": false,
            "isView": false,
            "options": [
            ],
            "validation": [
                {
                    "require": false,
                    "message": "",
                    "_id": "6695095120a9be3594c86bc9"
                },
                {
                    "min": false,
                    "value": "",
                    "message": "",
                    "_id": "6695095120a9be3594c86bca"
                },
                {
                    "max": false,
                    "value": "",
                    "message": "",
                    "_id": "6695095120a9be3594c86bcb"
                },
                {
                    "value": "",
                    "message": "",
                    "match": false,
                    "_id": "6695095120a9be3594c86bcc"
                },
                {
                    "message": "",
                    "formikType": "",
                    "_id": "6695095120a9be3594c86bcd"
                }
            ],
            "_id": "6695095120a9be3594c86bc0"
        },
        {
            "name": "contact",
            "label": "Contact",
            "type": "text",
            "fixed": false,
            "isDefault": false,
            "delete": false,
            "belongsTo": null,
            "backendType": "Mixed",
            "isTableField": false,
            "isView": false,
            "options": [
                {
                    "name": "",
                    "value": "",
                    "_id": "6695099520a9be3594c86f46"
                },
                {
                    "name": "",
                    "value": "",
                    "_id": "6695099520a9be3594c86f47"
                }
            ],
            "validation": [
                {
                    "require": false,
                    "message": "",
                    "_id": "6695099520a9be3594c86f48"
                },
                {
                    "min": false,
                    "value": "",
                    "message": "",
                    "_id": "6695099520a9be3594c86f49"
                },
                {
                    "max": false,
                    "value": "",
                    "message": "",
                    "_id": "6695099520a9be3594c86f4a"
                },
                {
                    "value": "",
                    "message": "",
                    "match": false,
                    "_id": "6695099520a9be3594c86f4b"
                },
                {
                    "message": "",
                    "formikType": "",
                    "_id": "6695099520a9be3594c86f4c"
                }
            ],
            "_id": "6695099520a9be3594c86f45"
        },
        {
            "name": "account",
            "label": "Account",
            "type": "text",
            "fixed": false,
            "isDefault": false,
            "delete": false,
            "belongsTo": null,
            "backendType": "Mixed",
            "isTableField": false,
            "isView": false,
            "options": [
                {
                    "name": "",
                    "value": "",
                    "_id": "669509a320a9be3594c872dd"
                },
                {
                    "name": "",
                    "value": "",
                    "_id": "669509a320a9be3594c872de"
                }
            ],
            "validation": [
                {
                    "require": false,
                    "message": "",
                    "_id": "669509a320a9be3594c872df"
                },
                {
                    "min": false,
                    "value": "",
                    "message": "",
                    "_id": "669509a320a9be3594c872e0"
                },
                {
                    "max": false,
                    "value": "",
                    "message": "",
                    "_id": "669509a320a9be3594c872e1"
                },
                {
                    "value": "",
                    "message": "",
                    "match": false,
                    "_id": "669509a320a9be3594c872e2"
                },
                {
                    "message": "",
                    "formikType": "",
                    "_id": "669509a320a9be3594c872e3"
                }
            ],
            "_id": "669509a320a9be3594c872dc"
        },
        {
            "name": "grandTotal",
            "label": "Grand Total",
            "type": "number",
            "fixed": false,
            "isDefault": false,
            "delete": false,
            "belongsTo": null,
            "backendType": "Mixed",
            "isTableField": false,
            "isView": false,
            "options": [
                {
                    "name": "",
                    "value": "",
                    "_id": "669509b120a9be3594c8768c"
                },
                {
                    "name": "",
                    "value": "",
                    "_id": "669509b120a9be3594c8768d"
                }
            ],
            "validation": [
                {
                    "require": false,
                    "message": "",
                    "_id": "669509b120a9be3594c8768e"
                },
                {
                    "min": false,
                    "value": "",
                    "message": "",
                    "_id": "669509b120a9be3594c8768f"
                },
                {
                    "max": false,
                    "value": "",
                    "message": "",
                    "_id": "669509b120a9be3594c87690"
                },
                {
                    "value": "",
                    "message": "",
                    "match": false,
                    "_id": "669509b120a9be3594c87691"
                },
                {
                    "message": "",
                    "formikType": "",
                    "_id": "669509b120a9be3594c87692"
                }
            ],
            "_id": "669509b120a9be3594c8768b"
        },
    ]

    const handleOpenAdd = () => {
        onOpen();
        setType("add")
    }

    const handleDelete = async (ids) => {
        try {
            setIsLoding(true);
            let response = await deleteManyApi("api/invoices/deleteMany", ids);
            if (response.status === 200) {
                toast.success(`Invoices Delete successfully`)
                setSelectedValues([]);
                setDelete(false);
                setAction((pre) => !pre);
            }
        } catch (error) {
            console.log(error);
            toast.error(`server error`)

        } finally {
            setIsLoding(false);
        }
    };

    const fetchData = async () => {
        setIsLoding(true)
        const result = await dispatch(fetchInvoicesData())

        if (result.payload.status === 200) {
            setData(result?.payload?.data);
        } else {
            toast.error("Failed to fetch data", "error");
        }
        setIsLoding(false)
    }

    const [columns, setColumns] = useState([...tableColumns]);
    const [selectedColumns, setSelectedColumns] = useState([...tableColumns]);
    const dataColumn = tableColumns?.filter(item => selectedColumns?.find(colum => colum?.Header === item.Header))

    const generatePDF = () => {
        setLoading(true)
        const element = document.getElementById("reports");

        if (element) {
            html2pdf()
                .from(element)
                .set({
                    margin: [0, 0, 0, 0],
                    filename: `Invoice_${moment().format("DD-MM-YYYY")}.pdf`,
                    image: { type: "jpeg", quality: 0.98 },
                    html2canvas: { scale: 2, useCORS: true, allowTaint: true },
                    jsPDF: { unit: "in", format: "letter", orientation: "portrait" },
                })
                .save().then(() => {
                    setLoading(false)
                    setIsOpenPreview(false)
                })
            // }, 500);
        } else {
            console.error("Element with ID 'reports' not found.");
            setLoading(false)
        }
    };

    useEffect(() => {
        fetchData();
    }, [action])

    return (
        <div>
            <CommonCheckTable
                title={"Invoices"}
                isLoding={isLoding}
                columnData={columns ?? []}
                // dataColumn={dataColumn ?? []}
                allData={data ?? []}
                tableData={data}
                searchDisplay={displaySearchData}
                setSearchDisplay={setDisplaySearchData}
                searchedDataOut={searchedData}
                setSearchedDataOut={setSearchedData}
                tableCustomFields={[]}
                access={permission}
                // action={action}
                // setAction={setAction}
                // selectedColumns={selectedColumns}
                // setSelectedColumns={setSelectedColumns}
                // isOpen={isOpen}
                // onClose={onclose}
                setIsImport={setIsImport}
                onOpen={handleOpenAdd}
                selectedValues={selectedValues}
                setSelectedValues={setSelectedValues}
                setDelete={setDelete}
                deleteMany={false}
                AdvanceSearch={
                    <Button variant="outline" colorScheme='brand' leftIcon={<SearchIcon />} mt={{ sm: "5px", md: "0" }} size="sm" onClick={() => setAdvanceSearch(true)}>Advance Search</Button>
                }
                getTagValuesOutSide={getTagValuesOutSide}
                searchboxOutside={searchboxOutside}
                setGetTagValuesOutside={setGetTagValuesOutside}
                setSearchboxOutside={setSearchboxOutside}
                handleSearchType="InvoiceSearch"
            />

            <InvoiceAdvanceSearch
                advanceSearch={advanceSearch}
                setAdvanceSearch={setAdvanceSearch}
                setSearchedData={setSearchedData}
                setDisplaySearchData={setDisplaySearchData}
                allData={data ?? []}
                setAction={setAction}
                setGetTagValues={setGetTagValuesOutside}
                setSearchbox={setSearchboxOutside}
            />

            <Preview isOpen={isOpenPreview} onClose={setIsOpenPreview} generatePDF={generatePDF} id="reports" selectedId={selectedId} isLoading={loading} />

            <AddEdit isOpen={isOpen} size={"lg"} onClose={onClose} setAction={setAction} type={type} selectedId={selectedId} action={action} />
            <CommonDeleteModel
                isOpen={deleteModel}
                onClose={() => setDelete(false)}
                type="Invoices"
                handleDeleteData={handleDelete}
                ids={selectedValues}
            />

            <ImportModal
                text="Invoices file"
                isOpen={isImport}
                onClose={setIsImport}
                customFields={customFields}
            />
        </div>
    )
}

export default Index

================
File: Client/src/views/admin/invoice/preview.js
================
import { CloseIcon } from '@chakra-ui/icons';
import { Button, Drawer, DrawerBody, DrawerContent, DrawerFooter, DrawerHeader, IconButton, Image, Modal, ModalBody, ModalContent, ModalFooter, ModalHeader, Spinner } from '@chakra-ui/react';
import moment from 'moment';
import { useEffect, useState } from 'react';
import { useSelector } from 'react-redux';
import { getApi } from 'services/api';

const Preview = (props) => {
    const { onClose, isOpen, id, generatePDF, selectedId, isLoading } = props
    const [invoiceDetails, setInvoiceDetails] = useState({});
    const [isLoding, setIsLoding] = useState(false)
    const largeLogo = useSelector((state) => state?.images?.images?.filter(item => item?.isActive === true));

    const fetchInvoiceDetails = async () => {
        try {
            setIsLoding(true)
            let result = await getApi('api/invoices/view/', selectedId)
            if (result?.status === 200) {
                setInvoiceDetails(result?.data?.result)
            }
        }
        catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    }

    useEffect(() => {
        if (selectedId) fetchInvoiceDetails()
    }, [selectedId])

    return (
        <Drawer isOpen={isOpen} size={'lg'}>
            <DrawerContent>
                <DrawerHeader alignItems={"center"} justifyContent='space-between' display='flex'  >
                    Invoice
                    <IconButton onClick={() => onClose(false)} icon={<CloseIcon />} />
                </DrawerHeader>
                <DrawerBody>
                    {
                        !isLoding ?
                            <div id={id} style={{ padding: "5px" }}>
                                <div className="invoice-container" >
                                    <div style={{ marginBottom: 10 }}><h1 style={{ fontSize: 30, textAlign: "center" }}>Invoice</h1></div>
                                    <div className="invoice-header">
                                        <div>
                                            <Image
                                                style={{ width: "100%", height: '52px' }}
                                                src={largeLogo[0]?.logoLgImg}
                                                alt="Logo"
                                                cursor="pointer"
                                                userSelect="none"
                                                my={2}
                                            />
                                        </div>
                                        <div className="invoice-details">
                                            <table>
                                                <tr>
                                                    <th style={{ textAlign: "start" }}>Invoice No.</th>
                                                    <td>:</td>
                                                    <td style={{ textAlign: "start" }}>{invoiceDetails?.invoiceNumber}</td>
                                                </tr>
                                                <tr>
                                                    <th style={{ textAlign: "start" }}>Invoice Date</th>
                                                    <td>:</td>
                                                    <td style={{ textAlign: "start" }}>{invoiceDetails?.invoiceDate && moment(invoiceDetails?.invoiceDate).format("DD-MM-YYYY")}</td>
                                                </tr>
                                                <tr>
                                                    <th style={{ textAlign: "start" }}>Name</th>
                                                    <td>:</td>
                                                    <td style={{ textAlign: "start" }}>{invoiceDetails?.title}</td>
                                                </tr>
                                                <tr>
                                                    <th style={{ textAlign: "start" }}>Status</th>
                                                    <td>:</td>
                                                    <td style={{ textAlign: "start" }}>{invoiceDetails?.status}</td>
                                                </tr>
                                            </table>
                                        </div>
                                    </div>
                                    <div className="address-section">
                                        <div className="address">
                                            <strong>Billing Address</strong><br />
                                            <p style={{ width: "250px", wordBreak: "break-all" }}>
                                                {invoiceDetails?.billingStreet ? `${invoiceDetails?.billingStreet},${invoiceDetails?.billingCity},` : ""}
                                            </p>
                                            <p style={{ width: "250px", wordBreak: "break-all" }}>
                                                {invoiceDetails?.billingState ? `${invoiceDetails?.billingState},` : ""}
                                            </p>
                                            <p style={{ width: "250px", wordBreak: "break-all" }}>
                                                {`${invoiceDetails?.billingCountry} - ${invoiceDetails?.billingPostalCode}`}
                                            </p>
                                        </div>
                                        <div className="address">
                                            <strong>Shipping Address</strong><br />
                                            <p style={{ width: "250px", wordBreak: "break-all" }}>
                                                {invoiceDetails?.shippingStreet ? `${invoiceDetails?.shippingStreet},${invoiceDetails?.shippingCity},` : ""}
                                            </p>
                                            <p style={{ width: "250px", wordBreak: "break-all" }}>
                                                {invoiceDetails?.shippingState ? `${invoiceDetails?.shippingState},` : ""}
                                            </p>
                                            <p style={{ width: "250px", wordBreak: "break-all" }}>
                                                {`${invoiceDetails?.shippingCountry} - ${invoiceDetails?.shippingPostalCode}`}
                                            </p>
                                        </div>
                                    </div>
                                    <table className="invoice-table">
                                        <thead>
                                            <tr>
                                                <th style={{ width: "50px" }}>S No</th>
                                                <th style={{ width: "100px" }}>ITEM</th>
                                                <th style={{ width: "50px" }}>QTY</th>
                                                <th style={{ width: "50px" }}>RATE</th>
                                                <th style={{ width: "50px" }}>DISCOUNT</th>
                                                <th style={{ width: "50px" }}>AMOUNT</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {
                                                invoiceDetails?.items?.length > 0 && invoiceDetails?.items?.map((item, index) => (
                                                    <tr key={index}>
                                                        <td>{item?.id}</td>
                                                        <td>{item?.productName}</td>
                                                        <td>{item?.qty}</td>
                                                        <td>{item?.rate}</td>
                                                        <td>{`${item?.discountType === "percent" ? `${item?.discount}%` : item?.discountType === "flatAmount" ? `${invoiceDetails?.currency}${item?.discount}` : item?.discountType === "none" ? 0 : ""}`}</td>
                                                        <td>{item?.amount}</td>
                                                    </tr>
                                                ))
                                            }
                                        </tbody>
                                    </table>
                                    <div className="totals">
                                        <table>
                                            <tr>
                                                <th style={{ textAlign: "start" }}>Total</th>
                                                <td>:</td>
                                                <td style={{ textAlign: "start" }}>{`${invoiceDetails?.currency} ${invoiceDetails?.total || 0}`}</td>
                                            </tr>
                                            <tr>
                                                <th style={{ textAlign: "start" }}>Discount </th>
                                                <td>:</td>
                                                <td style={{ textAlign: "start" }}>{`${invoiceDetails?.currency} ${invoiceDetails?.discount || 0}`}</td>
                                            </tr>
                                            <tr>
                                                <th style={{ textAlign: "start" }}>Subtotal</th>
                                                <td>:</td>
                                                <td style={{ textAlign: "start" }}>{`${invoiceDetails?.currency} ${invoiceDetails?.subtotal || 0}`}</td>
                                            </tr>
                                            <tr>
                                                <th style={{ textAlign: "start" }}>Shipping </th>
                                                <td>:</td>
                                                <td style={{ textAlign: "start" }}>{`${invoiceDetails?.currency} ${invoiceDetails?.shipping || 0}`}</td>
                                            </tr>
                                            <tr>
                                                <th style={{ textAlign: "start" }}>Shipping Tax</th>
                                                <td>:</td>
                                                <td style={{ textAlign: "start" }}>{`${invoiceDetails?.currency} ${invoiceDetails?.shippingTax || 0}`}</td>
                                            </tr>
                                            <tr>
                                                <th style={{ textAlign: "start" }}>Tax ({invoiceDetails?.ptax}%)</th>
                                                <td>:</td>
                                                <td style={{ textAlign: "start" }}>{`${invoiceDetails?.currency} ${invoiceDetails?.tax || 0}`}</td>
                                            </tr>
                                            <tr>
                                                <th style={{ textAlign: "start" }}>Grand Total</th>
                                                <td>:</td>
                                                <td style={{ textAlign: "start" }}>{`${invoiceDetails?.currency} ${invoiceDetails?.grandTotal || 0}`}</td>

                                            </tr>
                                        </table>

                                    </div>
                                    <div className="footer">
                                        <div>{invoiceDetails?.description}</div>
                                    </div>
                                </div>
                            </div>
                            :
                            <div style={{ display: "flex", justifyContent: "center" }}>
                                <Spinner />
                            </div>
                    }
                </DrawerBody>
                <DrawerFooter>
                    <Button sx={{ textTransform: "capitalize" }} size="sm" disabled={isLoading} variant="brand" type="submit" onClick={generatePDF}>
                        {isLoading ? <Spinner /> : 'Download'}
                    </Button>
                </DrawerFooter>
            </DrawerContent>
        </Drawer>
    )
}

export default Preview

================
File: Client/src/views/admin/invoice/View.js
================
import { Button, Grid, GridItem, Flex, IconButton, Text, Menu, MenuButton, MenuDivider, MenuItem, MenuList, useDisclosure, Box, Heading, Input, Select, Textarea } from '@chakra-ui/react'
import { AddIcon, ChevronDownIcon, DeleteIcon, EditIcon } from "@chakra-ui/icons";
import React from 'react'
import moment from 'moment'
import { Link, useNavigate, useParams } from 'react-router-dom'
import { BiLink } from 'react-icons/bi'
import { useEffect } from 'react'
import { useState } from 'react'
import Card from 'components/card/Card'
import { IoIosArrowBack } from "react-icons/io";
import { HasAccess } from '../../../redux/accessUtils';
import { HSeparator } from 'components/separator/Separator';
import AddEdit from './AddEdit';
import CommonDeleteModel from 'components/commonDeleteModel';
import { deleteManyApi, putApi, getApi } from '../../../services/api';
import { FaFilePdf } from "react-icons/fa";
import html2pdf from "html2pdf.js";
import { opprtunitiesSchema } from '../../../schema/opprtunitiesSchema';
import { useFormik } from 'formik';
import dayjs from 'dayjs';
import { toast } from 'react-toastify';
import { invoicesSchema } from '../../../schema/invoicesSchema';
import CommonCheckTable from "components/reactTable/checktable";

const View = (props) => {
    const params = useParams()
    const { id } = params
    const user = JSON.parse(localStorage.getItem("user"))

    const [invoiceAccess, accountAccess, contactAccess, quotesAccess] = HasAccess(['Invoices', 'Account', 'Contacts', 'Quotes'])

    const [data, setData] = useState()
    const [quotesData, setQuotesData] = useState([])
    const { onOpen, onClose } = useDisclosure()
    const [edit, setEdit] = useState(false);
    const [deleteModel, setDelete] = useState(false);
    const [deleteManyModel, setDeleteManyModel] = useState(false);
    const [loading, setLoading] = useState(false)
    const [isLoding, setIsLoding] = useState(false)
    const navigate = useNavigate()
    const [type, setType] = useState("")
    const [editableField, setEditableField] = useState(null);
    const [editableFieldName, setEditableFieldName] = useState(null);
    const today = new Date().toISOString().split('T')[0];
    const todayTime = new Date().toISOString().split('.')[0];

    const quotesColumns = [
        { Header: "Quote Number", accessor: "quoteNumber", isSortable: false, width: 10 },
        {
            Header: 'Title', accessor: 'title', cell: (cell) => (
                <div className="selectOpt">
                    <Text
                        onClick={() => navigate(`/quotesView/${cell?.row?.original._id}`)}
                        me="10px"
                        sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' }, cursor: 'pointer' }}
                        color='brand.600'
                        fontSize="sm"
                        fontWeight="700"
                    >
                        {cell?.value}
                    </Text>
                </div>
            )
        },
        { Header: 'Quote Stage', accessor: 'quoteStage' },
        {
            Header: 'Contact', accessor: 'contact',
            cell: (cell) => (
                (user.role === 'superAdmin' || contactAccess?.view) ?
                    <div className="selectOpt">
                        <Text
                            onClick={() => navigate(cell?.row?.original.contact !== null && `/contactView/${cell?.row?.original.contact}`)}
                            me="10px"
                            sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' }, cursor: 'pointer' }}
                            color='brand.600'
                            fontSize="sm"
                            fontWeight="700"
                        >
                            {cell?.row?.original?.contactName ? cell?.row?.original?.contactName : "-"}
                        </Text>
                    </div>
                    :
                    <Text
                    >
                        {cell?.row?.original?.contactName ? cell?.row?.original?.contactName : "-"}
                    </Text>
            )
        },
        {
            Header: 'Account', accessor: 'account',
            cell: (cell) => (
                (user.role === 'superAdmin' || accountAccess?.view) ?
                    <div className="selectOpt">
                        <Text
                            onClick={() => navigate(cell?.row?.original.account !== null && `/accountView/${cell?.row?.original.account}`)}
                            me="10px"
                            sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' }, cursor: 'pointer' }}
                            color='brand.600'
                            fontSize="sm"
                            fontWeight="700"
                        >
                            {cell?.row?.original?.accountName ? cell?.row?.original?.accountName : "-"}
                        </Text>
                    </div>
                    :
                    <Text
                    >
                        {cell?.row?.original?.accountName ? cell?.row?.original?.accountName : "-"}
                    </Text>
            )
        },
        {
            Header: "Grand Total",
            accessor: "grandTotal",
            cell: (cell) => (
                <div className="selectOpt">
                    <Text
                    >
                        {cell?.row?.original?.grandTotal ? `$${cell?.row?.original?.grandTotal}` : '-'}
                    </Text>
                </div>
            )
        },
        { Header: "valid Until", accessor: "validUntil" },
    ];
    const fetchViewData = async () => {
        if (id) {
            let result = await getApi('api/invoices/view/', id);
            setData(result?.data?.result);
            setQuotesData(result?.data?.quotesDetails)
        }
    }
    const generatePDF = () => {
        setLoading(true)
        const element = document.getElementById("reports");
        const hideBtn = document.getElementById("hide-btn");

        if (element) {
            hideBtn.style.display = 'none';
            html2pdf()
                .from(element)
                .set({
                    margin: [0, 0, 0, 0],
                    filename: `Invoice_Details_${moment().format("DD-MM-YYYY")}.pdf`,
                    image: { type: "jpeg", quality: 0.98 },
                    html2canvas: { scale: 2, useCORS: true, allowTaint: true },
                    jsPDF: { unit: "in", format: "letter", orientation: "portrait" },
                })
                .save().then(() => {
                    setLoading(false)
                    hideBtn.style.display = '';
                })
            // }, 500);
        } else {
            console.error("Element with ID 'reports' not found.");
            setLoading(false)
        }
    };
    const handleDeleteAccount = async (ids) => {
        try {
            let response = await deleteManyApi('api/invoices/deleteMany', ids)
            if (response.status === 200) {
                navigate('/invoices')
                toast.success(`Invoices Delete successfully`)
                setDeleteManyModel(false)
            }
        } catch (error) {
            console.log(error)
            toast.error(`server error`)

        }

    }

    const initialValues = {
        title: data?.title,
        quoteNumber: data?.quoteNumber,
        quoteDate: data?.quoteDate,
        dueDate: data?.dueDate,
        invoiceDate: data?.invoiceDate,
        status: data?.status,
        assignedTo: data?.assignedTo,
        description: data?.description,
        account: data?.account,
        contact: data?.contact,
        billingStreet: data?.billingStreet,
        shippingStreet: data?.shippingStreet,
        billingCity: data?.billingCity,
        shippingCity: data?.shippingCity,
        billingState: data?.billingState,
        shippingState: data?.shippingState,
        billingPostalCode: data?.billingPostalCode,
        shippingPostalCode: data?.shippingPostalCode,
        billingCountry: data?.billingCountry,
        shippingCountry: data?.shippingCountry,
        isCheck: data?.isCheck,
        currency: data?.currency,
        total: data?.total,
        discount: data?.discount,
        subtotal: data?.subtotal,
        shipping: data?.shipping,
        shippingTax: data?.shippingTax,
        ptax: data?.ptax,
        tax: data?.tax,
        grandTotal: data?.grandTotal,
        grandTotal: data?.grandTotal,
        modifiedBy: JSON.parse(localStorage.getItem('user'))._id
    }

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: invoicesSchema,
        enableReinitialize: true,
        onSubmit: async (values, { resetForm }) => {
            const payload = {
                ...values,
                modifiedDate: new Date()
            }
            let response = await putApi(`api/invoices/edit/${id}`, payload)
            if (response.status === 200) {
                setEditableField(null);
                fetchViewData()
                toast.success(`${editableFieldName} Update successfully`)
            } else {
                toast.error(`${editableFieldName} not Update`)
            }
        },
    });
    const handleDoubleClick = (fieldName, value, name) => {
        formik.setFieldValue(fieldName, value);
        setEditableField(fieldName)
        setEditableFieldName(name)
    };

    const handleBlur = (e) => {
        formik.handleSubmit();
    };
    useEffect(() => {
        fetchViewData()
    }, [id, edit])

    return (
        <div>
            <Grid templateColumns="repeat(4, 1fr)" gap={3} id="reports">
                <GridItem colSpan={{ base: 4 }}>
                    <Heading size="lg" m={3}>
                        {data?.title || ""}
                    </Heading>
                </GridItem>
                <GridItem colSpan={{ base: 4 }}>
                    <Card >
                        <Grid gap={4}>
                            <GridItem colSpan={2}>
                                <Box>
                                    <Box display={"flex"} justifyContent={"space-between"} >
                                        <Heading size="md" mb={3}>
                                            Invoice Details
                                        </Heading>
                                        <Flex id="hide-btn">
                                            <Menu>
                                                {(user.role === 'superAdmin' || invoiceAccess?.create || invoiceAccess?.update || invoiceAccess?.delete) && <MenuButton variant="outline" colorScheme='blackAlpha' size="sm" va mr={2.5} as={Button} rightIcon={<ChevronDownIcon />}>
                                                    Actions
                                                </MenuButton>}
                                                <MenuDivider />
                                                <MenuList minWidth={2}>
                                                    {(user.role === 'superAdmin' || invoiceAccess?.create) && <MenuItem onClick={() => { setEdit(true); setType("add"); formik.resetForm() }
                                                    } alignItems={'start'} color={'blue'} icon={<AddIcon />}>Add</MenuItem>}
                                                    {(user.role === 'superAdmin' || invoiceAccess?.update) && <MenuItem onClick={() => { setEdit(true); setType("edit") }} alignItems={'start'} icon={<EditIcon />}>Edit</MenuItem>}
                                                    <MenuItem onClick={generatePDF} alignItems={"start"} icon={<FaFilePdf />} display={"flex"} style={{ alignItems: "center" }}>Print as PDF</MenuItem >

                                                    {(user.role === 'superAdmin' || invoiceAccess?.delete) && <>
                                                        <MenuDivider />
                                                        <MenuItem alignItems={'start'} onClick={() => setDeleteManyModel(true)} color={'red'} icon={<DeleteIcon />}>Delete</MenuItem>
                                                    </>}
                                                </MenuList>
                                            </Menu>
                                            <Button leftIcon={<IoIosArrowBack />} size='sm' variant="brand" onClick={() => navigate(-1)} >
                                                Back
                                            </Button>
                                        </Flex>
                                    </Box>
                                    <HSeparator />
                                </Box>
                            </GridItem>

                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Invoice Number </Text>
                                <Text>{data?.invoiceNumber ? data?.invoiceNumber : ' - '}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Title </Text>
                                {
                                    editableField === "title" ?
                                        <>
                                            <Input
                                                id="text"
                                                name="title"
                                                type="text"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.title}
                                                borderColor={formik?.errors?.title && formik?.touched?.title ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.title && formik?.touched.title && formik?.errors.title}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("title", data?.title, "Title")}>{data?.title ? data?.title : ' - '}</Text>
                                }
                            </GridItem>

                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Quote Number</Text>
                                <Text >{data?.quoteNumber ? data?.quoteNumber : ' - '}</Text>
                            </GridItem>

                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Quote Date </Text>
                                {
                                    editableField === "quoteDate" ?
                                        <>
                                            <Input
                                                id="text"
                                                name="quoteDate"
                                                type="date"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={dayjs(formik.values.quoteDate).format("YYYY-MM-DD")}
                                                borderColor={formik?.errors?.quoteDate && formik?.touched?.quoteDate ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.quoteDate && formik?.touched.quoteDate && formik?.errors.quoteDate}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("quoteDate", data?.quoteDate, "Quote Date")}>{data?.quoteDate ? dayjs(data?.quoteDate).format("YYYY-MM-DD") : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Due Date</Text>
                                {
                                    editableField === "dueDate" ?
                                        <>
                                            <Input
                                                id="text"
                                                name="dueDate"
                                                type="date"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={dayjs(formik.values.dueDate).format("YYYY-MM-DD")}
                                                borderColor={formik?.errors?.dueDate && formik?.touched?.dueDate ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.dueDate && formik?.touched.dueDate && formik?.errors.dueDate}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("dueDate", data?.dueDate, "Due Date")}>{data?.dueDate ? dayjs(data?.dueDate).format("YYYY-MM-DD") : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Invoice Date</Text>
                                {
                                    editableField === "invoiceDate" ?
                                        <>
                                            <Input
                                                id="text"
                                                name="invoiceDate"
                                                type="date"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={dayjs(formik.values.invoiceDate).format("YYYY-MM-DD")}
                                                borderColor={formik?.errors?.invoiceDate && formik?.touched?.invoiceDate ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.invoiceDate && formik?.touched.invoiceDate && formik?.errors.invoiceDate}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("invoiceDate", data?.invoiceDate, "Invoice Date")}>{data?.invoiceDate ? dayjs(data?.invoiceDate).format("YYYY-MM-DD") : ' - '}</Text>
                                }
                            </GridItem>


                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Status </Text>
                                {
                                    editableField === "status" ?
                                        <>
                                            <Select
                                                value={formik?.values.status}
                                                name="status"
                                                onChange={formik?.handleChange}
                                                onBlur={handleBlur}
                                                mb={formik?.errors.status && formik?.touched.status ? undefined : '10px'}
                                                fontWeight='500'
                                                borderColor={formik?.errors.status && formik?.touched.status ? "red.300" : null}
                                            >
                                                <option value="Paid">Paid</option>
                                                <option value="Unpaid">Unpaid</option>
                                                <option value="Cancelled">Cancelled</option>
                                            </Select>
                                            <Text mb='10px' color={'red'}> {formik?.errors.status && formik?.touched.status && formik?.errors.status}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("status", data?.status, "Status")}>{data?.status ? data?.status : ' - '}</Text>
                                }
                            </GridItem>



                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Description</Text>
                                {
                                    editableField === "description" ?
                                        <>
                                            <Textarea
                                                fontSize='sm'
                                                value={formik?.values.description}
                                                name="description"
                                                resize={"none"}
                                                onBlur={handleBlur}
                                                onChange={formik?.handleChange}
                                                placeholder='Description'
                                                fontWeight='500'
                                                borderColor={formik?.errors.description && formik?.touched.description ? "red.300" : null}
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.description && formik?.touched.description && formik?.errors.description}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("description", data?.description, "Description")} style={{ width: "300px" }}>{data?.description ? data?.description : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Account</Text>
                                {
                                    data?.account ?
                                        <Link to={accountAccess?.view && `/accountView/${data?.account}`}>
                                            <Text color={accountAccess?.view ? 'blue.500' : 'blackAlpha.900'} sx={{ '&:hover': { color: accountAccess?.view ? 'blue.500' : 'blackAlpha.900', textDecoration: accountAccess?.view ? 'underline' : 'none' } }} style={{ cursor: "pointer" }}>{data?.accountName ? data?.accountName : ' - '}</Text>
                                        </Link>
                                        :
                                        <Text color={accountAccess?.view ? 'blue.500' : 'blackAlpha.900'} sx={{ '&:hover': { color: accountAccess?.view ? 'blue.500' : 'blackAlpha.900', textDecoration: accountAccess?.view ? 'underline' : 'none' } }}>{data?.accountName ? data?.accountName : ' - '}</Text>

                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Contact</Text>
                                {
                                    data?.contact ?
                                        <Link to={contactAccess?.view && `/contactView/${data?.contact}`}>
                                            <Text color={contactAccess?.view ? 'blue.500' : 'blackAlpha.900'} sx={{ '&:hover': { color: contactAccess?.view ? 'blue.500' : 'blackAlpha.900', textDecoration: contactAccess?.view ? 'underline' : 'none' } }} style={{ cursor: "pointer" }}>{data?.contactName ? data?.contactName : ' - '}</Text>
                                        </Link>
                                        :
                                        <Text color={contactAccess?.view ? 'blue.500' : 'blackAlpha.900'} sx={{ '&:hover': { color: contactAccess?.view ? 'blue.500' : 'blackAlpha.900', textDecoration: contactAccess?.view ? 'underline' : 'none' } }}>{data?.contactName ? data?.contactName : ' - '}</Text>

                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Assigned To</Text>
                                {
                                    data?.assignedTo ?
                                        <Link to={user.role === 'superAdmin' && `/userView/${data?.assignedTo}`}>
                                            <Text color={user.role === 'superAdmin' ? 'blue.500' : 'blackAlpha.900'} sx={{ '&:hover': { color: user.role === 'superAdmin' ? 'blue.500' : 'blackAlpha.900', textDecoration: user.role === 'superAdmin' ? 'underline' : 'none' } }} style={{ cursor: "pointer" }}>{data?.assignUserName ? data?.assignUserName : ' - '}</Text>
                                        </Link>
                                        :
                                        <Text color={user.role === 'superAdmin' ? 'blue.500' : 'blackAlpha.900'} sx={{ '&:hover': { color: user.role === 'superAdmin' ? 'blue.500' : 'blackAlpha.900', textDecoration: user.role === 'superAdmin' ? 'underline' : 'none' } }}>{data?.assignUserName ? data?.assignUserName : ' - '}</Text>

                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Billing Street</Text>
                                {
                                    editableField === "billingStreet" ?
                                        <>
                                            <Input
                                                name="billingStreet"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.billingStreet}
                                                borderColor={formik?.errors?.billingStreet && formik?.touched?.billingStreet ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.billingStreet && formik?.touched.billingStreet && formik?.errors.billingStreet}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("billingStreet", data?.billingStreet, "Billing Street")}>{data?.billingStreet ? data?.billingStreet : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Shipping Street</Text>
                                {
                                    editableField === "shippingStreet" ?
                                        <>
                                            <Input
                                                name="shippingStreet"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.shippingStreet}
                                                borderColor={formik?.errors?.shippingStreet && formik?.touched?.shippingStreet ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.shippingStreet && formik?.touched.shippingStreet && formik?.errors.shippingStreet}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("shippingStreet", data?.shippingStreet, "Shipping Street")}>{data?.shippingStreet ? data?.shippingStreet : ' - '}</Text>
                                }
                            </GridItem>

                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Billing City
                                </Text>
                                {
                                    editableField === "billingCity" ?
                                        <>
                                            <Input
                                                name="billingCity"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.billingCity}
                                                borderColor={formik?.errors?.billingCity && formik?.touched?.billingCity ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.billingCity && formik?.touched.billingCity && formik?.errors.billingCity}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("billingCity", data?.billingCity, "Billing City")}>{data?.billingCity ? data?.billingCity : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Shipping City
                                </Text>
                                {
                                    editableField === "shippingCity" ?
                                        <>
                                            <Input
                                                name="shippingCity"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.shippingCity}
                                                borderColor={formik?.errors?.shippingCity && formik?.touched?.shippingCity ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.shippingCity && formik?.touched.shippingCity && formik?.errors.shippingCity}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("shippingCity", data?.shippingCity, "Shipping City")}>{data?.shippingCity ? data?.shippingCity : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Billing State</Text>
                                {
                                    editableField === "billingState" ?
                                        <>
                                            <Input
                                                name="billingState"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.billingState}
                                                borderColor={formik?.errors?.billingState && formik?.touched?.billingState ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.billingState && formik?.touched.billingState && formik?.errors.billingState}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("billingState", data?.billingState, "Billing State")}>{data?.billingState ? data?.billingState : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Shipping State</Text>
                                {
                                    editableField === "shippingState" ?
                                        <>
                                            <Input
                                                name="shippingState"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.shippingState}
                                                borderColor={formik?.errors?.shippingState && formik?.touched?.shippingState ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.shippingState && formik?.touched.shippingState && formik?.errors.shippingState}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("shippingState", data?.shippingState, "Shipping State")}>{data?.shippingState ? data?.shippingState : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Billing Postal Code</Text>
                                {
                                    editableField === "billingPostalCode" ?
                                        <>
                                            <Input
                                                name="billingPostalCode"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.billingPostalCode}
                                                borderColor={formik?.errors?.billingPostalCode && formik?.touched?.billingPostalCode ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.billingPostalCode && formik?.touched.billingPostalCode && formik?.errors.billingPostalCode}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("billingPostalCode", data?.billingPostalCode, "Billing Postal Code")}>{data?.billingPostalCode ? data?.billingPostalCode : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Shipping Postal Code</Text>
                                {
                                    editableField === "shippingPostalCode" ?
                                        <>
                                            <Input
                                                name="shippingPostalCode"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.shippingPostalCode}
                                                borderColor={formik?.errors?.shippingPostalCode && formik?.touched?.shippingPostalCode ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.shippingPostalCode && formik?.touched.shippingPostalCode && formik?.errors.shippingPostalCode}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("shippingPostalCode", data?.shippingPostalCode, "Shipping Postal Code")}>{data?.shippingPostalCode ? data?.shippingPostalCode : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Billing Country</Text>
                                {
                                    editableField === "billingCountry" ?
                                        <>
                                            <Input
                                                name="billingCountry"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.billingCountry}
                                                borderColor={formik?.errors?.billingCountry && formik?.touched?.billingCountry ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.billingCountry && formik?.touched.billingCountry && formik?.errors.billingCountry}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("billingCountry", data?.billingCountry, "Billing Country")}>{data?.billingCountry ? data?.billingCountry : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Shipping Country</Text>
                                {
                                    editableField === "shippingCountry" ?
                                        <>
                                            <Input
                                                name="shippingCountry"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.shippingCountry}
                                                borderColor={formik?.errors?.shippingCountry && formik?.touched?.shippingCountry ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.shippingCountry && formik?.touched.shippingCountry && formik?.errors.shippingCountry}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("shippingCountry", data?.shippingCountry, "Shipping Country")}>{data?.shippingCountry ? data?.shippingCountry : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Total</Text>
                                <Text>{`${data?.currency}${data?.total ? data?.total : '0'}`}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Discount</Text>
                                <Text >{`${data?.currency}${data?.discount || "0"}`}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Subtotal</Text>
                                <Text>{`${data?.currency}${data?.subtotal ? data?.subtotal : '0'}`}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Shipping</Text>
                                <>{`${data?.currency}${data?.shipping ? data?.shipping : '0'}`}</>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Shipping Tax</Text>
                                <Text >{`${data?.currency}${data?.shippingTax ? data?.shippingTax : '0'}`}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Tax</Text>
                                <Text >{`${data?.currency}${data?.tax ? data?.tax : '0'}`}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Grand Total</Text>
                                <Text>{`${data?.currency}${data?.grandTotal ? data?.grandTotal : '0'}`}</Text>
                            </GridItem>
                        </Grid>
                    </Card>
                </GridItem>

            </Grid>
            {quotesAccess?.view && <GridItem colSpan={{ base: 12, md: 6 }}>
                <Card overflow={'scroll'}>
                    <CommonCheckTable
                        title={"Quotes"}
                        isLoding={isLoding}
                        columnData={quotesColumns ?? []}
                        allData={quotesData ?? []}
                        tableData={quotesData ?? []}
                        AdvanceSearch={false}
                        tableCustomFields={[]}
                        checkBox={false}
                        deleteMany={true}
                        ManageGrid={false}
                        access={false}
                    />
                </Card>
            </GridItem>}
            {
                (invoiceAccess?.update || invoiceAccess?.delete || user?.role === 'superAdmin') && <Card mt={3}>
                    <Grid templateColumns="repeat(6, 1fr)" gap={1}>
                        <GridItem colStart={6} >
                            <Flex justifyContent={"right"}>
                                {(invoiceAccess?.update || user?.role === 'superAdmin') && <Button size="sm" onClick={() => { setEdit(true); setType("edit") }} leftIcon={<EditIcon />} mr={2.5} variant="outline" colorScheme="green">Edit</Button>}
                                {(invoiceAccess?.delete || user?.role === 'superAdmin') && <Button size="sm" style={{ background: 'red.800' }} onClick={() => setDeleteManyModel(true)} leftIcon={<DeleteIcon />} colorScheme="red" >Delete</Button>}
                            </Flex>
                        </GridItem>
                    </Grid>
                </Card>
            }
            <AddEdit isOpen={edit} size="lg" onClose={() => setEdit(false)} viewClose={onClose} selectedId={id?.event ? id?.event?._def?.extendedProps?._id : id} type={type} />
            <CommonDeleteModel isOpen={deleteManyModel} onClose={() => setDeleteManyModel(false)} type='Account' handleDeleteData={handleDeleteAccount} ids={[id]} />
        </div >
    )
}

export default View

================
File: Client/src/views/admin/lead/components/ImportModal.js
================
import { Button, Grid, GridItem, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text } from '@chakra-ui/react'
import Spinner from 'components/spinner/Spinner'
import { useFormik } from 'formik'
import { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import CommonFileUpload from 'components/commonFileUpload'

const ImportModal = (props) => {
    const { onClose, isOpen, text, customFields } = props
    const [isLoding, setIsLoding] = useState(false)
    const navigate = useNavigate();

    const initialValues = {
        lead: ''
    }

    const formik = useFormik({
        initialValues: initialValues,
        onSubmit: (values, { resetForm }) => {
            AddData()
            resetForm();
        },
    });
    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik

    const AddData = async () => {
        try {
            setIsLoding(true)
            resetForm()

            if (values.lead) {
                onClose();
                navigate('/leadImport', { state: { fileData: values.lead, customFields: customFields } });
            }
        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };

    return (
        <Modal onClose={onClose} isOpen={isOpen} isCentered>
            <ModalOverlay />
            <ModalContent>
                <ModalHeader>Import Leads</ModalHeader>
                <ModalCloseButton />
                <ModalBody>
                    <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                        <GridItem colSpan={{ base: 12 }}>
                            <CommonFileUpload count={values.lead.length} onFileSelect={(file) => setFieldValue('lead', file)} text={text} />
                            <Text mb='10px' color={'red'}> {errors.lead && touched.lead && <>Please Select {text}</>}</Text>
                        </GridItem>
                    </Grid>
                </ModalBody>
                <ModalFooter>
                    <Button variant='brand' size="sm" onClick={handleSubmit} disabled={isLoding ? true : false} >{isLoding ? <Spinner /> : 'Save'}</Button>
                    <Button variant="outline"
                        colorScheme="red" sx={{
                            marginLeft: 2,
                            textTransform: "capitalize",
                        }} size="sm" onClick={() => {
                            onClose()
                            formik.resetForm()
                        }}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    )
}

export default ImportModal

================
File: Client/src/views/admin/lead/components/LeadImport.js
================
import React, { useState, useEffect } from 'react'
import { useLocation, useNavigate } from 'react-router-dom';
import Papa from 'papaparse';
import {
    Flex,
    useColorModeValue,
    Select,
    Button,
    Text,
    Grid,
    GridItem
} from "@chakra-ui/react";
import { useFormik } from "formik";
import { postApi } from 'services/api';
import { toast } from 'react-toastify';
import moment from 'moment';
import ExcelJS from 'exceljs';
import Card from 'components/card/Card';

function LeadImport() {

    const location = useLocation();
    const { fileData, customFields } = location.state || {};
    const [importedFileFields, setImportedFileFields] = useState([]);
    const [importedFileData, setImportedFileData] = useState([]);
    const [isLoding, setIsLoding] = useState(false);
    const navigate = useNavigate();
    const [filterLead, setFilterLead] = useState([]);

    const columns = [
        { Header: 'Fields In Crm', accessor: 'crmFields' },
        { Header: 'Fields In File', accessor: 'fileFields' },
    ];

    const initialFieldValues = Object.fromEntries(
        (customFields || []).map(field => [field?.name, ''])
    );
    const initialValues = {
        ...initialFieldValues
    };

    const fieldsInCrm = [
        ...customFields?.map((field) => ({ Header: field?.label, accessor: field?.name, type: field?.type, formikType: field?.validations?.find(obj => obj.hasOwnProperty('formikType')) }))
    ];

    const formik = useFormik({
        initialValues: initialValues,
        onSubmit: (values, { resetForm }) => {

            const leadsData = importedFileData?.map((item, ind) => {
                const lead = {
                    createdDate: new Date(),
                    deleted: item[values.deleted || "deleted"] || false,
                    createBy: JSON.parse(localStorage.getItem('user'))._id,
                };

                fieldsInCrm?.forEach(field => {
                    const selectedField = values[field?.accessor];
                    const fieldValue = item[selectedField] || '';

                    if (field?.type?.toLowerCase() === "date") {
                        lead[field?.accessor] = moment(fieldValue).isValid() ? fieldValue : '';
                    } else if (field?.type?.toLowerCase() === "number" && ['positive', 'negative'].includes(field?.formikType?.toLowerCase())) {
                        lead[field?.accessor] = parseFloat(fieldValue) || '';
                    } else if (field?.type?.toLowerCase() === "number") {
                        lead[field?.accessor] = parseInt(fieldValue, 10) || '';
                    } else {
                        lead[field?.accessor] = fieldValue;
                    }
                });

                return lead;
            });

            AddData(leadsData);
        }
    })

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik

    const AddData = async (leads) => {
        try {
            setIsLoding(true);
            let response = await postApi('api/lead/addMany', leads)
            if (response.status === 200) {
                toast.success(`Leads imported successfully`)
                resetForm();
                navigate('/lead');
            }
        } catch (e) {
            console.error(e);
            toast.error(`Leads import failed`)
            resetForm();
            navigate('/lead');
        }
        finally {
            setIsLoding(false)
        }
    };

    const parseFileData = async (file) => {
        const reader = new FileReader();
        const extension = file.name.split('.').pop().toLowerCase();

        reader.onload = async ({ target }) => {

            if (extension === 'csv') {
                const csv = Papa.parse(target.result, {
                    header: true,
                });
                const parsedData = csv?.data;

                if (parsedData && parsedData.length > 0) {
                    setImportedFileData(parsedData);
                    const fileHeadingFields = Object.keys(parsedData[0]);
                    setImportedFileFields(fileHeadingFields);
                } else {
                    toast.error("Empty or invalid CSV file");
                    navigate("/lead");
                }

            } else if (extension === 'xlsx') {
                const data = new Uint8Array(target.result);
                const workbook = new ExcelJS.Workbook();

                await workbook.xlsx.load(data);

                const worksheet = workbook.getWorksheet(1);
                const jsonData = [];

                // Iterate over rows and cells
                worksheet.eachRow({ includeEmpty: true }, (row, rowNumber) => {
                    const rowData = {};
                    row.eachCell({ includeEmpty: true }, (cell, colNumber) => {
                        rowData[worksheet.getCell(1, colNumber).value] = cell.value;
                    });
                    jsonData.push(rowData);
                });
                jsonData?.splice(0, 1);
                setImportedFileData(jsonData);

                if (jsonData && jsonData.length > 0) {
                    const fileHeadingFields = Object.keys(jsonData[0]);
                    setImportedFileFields(fileHeadingFields);
                } else {
                    toast.error("Empty or invalid XLSX file");
                    navigate("/lead");
                }
            }
        };

        if (extension === 'csv') {
            reader.readAsText(file);
        } else if (extension === 'xlsx') {
            const blob = new Blob([file]);
            reader.readAsArrayBuffer(blob);
        }
    };

    useEffect(() => {
        if (fileData && fileData.length > 0) {
            const firstFile = fileData[0];
            parseFileData(firstFile);
        }
    }, [fileData]);

    useEffect(() => {
        const filterLeadData = importedFileFields?.filter(field => {
            const result = fieldsInCrm?.find(data => field === data?.accessor || field === data?.Header);
            if (result) {
                setFieldValue(result?.accessor, field);
                return true;
            }
            return false;
        });
        setFilterLead(filterLeadData);
    }, [importedFileFields]);

    return (
        <>
            <Card overflowY={"auto"} className="importTable">
                <Text color={"secondaryGray.900"}
                    fontSize="22px"
                    fontWeight="700"
                    mb='20px'
                >Import Leads</Text>
                <Grid templateColumns="repeat(12, 1fr)" mb={3} pb={2} gap={1} borderBottom={'1px solid #e2e8f0'}>
                    {
                        columns.map((column, index) => (
                            <GridItem key={index} colSpan={{ base: 6 }} fontWeight={'600'} fontSize={{ sm: "14px", lg: "14px" }} color="secondaryGray.900" style={{ textTransform: "uppercase" }}>
                                {column.Header}
                            </GridItem>
                        ))
                    }
                </Grid>
                <Grid templateColumns="repeat(12, 1fr)" mb={3} gap={1} overflowY={'auto'}>
                    {
                        fieldsInCrm?.map((item, index) => (
                            <>
                                <GridItem colSpan={{ base: 6 }} key={item.id} mt='10px'>
                                    {item.Header}
                                </GridItem>
                                <GridItem colSpan={{ base: 4 }}>
                                    <Select
                                        variant="flushed"
                                        fontWeight='500'
                                        isSearchable
                                        value={values[item.accessor]}
                                        name={item.accessor}
                                        onChange={handleChange}
                                    >
                                        <option value=''> {filterLead ? filterLead.find((data) => (item.Header === data || item.accessor === data) && data) ? filterLead.find((data) => (item.Header === data || item.accessor === data) && data) : 'Select Field In File' : 'Select Field In File'}</option>
                                        {
                                            importedFileFields?.map(field => (
                                                <option value={field} key={field}>{field}</option>
                                            ))
                                        }
                                    </Select>
                                </GridItem>
                            </>
                        ))
                    }
                </Grid>
                <Flex Flex justifyContent={'end'} mt='5' >
                    <Button size="sm" onClick={() => handleSubmit()} variant="brand">Save</Button>
                </Flex>
            </Card>
        </>
    )
}

export default LeadImport

================
File: Client/src/views/admin/lead/Add.js
================
import { CloseIcon } from '@chakra-ui/icons';
import { Button, Drawer, DrawerBody, DrawerContent, DrawerFooter, DrawerHeader, DrawerOverlay, IconButton } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import { useFormik } from 'formik';
import { useState } from 'react';
import { postApi } from 'services/api';
import { generateValidationSchema } from 'utils';
import CustomForm from 'utils/customForm';
import * as yup from 'yup'

const Add = (props) => {
    const [isLoding, setIsLoding] = useState(false)


    const initialFieldValues = Object.fromEntries(
        (props?.leadData?.fields || []).map(field => [field?.name, ''])
    );
    const initialValues = {
        ...initialFieldValues,
        createBy: JSON.parse(localStorage.getItem('user'))._id
    };

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: yup.object().shape(generateValidationSchema(props?.leadData?.fields)),
        onSubmit: (values, { resetForm }) => {
            AddData();
        },
    });

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, } = formik

    const AddData = async () => {
        try {
            setIsLoding(true)
            let response = await postApi('api/form/add', { ...values, moduleId: props?.leadData?._id })
            if (response.status === 200) {
                props.onClose();
                formik.resetForm();
                props.setAction((pre) => !pre)
            }
        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };

    const handleCancel = () => {
        formik.resetForm();
        props.onClose()
    }

    return (
        <div>
            <Drawer isOpen={props.isOpen} size={props.size}>
                <DrawerOverlay />
                <DrawerContent>
                    <DrawerHeader alignItems={"center"} justifyContent='space-between' display='flex'  >
                        Add Lead
                        <IconButton onClick={props.onClose} icon={<CloseIcon />} />
                    </DrawerHeader>
                    <DrawerBody>
                        <CustomForm moduleData={props.leadData} values={values} setFieldValue={setFieldValue} handleChange={handleChange} handleBlur={handleBlur} errors={errors} touched={touched} />
                    </DrawerBody>
                    <DrawerFooter>
                        <Button sx={{ textTransform: "capitalize" }} size="sm" disabled={isLoding ? true : false} variant="brand" type="submit" onClick={handleSubmit}                        >
                            {isLoding ? <Spinner /> : 'Save'}
                        </Button>
                        <Button
                            variant="outline"
                            colorScheme='red' size="sm"
                            sx={{
                                marginLeft: 2,
                                textTransform: "capitalize",
                            }}
                            onClick={handleCancel}
                        >
                            Close
                        </Button>
                    </DrawerFooter>
                </DrawerContent>
            </Drawer>
        </div>
    )
}

export default Add

================
File: Client/src/views/admin/lead/Edit.js
================
import { CloseIcon } from '@chakra-ui/icons';
import { Button, Drawer, DrawerBody, DrawerContent, DrawerFooter, DrawerHeader, DrawerOverlay, Flex, IconButton } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import { useFormik } from 'formik';
import { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { putApi } from 'services/api';
import { getApi } from 'services/api';
import { generateValidationSchema } from '../../../utils';
import CustomForm from '../../../utils/customForm';
import * as yup from 'yup'

const Edit = (props) => {
    const { data } = props;
    const [isLoding, setIsLoding] = useState(false);
    const initialFieldValues = Object.fromEntries(
        (props?.leadData?.fields || []).map(field => [field?.name, ''])
    );

    const [initialValues, setInitialValues] = useState({
        ...initialFieldValues,
        createBy: JSON.parse(localStorage.getItem('user'))._id
    })
    const param = useParams()

    const formik = useFormik({
        initialValues: initialValues,
        enableReinitialize: true,
        validationSchema: yup.object().shape(generateValidationSchema(props?.leadData?.fields)),
        onSubmit: (values, { resetForm }) => {
            EditData();
        },
    });

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, } = formik

    const EditData = async () => {
        try {
            setIsLoding(true)
            let response = await putApi(`api/form/edit/${props?.selectedId || param.id}`, { ...values, moduleId: props.moduleId })
            if (response.status === 200) {
                props.onClose();
                props.setAction((pre) => !pre)
            }
        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };

    const handleClose = () => {
        props.onClose(false)
        props.setSelectedId && props?.setSelectedId()
        formik.resetForm();
    }

    let response
    const fetchData = async () => {
        if (data) {
            setInitialValues((prev) => ({ ...prev, ...data }))
        } else if (props?.selectedId) {
            // } else if (props?.selectedId || param.id) {
            try {
                setIsLoding(true)
                response = await getApi('api/lead/view/', props?.selectedId)
                let editData = response?.data?.lead;
                setInitialValues((prev) => ({ ...prev, ...editData }));
            } catch (e) {
                console.error(e)
            } finally {
                setIsLoding(false)
            }
        }
    }

    useEffect(() => {
        fetchData()
    }, [props?.selectedId, data])

    return (
        <div>
            <Drawer isOpen={props.isOpen} size={props.size}>
                <DrawerOverlay />
                <DrawerContent>
                    <DrawerHeader alignItems={"center"} justifyContent='space-between' display='flex' >
                        Edit Lead
                        <IconButton onClick={handleClose} icon={<CloseIcon />} />
                    </DrawerHeader>
                    <DrawerBody>

                        {isLoding ?
                            <Flex justifyContent={'center'} alignItems={'center'} width="100%" >
                                <Spinner />
                            </Flex>
                            :
                            <CustomForm moduleData={props.leadData} values={values} setFieldValue={setFieldValue} handleChange={handleChange} handleBlur={handleBlur} errors={errors} touched={touched} />

                        }
                    </DrawerBody>

                    <DrawerFooter>
                        <Button
                            sx={{ textTransform: "capitalize" }}
                            variant="brand" size="sm"
                            type="submit"
                            disabled={isLoding ? true : false}
                            onClick={handleSubmit}
                        >
                            {isLoding ? <Spinner /> : 'Update'}
                        </Button>
                        <Button
                            variant="outline"
                            colorScheme='red' size="sm"
                            sx={{
                                marginLeft: 2,
                                textTransform: "capitalize",
                            }}
                            onClick={handleClose}
                        >
                            Close
                        </Button>
                    </DrawerFooter>

                </DrawerContent>
            </Drawer>
        </div>
    )
}

export default Edit

================
File: Client/src/views/admin/lead/index.js
================
import { useEffect, useState } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { HasAccess } from "../../../redux/accessUtils";
import {
    Grid,
    GridItem,
    Text,
    Menu,
    MenuButton,
    MenuItem,
    MenuList,
    useDisclosure,
    Select,
} from "@chakra-ui/react";
import {
    DeleteIcon,
    ViewIcon,
    EditIcon,
    EmailIcon,
    PhoneIcon,
} from "@chakra-ui/icons";
import { CiMenuKebab } from "react-icons/ci";
import { getApi } from "services/api";
import CommonCheckTable from "../../../components/reactTable/checktable";
import Add from "./Add";
import Edit from "./Edit";
import AddEmailHistory from "views/admin/emailHistory/components/AddEmail";
import AddPhoneCall from "views/admin/phoneCall/components/AddPhoneCall";
import ImportModal from "./components/ImportModal";
import { putApi } from "services/api";
import CommonDeleteModel from "components/commonDeleteModel";
import { deleteManyApi } from "services/api";
import {
    getSearchData,
    setGetTagValues,
} from "../../../redux/slices/advanceSearchSlice";
import { useDispatch, useSelector } from "react-redux";
import { fetchLeadData } from "../../../redux/slices/leadSlice";
import { fetchLeadCustomFiled } from "../../../redux/slices/leadCustomFiledSlice";
import { toast } from "react-toastify";

const Index = () => {
    const title = "Leads";
    const size = "lg";
    const user = JSON.parse(localStorage.getItem("user"));
    const navigate = useNavigate();
    const location = useLocation();
    const dispatch = useDispatch();

    const [permission, emailAccess, callAccess] = HasAccess([
        "Leads",
        "Emails",
        "Calls",
    ]);
    const [isLoding, setIsLoding] = useState(false);
    const [searchDisplay, setSearchDisplay] = useState(false);
    // const [data, setData] = useState([]);
    const [tableColumns, setTableColumns] = useState([]);
    const [columns, setColumns] = useState([]);
    const [dataColumn, setDataColumn] = useState([]);
    const [selectedColumns, setSelectedColumns] = useState([]);
    const [action, setAction] = useState(false);
    const { isOpen, onOpen, onClose } = useDisclosure();
    const [leadData, setLeadData] = useState([]);
    const [edit, setEdit] = useState(false);
    const [deleteModel, setDelete] = useState(false);
    const [addPhoneCall, setAddPhoneCall] = useState(false);
    const [callSelectedId, setCallSelectedId] = useState();
    const [addEmailHistory, setAddEmailHistory] = useState(false);
    const [selectedId, setSelectedId] = useState();
    const [selectedValues, setSelectedValues] = useState([]);
    const [isImport, setIsImport] = useState(false);
    const [emailRec, setEmailRec] = useState("");
    const [phoneRec, setPhoneRec] = useState({});

    const data = useSelector((state) => state?.leadData?.data);
    const searchedDataOut = useSelector(
        (state) => state?.advanceSearchData?.searchResult
    );
    const payload = {
        leadStatus: location?.state,
    };

    const fetchData = async () => {
        setIsLoding(true);
        let result = await getApi(
            user.role === "superAdmin"
                ? "api/lead/"
                : `api/lead/?createBy=${user._id}`
        );
        // setData(result?.data);
        setIsLoding(false);
    };

    const handleOpenEmail = (id, dataLead) => {
        if (id) {
            setEmailRec(dataLead?.leadEmail);
            setAddEmailHistory(true);
        }
    };

    const setStatusData = async (cell, e) => {
        try {
            setIsLoding(true);
            let response = await putApi(
                `api/lead/changeStatus/${cell.original._id}`,
                { leadStatus: e.target.value }
            );
            if (response.status === 200) {
                setAction((pre) => !pre);
            }
        } catch (e) {
            console.log(e);
        } finally {
            setIsLoding(false);
        }
    };

    const changeStatus = (cell) => {
        switch (cell.original.leadStatus) {
            case "pending":
                return "pending";
            case "active":
                return "completed";
            case "sold":
                return "onHold";
            default:
                return "completed";
        }
    };

    const fetchCustomDataFields = async () => {
        setIsLoding(true);

        try {
            const result = await dispatch(fetchLeadCustomFiled());
            if (result.payload.status === 200) {
                setLeadData(result?.payload?.data);
            } else {
                toast.error("Failed to fetch data", "error");
            }

            const actionHeader = {
                Header: "Action",
                accessor: "action",
                isSortable: false,
                center: true,
                cell: ({ row, i }) => (
                    <Text fontSize="md" fontWeight="900" textAlign={"center"}>
                        <Menu isLazy>
                            <MenuButton>
                                <CiMenuKebab />
                            </MenuButton>
                            <MenuList
                                minW={"fit-content"}
                                transform={"translate(1520px, 173px);"}
                            >
                                {permission?.update && (
                                    <MenuItem
                                        py={2.5}
                                        icon={<EditIcon fontSize={15} mb={1} />}
                                        onClick={() => {
                                            setEdit(true);
                                            setSelectedId(row?.values?._id);
                                        }}
                                    >
                                        Edit
                                    </MenuItem>
                                )}
                                {callAccess?.create && (
                                    <MenuItem
                                        py={2.5}
                                        width={"165px"}
                                        onClick={() => {
                                            setPhoneRec(row?.original);
                                            setAddPhoneCall(true);
                                            setCallSelectedId(row?.values?._id);
                                        }}
                                        icon={<PhoneIcon fontSize={15} mb={1} />}
                                    >
                                        Create Call
                                    </MenuItem>
                                )}
                                {emailAccess?.create && (
                                    <MenuItem
                                        py={2.5}
                                        width={"165px"}
                                        onClick={() => {
                                            handleOpenEmail(row?.values?._id, row?.original);
                                            setSelectedId(row?.values?._id);
                                        }}
                                        icon={<EmailIcon fontSize={15} mb={1} />}
                                    >
                                        EmailSend{" "}
                                    </MenuItem>
                                )}
                                {permission?.view && (
                                    <MenuItem
                                        py={2.5}
                                        color={"green"}
                                        icon={<ViewIcon mb={1} fontSize={15} />}
                                        onClick={() => {
                                            navigate(`/leadView/${row?.values?._id}`, {
                                                state: { leadList: data },
                                            });
                                        }}
                                    >
                                        View
                                    </MenuItem>
                                )}
                                {permission?.delete && (
                                    <MenuItem
                                        py={2.5}
                                        color={"red"}
                                        icon={<DeleteIcon fontSize={15} mb={1} />}
                                        onClick={() => {
                                            setDelete(true);
                                            setSelectedValues([row?.values?._id]);
                                        }}
                                    >
                                        Delete
                                    </MenuItem>
                                )}
                            </MenuList>
                        </Menu>
                    </Text>
                ),
            };
            const tempTableColumns = [
                { Header: "#", accessor: "_id", isSortable: false, width: 10 },
                {
                    Header: "Status",
                    accessor: "leadStatus",
                    isSortable: true,
                    center: true,
                    cell: ({ row }) => (
                        <div className="selectOpt">
                            <Select
                                defaultValue={"active"}
                                className={changeStatus(row)}
                                onChange={(e) => setStatusData(row, e)}
                                height={7}
                                width={130}
                                value={row.original.leadStatus}
                                style={{ fontSize: "14px" }}
                            >
                                <option value="active">Active</option>
                                <option value="sold">Sold</option>
                                <option value="pending">Pending</option>
                            </Select>
                        </div>
                    ),
                },
                ...(result?.payload?.data && result.payload.data.length > 0
                    ? result.payload.data[0]?.fields
                        ?.filter((field) => field?.isTableField === true && field?.isView)
                        ?.map(
                            (field) =>
                                field?.name !== "leadStatus" && {
                                    Header: field?.label,
                                    accessor: field?.name,
                                    cell: (cell) => (
                                        <div className="selectOpt">
                                            <Text
                                                onClick={() => {
                                                    navigate(`/leadView/${cell?.row?.original?._id}`);
                                                }}
                                                me="10px"
                                                sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' }, cursor: 'pointer' }}
                                                color='brand.600'
                                                fontSize="sm"
                                                fontWeight="700"
                                            >
                                                {cell?.value || "-"}
                                            </Text>
                                        </div>
                                    ),
                                }
                        ) || []
                    : []),
                ...(result?.payload?.data && result.payload.data.length > 0
                    ? result.payload.data[0]?.fields?.filter((field) => field?.isTableField === true && !field?.isView && field?.name !== "leadStatus")
                        ?.map((field) => ({
                            Header: field?.label,
                            accessor: field?.name,
                        })
                        ) || []
                    : []),
                ...(permission?.update || permission?.view || permission?.delete
                    ? [actionHeader]
                    : []),
            ];

            setColumns(tempTableColumns);
            setIsLoding(false);
        } catch (error) {
            console.error("Error fetching custom data fields:", error);
            toast.error("Failed to fetch data ", "error");
        }
    };

    const handleDeleteLead = async (ids) => {
        try {
            setIsLoding(true);
            let response = await deleteManyApi("api/lead/deleteMany", ids);
            if (response.status === 200) {
                setSelectedValues([]);
                setDelete(false);
                setAction((pre) => !pre);
            }
        } catch (error) {
            console.log(error);
        } finally {
            setIsLoding(false);
        }
    };

    useEffect(() => {
        if (window.location.pathname === "/lead") {
            dispatch(fetchLeadData());
        }
        fetchCustomDataFields();
    }, [action]);

    useEffect(() => {
        setDataColumn(
            tableColumns?.filter((item) =>
                selectedColumns?.find((colum) => colum?.Header === item.Header)
            )
        );
    }, [tableColumns, selectedColumns]);

    useEffect(() => {
        if (location?.state) {
            setSearchDisplay(true);
            dispatch(
                getSearchData({ values: payload, allData: data, type: "Leads" })
            );
            const getValue = [
                {
                    name: ["leadStatus"],
                    value: location?.state,
                },
            ];
            dispatch(setGetTagValues(getValue.filter((item) => item.value)));
        }
    }, [data, location?.state]);

    return (
        <div>
            <Grid templateColumns="repeat(6, 1fr)" mb={3} gap={4}>
                {!isLoding && (
                    <GridItem colSpan={6}>
                        <CommonCheckTable
                            title={title}
                            isLoding={isLoding}
                            searchDisplay={searchDisplay}
                            setSearchDisplay={setSearchDisplay}
                            columnData={columns ?? []}
                            // dataColumn={dataColumn ?? []}
                            allData={data ?? []}
                            tableData={searchDisplay ? searchedDataOut : data}
                            tableCustomFields={
                                leadData?.[0]?.fields?.filter(
                                    (field) => field?.isTableField === true
                                ) || []
                            }
                            access={permission}
                            action={action}
                            setAction={setAction}
                            // selectedColumns={selectedColumns}
                            // setSelectedColumns={setSelectedColumns}
                            isOpen={isOpen}
                            onClose={onclose}
                            onOpen={onOpen}
                            selectedValues={selectedValues}
                            setSelectedValues={setSelectedValues}
                            setDelete={setDelete}
                            setIsImport={setIsImport}
                        />
                    </GridItem>
                )}
            </Grid>

            {isOpen && (
                <Add
                    isOpen={isOpen}
                    size={size}
                    leadData={leadData[0]}
                    onClose={onClose}
                    setAction={setAction}
                    action={action}
                />
            )}
            {edit && (
                <Edit
                    isOpen={edit}
                    size={size}
                    leadData={leadData[0]}
                    selectedId={selectedId}
                    setSelectedId={setSelectedId}
                    onClose={setEdit}
                    setAction={setAction}
                    moduleId={leadData?.[0]?._id}
                />
            )}
            {deleteModel && (
                <CommonDeleteModel
                    isOpen={deleteModel}
                    onClose={() => setDelete(false)}
                    type="Leads"
                    handleDeleteData={handleDeleteLead}
                    ids={selectedValues}
                />
            )}
            {addEmailHistory && (
                <AddEmailHistory
                    fetchData={fetchData}
                    isOpen={addEmailHistory}
                    onClose={setAddEmailHistory}
                    lead={true}
                    id={selectedId}
                    leadEmail={emailRec}
                />
            )}
            {addPhoneCall && (
                <AddPhoneCall
                    fetchData={fetchData}
                    isOpen={addPhoneCall}
                    onClose={setAddPhoneCall}
                    lead={true}
                    id={callSelectedId}
                    LData={phoneRec}
                />
            )}
            {isImport && (
                <ImportModal
                    text="Lead file"
                    isOpen={isImport}
                    onClose={setIsImport}
                    customFields={leadData?.[0]?.fields || []}
                />
            )}
        </div>
    );
};

export default Index;

================
File: Client/src/views/admin/lead/View.js
================
import { AddIcon, ChevronDownIcon, DeleteIcon, EditIcon } from "@chakra-ui/icons";
import {
    Button, Flex, Grid, GridItem, Heading, Menu, MenuButton, MenuDivider, MenuItem, MenuList,
    Tab,
    TabList,
    TabPanel,
    TabPanels,
    Tabs,
    Text,
    VStack,
    useColorModeValue,
    useDisclosure,
} from "@chakra-ui/react";
import FolderTreeView from 'components/FolderTreeView/folderTreeView';
import Card from "components/card/Card";
import { HSeparator } from "components/separator/Separator";
import Spinner from "components/spinner/Spinner";
import { constant } from "constant";
import { useEffect, useState } from "react";
import { IoIosArrowBack } from "react-icons/io";
import { Link, useNavigate, useParams, useLocation } from "react-router-dom";
import { toast } from "react-toastify";
import { getApi } from "services/api";
import PhoneCall from "../contact/components/phonCall";
import AddEmailHistory from "../emailHistory/components/AddEmail";
import AddMeeting from "../meeting/components/Addmeeting";
import AddPhoneCall from "../phoneCall/components/AddPhoneCall";
import Add from "./Add";
import Edit from "./Edit";
import { HasAccess } from "../../../redux/accessUtils";
import DataNotFound from "components/notFoundData";
import CustomView from "utils/customView";
import AddDocumentModal from "utils/addDocumentModal";
import CommonDeleteModel from "components/commonDeleteModel";
import { deleteApi } from "services/api";
import CommonCheckTable from "components/reactTable/checktable";
import moment from 'moment';
import AddEdit from '../task/components/AddEdit'
import { useDispatch, useSelector } from "react-redux";
import { fetchLeadCustomFiled } from "../../../redux/slices/leadCustomFiledSlice";
import { FaFilePdf } from "react-icons/fa";
import html2pdf from "html2pdf.js";

const View = () => {
    const param = useParams()
    const user = JSON.parse(localStorage.getItem("user"));

    const textColor = useColorModeValue("gray.500", "white");

    const [data, setData] = useState()
    const [allData, setAllData] = useState([])
    const { isOpen, onOpen, onClose } = useDisclosure()
    const [edit, setEdit] = useState(false);
    const [deleteModel, setDelete] = useState(false);
    const [isLoding, setIsLoding] = useState(false)
    const [addMeeting, setMeeting] = useState(false);
    const [showEmail, setShowEmail] = useState(false);
    const [showCall, setShowCall] = useState(false);
    const [showTasks, setShowTasks] = useState(false);
    const [showMeetings, setShowMeetings] = useState(false);
    const [addDocument, setAddDocument] = useState(false);
    const [action, setAction] = useState(false)
    // const [leadData, setLeadData] = useState([])
    const [selectedTab, setSelectedTab] = useState(0);
    const [taskModel, setTaskModel] = useState(false);

    const navigate = useNavigate();
    const dispatch = useDispatch();
    const size = "lg";

    const [addEmailHistory, setAddEmailHistory] = useState(false);
    const [addPhoneCall, setAddPhoneCall] = useState(false);

    const leadData = useSelector((state) => state?.leadCustomFiled?.data.data)

    const [permission, taskPermission, meetingPermission, callAccess, emailAccess, taskAccess, meetingAccess] = HasAccess(['Leads', 'Tasks', 'Meetings', 'Calls', 'Emails', 'Tasks', 'Meetings']);


    const columnsDataColumns = [
        { Header: "sender", accessor: "senderName", },
        {
            Header: "recipient", accessor: "createByName", cell: (cell) => (
                <Link to={`/Email/${cell?.row?.original?._id}`}>
                    <Text
                        me="10px"
                        sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}
                        color='brand.600'
                        fontSize="sm"
                        fontWeight="700"
                    >
                        {cell?.value || ' - '}
                    </Text></Link>)
        },
        {
            Header: "time stamp", accessor: "timestamp",
            cell: (cell) => (
                <div className="selectOpt">
                    <Text color={textColor} fontSize='sm' fontWeight='700'>
                        {moment(cell?.value).fromNow()}
                    </Text>
                </div>
            )
        },
        {
            Header: "Created", accessor: "createBy",
            cell: (cell) => (
                <div className="selectOpt">
                    <Text color={textColor} fontSize='sm' fontWeight='700'>
                        {moment(cell?.row?.values.timestamp).format('h:mma (DD/MM)')}
                    </Text>
                </div>
            )
        },
    ];
    const callColumns = [
        { Header: "sender", accessor: "senderName", },
        {
            Header: "recipient", accessor: "createByName", cell: (cell) => (
                <Link to={`/phone-call/${cell?.row?.original?._id}`}>
                    <Text
                        me="10px"
                        sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}
                        color='brand.600'
                        fontSize="sm"
                        fontWeight="700"
                    >
                        {cell?.value || ' - '}
                    </Text></Link>)
        },
        {
            Header: "time stamp", accessor: "timestamp",
            cell: (cell) => (
                <div className="selectOpt">
                    <Text color={textColor} fontSize='sm' fontWeight='700'>
                        {moment(cell?.value).fromNow()}
                    </Text>
                </div>
            )
        },
        {
            Header: "Created", accessor: "createBy",
            cell: (cell) => (
                <div className="selectOpt">
                    <Text color={textColor} fontSize='sm' fontWeight='700'>
                        {moment(cell?.row?.values.timestamp).format('h:mma (DD/MM)')}
                    </Text>
                </div>
            )
        },
    ];
    const MeetingColumns = [
        {
            Header: 'Agenda', accessor: 'agenda', cell: (cell) => (
                <Link to={`/metting/${cell?.row?.original?._id}`}>
                    <Text
                        me="10px"
                        sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}
                        color='brand.600'
                        fontSize="sm"
                        fontWeight="700"
                    >
                        {cell?.value || ' - '}
                    </Text></Link>)
        },
        { Header: "date Time", accessor: "dateTime", },
        {
            Header: "times tamp", accessor: "timestamp",
            cell: (cell) => (
                <div className="selectOpt">
                    <Text color={textColor} fontSize='sm' fontWeight='700'>
                        {moment(cell?.value).fromNow()}
                    </Text>
                </div>
            )
        },
        { Header: "create By", accessor: "createdByName", },
    ];
    const taskColumns = [
        {
            Header: 'Title', accessor: 'title', type: 'text', formikType: '', cell: (cell) => (
                <div className="selectOpt">
                    <Text
                        onClick={() => navigate(`/view/${cell?.row?.original._id}`)}
                        me="10px"
                        sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' }, cursor: 'pointer' }}
                        color='brand.600'
                        fontSize="sm"
                        fontWeight="700"
                    >
                        {cell?.value}
                    </Text>
                </div>
            )
        },
        { Header: "Category", accessor: "category", },
        { Header: "Assign To", accessor: "assignToName", },
        { Header: "Start Date", accessor: "start", },
        { Header: "End Date", accessor: "end", },
    ];


    const handleTabChange = (index) => {
        setSelectedTab(index);
    };
    const generatePDF = () => {
        const element = document.getElementById("reports");
        if (element) {
            element.style.display = 'block';
            element.style.width = '100%'; // Adjust width for mobile
            element.style.height = 'auto';
            // setTimeout(() => {
            html2pdf()
                .from(element)
                .set({
                    margin: [0, 0, 0, 0],
                    filename: `Lead_Details_${moment().format("DD-MM-YYYY")}.pdf`,
                    image: { type: "jpeg", quality: 0.98 },
                    html2canvas: { scale: 2, useCORS: true, allowTaint: true },
                    jsPDF: { unit: "in", format: "letter", orientation: "portrait" },
                })
                .save().then(() => {
                    element.style.display = '';
                })
            // }, 500);
        } else {
            console.error("Element with ID 'reports' not found.");
        }
    };

    const download = async (data) => {
        if (data) {
            let result = await getApi(`api/document/download/`, data)
            if (result && result.status === 200) {
                window.open(`${constant.baseUrl}api/document/download/${data}`)
                toast.success('file Download successful')
            } else if (result && result.response.status === 404) {
                toast.error('file Not Found')
            }
        }
    }

    const fetchData = async (i) => {
        setIsLoding(true)
        let response = await getApi('api/lead/view/', param.id)
        setData(response.data?.lead);
        setAllData(response.data);
        setIsLoding(false)
        setSelectedTab(i)
    }

    const handleDeleteLead = async (id) => {
        try {
            setIsLoding(true)
            let response = await deleteApi('api/lead/delete/', id)
            if (response.status === 200) {
                setDelete(false)
                setAction((pre) => !pre)
                navigate('/lead')
            }
        } catch (error) {
            console.log(error)
        }
        finally {
            setIsLoding(false)
        }
    }

    useEffect(() => {
        fetchData()
        dispatch(fetchLeadCustomFiled());
    }, [action])


    function toCamelCase(text) {
        return text?.replace(/([a-z])([A-Z])/g, '$1 $2');
    }

    const firstValue = Object?.values(param)[0];
    const splitValue = firstValue?.split('/')

    return (
        <>

            {isLoding ?
                <Flex justifyContent={'center'} alignItems={'center'} width="100%" >
                    <Spinner />
                </Flex> :
                <>
                    <Heading size="lg" mt={0} m={3}>
                        {data?.leadName || ""}
                    </Heading>
                    <Tabs onChange={handleTabChange} index={selectedTab}>
                        <Grid templateColumns={'repeat(12, 1fr)'} mb={3} gap={1}>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <TabList sx={{
                                    border: "none",
                                    '& button:focus': { boxShadow: 'none', },
                                    '& button': {
                                        margin: { sm: "0 3px", md: "0 5px" }, padding: { sm: "5px", md: "8px" }, border: '2px solid #8080803d', borderTopLeftRadius: "10px", borderTopRightRadius: "10px", borderBottom: 0, fontSize: { sm: "12px", md: "16px" }
                                    },
                                    '& button[aria-selected="true"]': {
                                        border: "2px solid brand.200", borderBottom: 0, zIndex: '0'
                                    },
                                }} >
                                    <Tab>Information</Tab>
                                    {(emailAccess?.view || callAccess?.view || taskAccess?.view || meetingAccess?.view) && <Tab> Communication</Tab>}
                                    <Tab>Document</Tab>
                                </TabList>

                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }} mt={{ sm: "3px", md: "5px" }} >
                                <Flex justifyContent={"right"}>
                                    <Menu>
                                        {(user.role === 'superAdmin' || (permission?.create || permission?.update || permission?.delete)) && <MenuButton size="sm" variant="outline" colorScheme='blackAlpha' mr={2.5} as={Button} rightIcon={<ChevronDownIcon />}>
                                            Actions
                                        </MenuButton>}
                                        <MenuDivider />
                                        <MenuList minWidth={2}>
                                            {(user.role === 'superAdmin' || permission?.create) && <MenuItem color={'blue'} onClick={() => onOpen()} alignItems={"start"} icon={<AddIcon />}  >Add</MenuItem>}
                                            {(user.role === 'superAdmin' || permission?.update) && <MenuItem onClick={() => setEdit(true)} alignItems={"start"} icon={<EditIcon />}>Edit</MenuItem>}
                                            <MenuItem onClick={generatePDF} alignItems={"start"} icon={<FaFilePdf />} display={"flex"} style={{ alignItems: "center" }}>Print as PDF</MenuItem >
                                            {(user.role === 'superAdmin' || permission?.delete) && <>
                                                <MenuDivider />
                                                <MenuItem alignItems={"start"} color={'red'} onClick={() => setDelete(true)} icon={<DeleteIcon />}>Delete</MenuItem>
                                            </>}
                                        </MenuList>
                                    </Menu>
                                    <Link to="/lead">
                                        <Button leftIcon={<IoIosArrowBack />} size='sm' variant="brand">
                                            Back
                                        </Button>
                                    </Link>
                                </Flex>
                            </GridItem>
                        </Grid>

                        <TabPanels>
                            <TabPanel pt={4} p={0}>
                                <CustomView data={leadData?.[0]} fieldData={data} toCamelCase={toCamelCase} moduleId={leadData?.[0]?._id} fetchData={fetchData} id="reports" />
                            </TabPanel>
                            <TabPanel pt={4} p={0}>
                                <GridItem colSpan={{ base: 4 }} >
                                    <Grid overflow={'hidden'} templateColumns={{ base: "1fr" }} gap={4}>
                                        <Grid templateColumns={'repeat(12, 1fr)'} gap={4}>
                                            {emailAccess?.view && <GridItem colSpan={{ base: 12, md: 6 }}>
                                                <Card >
                                                    <CommonCheckTable
                                                        title={"Email"}
                                                        isLoding={isLoding}
                                                        columnData={columnsDataColumns ?? []}
                                                        // dataColumn={columnsDataColumns ?? []}
                                                        allData={showEmail ? allData.Email : allData?.Email?.length > 0 ? [allData.Email[0]] : []}
                                                        tableData={showEmail ? allData.Email : allData?.Email?.length > 0 ? [allData.Email[0]] : []}
                                                        AdvanceSearch={false}
                                                        dataLength={allData?.Email?.length}
                                                        tableCustomFields={[]}
                                                        checkBox={false}
                                                        deleteMany={true}
                                                        ManageGrid={false}
                                                        onOpen={() => setAddEmailHistory(true)}
                                                        access={emailAccess}
                                                    />
                                                    {allData?.Email?.length > 1 &&
                                                        <div style={{ display: "flex", justifyContent: "end" }}>
                                                            <Button size="sm" colorScheme="brand" variant="outline" display="flex" justifyContant="end" onClick={() => showEmail ? setShowEmail(false) : setShowEmail(true)}>{showEmail ? "Show less" : "Show more"}</Button>
                                                        </div>}
                                                </Card>
                                            </GridItem>}
                                            {callAccess?.view && <GridItem colSpan={{ base: 12, md: 6 }}>
                                                <Card>
                                                    <CommonCheckTable
                                                        title={"Call"}
                                                        isLoding={isLoding}
                                                        columnData={callColumns ?? []}
                                                        // dataColumn={callColumns ?? []}
                                                        allData={showCall ? allData?.phoneCall : allData?.phoneCall?.length > 0 ? [allData?.phoneCall[0]] : []}
                                                        tableData={showCall ? allData?.phoneCall : allData?.phoneCall?.length > 0 ? [allData?.phoneCall[0]] : []}
                                                        AdvanceSearch={false}
                                                        dataLength={allData?.phoneCall?.length}
                                                        tableCustomFields={[]}
                                                        checkBox={false}
                                                        deleteMany={true}
                                                        ManageGrid={false}
                                                        onOpen={() => setAddPhoneCall(true)}
                                                        access={callAccess}
                                                    />
                                                    {allData?.phoneCall?.length > 1 && <div style={{ display: "flex", justifyContent: "end" }}>
                                                        <Button size="sm" colorScheme="brand" variant="outline" display="flex" justifyContant="end" onClick={() => showCall ? setShowCall(false) : setShowCall(true)}>{showCall ? "Show less" : "Show more"}</Button>
                                                    </div>}
                                                </Card>
                                            </GridItem>}
                                            {taskAccess?.view && <GridItem colSpan={{ base: 12, md: 6 }}>
                                                <Card >
                                                    <CommonCheckTable
                                                        title={"Task"}
                                                        isLoding={isLoding}
                                                        columnData={taskColumns ?? []}
                                                        // dataColumn={taskColumns ?? []}
                                                        allData={showTasks ? allData?.task : allData?.task?.length > 0 ? [allData?.task[0]] : []}
                                                        tableData={showTasks ? allData?.task : allData?.task?.length > 0 ? [allData?.task[0]] : []}
                                                        dataLength={allData?.task?.length}
                                                        AdvanceSearch={false}
                                                        tableCustomFields={[]}
                                                        checkBox={false}
                                                        deleteMany={true}
                                                        ManageGrid={false}
                                                        onOpen={() => setTaskModel(true)}
                                                        access={taskAccess}
                                                    />
                                                    {
                                                        allData?.task?.length > 1 && <div style={{ display: "flex", justifyContent: "end" }}>
                                                            <Button size="sm" colorScheme="brand" variant="outline" display="flex" justifyContant="end" onClick={() => showTasks ? setShowTasks(false) : setShowTasks(true)}>{showTasks ? "Show less" : "Show more"}</Button>
                                                        </div>}
                                                </Card>
                                            </GridItem>}

                                            {meetingAccess?.view && <GridItem colSpan={{ base: 12, md: 6 }}>
                                                <Card overflow={'scroll'}>
                                                    <CommonCheckTable
                                                        title={"Meeting"}
                                                        isLoding={isLoding}
                                                        columnData={MeetingColumns ?? []}
                                                        // dataColumn={MeetingColumns ?? []}
                                                        allData={showMeetings ? allData?.meeting : allData?.meeting?.length > 0 ? [allData?.meeting[0]] : []}
                                                        tableData={showMeetings ? allData?.meeting : allData?.meeting?.length > 0 ? [allData?.meeting[0]] : []}
                                                        AdvanceSearch={false}
                                                        dataLength={allData?.meeting?.length} tableCustomFields={[]}
                                                        checkBox={false}
                                                        deleteMany={true}
                                                        ManageGrid={false}
                                                        onOpen={() => setMeeting(true)}
                                                        access={meetingAccess}
                                                    />

                                                    {allData?.meeting?.length > 1 && <div style={{ display: "flex", justifyContent: "end" }}>
                                                        <Button colorScheme="brand" size='sm' variant="outline" display="flex" justifyContant="end" onClick={() => showMeetings ? setShowMeetings(false) : setShowMeetings(true)}>{showMeetings ? "Show less" : "Show more"}</Button>
                                                    </div>}
                                                </Card>
                                            </GridItem>}
                                        </Grid>
                                    </Grid>
                                </GridItem>
                            </TabPanel>
                            <TabPanel pt={4} p={0}>
                                <GridItem colSpan={{ base: 4 }} >
                                    <Card minH={'50vh'} >
                                        <Flex alignItems={'center'} justifyContent={'space-between'} mb='2'>
                                            <Heading size="md" mb={3}>
                                                Documents
                                            </Heading>
                                            <Button leftIcon={<AddIcon />} size='sm' variant='brand' onClick={() => setAddDocument(true)}>Add Document</Button>
                                        </Flex>
                                        <HSeparator />
                                        <VStack mt={4} alignItems="flex-start">
                                            {allData?.Document?.length > 0 ? allData?.Document?.map((item) => (
                                                <FolderTreeView name={item.folderName} item={item}>
                                                    {item?.files?.map((file) => (
                                                        <FolderTreeView download={download} data={file} name={file.fileName} isFile from="lead" />
                                                    ))}
                                                </FolderTreeView>
                                            )) : <Text textAlign={'center'} width="100%" color={textColor} fontSize="sm" fontWeight="700">
                                                <DataNotFound />
                                            </Text>}
                                        </VStack>
                                    </Card>
                                </GridItem>
                            </TabPanel>

                        </TabPanels>
                    </Tabs>
                    {(user.role === 'superAdmin' || (permission?.update || permission?.delete)) && <Card mt={3}>
                        <Grid templateColumns="repeat(6, 1fr)" gap={1}>
                            <GridItem colStart={6} >
                                <Flex justifyContent={"right"}>
                                    {(user.role === 'superAdmin' || permission?.update) ? <Button size='sm' onClick={() => setEdit(true)} leftIcon={<EditIcon />} mr={2.5} variant="outline" colorScheme="green">Edit</Button> : ''}
                                    {(user.role === 'superAdmin' || permission?.delete) ? <Button size='sm' style={{ background: 'red.800' }} onClick={() => setDelete(true)} leftIcon={<DeleteIcon />} colorScheme="red" >Delete</Button> : ''}
                                </Flex>
                            </GridItem>
                        </Grid>
                    </Card>
                    }
                </>
            }
            {isOpen && <Add isOpen={isOpen} size={size} onClose={onClose} leadData={leadData?.[0]} setAction={setAction} />}
            <Edit isOpen={edit} size={size} onClose={setEdit} leadData={leadData?.[0]} setAction={setAction} moduleId={leadData?.[0]?._id} data={data} />
            <AddMeeting fetchData={fetchData} isOpen={addMeeting} leadContect={splitValue?.[0]} onClose={setMeeting} from="contact" id={param.id} setAction={setAction} view={true} />
            <AddEdit isOpen={taskModel} fetchData={fetchData} leadContect={splitValue?.[0]} onClose={setTaskModel} id={param.id} userAction={'add'} view={true} />
            <AddPhoneCall viewData={allData} fetchData={fetchData} isOpen={addPhoneCall} onClose={setAddPhoneCall} setAction={setAction} data={data?.contact} id={param.id} lead={true} LData={data} />
            <AddEmailHistory lead={true} leadEmail={allData?.lead?.leadEmail} fetchData={fetchData} isOpen={addEmailHistory} onClose={setAddEmailHistory} id={param.id} />
            <AddDocumentModal addDocument={addDocument} setAddDocument={setAddDocument} linkId={param.id} from="lead" setAction={setAction} fetchData={fetchData} />
            <CommonDeleteModel isOpen={deleteModel} onClose={() => setDelete(false)} type='Lead' handleDeleteData={handleDeleteLead} ids={param.id} />
        </>
    );
};

export default View;

================
File: Client/src/views/admin/meeting/components/Addmeeting.js
================
import { Button, Flex, FormLabel, Grid, GridItem, IconButton, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Radio, RadioGroup, Stack, Text, Textarea } from '@chakra-ui/react';
import { CUIAutoComplete } from 'chakra-ui-autocomplete';
import MultiContactModel from 'components/commonTableModel/MultiContactModel';
import MultiLeadModel from 'components/commonTableModel/MultiLeadModel';
import Spinner from 'components/spinner/Spinner';
import dayjs from 'dayjs';
import { useFormik } from 'formik';
import { useEffect, useState } from 'react';
import { LiaMousePointerSolid } from 'react-icons/lia';
import { useSelector } from 'react-redux';
import { toast } from 'react-toastify';
import { MeetingSchema } from 'schema';
import { getApi, postApi } from 'services/api';

const AddMeeting = (props) => {
    const { onClose, isOpen, setAction, from, fetchData, view } = props
    const [leaddata, setLeadData] = useState([])
    const [contactdata, setContactData] = useState([])
    const [isLoding, setIsLoding] = useState(false)
    const [contactModelOpen, setContactModel] = useState(false);
    const [leadModelOpen, setLeadModel] = useState(false);
    const todayTime = new Date().toISOString().split('.')[0];
    const leadData = useSelector((state) => state?.leadData?.data);


    const user = JSON.parse(localStorage.getItem('user'))

    const contactList = useSelector((state) => state?.contactData?.data)


    const initialValues = {
        agenda: '',
        attendes: props.leadContect === 'contactView' && props.id ? [props.id] : [],
        attendesLead: props.leadContect === 'leadView' && props.id ? [props.id] : [],
        location: '',
        related: props.leadContect === 'contactView' ? 'Contact' : props.leadContect === 'leadView' ? 'Lead' : 'None',
        dateTime: '',
        notes: '',
        createBy: user?._id,
    }

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: MeetingSchema,
        onSubmit: (values, { resetForm }) => {
            
        },
    });
    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue } = formik

    const AddData = async () => {

    };

    const fetchAllData = async () => {
        
    }

    useEffect(() => {

    }, [props.id, values.related])

    const extractLabels = (selectedItems) => {
        return selectedItems.map((item) => item._id);
    };

    const countriesWithEmailAsLabel = (values.related === "Contact" ? contactdata : leaddata)?.map((item) => ({
        ...item,
        value: item._id,
        label: values.related === "Contact" ? `${item.firstName} ${item.lastName}` : item.leadName,
    }));

    return (
        <Modal onClose={onClose} isOpen={isOpen} isCentered>
            <ModalOverlay />
            <ModalContent height={"580px"}>
                <ModalHeader>Add Meeting </ModalHeader>
                <ModalCloseButton />
                <ModalBody overflowY={"auto"} height={"400px"}>
                    {/* Contact Model  */}
                    <MultiContactModel data={contactdata} isOpen={contactModelOpen} onClose={setContactModel} fieldName='attendes' setFieldValue={setFieldValue} />
                    {/* Lead Model  */}
                    <MultiLeadModel data={leaddata} isOpen={leadModelOpen} onClose={setLeadModel} fieldName='attendesLead' setFieldValue={setFieldValue} />

                    <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Agenda<Text color={"red"}>*</Text>
                            </FormLabel>
                            <Input
                                fontSize='sm'
                                onChange={handleChange} onBlur={handleBlur}
                                value={values.agenda}
                                name="agenda"
                                placeholder='Agenda'
                                fontWeight='500'
                                borderColor={errors.agenda && touched.agenda ? "red.300" : null}
                            />
                            <Text fontSize='sm' mb='10px' color={'red'}> {errors.agenda && touched.agenda && errors.agenda}</Text>
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }} >
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Related To<Text color={"red"}>*</Text>
                            </FormLabel>
                            <RadioGroup onChange={(e) => setFieldValue('related', e)} value={values.related}>
                                <Stack direction='row'>
                                    {props.leadContect === 'contactView' && <Radio value='Contact'>Contact</Radio>}
                                    {props.leadContect === 'leadView' && <Radio value='Lead'>Lead</Radio>}
                                    {!props.leadContect && <> <Radio value='Contact'>Contact</Radio><Radio value='Lead'>Lead</Radio></>}
                                </Stack>
                            </RadioGroup>
                            <Text mb='10px' color={'red'} fontSize='sm'> {errors.related && touched.related && errors.related}</Text>
                        </GridItem>
                        {(values.related === "Contact" ? (contactdata?.length ?? 0) > 0 : (leaddata?.length ?? 0) > 0) && values.related &&

                            <GridItem colSpan={{ base: 12 }}>
                                <Flex alignItems={'end'} justifyContent={'space-between'} >
                                    <Text w={'100%'} >
                                        <CUIAutoComplete
                                            label={`Choose Preferred Attendes ${values.related === "Contact" ? "Contact" : values.related === "Lead" && "Lead"}`}
                                            placeholder="Type a Name"
                                            name="attendes"
                                            items={countriesWithEmailAsLabel}
                                            className='custom-autoComplete'
                                            selectedItems={countriesWithEmailAsLabel?.filter((item) => values.related === "Contact" ? values?.attendes.includes(item._id) : values.related === "Lead" && values?.attendesLead.includes(item._id))}
                                            onSelectedItemsChange={(changes) => {
                                                const selectedLabels = extractLabels(changes.selectedItems);
                                                values.related === "Contact" ? setFieldValue('attendes', selectedLabels) : values.related === "Lead" && setFieldValue('attendesLead', selectedLabels)
                                            }}
                                        />
                                    </Text>
                                    <IconButton mb={6} onClick={() => values.related === "Contact" ? setContactModel(true) : values.related === "Lead" && setLeadModel(true)} fontSize='25px' icon={<LiaMousePointerSolid />} />
                                </Flex>
                                <Text color={'red'}> {errors.attendes && touched.attendes && errors.attendes}</Text>
                            </GridItem>
                        }
                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Location
                            </FormLabel>
                            <Input
                                fontSize='sm'
                                onChange={handleChange} onBlur={handleBlur}
                                value={values.location}
                                name="location"
                                placeholder='Location'
                                fontWeight='500'
                                borderColor={errors.location && touched.location ? "red.300" : null}
                            />
                            <Text mb='10px' color={'red'} fontSize='sm'> {errors.location && touched.location && errors.location}</Text>
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Date Time<Text color={"red"}>*</Text>
                            </FormLabel>
                            <Input
                                fontSize='sm'
                                type='datetime-local'
                                onChange={handleChange} onBlur={handleBlur}
                                min={dayjs(todayTime).format('YYYY-MM-DD HH:mm')}
                                value={values.dateTime}
                                name="dateTime"
                                placeholder='Date Time'
                                fontWeight='500'
                                borderColor={errors.dateTime && touched.dateTime ? "red.300" : null}
                            />
                            <Text fontSize='sm' mb='10px' color={'red'}> {errors.dateTime && touched.dateTime && errors.dateTime}</Text>
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Notes
                            </FormLabel>
                            <Textarea
                                resize={'none'}
                                fontSize='sm'
                                placeholder='Notes'
                                onChange={handleChange} onBlur={handleBlur}
                                value={values.notes}
                                name="notes"
                                fontWeight='500'
                                borderColor={errors.notes && touched.notes ? "red.300" : null}
                            />
                            <Text mb='10px' color={'red'}> {errors.notes && touched.notes && errors.notes}</Text>
                        </GridItem>

                    </Grid>


                </ModalBody>
                <ModalFooter>
                    <Button size="sm" variant='brand' me={2} disabled={isLoding ? true : false} onClick={handleSubmit}>{isLoding ? <Spinner /> : 'Save'}</Button>
                    <Button sx={{
                        textTransform: "capitalize",
                    }} variant="outline"
                        colorScheme="red" size="sm" onClick={() => {
                            formik.resetForm()
                            onClose()
                        }}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    )
}

export default AddMeeting

================
File: Client/src/views/admin/meeting/components/MeetingAdvanceSearch.js
================
import React from 'react';
import { useFormik } from "formik";
import * as yup from "yup";
import { Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Grid, GridItem, Input, FormLabel, Text, Button, } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import moment from 'moment';
import { getSearchData, setGetTagValues, setSearchValue } from '../../../../redux/slices/advanceSearchSlice';
import { useDispatch } from 'react-redux';



const MeetingAdvanceSearch = (props) => {
    const { allData, advanceSearch, setAdvanceSearch, isLoding, setSearchedData, setDisplaySearchData, setSearchbox } = props;

    const dispatch = useDispatch();
    const initialValues = {
        agenda: '',
        createBy: '',
        startDate: '',
        endDate: '',
        timeStartDate: '',
        timeEndDate: ''
    }
    const validationSchema = yup.object({
        agenda: yup.string(),
        createBy: yup.string().email('Invalid email format'),
    });
    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: validationSchema,
        onSubmit: (values, { resetForm }) => {
            dispatch(setSearchValue(values))
            dispatch(getSearchData({ values: values, allData: allData, type: 'Meeting' }))
            // const searchResult = allData?.filter(
            //     (item) => {
            //         const itemDate = new Date(item.dateTime);
            //         const momentDate = moment(itemDate).format('YYYY-MM-DD');
            //         const timeItemDate = new Date(item.timestamp);
            //         const timeMomentDate = moment(timeItemDate).format('YYYY-MM-DD');
            //         return (
            //             (!values?.agenda || (item?.agenda && item?.agenda.toLowerCase().includes(values?.agenda?.toLowerCase()))) &&
            //             (!values?.createBy || (item?.createBy && item?.createBy.toLowerCase().includes(values?.createBy?.toLowerCase()))) &&
            //             (!values?.startDate || (momentDate >= values.startDate)) &&
            //             (!values?.endDate || (momentDate <= values.endDate)) &&
            //             (!values.timeStartDate || (timeMomentDate >= values.timeStartDate)) &&
            //             (!values.timeEndDate || (timeMomentDate <= values.timeEndDate)))
            //     }
            // )

            const dateFrom = `${values?.startDate && `From: ${values?.startDate}`}${values?.endDate && ` To: ${values?.endDate}`}`;
            const timeDateFrom = `${values?.timeStartDate && `From: ${values?.timeStartDate}`}${values?.timeEndDate && ` To: ${values?.timeEndDate}`}`
            // let getValue = [values.agenda, values?.createBy, (values?.startDate || values?.endDate) && dateFrom, (values?.timeStartDate || values?.timeEndDate) && timeDateFrom].filter(value => value);

            const getValue = [
                {
                    name: ["agenda"],
                    value: values.agenda
                },
                {
                    name: ["createBy"],
                    value: values.createBy
                },
                {
                    name: ["startDate", "endDate"],
                    value: dateFrom
                },

                {
                    name: ["timeStartDate", "timeEndDate"],
                    value: timeDateFrom
                }
            ]
            dispatch(setGetTagValues(getValue.filter(item => item.value)))
            // setSearchedData(searchResult);
            setDisplaySearchData(true)
            setAdvanceSearch(false)
            resetForm();
            setSearchbox('');
        }
    })

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm, dirty } = formik;

    return (
        <>
            <Modal onClose={() => { setAdvanceSearch(false); resetForm() }} isOpen={advanceSearch} isCentered>
                <ModalOverlay />
                <ModalContent>
                    <ModalHeader>Advance Search</ModalHeader>
                    <ModalCloseButton onClick={() => { setAdvanceSearch(false); resetForm() }} />
                    <ModalBody>
                        <Grid templateColumns="repeat(12, 1fr)" mb={3} gap={2}>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Agenda
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.agenda}
                                    name="agenda"
                                    placeholder='Enter Lead Name'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.agenda && touched.agenda && errors.agenda}</Text>

                            </GridItem>

                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2} >
                                    Create By
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.createBy}
                                    name="createBy"
                                    placeholder='Enter Lead Email'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.createBy && touched.createBy && errors.createBy}</Text>

                            </GridItem>
                            <GridItem colSpan={{ base: 12 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Date & time
                                </FormLabel>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    From
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values.startDate}
                                    type="date"
                                    name='startDate'
                                    fontWeight='500'
                                />
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    To
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values.endDate}
                                    min={values.startDate}
                                    type="date"
                                    name='endDate'
                                    fontWeight='500'
                                />
                            </GridItem>

                            <GridItem colSpan={{ base: 12 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Time Stamp
                                </FormLabel>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    From
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values.timeStartDate}
                                    type="date"
                                    name='timeStartDate'
                                    fontWeight='500'
                                />
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    To
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values.timeEndDate}
                                    min={values.timeStartDate}
                                    type="date"
                                    name='timeEndDate'
                                    fontWeight='500'
                                />
                            </GridItem>

                        </Grid>
                    </ModalBody>
                    <ModalFooter>
                        <Button size="sm" variant="brand" mr={2} onClick={handleSubmit} disabled={isLoding || !dirty ? true : false} >{isLoding ? <Spinner /> : 'Search'}</Button>
                        <Button size="sm" variant="outline" colorScheme="red" onClick={() => resetForm()}>Clear</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        </>
    )
}

export default MeetingAdvanceSearch

================
File: Client/src/views/admin/meeting/index.js
================
import { useEffect, useState } from 'react';
import { DeleteIcon, ViewIcon } from '@chakra-ui/icons';
import { Button, Menu, MenuButton, MenuItem, MenuList, Text, useDisclosure } from '@chakra-ui/react';
import { getApi } from 'services/api';
import { HasAccess } from '../../../redux/accessUtils';
import CommonCheckTable from '../../../components/reactTable/checktable';
import { SearchIcon } from "@chakra-ui/icons";
import { CiMenuKebab } from 'react-icons/ci';
import { Link, useNavigate } from 'react-router-dom';
import MeetingAdvanceSearch from './components/MeetingAdvanceSearch';
import AddMeeting from './components/Addmeeting';
import CommonDeleteModel from 'components/commonDeleteModel';
import { deleteManyApi } from 'services/api';
import { toast } from 'react-toastify';
import { fetchMeetingData } from '../../../redux/slices/meetingSlice';
import { useDispatch } from 'react-redux';

const Index = () => {
    const title = "Meeting";
    const navigate = useNavigate()
    const [action, setAction] = useState(false);
    const { isOpen, onOpen, onClose } = useDisclosure();
    const [selectedValues, setSelectedValues] = useState([]);
    const [advanceSearch, setAdvanceSearch] = useState(false);
    const [getTagValuesOutSide, setGetTagValuesOutside] = useState([]);
    const [searchboxOutside, setSearchboxOutside] = useState('');
    const user = JSON.parse(localStorage.getItem("user"));
    const [deleteMany, setDeleteMany] = useState(false);
    const [isLoding, setIsLoding] = useState(false);
    const [data, setData] = useState([]);
    const [displaySearchData, setDisplaySearchData] = useState(false);
    const [searchedData, setSearchedData] = useState([]);
    const [permission] = HasAccess(['Meetings'])
    const dispatch = useDispatch()


    const actionHeader = {
        Header: "Action", isSortable: false, center: true,
        cell: ({ row }) => (
            <Text fontSize="md" fontWeight="900" textAlign={"center"}>
                <Menu isLazy  >
                    <MenuButton><CiMenuKebab /></MenuButton>
                    <MenuList minW={'fit-content'} transform={"translate(1520px, 173px);"}>

                        {permission?.view && <MenuItem py={2.5} color={'green'}
                            onClick={() => navigate(`/metting/${row?.values._id}`)}
                            icon={<ViewIcon fontSize={15} />}>View</MenuItem>}
                        {permission?.delete && <MenuItem py={2.5} color={'red'} onClick={() => { setDeleteMany(true); setSelectedValues([row?.values?._id]); }} icon={<DeleteIcon fontSize={15} />}>Delete</MenuItem>}
                    </MenuList>
                </Menu>
            </Text>
        )
    }
    const tableColumns = [
        {
            Header: "#",
            accessor: "_id",
            isSortable: false,
            width: 10
        },
        {
            Header: 'Agenda', accessor: 'agenda', cell: (cell) => (
                <Link to={`/metting/${cell?.row?.values._id}`}> <Text
                    me="10px"
                    sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}
                    color='brand.600'
                    fontSize="sm"
                    fontWeight="700"
                >
                    {cell?.value || ' - '}
                </Text></Link>)
        },
        { Header: "Date & Time", accessor: "dateTime", },
        { Header: "Time Stamp", accessor: "timestamp", },
        { Header: "Create By", accessor: "createdByName", },
        ...(permission?.update || permission?.view || permission?.delete ? [actionHeader] : [])

    ];

    const fetchData = async () => {
        setIsLoding(true)
        const result = await dispatch(fetchMeetingData())
        if (result.payload.status === 200) {
            setData(result?.payload?.data);
        } else {
            toast.error("Failed to fetch data", "error");
        }
        setIsLoding(false)
    }

    const handleDeleteMeeting = async (ids) => {
        try {
            setIsLoding(true)
            let response = await deleteManyApi('api/meeting/deleteMany', ids)
            if (response.status === 200) {
                setSelectedValues([])
                setDeleteMany(false)
                setAction((pre) => !pre)
            }
        } catch (error) {
            console.log(error)
        }
        finally {
            setIsLoding(false)
        }
    }

    // const [selectedColumns, setSelectedColumns] = useState([...tableColumns]);
    // const dataColumn = tableColumns?.filter(item => selectedColumns?.find(colum => colum?.Header === item.Header))


    useEffect(() => {
        fetchData();
    }, [action])

    return (
        <div>
            <CommonCheckTable
                title={title}
                isLoding={isLoding}
                columnData={tableColumns ?? []}
                // dataColumn={dataColumn ?? []}
                allData={data ?? []}
                tableData={data}
                searchDisplay={displaySearchData}
                setSearchDisplay={setDisplaySearchData}
                searchedDataOut={searchedData}
                setSearchedDataOut={setSearchedData}
                tableCustomFields={[]}
                access={permission}
                // action={action}
                // setAction={setAction}
                // selectedColumns={selectedColumns}
                // setSelectedColumns={setSelectedColumns}
                // isOpen={isOpen}
                // onClose={onClose}
                onOpen={onOpen}
                selectedValues={selectedValues}
                setSelectedValues={setSelectedValues}
                setDelete={setDeleteMany}
                AdvanceSearch={
                    <Button variant="outline" colorScheme='brand' leftIcon={<SearchIcon />} mt={{ sm: "5px", md: "0" }} size="sm" onClick={() => setAdvanceSearch(true)}>Advance Search</Button>
                }
                getTagValuesOutSide={getTagValuesOutSide}
                searchboxOutside={searchboxOutside}
                setGetTagValuesOutside={setGetTagValuesOutside}
                setSearchboxOutside={setSearchboxOutside}
                handleSearchType="MeetingSearch"
            />

            <MeetingAdvanceSearch
                advanceSearch={advanceSearch}
                setAdvanceSearch={setAdvanceSearch}
                setSearchedData={setSearchedData}
                setDisplaySearchData={setDisplaySearchData}
                allData={data ?? []}
                setAction={setAction}
                setGetTagValues={setGetTagValuesOutside}
                setSearchbox={setSearchboxOutside}
            />
            <AddMeeting setAction={setAction} isOpen={isOpen} onClose={onClose} />

            {/* Delete model */}
            <CommonDeleteModel isOpen={deleteMany} onClose={() => setDeleteMany(false)} type='Meetings' handleDeleteData={handleDeleteMeeting} ids={selectedValues} />
        </div>
    )
}

export default Index

================
File: Client/src/views/admin/meeting/meetingView.js
================
import { CloseIcon, DeleteIcon, EditIcon, ViewIcon } from '@chakra-ui/icons'
import { DrawerFooter, Flex, Grid, GridItem, IconButton, Modal, ModalBody, ModalContent, ModalHeader, ModalOverlay, Text } from '@chakra-ui/react'
import Spinner from "components/spinner/Spinner"
import moment from 'moment'
import { useEffect, useState } from 'react'
import { BiLink } from 'react-icons/bi'
import { Link } from 'react-router-dom'
import { getApi } from 'services/api'
// import DeleteTask from './components/deleteTask'
import { useNavigate } from 'react-router-dom';
import { HasAccess } from "../../../redux/accessUtils";

const MeetingView = (props) => {
    const { onClose, isOpen, info, fetchData, setAction, action, access } = props
    const [data, setData] = useState();
    const [edit, setEdit] = useState(false);
    const [deleteModel, setDelete] = useState(false);
    const user = JSON.parse(localStorage.getItem("user"))
    const [isLoding, setIsLoding] = useState(false)
    const navigate = useNavigate()

    const fetchViewData = async () => {
        if (info) {
            setIsLoding(true)
            let result = await getApi('api/meeting/view/', info?.event ? info?.event?.id : info);
            setData(result?.data);
            setIsLoding(false)
        }
    }

    useEffect(() => {
        fetchViewData()
    }, [action, info])

    const [contactAccess, leadAccess] = HasAccess(['Contacts', 'Leads'])

    const handleViewOpen = () => {
        if (info?.event) {
            navigate(`/view/${info?.event?.id}`)
        }
        else {
            navigate(`/view/${info}`)
        }
    }
    return (
        <Modal isOpen={isOpen} size={'md'} isCentered>
            <ModalOverlay />
            <ModalContent height={"70%"}>
                <ModalHeader justifyContent='space-between' display='flex' >
                    Meeting
                    <IconButton onClick={() => onClose(false)} icon={<CloseIcon />} />
                </ModalHeader>
                {isLoding ?
                    <Flex justifyContent={'center'} alignItems={'center'} mb={30} width="100%" >
                        <Spinner />
                    </Flex> : <>

                        <ModalBody overflowY={"auto"}>
                            <Grid templateColumns="repeat(12, 1fr)" gap={3} >
                                <GridItem colSpan={{ base: 12, md: 6 }} >
                                    <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Agenda </Text>
                                    <Text>{data?.agenda ? data?.agenda : ' - '}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, md: 6 }} >
                                    <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Date&Time  </Text>
                                    <Text>{data?.dateTime ? moment(data?.dateTime).format('lll ') : ' - '}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, md: 6 }} >
                                    <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Created By </Text>
                                    <Text>{data?.createdByName ? data?.createdByName : '-'}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, md: 6 }} >
                                    <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Related </Text>
                                    <Text>{data?.related ? data?.related : '-'}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, md: 6 }} >
                                    <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Location </Text>
                                    <Text>{data?.location ? data?.location : '-'}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, md: 6 }} >
                                    <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Notes </Text>
                                    <Text>{data?.notes ? data?.notes : '-'}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, md: 6 }} >
                                    <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> attendes </Text>
                                    {data?.related === 'Contact' && contactAccess?.view ? data?.attendes && data?.attendes.map((item) => {
                                        return (
                                            <Link to={`/contactView/${item._id}`}>
                                                <Text color='brand.600' sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}>{item.firstName + ' ' + item.lastName}</Text>
                                            </Link>
                                        )
                                    }) : data?.related === 'Lead' && leadAccess?.view ? data?.attendesLead && data?.attendesLead.map((item) => {
                                        return (
                                            <Link to={`/leadView/${item._id}`}>
                                                <Text color='brand.600' sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}>{item.leadName}</Text>
                                            </Link>
                                        )
                                    }) : data?.related === 'Contact' ? data?.attendes && data?.attendes.map((item) => {
                                        return (
                                            <Text color='blackAlpha.900' >{item.firstName + ' ' + item.lastName}</Text>
                                        )
                                    }) : data?.related === 'Lead' ? data?.attendesLead && data?.attendesLead.map((item) => {
                                        return (
                                            <Text color='blackAlpha.900' >{item.leadName}</Text>
                                        )
                                    }) : '-'}
                                </GridItem>

                            </Grid>

                        </ModalBody>
                        <DrawerFooter>
                            {access?.view && <IconButton variant='outline' colorScheme={'green'} onClick={() => handleViewOpen()} borderRadius="10px" size="md" icon={<ViewIcon />} />}
                            {access?.update && <IconButton variant='outline' onClick={() => setEdit(true)} ml={3} borderRadius="10px" size="md" icon={<EditIcon />} />}
                            {access?.delete && <IconButton colorScheme='red' onClick={() => setDelete(true)} ml={3} borderRadius="10px" size="md" icon={<DeleteIcon />} />}

                            {/* 
                            <DeleteTask fetchData={props.fetchData} isOpen={deleteModel} onClose={setDelete} viewClose={onClose} url='api/task/delete/' method='one' id={info?.event ? info?.event?.id : info} /> */}
                        </DrawerFooter>
                    </>}
            </ModalContent>
        </Modal>
    )
}

export default MeetingView

================
File: Client/src/views/admin/meeting/View.js
================
import { Box, Button, Flex, Grid, GridItem, Heading, Text } from "@chakra-ui/react";
import Card from "components/card/Card";
import { HSeparator } from "components/separator/Separator";
import Spinner from "components/spinner/Spinner";
import moment from "moment";
import { useEffect, useState } from "react";
import { IoIosArrowBack } from "react-icons/io";
import { Link, useNavigate, useParams } from "react-router-dom";
import { HasAccess } from "../../../redux/accessUtils";
import { getApi } from "services/api";
import { DeleteIcon } from "@chakra-ui/icons";
import { deleteApi } from "services/api";
import CommonDeleteModel from "components/commonDeleteModel";
import { FaFilePdf } from "react-icons/fa";
import html2pdf from "html2pdf.js";
const View = () => {

    const param = useParams()

    const [data, setData] = useState()
    const [deleteMany, setDeleteMany] = useState(false);
    const user = JSON.parse(localStorage.getItem("user"))
    const [isLoding, setIsLoding] = useState(false)
    const [loading, setLoading] = useState(false)
    const navigate = useNavigate()
    const params = useParams();


    const fetchData = async () => {
        setIsLoding(true)
        let response = await getApi('api/meeting/view/', param.id)
        setData(response?.data);
        setIsLoding(false)
    }

    useEffect(() => {
        fetchData()
    }, [])

    const generatePDF = () => {
        setLoading(true)
        const element = document.getElementById("reports");
        const hideBtn = document.getElementById("hide-btn");
        if (element) {
            hideBtn.style.display = 'none';
            html2pdf()
                .from(element)
                .set({
                    margin: [0, 0, 0, 0],
                    filename: `Meeting_Details_${moment().format("DD-MM-YYYY")}.pdf`,
                    image: { type: "jpeg", quality: 0.98 },
                    html2canvas: { scale: 2, useCORS: true, allowTaint: true },
                    jsPDF: { unit: "in", format: "letter", orientation: "portrait" },
                })
                .save().then(() => {
                    setLoading(false)
                    hideBtn.style.display = '';
                })
            // }, 500);
        } else {
            console.error("Element with ID 'reports' not found.");
            setLoading(false)
        }
    };

    const handleDeleteMeeting = async (ids) => {
        try {
            setIsLoding(true)
            let response = await deleteApi('api/meeting/delete/', params.id)
            if (response.status === 200) {
                setDeleteMany(false)
                navigate(-1)
            }
        } catch (error) {
            console.log(error)
        }
        finally {
            setIsLoding(false)
        }
    }

    const [permission, contactAccess, leadAccess] = HasAccess(['Meetings', 'Contacts', 'Leads'])

    return (
        <>
            {isLoding ?
                <Flex justifyContent={'center'} alignItems={'center'} width="100%" >
                    <Spinner />
                </Flex> : <>

                    <Grid templateColumns="repeat(4, 1fr)" gap={3} id="reports">
                        <GridItem colSpan={{ base: 4 }}>
                            <Heading size="lg" m={3}>
                                {data?.agenda || ""}
                            </Heading>
                        </GridItem>
                        <GridItem colSpan={{ base: 4 }}>
                            <Card>
                                <Grid gap={4}>
                                    <GridItem colSpan={2}>
                                        <Box>
                                            <Flex justifyContent={"space-between"}>
                                                <Heading size="md" mb={3}>
                                                    Meeting Details
                                                </Heading>
                                                <Box id="hide-btn">
                                                    <Button leftIcon={<FaFilePdf />} size='sm' variant="brand" onClick={generatePDF} disabled={loading}>
                                                        {loading ? "Please Wait..." : "Print as PDF"}
                                                    </Button>
                                                    <Button leftIcon={<IoIosArrowBack />} size='sm' variant="brand" onClick={() => navigate(-1)} style={{ marginLeft: 10 }}>
                                                        Back
                                                    </Button>
                                                </Box>
                                            </Flex>
                                            <HSeparator />
                                        </Box>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 2, md: 1 }}>
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Agenda </Text>
                                        <Text>{data?.agenda ? data?.agenda : ' - '}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 2, md: 1 }}>
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Created By </Text>
                                        <Text>{data?.createdByName ? data?.createdByName : ' - '}</Text>
                                    </GridItem>

                                    <GridItem colSpan={{ base: 2, md: 1 }}>
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> DateTime </Text>
                                        <Text> {data?.dateTime ? moment(data?.dateTime).format('DD-MM-YYYY  h:mma ') : ' - '} [{data?.dateTime ? moment(data?.dateTime).toNow() : ' - '}]</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 2, md: 1 }}>
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Timestamp </Text>
                                        <Text> {data?.timestamp ? moment(data?.timestamp).format('DD-MM-YYYY  h:mma ') : ' - '} [{data?.timestamp ? moment(data?.timestamp).toNow() : ' - '}]</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 2, md: 1 }}>
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Location </Text>
                                        <Text>{data?.location ? data?.location : ' - '}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 2, md: 1 }}>
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>  Notes </Text>
                                        <Text>{data?.notes ? data?.notes : ' - '}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 2, md: 1 }}>
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Attendes </Text>
                                        {data?.related === 'Contact' && contactAccess?.view ? data?.attendes && data?.attendes.map((item) => {
                                            return (
                                                <Link to={`/contactView/${item._id}`}>
                                                    <Text color='brand.600' sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}>{item.firstName + ' ' + item.lastName}</Text>
                                                </Link>
                                            )
                                        }) : data?.related === 'Lead' && leadAccess?.view ? data?.attendesLead && data?.attendesLead.map((item) => {
                                            return (
                                                <Link to={`/leadView/${item._id}`}>
                                                    <Text color='brand.600' sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}>{item.leadName}</Text>
                                                </Link>
                                            )
                                        }) : data?.related === 'contact' ? data?.attendes && data?.attendes.map((item) => {
                                            return (
                                                <Text color='blackAlpha.900' >{item.firstName + ' ' + item.lastName}</Text>
                                            )
                                        }) : data?.related === 'lead' ? data?.attendesLead && data?.attendesLead.map((item) => {
                                            return (
                                                <Text color='blackAlpha.900' >{item.leadName}</Text>
                                            )
                                        }) : '-'}
                                    </GridItem>
                                    {/* <Grid templateColumns={'repeat(2, 1fr)'} gap={4} id="reports">

                                    </Grid> */}
                                </Grid>
                            </Card>
                        </GridItem>

                    </Grid>
                    {(user.role === 'superAdmin' || (permission?.update || permission?.delete)) && <Card mt={3}>
                        <Grid templateColumns="repeat(6, 1fr)" gap={1}>
                            <GridItem colStart={6} >
                                <Flex justifyContent={"right"}>
                                    {(user.role === 'superAdmin' || permission?.delete) ? <Button size='sm' style={{ background: 'red.800' }} onClick={() => setDeleteMany(true)} leftIcon={<DeleteIcon />} colorScheme="red" >Delete</Button> : ''}
                                </Flex>
                            </GridItem>
                        </Grid>
                    </Card>
                    }

                </>}
            {/* Delete model */}
            <CommonDeleteModel isOpen={deleteMany} onClose={() => setDeleteMany(false)} type='Meetings' handleDeleteData={handleDeleteMeeting} ids={params.id} />
        </>
    );
};

export default View;

================
File: Client/src/views/admin/moduleName/add.js
================
import { Box, Button, Flex, FormLabel, Grid, GridItem, Icon, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text, useColorModeValue } from '@chakra-ui/react'
import Spinner from 'components/spinner/Spinner'
import React, { useState } from 'react'
import { useFormik } from 'formik'
import { postApi } from 'services/api'
import { moduleAddSchema } from 'schema/moduleAddSchema'
import { toast } from 'react-toastify'
import Dropzone from "components/Dropzone";
import { MdUpload } from "react-icons/md";
import { fetchRouteData } from '../../../redux/slices/routeSlice'
import { useDispatch } from 'react-redux'
import { fetchModules } from '../../../redux/slices/moduleSlice'



const Add = (props) => {
    const { onClose, isOpen, fetchData, setAction } = props;
    const [isLoding, setIsLoding] = useState(false)
    const brandColor = useColorModeValue("brand.500", "white");
    const dispatch = useDispatch();
    const initialValues = {
        moduleName: "",
        icon: ""
    };

    const formik = useFormik({
        initialValues: initialValues,
        // validationSchema: validationsAddSchema,
        validationSchema: moduleAddSchema,
        onSubmit: (values, { resetForm }) => {
            AddData()
        },
    });

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik

    const AddData = async () => {
        try {
            setIsLoding(true)
            const formData = new FormData();

            formData.append("moduleName", values?.moduleName)
            formData.append("icon", values?.icon?.[0])


            let response = await postApi('api/custom-field/add-module', formData);
            if (response.status === 200) {
                fetchData()
                await dispatch(fetchRouteData());
                await dispatch(fetchModules())
                onClose()
                resetForm()
                setAction((pre) => !pre)
            } else {
                toast.error(response.response.data.message);
            }
        }
        catch (error) {
            if (error.response && error.response.data) {
                toast.error(error.response.data.message);
            } else {
                toast.error("An error occurred while processing your request.");
            }
        }
        finally {
            setIsLoding(false)
        }
    }


    return (
        <div>
            <Modal onClose={onClose} isOpen={isOpen} isCentered size='2xl'>
                <ModalOverlay />
                <ModalContent>
                    <ModalHeader>Add Module</ModalHeader>
                    <ModalCloseButton />
                    <ModalBody>
                        <>
                            <Grid templateColumns="repeat(12, 1fr)" gap={3}>

                                <GridItem colSpan={{ base: 12 }}>
                                    <Dropzone
                                        w={{ base: "100%" }}
                                        me='36px'
                                        minH={100}
                                        img={props.text === 'Property Photos' ? 'img' : ''}
                                        isMultipleAllow={false}
                                        height={'100%'}
                                        onFileSelect={(file) => setFieldValue('icon', file)}
                                        content={
                                            <Box>
                                                <Icon as={MdUpload} w='50px' h='50px' color={brandColor} />
                                                <Flex justify='center' mx='auto' mb='12px'>
                                                    <Text fontSize='sm' fontWeight='700' color={brandColor}>
                                                        Upload File
                                                    </Text>
                                                </Flex>
                                                {values?.icon.length > 0 && <Text fontSize='sm' fontWeight='500' color='secondaryGray.500'>
                                                    Selected Files : {values?.icon.length}
                                                </Text>}
                                            </Box>
                                        }
                                    />
                                </GridItem>
                                <GridItem colSpan={{ base: 12 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='2px'>
                                        Name<Text color={"red"}>*</Text>
                                    </FormLabel>
                                    <Input
                                        fontSize='sm'
                                        onChange={handleChange} onBlur={handleBlur}
                                        value={values.moduleName}
                                        name="moduleName"
                                        placeholder='Enter Name'
                                        fontWeight='500'
                                        borderColor={errors.moduleName && touched.moduleName ? "red.300" : null}
                                    />
                                    <Text mb='10px' fontSize='sm' color={'red'}> {errors.moduleName && touched.moduleName && errors.moduleName}</Text>
                                </GridItem>
                            </Grid>
                        </>
                    </ModalBody>
                    <ModalFooter>
                        <Button colorScheme="brand" size='sm' mr={2} disabled={isLoding ? true : false} onClick={handleSubmit}>{isLoding ? <Spinner /> : 'Save'}</Button>
                        <Button sx={{
                            textTransform: "capitalize",
                        }} variant="outline"
                            colorScheme="red" size="sm" onClick={() => { onClose(); resetForm() }}>Close</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        </div>
    )
}

export default Add

================
File: Client/src/views/admin/moduleName/Edit.js
================
import {Button, FormLabel, Grid, GridItem, Image, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text, useColorModeValue } from '@chakra-ui/react'
import Spinner from 'components/spinner/Spinner'
import React, {useState } from 'react'
import { useFormik } from 'formik'
import { HSeparator } from 'components/separator/Separator'
import { putApi } from 'services/api'
import { moduleAddSchema } from 'schema/moduleAddSchema'
import Dropzone from "components/Dropzone";
import { toast } from 'react-toastify'
import { fetchRouteData } from '../../../redux/slices/routeSlice'
import { useDispatch } from 'react-redux'

const Edit = (props) => {
    const { onClose, isOpen, fetchData, selectedId, editdata, setAction } = props;
    const [isLoding, setIsLoding] = useState(false)
    const dispatch = useDispatch();

    const initialValues = {
        moduleName: editdata?.moduleName ? editdata?.moduleName : "",
        icon: ''
    };

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: moduleAddSchema,
        enableReinitialize: true,
        onSubmit: (values, { resetForm }) => {
            EditData()
            resetForm()
        },
    });

    const EditData = async () => {
        let response = await putApi(`api/custom-field/change-module-name/${selectedId}`, values);
        if (response.status === 200) {
            await dispatch(fetchRouteData())
            onClose()
            fetchData()
            setAction((pre) => !pre)
            toast.success(response?.data?.message);
        } else {
            toast.error(response?.response?.data?.message);
        }
    }

    const changeImage = async (file) => {
        try {
            setIsLoding(true);
            const formData = new FormData();

            formData.append("icon", file?.[0])
            const response = await putApi(`api/custom-field/change-icon/${editdata?._id}`, formData);
            if (response.status === 200) {
                await dispatch(fetchRouteData());
                onClose();
                setAction((pre) => !pre)
                toast.success(response?.data?.message);
            } else {
                toast.error(response?.response?.data?.message);
            }
        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue } = formik
    return (
        <div>
            <Modal onClose={onClose} isOpen={isOpen} isCentered size='2xl'>
                <ModalOverlay />
                <ModalContent>
                    <ModalHeader>Edit Module Name </ModalHeader>
                    <ModalCloseButton />
                    <HSeparator />
                    <ModalBody>
                        <>
                            <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                                <GridItem colSpan={{ base: 12 }}>
                                    <div className="imageCard" style={{ margin: "10px" }}>
                                        <Image src={editdata?.icon} height={"20%"} width={"20%"} />
                                        <div className='imageContent'>
                                            <Dropzone
                                                borderRadius="0"
                                                isMultipleAllow={false}
                                                onFileSelect={(file) => changeImage(file)}
                                                content={
                                                    <Button size='sm' variant="brand">Change</Button>
                                                }
                                            />
                                        </div>
                                    </div>
                                </GridItem>
                                <GridItem colSpan={{ base: 12 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='2px'>
                                        Name
                                    </FormLabel>
                                    <Input
                                        fontSize='sm'
                                        onChange={handleChange} onBlur={handleBlur}
                                        value={values.moduleName}
                                        name="moduleName"
                                        placeholder='Enter Name'
                                        fontWeight='500'
                                        borderColor={errors.moduleName && touched.moduleName ? "red.300" : null}
                                    />
                                    <Text mb='10px' color={'red'}> {errors.moduleName && touched.moduleName && errors.moduleName}</Text>
                                </GridItem>
                            </Grid>
                        </>
                    </ModalBody>
                    <ModalFooter>
                        <Button colorScheme="brand" size='sm' mr={2} disabled={isLoding ? true : false} onClick={handleSubmit}>{isLoding ? <Spinner /> : 'Update'}</Button>
                        <Button sx={{
                            textTransform: "capitalize",
                        }} variant="outline"
                            colorScheme="red" size="sm" onClick={onClose}>Close</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        </div>
    )
}

export default Edit

================
File: Client/src/views/admin/moduleName/index.js
================
import { AddIcon, DeleteIcon, EditIcon } from '@chakra-ui/icons'
import { Button, Checkbox, Flex, Grid, GridItem, Heading, Text, Tooltip, useColorModeValue } from '@chakra-ui/react'
import Card from 'components/card/Card'
import React, { useEffect, useState } from 'react'
import { getApi } from 'services/api'
import Edit from './Edit'
import View from './view'
import { useNavigate } from 'react-router-dom'
import Add from './add'
import { IoIosArrowBack } from 'react-icons/io'
import DataNotFound from 'components/notFoundData'
import Spinner from '../../../components/spinner/Spinner'
import { deleteManyApi } from 'services/api'
import { fetchRouteData } from '../../../redux/slices/routeSlice';
import CommonDeleteModel from 'components/commonDeleteModel';
import { useDispatch } from 'react-redux'
import { deleteApi } from 'services/api'
import { fetchModules } from '../../../redux/slices/moduleSlice'

const Index = () => {
    const navigate = useNavigate()
    const [editModal, setEdit] = useState(false)
    const [viewModal, setViewModal] = useState(false)
    const [addModal, setAddModal] = useState(false)
    const [deleteModal, setDeleteModal] = useState(false)
    const [action, setAction] = useState(false)
    const [selectedId, setselectedId] = useState()
    const [editdata, setEditData] = useState([])
    const [moduleData, setValidateData] = useState([])
    const [selectedValues, setSelectedValues] = useState([]);
    const [isLoding, setIsLoding] = useState(false)
    const textColor = useColorModeValue("gray.500", "white");
    const [method, setMethod] = useState('')

    const dispatch = useDispatch();


    const fetchData = async () => {
        setIsLoding(true)
        try {
            let response = await getApi(`api/custom-field`);
            setValidateData(response?.data);
            setIsLoding(false);
        } catch (error) {

        }
    }
    useEffect(() => {
        fetchData()
    }, [action])

    const handleEditClose = () => {
        setEdit(false)
    }

    const handleEditOpen = (item) => {
        setselectedId(item?._id)
        setEditData(item)
        setEdit(!editModal)
    }

    const handleViewClose = () => {
        setViewModal(false)
    }
    const handleAddOpen = (item) => {
        setAddModal(!viewModal)
    }
    const handleAddClose = () => {
        setAddModal(false)
    }
    const handleDeleteOpen = (item, type) => {
        setMethod(type)
        setselectedId(item?._id)
        setDeleteModal(!deleteModal)
    }

    const handleCheckboxChange = (event, value) => {
        if (event.target.checked) {
            setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);
        } else {
            setSelectedValues((prevSelectedValues) =>
                prevSelectedValues.filter((selectedValue) => selectedValue !== value)
            );
        }
    };

    const handleDeleteModule = async (ids, selectedIds) => {
        if (method === 'one') {
            try {
                if (ids) {
                    setIsLoding(true)
                    const response = await deleteApi('api/custom-field/module/', ids)
                    if (response.status === 200) {
                        await dispatch(fetchRouteData());
                        setDeleteModal(false)
                        fetchData()
                        await dispatch(fetchModules())
                    }
                }
            } catch (error) {
                console.log(error)
            }
            finally {
                setIsLoding(false)
            }
        } else if (method === 'many') {
            try {
                setIsLoding(true)
                let response = await deleteManyApi('api/custom-field/deleteMany-Module', selectedIds)
                if (response.status === 200) {
                    await dispatch(fetchRouteData());
                    setSelectedValues([])
                    setDeleteModal(false)
                    fetchData()
                    await dispatch(fetchModules())
                }
            } catch (error) {
                console.log(error)
            }
            finally {
                setIsLoding(false)
            }
        }

    };

    return (
        <div>
            <Flex justifyContent={"end"} mb={3}>
                {selectedValues.length > 0 && <Button variant='outline' colorScheme='brand' color={"red"} mr={2} leftIcon={<DeleteIcon />} onClick={() => { handleDeleteOpen('', 'many') }} size='sm' >Delete</Button>}
                <Button size='sm' variant='brand' me={1} onClick={() => handleAddOpen()} leftIcon={<AddIcon />}>Add New</Button>
                <Button size='sm' variant='brand' onClick={() => navigate(-1)} leftIcon={<IoIosArrowBack />}> Back</Button>
            </Flex>
            {isLoding ? (
                <Flex justifyContent={'center'} alignItems={'center'} width="100%" color={textColor} fontSize="sm" fontWeight="700">
                    <Spinner />
                </Flex>
            ) : (
                moduleData && moduleData.length > 0 ? (
                    <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                        {moduleData && moduleData?.map((item, i) => (

                            <GridItem rowSpan={2} colSpan={{ base: 12, md: 6, lg: 3 }} key={i}>
                                <Card>
                                    <Flex alignItems={"center"} justifyContent={"space-between"}>
                                        <Flex>
                                            <Checkbox disabled={item.moduleName === 'Properties' || item.moduleName === 'Contacts' || item.moduleName === 'Leads'} colorScheme="brandScheme" value={selectedValues} isChecked={selectedValues.includes(item?._id)} onChange={(event) => handleCheckboxChange(event, item?._id)} me="10px" />
                                            <Tooltip hasArrow label={item?.moduleName} bg='gray.200' color='gray' textTransform={"capitalize"} fontSize='sm'>
                                                <Heading size="md" fontWeight={"500"} sx={{
                                                    textOverflow: 'ellipsis', whiteSpace: 'nowrap', maxWidth: '6rem',
                                                    overflow: 'hidden', textTransform: 'capitalize'
                                                }}
                                                >
                                                    {item?.moduleName}
                                                </Heading>

                                            </Tooltip>
                                        </Flex>
                                        <Flex>
                                            <Button size='sm' disabled={item.moduleName === 'Properties' || item.moduleName === 'Contacts' || item.moduleName === 'Leads'} variant='outline' me={2} color={'green'} onClick={() => handleEditOpen(item)}><EditIcon /></Button>
                                            <Button size='sm' disabled={item.moduleName === 'Properties' || item.moduleName === 'Contacts' || item.moduleName === 'Leads'} variant='outline' me={2} color={'red'} onClick={() => handleDeleteOpen(item, 'one')}><DeleteIcon /></Button>
                                        </Flex>
                                    </Flex>
                                </Card>
                            </GridItem>
                        ))}
                    </Grid>) : (
                    <Card mt='5'>
                        <Text textAlign={'center'} width="100%" color={'gray.500'} fontSize="sm" fontWeight="700">
                            <DataNotFound />
                        </Text>
                    </Card>
                )
            )}
            <Add isOpen={addModal} onClose={handleAddClose} fetchData={fetchData} setAction={setAction} />
            <Edit isOpen={editModal} onClose={handleEditClose} selectedId={selectedId} editdata={editdata} setAction={setAction} fetchData={fetchData} />
            <CommonDeleteModel isOpen={deleteModal} onClose={() => setDeleteModal(false)} type={'Module'} handleDeleteData={handleDeleteModule} ids={selectedId} selectedValues={selectedValues} />
            <View isOpen={viewModal} onClose={handleViewClose} selectedId={selectedId} setAction={setAction} fetchData={fetchData} />
        </div>
    )
}

export default Index

================
File: Client/src/views/admin/moduleName/view.js
================
import { DeleteIcon, EditIcon } from '@chakra-ui/icons';
import { Box, Button, Flex, Grid, GridItem, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text } from '@chakra-ui/react'
import Spinner from 'components/spinner/Spinner'
import React, { useState } from 'react'
import Edit from './Edit';

const View = (props) => {
    const { onClose, isOpen, selectedId, fetchData, setAction } = props;
    const [isLoding, setIsLoding] = useState(false)
    const [data, setData] = useState(false)
    const [editModal, setEditModal] = useState(false)

    const handleEditClose = () => {
        setEditModal(false)
    }

    return (
        <div>
            <Modal onClose={onClose} isOpen={isOpen} isCentered size="lg">
                <ModalOverlay />
                <ModalContent>
                    <ModalHeader textTransform={"capitalize"}>{data?.name} </ModalHeader>
                    <ModalCloseButton />
                    <ModalBody>
                        <Box>
                            <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                                <GridItem colSpan={{ base: 12 }}>
                                    <Flex>
                                        <Text fontWeight={"bold"} pr={2} textTransform={"capitalize"}>require :</Text>
                                        <Text >
                                            {data?.validations && data?.validations?.length > 0 && data?.validations[0]?.require === true ? "True" : "False"}
                                        </Text>
                                    </Flex>
                                </GridItem>
                            </Grid>
                        </Box>
                    </ModalBody>
                    <ModalFooter>
                        <Button variant="outline" colorScheme='green' size='sm' me={2} onClick={() => { onClose(); setEditModal(true) }} leftIcon={<EditIcon />}>Edit</Button>
                        <Button colorScheme="red" size='sm' mr={2} disabled={isLoding ? true : false} leftIcon={<DeleteIcon />} >{isLoding ? <Spinner /> : 'Delete'}</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
            <Edit isOpen={editModal} onClose={handleEditClose} selectedId={props.selectedId} editdata={data} setAction={setAction} fetchData={fetchData} />
        </div>
    )
}

export default View

================
File: Client/src/views/admin/opportunities/components/ImportModel.js
================
import { Button, Grid, GridItem, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text } from '@chakra-ui/react'
import Spinner from 'components/spinner/Spinner'
import { useFormik } from 'formik'
import { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import CommonFileUpload from 'components/commonFileUpload'

const ImportModal = (props) => {
    const { onClose, isOpen, text, customFields } = props
    const [isLoding, setIsLoding] = useState(false)
    const navigate = useNavigate();

    const initialValues = {
        opprotunities: ''
    }

    const formik = useFormik({
        initialValues: initialValues,
        onSubmit: (values, { resetForm }) => {
            AddData()
            resetForm();
        },
    });
    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik

    const AddData = async () => {
        try {
            setIsLoding(true)
            resetForm()

            if (values.opprotunities) {
                onClose();
                navigate('/opprotunitiesImport', { state: { fileData: values.opprotunities, customFields: customFields } });
            }

        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };

    return (
        <Modal onClose={onClose} isOpen={isOpen} isCentered>
            <ModalOverlay />
            <ModalContent>
                <ModalHeader>Import Opprotunities</ModalHeader>
                <ModalCloseButton />
                <ModalBody>
                    <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                        <GridItem colSpan={{ base: 12 }}>
                            <CommonFileUpload count={values.opprotunities.length} onFileSelect={(file) => setFieldValue('opprotunities', file)} text={text} />
                            <Text mb='10px' color={'red'}> {errors.opprotunities && touched.opprotunities && <>Please Select {text}</>}</Text>
                        </GridItem>
                    </Grid>
                </ModalBody>
                <ModalFooter>
                    <Button size="sm" variant='brand' onClick={handleSubmit} disabled={isLoding ? true : false} >{isLoding ? <Spinner /> : 'Save'}</Button>
                    <Button sx={{
                        marginLeft: 2,
                        textTransform: "capitalize",
                    }} variant="outline"
                        colorScheme="red" size="sm" onClick={() => {
                            onClose()
                            formik.resetForm()
                        }}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    )
}

export default ImportModal

================
File: Client/src/views/admin/opportunities/components/OpprtunityAdvanceSearch.js
================
import React from 'react';
import { useFormik } from "formik";
import * as yup from "yup";
import { Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Grid, GridItem, Input, FormLabel, Select, Text, Button, } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import { setSearchValue, getSearchData, setGetTagValues } from '../../../../redux/slices/advanceSearchSlice';
import { useDispatch } from 'react-redux';



const OpprtunityAdvanceSearch = (props) => {
    const { state, allData, advanceSearch, setAdvanceSearch, isLoding, setSearchedData, setDisplaySearchData, setSearchClear, setSearchbox } = props;

    const dispatch = useDispatch();
    const initialValues = {
        opportunityName: '',
        accountName2: '',
        opportunityAmount: '',
        expectedCloseDate: '',
        salesStage: '',
    }
    const validationSchema = yup.object({
        opportunityName: yup.string(),
        accountName2: yup.string(),
        opportunityAmount: yup.string(),
        expectedCloseDate: yup.string(),
        salesStage: yup.string()
    });
    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: validationSchema,
        onSubmit: (values, { resetForm }) => {
            dispatch(setSearchValue(values))
            dispatch(getSearchData({ values: values, allData: allData, type: 'Opprtunity' }))
            // const searchResult = allData?.filter(
            //     (item) =>
            //         (!values?.senderName || (item?.senderName && item?.senderName.toLowerCase().includes(values?.senderName?.toLowerCase()))) &&
            //         (!values?.realetedTo || (values.realetedTo === "contact" ? item.createBy : item.createByLead)) &&
            //         (!values?.createByName || (item?.createByName && item?.createByName.toLowerCase().includes(values?.createByName?.toLowerCase())))
            // )
            // let getValue = [values.senderName, values?.realetedTo, values?.createByName].filter(value => value);
            const getValue = [
                {
                    name: ["opportunityName"],
                    value: values.opportunityName
                },
                {
                    name: ["accountName2"],
                    value: values.accountName2
                },
                {
                    name: ["opportunityAmount"],
                    value: values.opportunityAmount
                },
                {
                    name: ["expectedCloseDate"],
                    value: values.expectedCloseDate
                },
                {
                    name: ["salesStage"],
                    value: values.salesStage
                },
            ]
            dispatch(setGetTagValues(getValue.filter(item => item.value)))
            setDisplaySearchData(true)
            setAdvanceSearch(false)
            resetForm();
            setSearchbox('');
        }
    })

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm, dirty } = formik;

    return (
        <>
            <Modal onClose={() => { setAdvanceSearch(false); resetForm() }} isOpen={advanceSearch} isCentered>
                <ModalOverlay />
                <ModalContent>
                    <ModalHeader>Advance Search</ModalHeader>
                    <ModalCloseButton onClick={() => { setAdvanceSearch(false); resetForm() }} />
                    <ModalBody>
                        <Grid templateColumns="repeat(12, 1fr)" mb={3} gap={2}>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Opportunity Name
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.opportunityName}
                                    name="opportunityName"
                                    placeholder='Enter Opportunity Name'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.opportunityName && touched.opportunityName && errors.opportunityName}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Account Name
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.accountName2}
                                    name="accountName2"
                                    placeholder='Enter Account Name'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.accountName2 && touched.accountName2 && errors.accountName2}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Opportunity Amount
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.opportunityAmount}
                                    name="opportunityAmount"
                                    placeholder='Enter Opportunity Amount'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.opportunityAmount && touched.opportunityAmount && errors.opportunityAmount}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Expected Close Date
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.expectedCloseDate}
                                    name="expectedCloseDate"
                                    type="date"
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.expectedCloseDate && touched.expectedCloseDate && errors.expectedCloseDate}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Sales Stage
                                </FormLabel>
                                <Select
                                    value={values.salesStage}
                                    name="salesStage"
                                    onChange={handleChange}
                                    fontWeight='500'
                                    placeholder={'Sales Stage'}
                                >
                                    <option value={"Prospecting"}>Prospecting</option>
                                    <option value={"Qualification"}>Qualification</option>
                                    <option value={"Needs Analysis"}>Needs Analysis</option>
                                    <option value={"Value Propositon"}>Value Propositon</option>
                                    <option value={"Identifying Decision Makers"}>Identifying Decision Makers</option>
                                    <option value={"Perception Analysis"}>Perception Analysis</option>
                                    <option value={"Proposal/Price Quote"}>Proposal/Price Quote</option>
                                    <option value={"Negotiation/Review"}>Negotiation/Review</option>
                                    <option value={"Closed/Won"}>Closed/Won</option>
                                    <option value={"Closed/Lost"}>Closed/Lost</option>
                                </Select>
                                <Text mb='10px' color={'red'}> {errors.salesStage && touched.salesStage && errors.salesStage}</Text>
                            </GridItem>

                        </Grid>
                    </ModalBody>
                    <ModalFooter>
                        <Button size="sm" variant="brand" mr={2} onClick={handleSubmit} disabled={isLoding || !dirty ? true : false} >{isLoding ? <Spinner /> : 'Search'}</Button>
                        <Button size="sm" variant="outline" colorScheme="red" onClick={() => resetForm()}>Clear</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        </>
    )
}

export default OpprtunityAdvanceSearch

================
File: Client/src/views/admin/opportunities/components/OpprtunityImport.js
================
import React, { useState, useEffect } from 'react'
import { useLocation, useNavigate } from 'react-router-dom';
import Papa from 'papaparse';
import {
    Flex,
    useColorModeValue,
    Select,
    Button,
    Grid,
    GridItem,
    Text
} from "@chakra-ui/react";
import { useFormik } from "formik";
import { postApi } from 'services/api';
import { toast } from 'react-toastify';
import moment from 'moment';
import ExcelJS from 'exceljs';
import Card from 'components/card/Card';

function OpprtunityImport() {

    const location = useLocation();
    const { fileData, customFields } = location.state || {};
    const [importedFileFields, setImportedFileFields] = useState([]);
    const [importedFileData, setImportedFileData] = useState([]);
    const [isLoding, setIsLoding] = useState(false);
    const navigate = useNavigate();
    const userId = JSON.parse(localStorage.getItem('user'))._id;
    const [filterContact, setFilterContact] = useState([]);

    const columns = [
        { Header: 'Fields In Crm', accessor: 'crmFields' },
        { Header: 'Fields In File', accessor: 'fileFields' },
    ];

    const initialFieldValues = Object.fromEntries(
        (customFields || []).map(field => [field?.name, ''])
    );
    const initialValues = {
        ...initialFieldValues
    };

    const fieldsInCrm = [
        ...customFields?.map((field) => ({ Header: field?.label, accessor: field?.name, type: field?.type, formikType: field?.validations?.find(obj => obj.hasOwnProperty('formikType')) }))
    ];

    const formik = useFormik({
        initialValues: initialValues,
        onSubmit: (values, { resetForm }) => {

            const opportunityData = importedFileData?.map((item, ind) => {
                const opportunity = {
                    createdDate: new Date(),
                    deleted: item[values.deleted || "deleted"] || false,
                    createBy: JSON.parse(localStorage.getItem('user'))._id,
                    modifiedBy: JSON.parse(localStorage.getItem('user'))._id,
                };

                fieldsInCrm?.forEach(field => {
                    const selectedField = values[field?.accessor];
                    const fieldValue = item[selectedField] || '';

                    if (field?.type?.toLowerCase() === "date") {
                        opportunity[field?.accessor] = moment(fieldValue).isValid() ? fieldValue : '';
                    } else if (field?.type?.toLowerCase() === "number" && ['positive', 'negative'].includes(field?.formikType?.toLowerCase())) {
                        opportunity[field?.accessor] = parseFloat(fieldValue) || '';
                    } else if (field?.type?.toLowerCase() === "number") {
                        opportunity[field?.accessor] = parseInt(fieldValue, 10) || '';
                    } else {
                        opportunity[field?.accessor] = fieldValue;
                    }
                });

                return opportunity;
            });

            AddData(opportunityData);
        }
    });

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik

    const AddData = async (opportunity) => {
        try {
            setIsLoding(true);
            let response = await postApi('api/opportunity/addMany', opportunity)
            if (response.status === 200) {
                toast.success(`Opprtunities imported successfully`)
                resetForm();
                navigate('/opportunities');
            }
        } catch (e) {
            console.error(e);
            toast.error(`Opprtunities import failed`)
            resetForm();
            navigate('/opportunities');
        }
        finally {
            setIsLoding(false)
        }
    };

    const parseFileData = async (file) => {
        const reader = new FileReader();
        const extension = file.name.split('.').pop().toLowerCase();

        reader.onload = async ({ target }) => {

            if (extension === 'csv') {
                const csv = Papa.parse(target.result, {
                    header: true,
                });
                const parsedData = csv?.data;

                if (parsedData && parsedData.length > 0) {
                    setImportedFileData(parsedData);
                    const fileHeadingFields = Object.keys(parsedData[0]);
                    setImportedFileFields(fileHeadingFields);
                } else {
                    toast.error("Empty or invalid CSV file");
                    navigate("/contacts");
                }

            } else if (extension === 'xlsx') {
                const data = new Uint8Array(target.result);
                const workbook = new ExcelJS.Workbook();

                await workbook.xlsx.load(data);

                const worksheet = workbook.getWorksheet(1);
                const jsonData = [];

                // Iterate over rows and cells
                worksheet.eachRow({ includeEmpty: true }, (row, rowNumber) => {
                    const rowData = {};
                    row.eachCell({ includeEmpty: true }, (cell, colNumber) => {
                        rowData[worksheet.getCell(1, colNumber).value] = cell.value;
                    });
                    jsonData.push(rowData);
                });
                jsonData?.splice(0, 1);
                setImportedFileData(jsonData);

                if (jsonData && jsonData.length > 0) {
                    const fileHeadingFields = Object.keys(jsonData[0]);
                    setImportedFileFields(fileHeadingFields);
                } else {
                    toast.error("Empty or invalid XLSX file");
                    navigate("/contacts");
                }
            }
        };

        if (extension === 'csv') {
            reader.readAsText(file);
        } else if (extension === 'xlsx') {
            const blob = new Blob([file]);
            reader.readAsArrayBuffer(blob);
        }
    };

    useEffect(() => {
        if (fileData && fileData.length > 0) {
            const firstFile = fileData[0];
            parseFileData(firstFile);
        }
    }, [fileData]);


    useEffect(() => {
        const filterContactData = importedFileFields?.filter(field => {
            const result = fieldsInCrm?.find(data => field === data?.accessor || field === data?.Header);
            if (result) {
                setFieldValue(result?.accessor, field);
                return true;
            }
            return false;
        });
        setFilterContact(filterContactData);
    }, [importedFileFields]);

    return (
        <>
            <Card overflowY={"auto"} className="importTable">
                <Text color={"secondaryGray.900"}
                    fontSize="22px"
                    fontWeight="700"
                    mb='20px'
                >Import Opprtunities</Text>
                <Grid templateColumns="repeat(12, 1fr)" mb={3} pb={2} gap={1} borderBottom={'1px solid #e2e8f0'}>
                    {
                        columns.map((column, index) => (
                            <GridItem key={index} colSpan={{ base: 6 }} fontWeight={'600'} fontSize={{ sm: "14px", lg: "14px" }} color="secondaryGray.900" style={{ textTransform: "uppercase" }}>
                                {column.Header}
                            </GridItem>
                        ))
                    }
                </Grid>
                <Grid templateColumns="repeat(12, 1fr)" mb={3} gap={1} overflowY={'auto'}>
                    {
                        fieldsInCrm?.map((item, index) => (
                            <>
                                <GridItem colSpan={{ base: 6 }} key={item.id} mt='10px'>
                                    {item.Header}
                                </GridItem>
                                <GridItem colSpan={{ base: 4 }}>
                                    <Select
                                        variant="flushed"
                                        fontWeight='500'
                                        isSearchable
                                        value={values[item.accessor]}
                                        name={item.accessor}
                                        onChange={handleChange}
                                    >
                                        <option value=''> {filterContact ? filterContact.find((data) => (item.Header === data || item.accessor === data) && data) ? filterContact.find((data) => (item.Header === data || item.accessor === data) && data) : 'Select Field In File' : 'Select Field In File'}</option>
                                        {
                                            importedFileFields?.map(field => (
                                                <option value={field} key={field}>{field}</option>
                                            ))
                                        }
                                    </Select>
                                </GridItem>
                            </>
                        ))
                    }
                </Grid>

                <Flex Flex justifyContent={'end'} mt='5' >
                    <Button size="sm" onClick={() => handleSubmit()} variant="brand">Save</Button>
                </Flex>
            </Card>
        </>
    )
}

export default OpprtunityImport

================
File: Client/src/views/admin/opportunities/AddEdit.js
================
import { CloseIcon } from '@chakra-ui/icons';
import { Button, Drawer, DrawerBody, DrawerContent, DrawerFooter, DrawerHeader, DrawerOverlay, Flex, FormLabel, Grid, GridItem, IconButton, Input, Select, Text, Textarea } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import dayjs from 'dayjs';
import { useFormik } from 'formik';
import { useState, useEffect } from 'react';
import { LiaMousePointerSolid } from 'react-icons/lia';
import { postApi, getApi, putApi } from 'services/api';
import { generateValidationSchema } from 'utils';
import CustomForm from 'utils/customForm';
import * as yup from 'yup'
import { opprtunitiesSchema } from '../../../schema/opprtunitiesSchema';
import UserModel from '../../../components/commonTableModel/UserModel';
import { toast } from 'react-toastify';
import { useSelector } from 'react-redux';
import AccountModel from '../../../components/commonTableModel/AccountModel';
import { HasAccess } from '../../../redux/accessUtils';

const AddEdit = (props) => {
    const { isOpen, size, onClose, type, setAction, selectedId } = props;
    const [isLoding, setIsLoding] = useState(false)
    const [userModel, setUserModel] = useState(false)
    const [accountModel, setAccountModel] = useState(false)
    const [userData, setUserData] = useState([]);
    const [opprtunityDetails, setOpportunityDetails] = useState({});
    const accountList = useSelector((state) => state?.accountData?.data?.data)
    const user = JSON.parse(localStorage.getItem("user"))
    const [accountAccess] = HasAccess(['Account'])

    const initialValues = {
        opportunityName: type === "edit" ? opprtunityDetails?.opportunityName : "",
        accountName: type === "edit" ? opprtunityDetails?.accountName : null,
        assignUser: type === "edit" ? opprtunityDetails?.assignUser : null,
        type: type === "edit" ? opprtunityDetails?.type : "",
        leadSource: type === "edit" ? opprtunityDetails?.leadSource : "",
        currency: type === "edit" ? opprtunityDetails?.currency : "",
        opportunityAmount: type === "edit" ? opprtunityDetails?.opportunityAmount : "",
        amount: type === "edit" ? opprtunityDetails?.amount : "",
        expectedCloseDate: type === "edit" ? opprtunityDetails?.expectedCloseDate : "",
        nextStep: type === "edit" ? opprtunityDetails?.nextStep : "",
        salesStage: type === "edit" ? opprtunityDetails?.salesStage : "",
        probability: type === "edit" ? opprtunityDetails?.probability : "",
        description: type === "edit" ? opprtunityDetails?.description : "",
        createBy: JSON.parse(localStorage.getItem('user'))._id,
        modifiedBy: JSON.parse(localStorage.getItem('user'))._id
    };


    const addData = async (values) => {
        try {
            setIsLoding(true)
            let response = await postApi('api/opportunity/add', values)
            if (response.status === 200) {
                onClose();
                toast.success(`Opprtunities Save successfully`)
                formik.resetForm();
                setAction((pre) => !pre)
            }
        } catch (e) {
            console.log(e);
            toast.error(`server error`)
        }
        finally {
            setIsLoding(false)
        }
    };
    const editData = async (values) => {
        try {
            setIsLoding(true)
            let response = await putApi(`api/opportunity/edit/${selectedId}`, values)
            if (response.status === 200) {
                onClose();
                toast.success(`Opprtunities Update successfully`)
                formik.resetForm();
                // setAction((pre) => !pre)
            }
        } catch (e) {
            console.log(e);
            toast.error(`server error`)
        }
        finally {
            setIsLoding(false)
        }
    };

    const handleCancel = () => {
        formik.resetForm();
        onClose()
    }

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: opprtunitiesSchema,
        enableReinitialize: true,
        onSubmit: (values, { resetForm }) => {
            if (type === "add") {
                addData(values)
            } else {
                const payload = { ...values, modifiedDate: new Date() }
                editData(payload)
            }
        },
    });

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, } = formik
    console.log(errors)
    const fetchData = async () => {
        setIsLoding(true)
        let result = await getApi('api/user/');
        setUserData(result?.data?.user);
        setIsLoding(false)
    }


    const fetchTaskData = async () => {
        if (type === "edit") {
            try {
                setIsLoding(true)
                let result = await getApi('api/opportunity/view/', selectedId)
                if (result?.status === 200) {
                    setOpportunityDetails(result?.data)
                }

            }
            catch (e) {
                console.log(e);
            }
            finally {
                setIsLoding(false)
            }
        }
    }

    useEffect(() => {
        if (user.role === 'superAdmin') fetchData();
    }, [])


    useEffect(() => {
        if (type === "edit") fetchTaskData();
    }, [type, selectedId])


    return (
        <div>
            {userModel && <UserModel onClose={() => setUserModel(false)} isOpen={userModel} fieldName={"assignUser"} setFieldValue={setFieldValue} data={userData} isLoding={isLoding} setIsLoding={setIsLoding} />}
            {accountModel && <AccountModel onClose={() => setAccountModel(false)} isOpen={accountModel} fieldName={"accountName"} setFieldValue={setFieldValue} data={accountList} />}

            <Drawer isOpen={isOpen} size={size}>
                <DrawerOverlay />
                <DrawerContent>
                    <DrawerHeader alignItems={"center"} justifyContent='space-between' display='flex'  >
                        {type === "add" ? "Add" : "Edit"} Opportunities
                        <IconButton onClick={() => handleCancel()} icon={<CloseIcon />} />
                    </DrawerHeader>
                    <DrawerBody>
                        <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Opportunity Name<Text color={"red"}>*</Text>
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.opportunityName}
                                    name="opportunityName"
                                    onBlur={handleBlur}
                                    onChange={handleChange}
                                    placeholder='Opportunity Name'
                                    fontWeight='500'
                                    borderColor={errors.opportunityName && touched.opportunityName ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.opportunityName && touched.opportunityName && errors.opportunityName}</Text>
                            </GridItem>
                            {
                                (user.role === 'superAdmin' || accountAccess?.view) &&
                                <GridItem colSpan={{ base: 12, md: 6 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                        Account Name
                                    </FormLabel>
                                    <Flex justifyContent={'space-between'}>
                                        <Select
                                            value={values.accountName}
                                            name="accountName"
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            mb={errors.accountName && touched.accountName ? undefined : '10px'}
                                            fontWeight='500'
                                            placeholder={'Account Name'}
                                            borderColor={errors.accountName && touched.accountName ? "red.300" : null}
                                        >
                                            {accountList?.length > 0 && accountList?.map((item) => {
                                                return <option value={item._id} key={item._id}>{`${item?.name}`}</option>
                                            })}
                                        </Select>
                                        <IconButton onClick={() => setAccountModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />
                                    </Flex>
                                    <Text mb='10px' fontSize='sm' color={'red'}> {errors.accountName && touched.accountName && errors.accountName}</Text>
                                </GridItem>
                            }
                            {
                                user.role === 'superAdmin' &&
                                <GridItem colSpan={{ base: 12, md: 6 }} >
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                        Assigned User
                                    </FormLabel>
                                    <Flex justifyContent={'space-between'}>
                                        <Select
                                            value={values.assignUser}
                                            name="assignUser"
                                            onBlur={handleBlur}
                                            onChange={handleChange}
                                            mb={errors.assignUser && touched.assignUser ? undefined : '10px'}
                                            fontWeight='500'
                                            placeholder={'Assign To'}
                                            borderColor={errors.assignUser && touched.assignUser ? "red.300" : null}
                                        >
                                            {userData?.map((item) => {
                                                return <option value={item._id} key={item._id}>{`${item?.firstName} ${item?.lastName}`}</option>
                                            })}
                                        </Select>
                                        <IconButton onClick={() => setUserModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />
                                    </Flex>
                                </GridItem>
                            }
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Type
                                </FormLabel>
                                <Select
                                    value={values.type}
                                    name="type"
                                    onBlur={handleBlur}
                                    onChange={handleChange}
                                    mb={errors.type && touched.type ? undefined : '10px'}
                                    fontWeight='500'
                                    placeholder={'Select Type'}
                                    borderColor={errors.type && touched.type ? "red.300" : null}
                                >
                                    <option value={"Existing Bussiness"} >Existing Bussiness</option>
                                    <option value={"New Bussiness"} >New Bussiness</option>
                                </Select>
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.type && touched.type && errors.type}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Lead Source
                                </FormLabel>
                                <Select
                                    value={values.leadSource}
                                    name="leadSource"
                                    onBlur={handleBlur}
                                    onChange={handleChange}
                                    mb={errors.leadSource && touched.leadSource ? undefined : '10px'}
                                    fontWeight='500'
                                    placeholder={'Select Lead Source'}
                                    borderColor={errors.leadSource && touched.leadSource ? "red.300" : null}
                                >
                                    <option value={"Cold Call"}>Cold Call</option>
                                    <option value={"Existing Customer"}>Existing Customer</option>
                                    <option value={"Self Generated"}>Self Generated</option>
                                    <option value={"Employee"}>Employee</option>
                                    <option value={"Partner"}>Partner</option>
                                    <option value={"Public Relation"}>Public Relation</option>
                                    <option value={"Direct Mail"}>Direct Mail</option>
                                    <option value={"Conference"}>Conference</option>
                                    <option value={"Trade Show"}>Trade Show</option>
                                    <option value={"Web Site"}>Web Site</option>
                                    <option value={"Word Of Mouth"}>Word Of Mouth</option>
                                    <option value={"Email"}>Email</option>
                                    <option value={"Other"}>Other</option>
                                </Select>
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.leadSource && touched.leadSource && errors.leadSource}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Currency
                                </FormLabel>
                                <Select
                                    value={values.currency}
                                    name="currency"
                                    onBlur={handleBlur}
                                    onChange={handleChange}
                                    mb={errors.currency && touched.currency ? undefined : '10px'}
                                    fontWeight='500'
                                    placeholder={'Select Currency'}
                                    borderColor={errors.currency && touched.currency ? "red.300" : null}
                                >
                                    <option value={"$"}>USD</option>
                                </Select>
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.currency && touched.currency && errors.currency}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Opportunity Amount<Text color={"red"}>*</Text>
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.opportunityAmount}
                                    name="opportunityAmount"
                                    type='number'
                                    onBlur={handleBlur}
                                    onChange={handleChange}
                                    placeholder='Opportunity Amount'
                                    fontWeight='500'
                                    borderColor={errors.opportunityAmount && touched.opportunityAmount ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.opportunityAmount && touched.opportunityAmount && errors.opportunityAmount}</Text>
                            </GridItem>

                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Amount
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.amount}
                                    name="amount"
                                    onBlur={handleBlur}
                                    onChange={handleChange}
                                    type='number'
                                    placeholder='Amount'
                                    fontWeight='500'
                                    borderColor={errors.amount && touched.amount ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.amount && touched.amount && errors.amount}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }} >
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Expected Close Date<Text color={"red"}>*</Text>
                                </FormLabel>
                                <Input
                                    type="date"
                                    fontSize='sm'
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    value={dayjs(values.expectedCloseDate).format("YYYY-MM-DD")}
                                    name="expectedCloseDate"
                                    fontWeight='500'
                                    borderColor={errors?.expectedCloseDate && touched?.expectedCloseDate ? "red.300" : null}
                                />
                                <Text fontSize='sm' mb='10px' color={'red'}> {errors.expectedCloseDate && touched.expectedCloseDate && errors.expectedCloseDate}</Text>
                            </GridItem>

                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Next Step
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    value={values.nextStep}
                                    name="nextStep"
                                    placeholder='Next Step'
                                    fontWeight='500'
                                    borderColor={errors.nextStep && touched.nextStep ? "red.300" : null}
                                />
                                <Text fontSize='sm' mb='10px' color={'red'}> {errors.nextStep && touched.nextStep && errors.nextStep}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Sales Stage<Text color={"red"}>*</Text>
                                </FormLabel>
                                <Select
                                    value={values.salesStage}
                                    name="salesStage"
                                    onBlur={handleBlur}
                                    onChange={handleChange}
                                    mb={errors.salesStage && touched.salesStage ? undefined : '10px'}
                                    fontWeight='500'
                                    placeholder={'Select Sales Stage'}
                                    borderColor={errors.salesStage && touched.salesStage ? "red.300" : null}
                                >
                                    <option value={"Prospecting"}>Prospecting</option>
                                    <option value={"Qualification"}>Qualification</option>
                                    <option value={"Needs Analysis"}>Needs Analysis</option>
                                    <option value={"Value Propositon"}>Value Propositon</option>
                                    <option value={"Identifying Decision Makers"}>Identifying Decision Makers</option>
                                    <option value={"Perception Analysis"}>Perception Analysis</option>
                                    <option value={"Proposal/Price Quote"}>Proposal/Price Quote</option>
                                    <option value={"Negotiation/Review"}>Negotiation/Review</option>
                                    <option value={"Closed/Won"}>Closed/Won</option>
                                    <option value={"Closed/Lost"}>Closed/Lost</option>
                                </Select>
                                <Text fontSize='sm' mb='10px' color={'red'}> {errors.salesStage && touched.salesStage && errors.salesStage}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Probability
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    value={values.probability}
                                    name="probability"
                                    placeholder='Probability'
                                    type='number'
                                    fontWeight='500'
                                    borderColor={errors.probability && touched.probability ? "red.300" : null}
                                />
                                <Text fontSize='sm' mb='10px' color={'red'}> {errors.probability && touched.probability && errors.probability}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Description
                                </FormLabel>
                                <Textarea
                                    fontSize='sm'
                                    value={values.description}
                                    name="description"
                                    resize={"none"}
                                    onBlur={handleBlur}
                                    onChange={handleChange}
                                    placeholder='Description'
                                    fontWeight='500'
                                    borderColor={errors.description && touched.description ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.description && touched.description && errors.description}</Text>
                            </GridItem>
                        </Grid>
                    </DrawerBody>
                    <DrawerFooter>
                        <Button sx={{ textTransform: "capitalize" }} size="sm" disabled={isLoding ? true : false} variant="brand" type="submit" onClick={handleSubmit}                        >
                            {isLoding ? <Spinner /> : 'Save'}
                        </Button>
                        <Button
                            variant="outline"
                            colorScheme='red' size="sm"
                            sx={{
                                marginLeft: 2,
                                textTransform: "capitalize",
                            }}
                            onClick={handleCancel}
                        >
                            Close
                        </Button>
                    </DrawerFooter>
                </DrawerContent>
            </Drawer>
        </div>
    )
}

export default AddEdit

================
File: Client/src/views/admin/opportunities/index.js
================
import { useEffect, useState } from 'react';
import { Link, useNavigate } from "react-router-dom";
import { DeleteIcon, EditIcon, ViewIcon } from '@chakra-ui/icons';
import { Button, Menu, MenuButton, MenuItem, MenuList, Text, useDisclosure } from '@chakra-ui/react';
import { getApi, deleteManyApi } from 'services/api';
import { HasAccess } from '../../../redux/accessUtils';
import CommonCheckTable from '../../../components/reactTable/checktable';
import { SearchIcon } from "@chakra-ui/icons";
import { CiMenuKebab } from 'react-icons/ci';
import moment from 'moment';
import { MdLeaderboard } from 'react-icons/md';
import { IoIosContact } from 'react-icons/io';
import AddEdit from './AddEdit';
import { useDispatch } from 'react-redux';
import { fetchEmailsData } from '../../../redux/slices/emailsSlice';
import { toast } from 'react-toastify';
import OpprtunityAdvanceSearch from './components/OpprtunityAdvanceSearch';
import { fetchOpportunityData } from '../../../redux/slices/opportunitySlice';
import CommonDeleteModel from '../../../components/commonDeleteModel'
import ImportModal from './components/ImportModel';

const Index = (props) => {
    const title = "Opprtunities";
    const [action, setAction] = useState(false);
    const { isOpen, onOpen, onClose } = useDisclosure();
    const [selectedValues, setSelectedValues] = useState([]);
    const [advanceSearch, setAdvanceSearch] = useState(false);
    const [getTagValuesOutSide, setGetTagValuesOutside] = useState([]);
    const [searchboxOutside, setSearchboxOutside] = useState('');
    const user = JSON.parse(localStorage.getItem("user"));
    const navigate = useNavigate();
    const dispatch = useDispatch();
    const [isLoding, setIsLoding] = useState(false);
    const [data, setData] = useState([]);
    const [displaySearchData, setDisplaySearchData] = useState(false);
    const [searchedData, setSearchedData] = useState([]);
    const [selectedId, setSelectedId] = useState();
    const [deleteModel, setDelete] = useState(false);
    const [edit, setEdit] = useState(false);
    const [type, setType] = useState("")
    const [isImport, setIsImport] = useState(false);

    const [permission, accountAccess] = HasAccess(["Opportunities", "Account"]);

    const actionHeader = {
        Header: "Action",
        accessor: "action",
        isSortable: false,
        center: true,
        cell: ({ row, i }) => (
            <Text fontSize="md" fontWeight="900" textAlign={"center"}>
                <Menu isLazy>
                    <MenuButton>
                        <CiMenuKebab />
                    </MenuButton>
                    <MenuList
                        minW={"fit-content"}
                        transform={"translate(1520px, 173px);"}
                    >
                        {permission?.update && (
                            <MenuItem
                                py={2.5}
                                icon={<EditIcon fontSize={15} mb={1} />}
                                onClick={() => {
                                    setType("edit");
                                    onOpen();
                                    setSelectedId(row?.values?._id);
                                }}
                            >
                                Edit
                            </MenuItem>
                        )}
                        {permission?.view && (
                            <MenuItem
                                py={2.5}
                                color={"green"}
                                icon={<ViewIcon mb={1} fontSize={15} />}
                                onClick={() => {
                                    navigate(`/opportunitiesView/${row?.values?._id}`);
                                }}
                            >
                                View
                            </MenuItem>
                        )}
                        {permission?.delete && (
                            <MenuItem
                                py={2.5}
                                color={"red"}
                                icon={<DeleteIcon fontSize={15} mb={1} />}
                                onClick={() => {
                                    setDelete(true);
                                    setSelectedValues([row?.values?._id]);
                                }}
                            >
                                Delete
                            </MenuItem>
                        )}
                    </MenuList>
                </Menu>
            </Text>
        ),
    };
    const tableColumns = [
        { Header: "#", accessor: "_id", isSortable: false, width: 10 },
        {
            Header: 'Opportunity Name', accessor: 'opportunityName', cell: (cell) => (
                <div className="selectOpt">
                    <Text
                        onClick={() => handleViewOpen(cell?.row?.original._id)}
                        me="10px"
                        sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' }, cursor: 'pointer' }}
                        color='brand.600'
                        fontSize="sm"
                        fontWeight="700"
                    >
                        {cell?.value}
                    </Text>
                </div>
            )
        },
        {
            Header: 'Account Name', accessor: 'accountName', cell: (cell) => (
                (user.role === 'superAdmin' || accountAccess?.view) ?
                    <div className="selectOpt">
                        <Text
                            onClick={() => navigate(cell?.row?.original.accountName !== null && `/accountView/${cell?.row?.original.accountName}`)}
                            me="10px"
                            sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' }, cursor: 'pointer' }}
                            color='brand.600'
                            fontSize="sm"
                            fontWeight="700"
                        >
                            {cell?.row?.original?.accountName2 ? cell?.row?.original?.accountName2 : "-"}
                        </Text>
                    </div>
                    :
                    <Text
                    >
                        {cell?.row?.original?.accountName2 ? cell?.row?.original?.accountName2 : "-"}
                    </Text>

            )
        },
        {
            Header: 'Opportunity Amount', accessor: 'opportunityAmount',
        },
        {
            Header: 'Expected Close Date', accessor: 'expectedCloseDate', cell: (cell) => (
                <div>{moment(cell?.value).format("YYYY-MM-DD")}</div>
            )
        },
        {
            Header: 'Sales Stage', accessor: 'salesStage',
        },
        ...(permission?.update || permission?.view || permission?.delete ? [actionHeader] : [])

    ];
    const handleViewOpen = (id) => {
        navigate(`/opportunitiesView/${id}`)
    }
    const customFields = [
        {
            "name": "opportunityName",
            "label": "Opportunity Name",
            "type": "text",
            "fixed": false,
            "isDefault": false,
            "delete": false,
            "belongsTo": null,
            "backendType": "Mixed",
            "isTableField": false,
            "isView": false,
            "options": [
                {
                    "name": "",
                    "value": "",
                    "_id": "6690be4a4e0f5916f4313f13"
                },
                {
                    "name": "",
                    "value": "",
                    "_id": "6690be4a4e0f5916f4313f14"
                }
            ],
            "validation": [
                {
                    "require": true,
                    "message": "Opportunity Name is required ",
                    "_id": "6690be4a4e0f5916f4313f15"
                },
                {
                    "min": false,
                    "value": "",
                    "message": "",
                    "_id": "6690be4a4e0f5916f4313f16"
                },
                {
                    "max": false,
                    "value": "",
                    "message": "",
                    "_id": "6690be4a4e0f5916f4313f17"
                },
                {
                    "value": "",
                    "message": "",
                    "match": false,
                    "_id": "6690be4a4e0f5916f4313f18"
                },
                {
                    "message": "",
                    "formikType": "",
                    "_id": "6690be4a4e0f5916f4313f19"
                }
            ],
            "_id": "6690be4a4e0f5916f4313f12"
        },
        {
            "name": "accountName",
            "label": "Account Name",
            "type": "text",
            "fixed": false,
            "isDefault": false,
            "delete": false,
            "belongsTo": null,
            "backendType": "Mixed",
            "isTableField": false,
            "isView": false,
            "options": [
                {
                    "name": "",
                    "value": "",
                    "_id": "6690be854e0f5916f4314260"
                },
                {
                    "name": "",
                    "value": "",
                    "_id": "6690be854e0f5916f4314261"
                }
            ],
            "validation": [
                {
                    "require": true,
                    "message": "Account Name is required ",
                    "_id": "6690be854e0f5916f4314262"
                },
                {
                    "min": false,
                    "value": "",
                    "message": "",
                    "_id": "6690be854e0f5916f4314263"
                },
                {
                    "max": false,
                    "value": "",
                    "message": "",
                    "_id": "6690be854e0f5916f4314264"
                },
                {
                    "value": "",
                    "message": "",
                    "match": false,
                    "_id": "6690be854e0f5916f4314265"
                },
                {
                    "message": "",
                    "formikType": "",
                    "_id": "6690be854e0f5916f4314266"
                }
            ],
            "_id": "6690be854e0f5916f431425f"
        },
        {
            "name": "opportunityAmount",
            "label": "Opportunity Amount",
            "type": "number",
            "fixed": false,
            "isDefault": false,
            "delete": false,
            "belongsTo": null,
            "backendType": "Mixed",
            "isTableField": false,
            "isView": false,
            "options": [
                {
                    "name": "",
                    "value": "",
                    "_id": "6690bea44e0f5916f43145c5"
                },
                {
                    "name": "",
                    "value": "",
                    "_id": "6690bea44e0f5916f43145c6"
                }
            ],
            "validation": [
                {
                    "require": true,
                    "message": "Opportunity Amount is required ",
                    "_id": "6690bea44e0f5916f43145c7"
                },
                {
                    "min": false,
                    "value": "",
                    "message": "",
                    "_id": "6690bea44e0f5916f43145c8"
                },
                {
                    "max": false,
                    "value": "",
                    "message": "",
                    "_id": "6690bea44e0f5916f43145c9"
                },
                {
                    "value": "",
                    "message": "",
                    "match": false,
                    "_id": "6690bea44e0f5916f43145ca"
                },
                {
                    "message": "",
                    "formikType": "",
                    "_id": "6690bea44e0f5916f43145cb"
                }
            ],
            "_id": "6690bea44e0f5916f43145c4"
        },
        {
            "name": "expectedCloseDate",
            "label": "Expected Close Date",
            "type": "date",
            "fixed": false,
            "isDefault": false,
            "delete": false,
            "belongsTo": null,
            "backendType": "Mixed",
            "isTableField": false,
            "isView": false,
            "options": [
                {
                    "name": "",
                    "value": "",
                    "_id": "6690bec04e0f5916f4314942"
                },
                {
                    "name": "",
                    "value": "",
                    "_id": "6690bec04e0f5916f4314943"
                }
            ],
            "validation": [
                {
                    "require": true,
                    "message": "Expected Close Date is required ",
                    "_id": "6690bec04e0f5916f4314944"
                },
                {
                    "min": false,
                    "value": "",
                    "message": "",
                    "_id": "6690bec04e0f5916f4314945"
                },
                {
                    "max": false,
                    "value": "",
                    "message": "",
                    "_id": "6690bec04e0f5916f4314946"
                },
                {
                    "value": "",
                    "message": "",
                    "match": false,
                    "_id": "6690bec04e0f5916f4314947"
                },
                {
                    "message": "",
                    "formikType": "date",
                    "_id": "6690bec04e0f5916f4314948"
                }
            ],
            "_id": "6690bec04e0f5916f4314941"
        },
        {
            "name": "salesStage",
            "label": "Sales Stage",
            "type": "select",
            "fixed": false,
            "isDefault": false,
            "delete": false,
            "belongsTo": null,
            "backendType": "Mixed",
            "isTableField": false,
            "isView": false,
            "options": [
                {
                    "name": "Prospecting",
                    "value": "Prospecting",
                    "_id": "6690bf4a4e0f5916f4314cd7"
                },
                {
                    "name": "Qualification",
                    "value": "Qualification",
                    "_id": "6690bf4a4e0f5916f4314cd8"
                },
                {
                    "name": "Needs Analysis",
                    "value": "Needs Analysis",
                    "_id": "6690bf4a4e0f5916f4314cd9"
                },
                {
                    "name": "Value Propositon",
                    "value": "Value Propositon",
                    "_id": "6690bf4a4e0f5916f4314cda"
                },
                {
                    "name": "Identifying Decision Makers",
                    "value": "Identifying Decision Makers",
                    "_id": "6690bf4a4e0f5916f4314cdb"
                },
                {
                    "name": "Perception Analysis",
                    "value": "Perception Analysis",
                    "_id": "6690bf4a4e0f5916f4314cdc"
                },
                {
                    "name": "Proposal/Price Quote",
                    "value": "Proposal/Price Quote",
                    "_id": "6690bf4a4e0f5916f4314cdd"
                },
                {
                    "name": "Negotiation/Review",
                    "value": "Negotiation/Review",
                    "_id": "6690bf4a4e0f5916f4314cde"
                },
                {
                    "name": "Closed/Won",
                    "value": "Closed/Won",
                    "_id": "6690bf4a4e0f5916f4314cdf"
                },
                {
                    "name": "Closed/Lost",
                    "value": "Closed/Lost",
                    "_id": "6690bf4a4e0f5916f4314ce0"
                }
            ],
            "validation": [
                {
                    "require": true,
                    "message": "Sales Stage is required",
                    "_id": "6690bf4a4e0f5916f4314ce1"
                },
                {
                    "min": false,
                    "value": "",
                    "message": "",
                    "_id": "6690bf4a4e0f5916f4314ce2"
                },
                {
                    "max": false,
                    "value": "",
                    "message": "",
                    "_id": "6690bf4a4e0f5916f4314ce3"
                },
                {
                    "value": "",
                    "message": "",
                    "match": false,
                    "_id": "6690bf4a4e0f5916f4314ce4"
                },
                {
                    "message": "",
                    "formikType": "",
                    "_id": "6690bf4a4e0f5916f4314ce5"
                }
            ],
            "_id": "6690bf4a4e0f5916f4314cd6"
        }
    ]

    const handleOpenAdd = () => {
        onOpen();
        setType("add")
    }

    const handleDelete = async (ids) => {
        try {
            setIsLoding(true);
            let response = await deleteManyApi("api/opportunity/deleteMany", ids);
            if (response.status === 200) {
                toast.success(`Opprtunities Delete successfully`)
                setSelectedValues([]);
                setDelete(false);
                setAction((pre) => !pre);
            }
        } catch (error) {
            console.log(error);
            toast.error(`server error`)

        } finally {
            setIsLoding(false);
        }
    };

    const fetchData = async () => {
        setIsLoding(true)
        const result = await dispatch(fetchOpportunityData())

        if (result.payload.status === 200) {
            setData(result?.payload?.data);
        } else {
            toast.error("Failed to fetch data", "error");
        }
        setIsLoding(false)
    }

    // const [columns, setColumns] = useState([...tableColumns]);
    // const [selectedColumns, setSelectedColumns] = useState([...tableColumns]);
    // const dataColumn = tableColumns?.filter(item => selectedColumns?.find(colum => colum?.Header === item.Header))


    useEffect(() => {
        fetchData();
    }, [action])

    return (
        <div>
            <CommonCheckTable
                title={title}
                isLoding={isLoding}
                columnData={tableColumns ?? []}
                // dataColumn={dataColumn ?? []}
                allData={data ?? []}
                tableData={data}
                searchDisplay={displaySearchData}
                setSearchDisplay={setDisplaySearchData}
                searchedDataOut={searchedData}
                setSearchedDataOut={setSearchedData}
                tableCustomFields={[]}
                access={permission}
                // action={action}
                // setAction={setAction}
                // selectedColumns={selectedColumns}
                // setSelectedColumns={setSelectedColumns}
                // isOpen={isOpen}
                // onClose={onclose}
                setIsImport={setIsImport}
                onOpen={handleOpenAdd}
                selectedValues={selectedValues}
                setSelectedValues={setSelectedValues}
                setDelete={setDelete}
                deleteMany={false}
                AdvanceSearch={
                    <Button variant="outline" colorScheme='brand' leftIcon={<SearchIcon />} mt={{ sm: "5px", md: "0" }} size="sm" onClick={() => setAdvanceSearch(true)}>Advance Search</Button>
                }
                getTagValuesOutSide={getTagValuesOutSide}
                searchboxOutside={searchboxOutside}
                setGetTagValuesOutside={setGetTagValuesOutside}
                setSearchboxOutside={setSearchboxOutside}
                handleSearchType="OpprtunitySearch"
            />

            <OpprtunityAdvanceSearch
                advanceSearch={advanceSearch}
                setAdvanceSearch={setAdvanceSearch}
                setSearchedData={setSearchedData}
                setDisplaySearchData={setDisplaySearchData}
                allData={data ?? []}
                setAction={setAction}
                setGetTagValues={setGetTagValuesOutside}
                setSearchbox={setSearchboxOutside}
            />

            <AddEdit isOpen={isOpen} size={"lg"} onClose={onClose} setAction={setAction} type={type} selectedId={selectedId} />
            <CommonDeleteModel
                isOpen={deleteModel}
                onClose={() => setDelete(false)}
                type="Opportunities"
                handleDeleteData={handleDelete}
                ids={selectedValues}
            />

            <ImportModal
                text="Opprotunities file"
                isOpen={isImport}
                onClose={setIsImport}
                customFields={customFields}
            />
        </div>
    )
}

export default Index

================
File: Client/src/views/admin/opportunities/View.js
================
import { Button, Grid, GridItem, Flex, IconButton, Text, Menu, MenuButton, MenuDivider, MenuItem, MenuList, useDisclosure, Box, Heading, Input, Select } from '@chakra-ui/react'
import { AddIcon, ChevronDownIcon, DeleteIcon, EditIcon } from "@chakra-ui/icons";
import React from 'react'
import moment from 'moment'
import { Link, useNavigate, useParams } from 'react-router-dom'
import { BiLink } from 'react-icons/bi'
import { useEffect } from 'react'
import { useState } from 'react'
import Card from 'components/card/Card'
import { IoIosArrowBack } from "react-icons/io";
import { HasAccess } from '../../../redux/accessUtils';
import { HSeparator } from 'components/separator/Separator';
import AddEdit from './AddEdit';
import CommonDeleteModel from 'components/commonDeleteModel';
import { deleteManyApi, putApi, getApi } from '../../../services/api';
import { FaFilePdf } from "react-icons/fa";
import html2pdf from "html2pdf.js";
import { opprtunitiesSchema } from '../../../schema/opprtunitiesSchema';
import { useFormik } from 'formik';
import dayjs from 'dayjs';
import { toast } from 'react-toastify';

const View = (props) => {
    const params = useParams()
    const { id } = params
    const user = JSON.parse(localStorage.getItem("user"))

    const [opportunityAccess, accountAccess] = HasAccess(['Opportunities', 'Account'])

    const [data, setData] = useState()
    const { onOpen, onClose } = useDisclosure()
    const [edit, setEdit] = useState(false);
    const [deleteModel, setDelete] = useState(false);
    const [deleteManyModel, setDeleteManyModel] = useState(false);
    const [loading, setLoading] = useState(false)
    const navigate = useNavigate()
    const [type, setType] = useState("")
    const [editableField, setEditableField] = useState(null);
    const [editableFieldName, setEditableFieldName] = useState(null);
    const today = new Date().toISOString().split('T')[0];
    const todayTime = new Date().toISOString().split('.')[0];
    const fetchViewData = async () => {
        if (id) {
            let result = await getApi('api/opportunity/view/', id);
            setData(result?.data);
        }
    }
    const generatePDF = () => {
        setLoading(true)
        const element = document.getElementById("reports");
        const hideBtn = document.getElementById("hide-btn");

        if (element) {
            hideBtn.style.display = 'none';
            html2pdf()
                .from(element)
                .set({
                    margin: [0, 0, 0, 0],
                    filename: `Opportunities_Details_${moment().format("DD-MM-YYYY")}.pdf`,
                    image: { type: "jpeg", quality: 0.98 },
                    html2canvas: { scale: 2, useCORS: true, allowTaint: true },
                    jsPDF: { unit: "in", format: "letter", orientation: "portrait" },
                })
                .save().then(() => {
                    setLoading(false)
                    hideBtn.style.display = '';
                })
            // }, 500);
        } else {
            console.error("Element with ID 'reports' not found.");
            setLoading(false)
        }
    };
    const handleDeleteOpportunities = async (ids) => {
        try {
            let response = await deleteManyApi('api/opportunities/deleteMany', ids)
            if (response.status === 200) {
                navigate('/opportunities')
                toast.success(`Opprtunities Delete successfully`)
                setDeleteManyModel(false)
            }
        } catch (error) {
            console.log(error)
            toast.error(`server error`)

        }

    }

    const initialValues = {
        opportunityName: data?.opportunityName,
        accountName: data?.accountName,
        assignUser: data?.assignUser,
        type: data?.type,
        leadSource: data?.leadSource,
        currency: data?.currency,
        opportunityAmount: data?.opportunityAmount,
        amount: data?.amount,
        expectedCloseDate: data?.expectedCloseDate,
        nextStep: data?.nextStep,
        salesStage: data?.salesStage,
        probability: data?.probability,
        description: data?.description,
        modifiedBy: JSON.parse(localStorage.getItem('user'))._id
    }

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: opprtunitiesSchema,
        enableReinitialize: true,
        onSubmit: async (values, { resetForm }) => {
            setEditableField(null);
            const payload = {
                ...values,
                modifiedDate: new Date()
            }
            let response = await putApi(`api/opportunity/edit/${id}`, payload)
            if (response.status === 200) {
                fetchViewData()
                toast.success(`${editableFieldName} Update successfully`)
            } else {
                toast.error(`${editableFieldName} not Update`)
            }
        },
    });
    const handleDoubleClick = (fieldName, value, name) => {
        formik.setFieldValue(fieldName, value);
        setEditableField(fieldName)
        setEditableFieldName(name)
    };

    const handleBlur = (e) => {
        formik.handleSubmit();
    };
    useEffect(() => {
        fetchViewData()
    }, [id, edit])

    return (
        <div>
            <Grid templateColumns="repeat(4, 1fr)" gap={3} id="reports">
                <GridItem colSpan={{ base: 4 }}>
                <Heading size="lg" m={3}>
                    {data?.opportunityName || ""}
                </Heading>

                </GridItem>
                <GridItem colSpan={{ base: 4 }}>

                    <Card >
                        <Grid gap={4}>
                            <GridItem colSpan={2}>
                                <Box>
                                    <Box display={"flex"} justifyContent={"space-between"} >
                                        <Heading size="md" mb={3}>
                                            Opportunities Details
                                        </Heading>
                                        <Flex id="hide-btn" >
                                            <Menu>
                                                {(user.role === 'superAdmin' || opportunityAccess?.create || opportunityAccess?.update || opportunityAccess?.delete) && <MenuButton variant="outline" colorScheme='blackAlpha' size="sm" va mr={2.5} as={Button} rightIcon={<ChevronDownIcon />}>
                                                    Actions
                                                </MenuButton>}
                                                <MenuDivider />
                                                <MenuList minWidth={2}>
                                                    {(user.role === 'superAdmin' || opportunityAccess?.create) && <MenuItem onClick={() => { setEdit(true); setType("add"); formik.resetForm() }
                                                    } alignItems={'start'} color={'blue'} icon={<AddIcon />}>Add</MenuItem>}
                                                    {(user.role === 'superAdmin' || opportunityAccess?.update) && <MenuItem onClick={() => { setEdit(true); setType("edit") }} alignItems={'start'} icon={<EditIcon />}>Edit</MenuItem>}
                                                    <MenuItem onClick={generatePDF} alignItems={"start"} icon={<FaFilePdf />} display={"flex"} style={{ alignItems: "center" }}>Print as PDF</MenuItem >

                                                    {(user.role === 'superAdmin' || opportunityAccess?.delete) && <>
                                                        <MenuDivider />
                                                        <MenuItem alignItems={'start'} onClick={() => setDeleteManyModel(true)} color={'red'} icon={<DeleteIcon />}>Delete</MenuItem>
                                                    </>}
                                                </MenuList>
                                            </Menu>
                                            <Button leftIcon={<IoIosArrowBack />} size='sm' variant="brand" onClick={() => navigate(-1)} >
                                                Back
                                            </Button>
                                        </Flex>
                                    </Box>
                                    <HSeparator />
                                </Box>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Opportunity Name </Text>
                                {
                                    editableField === "opportunityName" ?
                                        <>
                                            <Input
                                                id="text"
                                                name="opportunityName"
                                                type="text"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.opportunityName}
                                                borderColor={formik?.errors?.opportunityName && formik?.touched?.opportunityName ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.opportunityName && formik?.touched.opportunityName && formik?.errors.opportunityName}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("opportunityName", data?.opportunityName, "Opportunity Name")}>{data?.opportunityName ? data?.opportunityName : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Account Name </Text>
                                {
                                    data?.accountName ?
                                        <Link to={accountAccess?.view && `/accountView/${data?.accountName}`}>
                                            <Text color={accountAccess?.view ? 'blue.500' : 'blackAlpha.900'} sx={{ '&:hover': { color: accountAccess?.view ? 'blue.500' : 'blackAlpha.900', textDecoration: accountAccess?.view ? 'underline' : 'none' } }} style={{ cursor: "pointer" }}>{data?.accountName2 ? data?.accountName2 : ' - '}</Text>
                                        </Link>
                                        :
                                        <Text color={accountAccess?.view ? 'blue.500' : 'blackAlpha.900'} sx={{ '&:hover': { color: accountAccess?.view ? 'blue.500' : 'blackAlpha.900', textDecoration: accountAccess?.view ? 'underline' : 'none' } }}>{data?.accountName2 ? data?.accountName2 : ' - '}</Text>

                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Assigned User </Text>
                                {
                                    data?.assignUser ?
                                        <Link to={user.role === 'superAdmin' && `/userView/${data?.assignUser}`}>
                                            <Text color={user.role === 'superAdmin' ? 'blue.500' : 'blackAlpha.900'} sx={{ '&:hover': { color: user.role === 'superAdmin' ? 'blue.500' : 'blackAlpha.900', textDecoration: user.role === 'superAdmin' ? 'underline' : 'none' } }} style={{ cursor: "pointer" }}>{data?.assignUserName ? data?.assignUserName : ' - '}</Text>
                                        </Link>
                                        :
                                        <Text color={user.role === 'superAdmin' ? 'blue.500' : 'blackAlpha.900'} sx={{ '&:hover': { color: user.role === 'superAdmin' ? 'blue.500' : 'blackAlpha.900', textDecoration: user.role === 'superAdmin' ? 'underline' : 'none' } }}>{data?.assignUserName ? data?.assignUserName : ' - '}</Text>

                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Type</Text>
                                {
                                    editableField === "type" ?
                                        <>
                                            <Select
                                                value={formik?.values.type}
                                                name="type"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                mb={formik?.errors.type && formik?.touched.type ? undefined : '10px'}
                                                fontWeight='500'
                                                placeholder={'Type'}
                                                borderColor={formik?.errors.type && formik?.touched.type ? "red.300" : null}
                                            >
                                                <option value={"Existing Bussiness"} >Existing Bussiness</option>
                                                <option value={"New Bussiness"} >New Bussiness</option>
                                            </Select>
                                            <Text mb='10px' color={'red'}> {formik?.errors.type && formik?.touched.type && formik?.errors.type}</Text>

                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("type", data?.type, "Type")}>{data?.type ? data?.type : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Lead Source</Text>
                                {
                                    editableField === "leadSource" ?
                                        <>
                                            <Select
                                                value={formik?.values.leadSource}
                                                name="leadSource"
                                                onChange={formik?.handleChange}
                                                onBlur={handleBlur}
                                                mb={formik?.errors.leadSource && formik?.touched.leadSource ? undefined : '10px'}
                                                fontWeight='500'
                                                placeholder={'Lead Source'}
                                                borderColor={formik?.errors.leadSource && formik?.touched.leadSource ? "red.300" : null}
                                            >
                                                <option value={"Cold Call"}>Cold Call</option>
                                                <option value={"Existing Customer"}>Existing Customer</option>
                                                <option value={"Self Generated"}>Self Generated</option>
                                                <option value={"Employee"}>Employee</option>
                                                <option value={"Partner"}>Partner</option>
                                                <option value={"Public Relation"}>Public Relation</option>
                                                <option value={"Direct Mail"}>Direct Mail</option>
                                                <option value={"Conference"}>Conference</option>
                                                <option value={"Trade Show"}>Trade Show</option>
                                                <option value={"Web Site"}>Web Site</option>
                                                <option value={"Word Of Mouth"}>Word Of Mouth</option>
                                                <option value={"Email"}>Email</option>
                                                <option value={"Other"}>Other</option>
                                            </Select>
                                            <Text mb='10px' color={'red'}> {formik.errors.leadSource && formik.touched.leadSource && formik.errors.leadSource}</Text>
                                        </>

                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("leadSource", data?.leadSource, "Lead Source")}>{data?.leadSource ? data?.leadSource : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Currency</Text>
                                {
                                    editableField === "currency" ?
                                        <>
                                            <Select
                                                value={formik?.values.currency}
                                                name="currency"
                                                onChange={formik?.handleChange}
                                                onBlur={handleBlur}
                                                mb={formik?.errors.currency && formik?.touched.currency ? undefined : '10px'}
                                                fontWeight='500'
                                                placeholder={'Select Currency'}
                                                borderColor={formik?.errors.currency && formik?.touched.currency ? "red.300" : null}
                                            >
                                                <option value={"$"}>USD</option>
                                            </Select>
                                            <Text mb='10px' color={'red'}> {formik?.errors.currency && formik?.touched.currency && formik?.errors.currency}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("currency", data?.currency, "Currency")}>{data?.currency ? data?.currency : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Opportunity Amount</Text>
                                {
                                    editableField === "opportunityAmount" ?
                                        <>
                                            <Input
                                                id="text"
                                                name="opportunityAmount"
                                                type="number"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.opportunityAmount}
                                                autoFocus
                                                borderColor={formik?.errors?.opportunityAmount && formik?.touched?.opportunityAmount ? "red.300" : null}
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.opportunityAmount && formik?.touched.opportunityAmount && formik?.errors.opportunityAmount}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("opportunityAmount", data?.opportunityAmount, "Opportunity Amount")}>{data?.opportunityAmount ? data?.opportunityAmount : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Amount</Text>
                                {
                                    editableField === "amount" ?
                                        <>
                                            <Input
                                                id="text"
                                                name="amount"
                                                type="number"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.amount}
                                                autoFocus
                                                borderColor={formik?.errors?.amount && formik?.touched?.amount ? "red.300" : null}
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.amount && formik?.touched.amount && formik?.errors.amount}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("amount", data?.amount, "Amount")}>{data?.amount ? data?.amount : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Expected Close Date</Text>
                                {
                                    editableField === "expectedCloseDate" ?
                                        <>
                                            <Input
                                                id="text"
                                                name="expectedCloseDate"
                                                type="date"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={dayjs(formik.values.expectedCloseDate).format("YYYY-MM-DD")}
                                                autoFocus
                                                borderColor={formik?.errors?.expectedCloseDate && formik?.touched?.expectedCloseDate ? "red.300" : null}
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.expectedCloseDate && formik?.touched.expectedCloseDate && formik?.errors.expectedCloseDate}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("expectedCloseDate", data?.expectedCloseDate, "Expected Close Date")}>{data?.expectedCloseDate ? dayjs(data?.expectedCloseDate).format("YYYY-MM-DD") : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Next Step</Text>
                                {
                                    editableField === "nextStep" ?
                                        <>
                                            <Input
                                                id="text"
                                                name="nextStep"
                                                type="text"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.nextStep}
                                                autoFocus
                                                borderColor={formik?.errors?.nextStep && formik?.touched?.nextStep ? "red.300" : null}
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.nextStep && formik?.touched.nextStep && formik?.errors.nextStep}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("nextStep", data?.nextStep, "Next Step")}>{data?.nextStep ? data?.nextStep : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Sales Stage</Text>
                                {
                                    editableField === "salesStage" ?
                                        <>
                                            <Select
                                                value={formik?.values.salesStage}
                                                name="salesStage"
                                                onChange={formik?.handleChange}
                                                onBlur={handleBlur}
                                                mb={formik?.errors.salesStage && formik?.touched.salesStage ? undefined : '10px'}
                                                fontWeight='500'
                                                placeholder={'Sales Stage'}
                                                borderColor={formik?.errors.salesStage && formik?.touched.salesStage ? "red.300" : null}
                                            >
                                                <option value={"Prospecting"}>Prospecting</option>
                                                <option value={"Qualification"}>Qualification</option>
                                                <option value={"Needs Analysis"}>Needs Analysis</option>
                                                <option value={"Value Propositon"}>Value Propositon</option>
                                                <option value={"Identifying Decision Makers"}>Identifying Decision Makers</option>
                                                <option value={"Perception Analysis"}>Perception Analysis</option>
                                                <option value={"Proposal/Price Quote"}>Proposal/Price Quote</option>
                                                <option value={"Negotiation/Review"}>Negotiation/Review</option>
                                                <option value={"Closed/Won"}>Closed/Won</option>
                                                <option value={"Closed/Lost"}>Closed/Lost</option>
                                            </Select>
                                            <Text mb='10px' color={'red'}> {formik?.errors.salesStage && formik?.touched.salesStage && formik?.errors.salesStage}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("salesStage", data?.salesStage, "Sales Stage")}>{data?.salesStage ? data?.salesStage : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Probability</Text>
                                {
                                    editableField === "probability" ?
                                        <>
                                            <Input
                                                id="text"
                                                name="probability"
                                                type="number"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.probability}
                                                autoFocus
                                                borderColor={formik?.errors?.probability && formik?.touched?.probability ? "red.300" : null}
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.probability && formik?.touched.probability && formik?.errors.probability}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("probability", data?.probability, "Probability")}>{data?.probability ? data?.probability : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Description</Text>
                                {
                                    editableField === "description" ?
                                        <>
                                            <Input
                                                id="text"
                                                name="description"
                                                type="text"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.description}
                                                autoFocus
                                                borderColor={formik?.errors?.description && formik?.touched?.description ? "red.300" : null}
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.description && formik?.touched.description && formik?.errors.description}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("description", data?.description, "Description")}>{data?.description ? data?.description : ' - '}</Text>
                                }
                            </GridItem>


                            {/* <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Task reminder </Text>
                                <Text>{data?.reminder ? data?.reminder : ' - '}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Assign To  </Text>
                                <Link to={data?.assignTo ? opportunityAccess?.view && `/contactView/${data?.assignTo}` : leadAccess?.view && `/leadView/${data?.assignToLead}`}>
                                    <Text color={(data?.category === 'contact' && (opportunityAccess?.view || user?.role === 'superAdmin')) ? 'brand.600' : (leadAccess?.view || user?.role === 'superAdmin' && data?.category === 'lead') ? 'brand.600' : 'blackAlpha.900'} sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}>{data?.assignToName ? data?.assignToName : ' - '}</Text>
                                </Link>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Task createBy </Text>
                                <Text>{data?.createByName ? data?.createByName : ' - '}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 2 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Task Description</Text>
                                {
                                    editableField === "description" ?
                                        <>
                                            <Input
                                                id="text"
                                                name="description"
                                                type="text"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.description}
                                                autoFocus
                                                borderColor={formik?.errors?.description && formik?.touched?.description ? "red.300" : null}
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.description && formik?.touched.description && formik?.errors.description}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("description", data?.description)}>{data?.description ? data?.description : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Task notes </Text>
                                {
                                    editableField === "notes" ?
                                        <>
                                            <Input
                                                id="text"
                                                name="notes"
                                                type="text"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.notes}
                                                autoFocus
                                                borderColor={formik?.errors?.notes && formik?.touched?.notes ? "red.300" : null}
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.notes && formik?.touched.notes && formik?.errors.notes}</Text>

                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("notes", data?.notes)}>{data?.notes ? data?.notes : ' - '}</Text>
                                }
                            </GridItem> */}
                        </Grid>
                    </Card>
                </GridItem>

            </Grid>
            {
                (opportunityAccess?.update || opportunityAccess?.delete || user?.role === 'superAdmin') && <Card mt={3}>
                    <Grid templateColumns="repeat(6, 1fr)" gap={1}>
                        <GridItem colStart={6} >
                            <Flex justifyContent={"right"}>
                                {(opportunityAccess?.update || user?.role === 'superAdmin') && <Button size="sm" onClick={() => { setEdit(true); setType("edit") }} leftIcon={<EditIcon />} mr={2.5} variant="outline" colorScheme="green">Edit</Button>}
                                {(opportunityAccess?.delete || user?.role === 'superAdmin') && <Button size="sm" style={{ background: 'red.800' }} onClick={() => setDeleteManyModel(true)} leftIcon={<DeleteIcon />} colorScheme="red" >Delete</Button>}
                            </Flex>
                        </GridItem>
                    </Grid>
                </Card>
            }
            <AddEdit isOpen={edit} size="lg" onClose={() => setEdit(false)} viewClose={onClose} selectedId={id?.event ? id?.event?._def?.extendedProps?._id : id} type={type} />
            <CommonDeleteModel isOpen={deleteManyModel} onClose={() => setDeleteManyModel(false)} type='Opportunities' handleDeleteData={handleDeleteOpportunities} ids={[id]} />
        </div >
    )
}

export default View

================
File: Client/src/views/admin/payments/index.js
================
import { Elements } from '@stripe/react-stripe-js';
import { loadStripe } from '@stripe/stripe-js';
import PaymentForm from "./paymentForm";
import Card from "components/card/Card";
import { Flex, Grid, GridItem } from "@chakra-ui/react";

const PUBLIC_KEY = "pk_test_51Nx0ulSFr3y25H3gtYaIaVQDwcMVg1USXhA8DCu2sApXlLDf6vhCRLqqBNj2gKoeO2O5SiF5SZ1zCukR1IMztGFK00WeIq8rz3"

const stirpeTestPromise = loadStripe(PUBLIC_KEY)

const StripeContainer = () => {
    return (

        <Grid templateColumns="repeat(12, 1fr)" gap={3}>

            <GridItem colSpan={{ base: 12, md: 6 }}>
                <Card>
                    <Elements stripe={stirpeTestPromise}>
                        <PaymentForm />
                    </Elements>
                </Card>
            </GridItem>
            <GridItem colSpan={{ base: 12, md: 6 }}>
                <Card>
                    <Flex justifyContent={'center'} alignItems={'center'} height={'100%'} width={'100%'}>
                        <img src={require('../../../assets/img/pay.avif')} />
                    </Flex>
                </Card>
            </GridItem>
        </Grid>

    );
};

export default StripeContainer;

================
File: Client/src/views/admin/payments/paymentForm.js
================
import { Button, FormLabel, GridItem, Input, Text } from "@chakra-ui/react"
import { useFormik } from "formik"
import * as yup from 'yup'


export default function PaymentForm() {

    const initialValues = {
        name: "",
        amount: '',
        email: '',
    }
    const validation = yup.object({
        name: yup.string().min(2).required('First Name is required'),
        amount: yup.number().max(999999.99, 'total amount due must be no more than ₹999,999.99.').required('Amount is required'),
        email: yup.string().email().required('Email is required'),
    })

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: validation,
        onSubmit: (values, { resetForm }) => {
            addPayment();
            resetForm();
        },
    });
    const { errors, touched, values, handleBlur, handleChange, handleSubmit } = formik

    const addPayment = () => {
        fetch(
            `${process.env.REACT_APP_BASE_URL}api/payment/add`,
            {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                mode: "cors",
                body: JSON.stringify({
                    items: [
                        { quantity: 1, price: values.amount, name: values.name, description: 'send to Prolink' },
                    ],
                    customer_email: values.email,
                }),
            }
        )
            .then((res) => {
                if (res.ok) return res.json();
                localStorage.setItem('res', res)
                return res.json().then((json) => Promise.reject(json));
            })
            .then(({ url }) => {
                window.open(url);
            })
            .catch((e) => {
                console.log(e.error);
            });
    }

    return (
        <>
            <GridItem display='flex' justifyContent="center" padding="10px 0 50px 0">
                <img src={require('../../../assets/img/masterCard.png')} width="100px" />
                <img src={require('../../../assets/img/american-express.png')} width="100px" />
                <img src={require('../../../assets/img/visa.png')} width="100px" />
            </GridItem>
            <GridItem sx={{ m: 1, width: '100%' }} >
                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                    Name
                </FormLabel>
                <Input
                    type="text"
                    fontSize='sm'
                    onChange={handleChange}
                    onBlur={handleBlur}
                    value={values.name}
                    name="name"
                    placeholder="Enter name"
                    fontWeight='500'
                    borderColor={errors?.name && touched?.name ? "red.300" : null}
                />
                <Text mb='10px' color={'red'}> {errors.name && touched.name && errors.name}</Text>
            </GridItem>
            <GridItem sx={{ m: 1, width: '100%' }} >
                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                    Email
                </FormLabel>
                <Input
                    type="text"
                    fontSize='sm'
                    onChange={handleChange}
                    onBlur={handleBlur}
                    value={values.email}
                    name="email"
                    placeholder="Enter Email"
                    fontWeight='500'
                    borderColor={errors?.email && touched?.email ? "red.300" : null}
                />
                <Text mb='10px' color={'red'}> {errors.email && touched.email && errors.email}</Text>
            </GridItem>
            <GridItem sx={{ m: 1, width: '100%' }} >
                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                    Amount
                </FormLabel>
                <Input
                    type="number"
                    fontSize='sm'
                    onChange={handleChange}
                    onBlur={handleBlur}
                    value={values.amount}
                    placeholder="Enter Amount"
                    name="amount"
                    fontWeight='500'
                    borderColor={errors?.amount && touched?.amount ? "red.300" : null}
                />
                <Text mb='10px' color={'red'}> {errors.amount && touched.amount && errors.amount}</Text>
            </GridItem>
            <Button onClick={handleSubmit} variant="brand" size="sm">Pay</Button>
        </>
    )
}

================
File: Client/src/views/admin/phoneCall/components/AddPhoneCall.js
================
import { Button, FormLabel, Grid, GridItem, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text, Textarea } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import dayjs from 'dayjs';
import { useFormik } from 'formik';
import { useEffect, useState } from 'react';
import { phoneCallSchema } from 'schema';
import { getApi, postApi } from 'services/api';

const AddPhoneCall = (props) => {
    const { onClose, isOpen, fetchData, setAction, cData, LData } = props
    const [isLoding, setIsLoding] = useState(false)
    const todayTime = new Date().toISOString().split('.')[0];
    const user = JSON.parse(localStorage.getItem('user'))

    const initialValues = {
        sender: user?._id,
        recipient: '',
        callDuration: '',
        callNotes: '',
        createByContact: '',
        createByLead: '',
        startDate: '',
        createBy: user?._id,
    }

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: phoneCallSchema,
        onSubmit: (values, { resetForm }) => {
            AddData();
            resetForm();
        },
    });

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue } = formik

    const AddData = async () => {
        try {
            setIsLoding(true)
            let response = await postApi('api/phoneCall/add', values)
            if (response.status === 200) {
                props.onClose();
                fetchData(1)
                // setAction((pre) => !pre)
            }
        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };

    // const fetchDataR = async () => {
    //     if (props?.viewData?.lead?.leadPhoneNumber) {
    //         if (props.id && props.lead !== true) {
    //             setFieldValue('recipient', props?.viewData?.contact?.phoneNumber);
    //             setFieldValue('createByContact', props?.id);
    //             values.recipient = props?.viewData?.contact?.phoneNumber
    //         } else if (props.id && props.lead === true) {
    //             let response = await getApi('api/lead/view/', props.id)
    //             if (response?.status === 200) {
    //                 setFieldValue('recipient', response?.data?.lead?.leadPhoneNumber);
    //                 setFieldValue('createByLead', props.id);
    //                 values.recipient = response?.data?.lead?.leadPhoneNumber
    //             }
    //         }
    //     } else {
    //         if (props.id && props.lead !== true) {
    //             if (cData) {
    //                 setFieldValue('recipient', cData?.phoneNumber);
    //                 setFieldValue('createByContact', props?.id);
    //                 values.recipient = cData?.phoneNumber
    //             }
    //             // let response = await getApi('api/contact/view/', props.id)
    //             // if (response?.status === 200) {
    //             //     setFieldValue('recipient', response?.data?.contact?.phoneNumber);
    //             //     setFieldValue('createByContact', props?.id);
    //             //     values.recipient = response?.data?.contact?.phoneNumber
    //             // }
    //         } else if (props.id && props.lead === true) {
    //             let response = await getApi('api/lead/view/', props.id)
    //             if (response?.status === 200) {
    //                 setFieldValue('recipient', response?.data?.lead?.leadPhoneNumber);
    //                 setFieldValue('createByLead', props.id);
    //                 values.recipient = response?.data?.lead?.leadPhoneNumber
    //             }
    //         }
    //     }
    // }

    const fetchDataR = async () => {
        if (LData && LData._id && props.lead === true) {
            setFieldValue('recipient', LData.leadPhoneNumber);
            setFieldValue('createByLead', props?.id);
            values.recipient = LData.leadPhoneNumber
        } else if (cData && cData._id && props.lead !== true) {
            setFieldValue('recipient', cData?.phoneNumber);
            setFieldValue('createByContact', props?.id);
            values.recipient = cData?.phoneNumber
        }
    }
    useEffect(() => {
        fetchDataR()
    }, [props.id, cData, LData])


    return (
        <Modal onClose={onClose} isOpen={isOpen} isCentered>
            <ModalOverlay />
            <ModalContent>
                <ModalHeader>Add Call </ModalHeader>
                <ModalCloseButton />
                <ModalBody>

                    <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Recipient<Text color={"red"}>*</Text>
                            </FormLabel>
                            <Input
                                fontSize='sm'
                                type='number'
                                disabled
                                onChange={handleChange} onBlur={handleBlur}
                                value={values.recipient}
                                name="recipient"
                                placeholder='Recipient'
                                fontWeight='500'
                                borderColor={errors.recipient && touched.recipient ? "red.300" : null}
                            />
                            <Text mb='10px' fontSize='sm' color={'red'}> {errors.recipient && touched.recipient && errors.recipient}</Text>
                        </GridItem>
                        <GridItem colSpan={{ base: 12, md: 6 }} >
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Start Date<Text color={"red"}>*</Text>
                            </FormLabel>
                            <Input
                                type="datetime-local"
                                fontSize='sm'
                                onChange={handleChange}
                                onBlur={handleBlur}
                                min={dayjs(todayTime).format('YYYY-MM-DD HH:mm')}
                                value={values.startDate}
                                name="startDate"
                                fontWeight='500'
                                borderColor={errors?.startDate && touched?.startDate ? "red.300" : null}
                            />
                            <Text mb='10px' fontSize='sm' color={'red'}> {errors.startDate && touched.startDate && errors.startDate}</Text>
                        </GridItem>

                        <GridItem colSpan={{ base: 12, md: 6 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Call Duration<Text color={"red"}>*</Text>
                            </FormLabel>
                            <Input
                                fontSize='sm'
                                onChange={handleChange} onBlur={handleBlur}
                                value={values.callDuration}
                                name="callDuration"
                                placeholder='call Duration'
                                fontWeight='500'
                                borderColor={errors.callDuration && touched.callDuration ? "red.300" : null}
                            />
                            <Text mb='10px' fontSize='sm' color={'red'}> {errors.callDuration && touched.callDuration && errors.callDuration}</Text>
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Call Notes
                            </FormLabel>
                            <Textarea
                                resize={'none'}
                                fontSize='sm'
                                placeholder='Enter Call Notes'
                                onChange={handleChange} onBlur={handleBlur}
                                value={values.callNotes}
                                name="callNotes"
                                fontWeight='500'
                                borderColor={errors.callNotes && touched.callNotes ? "red.300" : null}
                            />
                            <Text mb='10px' fontSize='sm' color={'red'}> {errors.callNotes && touched.callNotes && errors.callNotes}</Text>
                        </GridItem>
                    </Grid>
                </ModalBody>
                <ModalFooter>
                    <Button size="sm" variant='brand' disabled={isLoding ? true : false} onClick={handleSubmit}>{isLoding ? <Spinner /> : 'Save'}</Button>
                    <Button size="sm" sx={{
                        marginLeft: 2,
                        textTransform: "capitalize",
                    }} variant="outline"
                        colorScheme="red" onClick={() => {
                            formik.resetForm()
                            onClose()
                        }}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    )
}

export default AddPhoneCall

================
File: Client/src/views/admin/phoneCall/components/callAdvanceSearch.js
================
import React from 'react';
import { useFormik } from "formik";
import * as yup from "yup";
import { Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Grid, GridItem, Input, FormLabel, Select, Text, Button, } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import { setSearchValue, getSearchData, setGetTagValues } from '../../../../redux/slices/advanceSearchSlice';
import { useDispatch } from 'react-redux';



const CallAdvanceSearch = (props) => {
    const { state, allData, advanceSearch, setAdvanceSearch, isLoding, setSearchedData, setDisplaySearchData, setSearchClear, setSearchbox } = props;
    const dispatch = useDispatch();
    const initialValues = {
        senderName: '',
        realetedTo: '',
        createByName: '',
    }
    const validationSchema = yup.object({
        senderName: yup.string(),
        realetedTo: yup.string(),
        createByName: yup.string(),

    });
    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: validationSchema,
        onSubmit: (values, { resetForm }) => {
            dispatch(setSearchValue(values))
            dispatch(getSearchData({ values: values, allData: allData, type: 'Calls' }))
            // const searchResult = allData?.filter(
            //     (item) =>
            //         (!values?.senderName || (item?.senderName && item?.senderName.toLowerCase().includes(values?.senderName?.toLowerCase()))) &&
            //         (!values?.realetedTo || (values.realetedTo === "contact" ? item.createBy : item.createByLead)) &&
            //         (!values?.createByName || (item?.createByName && item?.createByName.toLowerCase().includes(values?.createByName?.toLowerCase())))
            // )
            // let getValue = [values.senderName, values?.realetedTo, values?.createByName].filter(value => value);


            const getValue = [
                {
                    name: ["senderName"],
                    value: values.senderName
                },
                {
                    name: ["realetedTo"],
                    value: values.realetedTo
                },
                {
                    name: ["createByName"],
                    value: values.createByName
                }
            ]
            dispatch(setGetTagValues(getValue.filter(item => item.value)))
            // setSearchedData(searchResult);
            setDisplaySearchData(true)
            setAdvanceSearch(false)
            resetForm();
            setSearchbox('');
        }
    })

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm, dirty } = formik;

    return (
        <>
            <Modal onClose={() => { setAdvanceSearch(false); resetForm() }} isOpen={advanceSearch} isCentered>
                <ModalOverlay />
                <ModalContent>
                    <ModalHeader>Advance Search</ModalHeader>
                    <ModalCloseButton onClick={() => { setAdvanceSearch(false); resetForm() }} />
                    <ModalBody>
                        <Grid templateColumns="repeat(12, 1fr)" mb={3} gap={2}>
                            <GridItem colSpan={{ base: 12 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Sender Name
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.senderName}
                                    name="senderName"
                                    placeholder='Enter senderName'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.senderName && touched.senderName && errors.senderName}</Text>

                            </GridItem>
                            <GridItem colSpan={{ base: 12 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Realeted To
                                </FormLabel>
                                <Select
                                    value={values?.realetedTo}
                                    fontSize='sm'
                                    name="realetedTo"
                                    onChange={handleChange}
                                    fontWeight='500'
                                    placeholder={'Select Realeted To'}
                                >
                                    <option value='contact'>Contact</option>
                                    <option value='lead'>Lead</option>
                                </Select>
                                <Text mb='10px' color={'red'}> {errors.realetedTo && touched.realetedTo && errors.realetedTo}</Text>

                            </GridItem>

                            <GridItem colSpan={{ base: 12 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2} >
                                    Recipient
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.createByName}
                                    name="createByName"
                                    placeholder='Enter Recipient'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.createByName && touched.createByName && errors.createByName}</Text>
                            </GridItem>
                        </Grid>
                    </ModalBody>
                    <ModalFooter>
                        <Button size="sm" variant="brand" mr={2} onClick={handleSubmit} disabled={isLoding || !dirty ? true : false} >{isLoding ? <Spinner /> : 'Search'}</Button>
                        <Button size="sm" variant="outline" colorScheme="red" onClick={() => resetForm()}>Clear</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        </>
    )
}

export default CallAdvanceSearch

================
File: Client/src/views/admin/phoneCall/add.js
================
import { Button, Flex, FormLabel, Grid, GridItem, IconButton, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Radio, RadioGroup, Select, Stack, Text, Textarea } from '@chakra-ui/react';
import ContactModel from "components/commonTableModel/ContactModel";
import LeadModel from "components/commonTableModel/LeadModel";
import Spinner from 'components/spinner/Spinner';
import dayjs from 'dayjs';
import { useFormik } from 'formik';
import { useEffect, useState } from 'react';
import { LiaMousePointerSolid } from 'react-icons/lia';
import { phoneCallSchema } from 'schema';
import { getApi, postApi } from 'services/api';


const AddPhoneCall = (props) => {
    const { onClose, isOpen, setAction } = props
    const [isLoding, setIsLoding] = useState(false)
    const [assignToLeadData, setAssignToLeadData] = useState([]);
    const [assignToContactData, setAssignToContactData] = useState([]);
    const [contactModelOpen, setContactModel] = useState(false);
    const [leadModelOpen, setLeadModel] = useState(false);
    const user = JSON.parse(localStorage.getItem('user'))
    const todayTime = new Date().toISOString().split('.')[0];
    const initialValues = {
        sender: user?._id,
        recipient: '',
        callDuration: '',
        callNotes: '',
        createByContact: '',
        createByLead: '',
        startDate: '',
        category: 'contact',
        // assignTo: '',
        // assignToLead: '',
        createBy: user?._id,
    }
    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: phoneCallSchema,
        onSubmit: (values, { resetForm }) => {
            AddData();
            resetForm();
        },
    });
    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue } = formik
    const AddData = async () => {
        try {
            setIsLoding(true)
            let response = await postApi('api/phoneCall/add', values)
            if (response.status === 200) {
                props.onClose();
                setAction((pre) => !pre)
            }
        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };

    useEffect(async () => {
        values.start = props?.date
        try {
            let result
            if (values.category === "Contact" && assignToContactData.length <= 0) {
                result = await getApi(user.role === 'superAdmin' ? 'api/contact/' : `api/contact/?createBy=${user._id}`)
                setAssignToContactData(result?.data)
            } else if (values.category === "Lead" && assignToLeadData.length <= 0) {
                result = await getApi(user.role === 'superAdmin' ? 'api/lead/' : `api/lead/?createBy=${user._id}`);
                setAssignToLeadData(result?.data)
            }
        }
        catch (e) {
            console.log(e);
        }
    }, [props?.date, values.category])

    // const fetchRecipientData = async () => {
    //     if (values.createByContact) {
    //         let response = await getApi('api/contact/view/', values.createByContact)
    //         if (response?.status === 200) {
    //             setFieldValue('recipient', response?.data?.contact?.phoneNumber);
    //             values.recipient = response?.data?.contact?.phoneNumber
    //         }
    //     } else if (values.createByLead) {
    //         let response = await getApi('api/lead/view/', values.createByLead)
    //         if (response?.status === 200) {
    //             setFieldValue('recipient', response?.data?.lead?.leadPhoneNumber);
    //             values.recipient = response?.data?.lead?.leadPhoneNumber
    //         }
    //     } else {
    //         setFieldValue('recipient', "");

    //     }
    // }
    const fetchRecipientData = async () => {
        if (values.createByContact) {
            let findEmail = assignToContactData.find((item) => item._id === values.createByContact);
            if (findEmail) {
                setFieldValue('recipient', findEmail.phoneNumber);
            }
        } else if (values.createByLead) {
            let findEmail = assignToLeadData.find((item) => item._id === values.createByLead);
            if (findEmail) {
                setFieldValue('recipient', findEmail.leadPhoneNumber);
            }
        } else {
            setFieldValue('recipient', "");

        }
    }
    useEffect(() => {
        fetchRecipientData()
    }, [values.createByContact, values.createByLead])


    return (
        <Modal onClose={onClose} isOpen={isOpen} isCentered>
            <ModalOverlay />
            <ModalContent>
                <ModalHeader>Add Call </ModalHeader>
                <ModalCloseButton />
                <ModalBody>
                    {/* Contact Model  */}
                    <ContactModel isOpen={contactModelOpen} data={assignToContactData} onClose={setContactModel} fieldName='createByContact' setFieldValue={setFieldValue} />
                    {/* Lead Model  */}
                    <LeadModel isOpen={leadModelOpen} data={assignToLeadData} onClose={setLeadModel} fieldName='createByLead' setFieldValue={setFieldValue} />

                    <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                        <GridItem colSpan={{ base: 12, md: 6 }} >
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Related
                            </FormLabel>
                            <RadioGroup onChange={(e) => { setFieldValue('category', e); setFieldValue('createByContact', ''); setFieldValue('createByLead', ''); }} value={values.category}>
                                <Stack direction='row'>
                                    <Radio value='Contact'>Contact</Radio>
                                    <Radio value='Lead'>Lead</Radio>
                                </Stack>
                            </RadioGroup>
                            <Text mb='10px' fontSize='sm' color={'red'}> {errors.category && touched.category && errors.category}</Text>
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }}>
                            {values.category === "Contact" ?
                                <>
                                    <GridItem colSpan={{ base: 12, md: 6 }} >
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                            Recipient  (Contact)
                                        </FormLabel>
                                        <Flex justifyContent={'space-between'}>
                                            <Select
                                                value={values.createByContact}
                                                name="createByContact"
                                                onChange={handleChange}
                                                mb={errors.createByContact && touched.createByContact ? undefined : '10px'}
                                                fontWeight='500'
                                                placeholder={'Assign To'}
                                                borderColor={errors.createByContact && touched.createByContact ? "red.300" : null}
                                            >
                                                {assignToContactData?.map((item) => {
                                                    return <option value={item._id} key={item._id}>{values.category === 'Contact' ? `${item.firstName} ${item.lastName}` : item.leadName}</option>
                                                })}
                                            </Select>
                                            <IconButton onClick={() => setContactModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />
                                        </Flex>
                                        <Text mb='10px' fontSize='sm' color={'red'}> {errors.createByContact && touched.createByContact && errors.createByContact}</Text>
                                    </GridItem>
                                </>
                                : values.category === "Lead" ?
                                    <>
                                        <GridItem colSpan={{ base: 12, md: 6 }} >

                                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                Recipient (Lead)
                                            </FormLabel>
                                            <Flex justifyContent={'space-between'}>
                                                <Select
                                                    value={values.createByLead}
                                                    name="createByLead"
                                                    onChange={handleChange}
                                                    mb={errors.createByLead && touched.createByLead ? undefined : '10px'}
                                                    fontWeight='500'
                                                    placeholder={'Assign To'}
                                                    borderColor={errors.createByLead && touched.createByLead ? "red.300" : null}
                                                >
                                                    {assignToLeadData?.map((item) => {
                                                        return <option value={item._id} key={item._id}>{values.category === 'Contact' ? `${item.firstName} ${item.lastName}` : item.leadName}</option>
                                                    })}
                                                </Select>
                                                <IconButton onClick={() => setLeadModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />
                                            </Flex>
                                            <Text mb='10px' fontSize='sm' color={'red'}> {errors.createByLead && touched.createByLead && errors.createByLead}</Text>
                                        </GridItem>
                                    </>
                                    : ''
                            }
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Recipient<Text color={"red"}>*</Text>
                            </FormLabel>
                            <Input
                                fontSize='sm'
                                disabled
                                value={values.recipient ? values.recipient : ""}
                                name="recipient"
                                placeholder='Recipient'
                                fontWeight='500'
                                borderColor={errors.recipient && touched.recipient ? "red.300" : null}
                            />
                        </GridItem>
                        <GridItem colSpan={{ base: 12, md: 6 }} >
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Start Date<Text color={"red"}>*</Text>
                            </FormLabel>
                            <Input
                                type="datetime-local"
                                fontSize='sm'
                                onChange={handleChange}
                                onBlur={handleBlur}
                                min={dayjs(todayTime).format('YYYY-MM-DD HH:mm')}
                                value={values.startDate}
                                name="startDate"
                                fontWeight='500'
                                borderColor={errors?.startDate && touched?.startDate ? "red.300" : null}
                            />
                            <Text fontSize='sm' mb='10px' color={'red'}> {errors.startDate && touched.startDate && errors.startDate}</Text>
                        </GridItem>

                        <GridItem colSpan={{ base: 12, md: 6 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Call Duration<Text color={"red"}>*</Text>
                            </FormLabel>
                            <Input
                                fontSize='sm'
                                onChange={handleChange} onBlur={handleBlur}
                                value={values.callDuration}
                                name="callDuration"
                                placeholder='call Duration'
                                fontWeight='500'
                                borderColor={errors.callDuration && touched.callDuration ? "red.300" : null}
                            />
                            <Text mb='10px' fontSize='sm' color={'red'}> {errors.callDuration && touched.callDuration && errors.callDuration}</Text>
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Call Notes
                            </FormLabel>
                            <Textarea
                                resize={'none'}
                                fontSize='sm'
                                placeholder='Enter Call Notes'
                                onChange={handleChange} onBlur={handleBlur}
                                value={values.callNotes}
                                name="callNotes"
                                fontWeight='500'
                                borderColor={errors.callNotes && touched.callNotes ? "red.300" : null}
                            />
                            <Text mb='10px' fontSize='sm' color={'red'}> {errors.callNotes && touched.callNotes && errors.callNotes}</Text>
                        </GridItem>

                    </Grid>


                </ModalBody>
                <ModalFooter>
                    <Button variant='brand' size="sm" disabled={isLoding ? true : false} onClick={handleSubmit}>{isLoding ? <Spinner /> : 'Save'}</Button>
                    <Button size="sm" sx={{
                        marginLeft: 2,
                        textTransform: "capitalize",
                    }} variant="outline"
                        colorScheme="red" onClick={() => {
                            formik.resetForm()
                            onClose()
                        }}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    )
}

export default AddPhoneCall

================
File: Client/src/views/admin/phoneCall/callView.js
================
import { CloseIcon, DeleteIcon, EditIcon, ViewIcon } from '@chakra-ui/icons'
import { DrawerFooter, Flex, Grid, GridItem, IconButton, Modal, ModalBody, ModalContent, ModalHeader, ModalOverlay, Text } from '@chakra-ui/react'
import Spinner from "components/spinner/Spinner"
import moment from 'moment'
import { useEffect, useState } from 'react'
import { getApi } from 'services/api'
import { useNavigate } from 'react-router-dom';

const CallView = (props) => {
    const { onClose, isOpen, info, action, access } = props
    const [data, setData] = useState();
    const [edit, setEdit] = useState(false);
    const [deleteModel, setDelete] = useState(false);
    const user = JSON.parse(localStorage.getItem("user"))
    const [isLoding, setIsLoding] = useState(false)
    const navigate = useNavigate()

    const fetchViewData = async () => {
        if (info) {
            setIsLoding(true)
            let result = await getApi('api/phoneCall/view/', info?.event ? info?.event?.id : info);
            setData(result?.data);
            setIsLoding(false)
        }
    }

    useEffect(() => {
        fetchViewData()
    }, [action, info])

    const handleViewOpen = () => {
        if (info?.event) {
            navigate(`/view/${info?.event?.id}`)
        }
        else {
            navigate(`/view/${info}`)
        }
    }

    return (
        <Modal isOpen={isOpen} size={'md'} isCentered>
            <ModalOverlay />
            <ModalContent>
                <ModalHeader justifyContent='space-between' display='flex' >
                    Call
                    <IconButton onClick={() => onClose(false)} icon={<CloseIcon />} />
                </ModalHeader>
                {isLoding ?
                    <Flex justifyContent={'center'} alignItems={'center'} mb={30} width="100%" >
                        <Spinner />
                    </Flex> : <>

                        <ModalBody>
                            <Grid templateColumns="repeat(12, 1fr)" gap={3} >

                                <GridItem colSpan={{ base: 12, md: 6 }} >
                                    <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Recipient </Text>
                                    <Text>{data?.recipient ? data?.recipient : ' - '}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, md: 6 }} >
                                    <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Sender Name  </Text>
                                    <Text>{data?.senderName ? data?.senderName :'-'}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, md: 6 }} >
                                    <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Start Date </Text>
                                    <Text>{data?.startDate ? moment(data?.startDate).format('lll ') : ' - '}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, md: 6 }} >
                                    <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> End Date </Text>
                                    <Text>{data?.endDate ? moment(data?.endDate).format('lll ') : ' - '}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, md: 6 }} >
                                    <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Call Duration</Text>
                                    <Text>{data?.callDuration ? data?.callDuration :'-'}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, md: 6 }} >
                                    <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Created By</Text>
                                    <Text>{data?.createByName ? data?.createByName :'-'}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, md: 6 }} >
                                    <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Call Notes</Text>
                                    <Text>{data?.callNotes ? data?.callNotes :'-'}</Text>
                                </GridItem>
                            </Grid>

                        </ModalBody>
                        <DrawerFooter>
                            {access?.view && <IconButton variant='outline' colorScheme={'green'} onClick={() => handleViewOpen()} borderRadius="10px" size="md" icon={<ViewIcon />} />}
                            {access?.update && <IconButton variant='outline' onClick={() => setEdit(true)} ml={3} borderRadius="10px" size="md" icon={<EditIcon />} />}
                            {access?.delete && <IconButton colorScheme='red' onClick={() => setDelete(true)} ml={3} borderRadius="10px" size="md" icon={<DeleteIcon />} />}
                        </DrawerFooter>
                    </>}
            </ModalContent>
        </Modal>
    )
}

export default CallView

================
File: Client/src/views/admin/phoneCall/index.js
================
import { useEffect, useState } from 'react';
import { Link, useNavigate } from "react-router-dom";
import { ViewIcon } from '@chakra-ui/icons';
import { Button, Menu, MenuButton, MenuItem, MenuList, Text, useDisclosure } from '@chakra-ui/react';
import { getApi } from 'services/api';
import { HasAccess } from '../../../redux/accessUtils';
import CommonCheckTable from '../../../components/reactTable/checktable';
import { SearchIcon } from "@chakra-ui/icons";
import { CiMenuKebab } from 'react-icons/ci';
import moment from 'moment';
import Add from './add';
import { MdLeaderboard } from 'react-icons/md';
import { IoIosContact } from 'react-icons/io';
import CallAdvanceSearch from './components/callAdvanceSearch';
import { fetchPhoneCallData } from '../../../redux/slices/phoneCallSlice';
import { useDispatch } from 'react-redux';
import { toast } from 'react-toastify';

const Index = (props) => {
    const [action, setAction] = useState(false);
    const { isOpen, onOpen, onClose } = useDisclosure();
    const [selectedId, setDelete] = useState(false);
    const [selectedValues, setSelectedValues] = useState([]);
    const [advanceSearch, setAdvanceSearch] = useState(false);
    const [getTagValuesOutSide, setGetTagValuesOutside] = useState([]);
    const [searchboxOutside, setSearchboxOutside] = useState('');
    const user = JSON.parse(localStorage.getItem("user"));
    const navigate = useNavigate();
    const [isLoding, setIsLoding] = useState(false);
    const [data, setData] = useState([]);
    const [displaySearchData, setDisplaySearchData] = useState(false);
    const [searchedData, setSearchedData] = useState([]);
    const dispatch = useDispatch()


    const [permission, leadAccess, contactAccess] = HasAccess(["Calls", 'Leads', 'Contacts']);
    const actionHeader = {
        Header: "Action", accessor: 'action', isSortable: false, center: true,
        cell: ({ row }) => (
            <Text fontSize="md" fontWeight="900" textAlign={"center"}>
                <Menu isLazy  >
                    <MenuButton><CiMenuKebab /></MenuButton>
                    <MenuList minW={'fit-content'} transform={"translate(1520px, 173px);"}>
                        {permission?.view && <MenuItem py={2.5} color={'green'} onClick={() => navigate(`/phone-call/${row?.values._id}`)} icon={<ViewIcon mb={'2px'} fontSize={15} />}>View</MenuItem>}
                        {row?.original?.createByContact && contactAccess?.view ?
                            <MenuItem width={"165px"} py={2.5} color={'black'} onClick={() => navigate(row?.original?.createByContact && `/contactView/${row?.original.createByContact}`)} icon={row?.original.createByContact && <IoIosContact fontSize={15} />}>  {(row?.original.createByContact && contactAccess?.view) && "contact"}
                            </MenuItem>
                            : ''}
                        {row?.original.createByLead && leadAccess?.view ? <MenuItem width={"165px"} py={2.5} color={'black'} onClick={() => navigate(`/leadView/${row?.original.createByLead}`)} icon={row?.original.createByLead && leadAccess?.view && <MdLeaderboard style={{ marginBottom: '4px' }} fontSize={15} />}>{row?.original.createByLead && leadAccess?.view && 'lead'}</MenuItem> : ''}
                    </MenuList>
                </Menu>
            </Text>
        )
    };
    const tableColumns = [
        { Header: "#", accessor: "_id", isSortable: false, width: 10 },
        {
            Header: "Recipient", accessor: "createByName", cell: (cell) => (
                <Link to={`/phone-call/${cell?.row?.values._id}`}>
                    <Text
                        me="10px"
                        sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}
                        color='brand.600'
                        fontSize="sm"
                        fontWeight="700"
                    >
                        {cell?.value || ' - '}
                    </Text>
                </Link>)
        },
        { Header: 'Sender Name', accessor: 'senderName' },
        {
            Header: "Realeted To", accessor: "realeted", cell: ({ row }) => (
                <Text  >
                    {row?.original.createByContact && contactAccess?.view ? <Link to={`/contactView/${row?.original.createByContact}`}>
                        <Text
                            me="10px"
                            sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}
                            color={'brand.600'}
                            fontSize="sm"
                            fontWeight="700"
                        >
                            {row?.original.createByContact && "Contact"}
                        </Text>
                    </Link> :
                        <Text
                            me="10px"
                            fontSize="sm"
                            fontWeight="700"
                        >
                            {row?.original.createByContact && "Contact"}
                        </Text>}

                    {leadAccess?.view && row?.original.createByLead ? <Link to={`/leadView/${row?.original.createByLead}`}>
                        <Text
                            me="10px"
                            sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}
                            color={'brand.600'}
                            fontSize="sm"
                            fontWeight="700"
                        >
                            {row?.original.createByLead && "Lead"}
                        </Text>
                    </Link> : <Text
                        me="10px"
                        fontSize="sm"
                        fontWeight="700"
                    >
                        {row?.original.createByLead && "Lead"}
                    </Text>}
                </Text>
            )
        },
        { Header: "Timestamp", accessor: "timestamp", },
        {
            Header: "Created", accessor: 'created', cell: ({ row }) => (
                <Text fontSize="sm" fontWeight="700">
                    {moment(row?.values.timestamp).format('(DD/MM) h:mma')}
                </Text>
            )
        },
        ...(permission?.update || permission?.view || permission?.delete ? [actionHeader] : [])
    ];

    const fetchData = async () => {
        setIsLoding(true)
        const result = await dispatch(fetchPhoneCallData())
        if (result.payload.status === 200) {
            setData(result?.payload?.data);
        } else {
            toast.error("Failed to fetch data", "error");
        }
        setIsLoding(false)
    }

    // const [selectedColumns, setSelectedColumns] = useState([...tableColumns]);
    // const dataColumn = tableColumns?.filter(item => selectedColumns?.find(colum => colum?.Header === item.Header))


    useEffect(() => {
        fetchData();
    }, [action])

    return (
        <div>
            <CommonCheckTable
                title={"Calls"}
                isLoding={isLoding}
                columnData={tableColumns ?? []}
                // dataColumn={dataColumn ?? []}
                allData={data ?? []}
                tableData={data}
                searchDisplay={displaySearchData}
                setSearchDisplay={setDisplaySearchData}
                searchedDataOut={searchedData}
                setSearchedDataOut={setSearchedData}
                tableCustomFields={[]}
                access={permission}
                // action={action}
                // setAction={setAction}
                // selectedColumns={selectedColumns}
                // setSelectedColumns={setSelectedColumns}
                // isOpen={isOpen}
                // onClose={onclose}
                onOpen={onOpen}
                selectedValues={selectedValues}
                setSelectedValues={setSelectedValues}
                setDelete={setDelete}
                deleteMany={true}
                AdvanceSearch={
                    <Button variant="outline" colorScheme='brand' leftIcon={<SearchIcon />} mt={{ sm: "5px", md: "0" }} size="sm" onClick={() => setAdvanceSearch(true)}>Advance Search</Button>
                }
                getTagValuesOutSide={getTagValuesOutSide}
                searchboxOutside={searchboxOutside}
                setGetTagValuesOutside={setGetTagValuesOutside}
                setSearchboxOutside={setSearchboxOutside}
                handleSearchType="CallsSearch"
            />

            <CallAdvanceSearch
                advanceSearch={advanceSearch}
                setAdvanceSearch={setAdvanceSearch}
                setSearchedData={setSearchedData}
                setDisplaySearchData={setDisplaySearchData}
                allData={data ?? []}
                setAction={setAction}
                setGetTagValues={setGetTagValuesOutside}
                setSearchbox={setSearchboxOutside}
            />

            <Add isOpen={isOpen} size={"sm"} onClose={onClose} setAction={setAction} />
        </div>
    )
}

export default Index

================
File: Client/src/views/admin/phoneCall/View.js
================
import { Box, Button, Flex, Grid, GridItem, Heading, Text } from "@chakra-ui/react";
import Card from "components/card/Card";
import { HSeparator } from "components/separator/Separator";
import Spinner from "components/spinner/Spinner";
import moment from "moment";
import { useEffect, useState } from "react";
import { IoIosArrowBack } from "react-icons/io";
import { Link, useNavigate, useParams } from "react-router-dom";
import { HasAccess } from "../../../redux/accessUtils";
import { getApi } from "services/api";
import { FaFilePdf } from "react-icons/fa";
import html2pdf from "html2pdf.js";
const View = () => {

    const param = useParams()
    const navigate = useNavigate()

    const [data, setData] = useState()
    const user = JSON.parse(localStorage.getItem("user"))
    const [isLoding, setIsLoding] = useState(false)
    const [loading, setLoading] = useState(false)

    const fetchData = async () => {
        setIsLoding(true)
        let response = await getApi('api/phoneCall/view/', param.id)
        setData(response?.data);
        setIsLoding(false)
    }
    const generatePDF = () => {
        setLoading(true)
        const element = document.getElementById("reports");
        const hideBtn = document.getElementById("hide-btn");

        if (element) {
            hideBtn.style.display = 'none';
            html2pdf()
                .from(element)
                .set({
                    margin: [0, 0, 0, 0],
                    filename: `PhoneCall_Details_${moment().format("DD-MM-YYYY")}.pdf`,
                    image: { type: "jpeg", quality: 0.98 },
                    html2canvas: { scale: 2, useCORS: true, allowTaint: true },
                    jsPDF: { unit: "in", format: "letter", orientation: "portrait" },
                })
                .save().then(() => {
                    setLoading(false)
                    hideBtn.style.display = '';
                })
            // }, 500);
        } else {
            console.error("Element with ID 'reports' not found.");
            setLoading(false)
        }
    };
    useEffect(() => {
        fetchData()
    }, [])

    const [contactAccess, leadAccess] = HasAccess(['Contacts', 'Leads'])

    return (
        <>

            {isLoding ?
                <Flex justifyContent={'center'} alignItems={'center'} width="100%" >
                    <Spinner />
                </Flex> : <>
                    <Grid templateColumns="repeat(4, 1fr)" gap={3} id="reports">
                        <GridItem colSpan={{ base: 4 }}>
                            <Heading size="lg" m={3}>
                                {data?.senderName || ""}
                            </Heading>
                        </GridItem>
                        <GridItem colSpan={{ base: 4 }}>
                            <Card >
                                <Grid gap={4}>
                                    <GridItem colSpan={2}>
                                        <Box>
                                            <Box display={"flex"} justifyContent={"space-between"}>
                                                <Heading size="md" mb={3}>
                                                    Call Details
                                                </Heading>
                                                <Box id="hide-btn">
                                                    <Button leftIcon={<FaFilePdf />} size='sm' variant="brand" onClick={generatePDF} disabled={loading}>
                                                        {loading ? "Please Wait..." : "Print as PDF"}
                                                    </Button>
                                                    <Button leftIcon={<IoIosArrowBack />} size='sm' variant="brand" onClick={() => navigate(-1)} style={{ marginLeft: 10 }}>
                                                        Back
                                                    </Button>
                                                </Box>

                                            </Box>
                                            <HSeparator />
                                        </Box>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 2, md: 1 }}>
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Sender </Text>
                                        <Text>{data?.senderName ? data?.senderName : ' - '}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 2, md: 1 }}>
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Recipient </Text>
                                        <Text>{data?.recipient ? data?.recipient : ' - '}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 2, md: 1 }}>
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Create to </Text>
                                        {data?.createBy ?
                                            <Link to={contactAccess?.view && `/contactView/${data?.createBy}`}>
                                                <Text color={contactAccess?.view ? 'blue.500' : 'blackAlpha.900'} sx={{ '&:hover': { color: contactAccess?.view ? 'blue.500' : 'blackAlpha.900', textDecoration: contactAccess?.view ? 'underline' : 'none' } }}>{data?.createByName ? data?.createByName : ' - '}</Text>
                                            </Link> : <Link to={leadAccess?.view && `/leadView/${data?.createByLead}`}>
                                                <Text color={leadAccess?.view ? 'blue.500' : 'blackAlpha.900'} sx={{ '&:hover': { color: leadAccess?.view ? 'blue.500' : 'blackAlpha.900', textDecoration: leadAccess?.view ? 'underline' : 'none' } }}>{data?.createByName ? data?.createByName : ' - '}</Text>
                                            </Link>
                                        }
                                    </GridItem>
                                    <GridItem colSpan={{ base: 2, md: 1 }}>
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Realeted To </Text>
                                        <Text>{data?.createBy ? "contact" : data?.createByLead && "lead"}</Text>
                                    </GridItem>

                                    <GridItem colSpan={{ base: 2, md: 1 }}>
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Start Date </Text>
                                        <Text> {data?.startDate ? moment(data?.startDate).format('lll ') : ' - '} </Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 2, md: 1 }}>
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>End Date </Text>
                                        <Text> {data?.endDate ? moment(data?.endDate).format('lll ') : ' - '} </Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 2, md: 1 }}>
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Timestamp </Text>
                                        <Text> {data?.timestamp ? moment(data?.timestamp).format('DD-MM-YYYY  h:mma ') : ' - '} [{data?.timestamp ? moment(data?.timestamp).toNow() : ' - '}]</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 2, md: 1 }}>
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Call Duration </Text>
                                        <Text>{data?.callDuration ? data?.callDuration : ' - '}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 2 }}>
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Call Notes </Text>
                                        <pre style={{ whiteSpace: 'pre-wrap' }}>{data?.callNotes ? data?.callNotes : ' - '}</pre>
                                    </GridItem>
                                </Grid>
                            </Card>
                        </GridItem>

                    </Grid>
                </>}

        </>
    );
};

export default View;

================
File: Client/src/views/admin/property/components/ImportModal.js
================
import { Button, Grid, GridItem, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text } from '@chakra-ui/react'
import Spinner from 'components/spinner/Spinner'
import { useFormik } from 'formik'
import { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import CommonFileUpload from 'components/commonFileUpload'

const ImportModal = (props) => {
    const { onClose, isOpen, fetchData, text, customFields } = props
    const [isLoding, setIsLoding] = useState(false)
    const navigate = useNavigate();

    const initialValues = {
        property: ''
    }

    const formik = useFormik({
        initialValues: initialValues,
        onSubmit: (values, { resetForm }) => {
            AddData()
            resetForm();
        },
    });
    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik

    const AddData = async () => {
        try {
            setIsLoding(true)
            resetForm()

            if (values.property) {
                onClose();
                navigate('/propertyImport', { state: { fileData: values.property , customFields: customFields } });
            }

        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };

    return (
        <Modal onClose={onClose} isOpen={isOpen} isCentered>
            <ModalOverlay />
            <ModalContent>
                <ModalHeader>Import Properties</ModalHeader>
                <ModalCloseButton />
                <ModalBody>
                    <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                        <GridItem colSpan={{ base: 12 }}>
                            <CommonFileUpload count={values.property.length} onFileSelect={(file) => setFieldValue('property', file)} text={text} />
                            <Text mb='10px' color={'red'}> {errors.property && touched.property && <>Please Select {text}</>}</Text>
                        </GridItem>
                    </Grid>
                </ModalBody>
                <ModalFooter>
                    <Button size="sm" variant='brand' onClick={handleSubmit} disabled={isLoding ? true : false} >{isLoding ? <Spinner /> : 'Save'}</Button>
                    <Button sx={{
                        marginLeft: 2,
                        textTransform: "capitalize",
                    }} variant="outline"
                        colorScheme="red" size="sm" onClick={() => {
                            onClose()
                            formik.resetForm()
                        }}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    )
}

export default ImportModal

================
File: Client/src/views/admin/property/components/PropertyImport.js
================
import React, { useState, useEffect } from 'react'
import { useLocation, useNavigate } from 'react-router-dom';
import Papa from 'papaparse';
import {
    Flex,
    useColorModeValue,
    Select,
    Button,
    Grid,
    GridItem,
    Text
} from "@chakra-ui/react";
import { useFormik } from "formik";
import { postApi } from 'services/api';
import { toast } from 'react-toastify';
import moment from 'moment';
import ExcelJS from 'exceljs';
import Card from 'components/card/Card';

function PropertyImport() {

    const location = useLocation();
    const { fileData, customFields } = location.state || {};
    const [importedFileFields, setImportedFileFields] = useState([]);
    const borderColor = useColorModeValue('gray.200', 'whiteAlpha.100');
    const [importedFileData, setImportedFileData] = useState([]);
    const [isLoding, setIsLoding] = useState(false);
    const navigate = useNavigate();
    const userId = JSON.parse(localStorage.getItem("user"))?._id;
    const [filterProperty, setFilterProperty] = useState([]);

    const columns = [
        { Header: 'Fields In Crm', accessor: 'crmFields' },
        { Header: 'Fields In File', accessor: 'fileFields' },
    ];

    const initialFieldValues = Object.fromEntries(
        (customFields || []).map(field => [field?.name, ''])
    );
    const initialValues = {
        ...initialFieldValues
    };

    const fieldsInCrm = [
        ...customFields?.map((field) => ({ Header: field?.label, accessor: field?.name, type: field?.type, formikType: field?.validations?.find(obj => obj.hasOwnProperty('formikType')) }))
    ];

    const formik = useFormik({
        initialValues: initialValues,
        onSubmit: (values, { resetForm }) => {

            const leadsData = importedFileData?.map((item, ind) => {
                const lead = {
                    createdDate: new Date(),
                    deleted: item[values.deleted || "deleted"] || false,
                    createBy: JSON.parse(localStorage.getItem('user'))._id,
                };

                fieldsInCrm?.forEach(field => {
                    const selectedField = values[field?.accessor];
                    const fieldValue = item[selectedField] || '';

                    if (field?.type?.toLowerCase() === "date") {
                        lead[field?.accessor] = moment(fieldValue).isValid() ? fieldValue : '';
                    } else if (field?.type?.toLowerCase() === "number" && ['positive', 'negative'].includes(field?.formikType?.toLowerCase())) {
                        lead[field?.accessor] = parseFloat(fieldValue) || '';
                    } else if (field?.type?.toLowerCase() === "number") {
                        lead[field?.accessor] = parseInt(fieldValue, 10) || '';
                    } else {
                        lead[field?.accessor] = fieldValue;
                    }
                });

                return lead;
            });

            AddData(leadsData);
        }
    })

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik

    const AddData = async (properties) => {
        try {
            setIsLoding(true);
            let response = await postApi('api/property/addMany', properties)
            if (response.status === 200) {
                toast.success(`Properties imported successfully`)
                resetForm();
                navigate('/properties');
            }
        } catch (e) {
            console.error(e);
            toast.error(`Properties import failed`)
            resetForm();
            navigate('/properties');
        }
        finally {
            setIsLoding(false)
        }
    };

    const parseFileData = async (file) => {
        const reader = new FileReader();
        const extension = file.name.split('.').pop().toLowerCase();

        reader.onload = async ({ target }) => {

            if (extension === 'csv') {
                const csv = Papa.parse(target.result, {
                    header: true,
                });
                const parsedData = csv?.data;

                if (parsedData && parsedData.length > 0) {
                    setImportedFileData(parsedData);
                    const fileHeadingFields = Object.keys(parsedData[0]);
                    setImportedFileFields(fileHeadingFields);
                } else {
                    toast.error("Empty or invalid CSV file");
                    navigate("/properties");
                }

            } else if (extension === 'xlsx') {
                const data = new Uint8Array(target.result);
                const workbook = new ExcelJS.Workbook();

                await workbook.xlsx.load(data);

                const worksheet = workbook.getWorksheet(1);
                const jsonData = [];

                // Iterate over rows and cells
                worksheet.eachRow({ includeEmpty: true }, (row, rowNumber) => {
                    const rowData = {};
                    row.eachCell({ includeEmpty: true }, (cell, colNumber) => {
                        rowData[worksheet.getCell(1, colNumber).value] = cell.value;
                    });
                    jsonData.push(rowData);
                });
                jsonData?.splice(0, 1);
                setImportedFileData(jsonData);

                if (jsonData && jsonData.length > 0) {
                    const fileHeadingFields = Object.keys(jsonData[0]);
                    setImportedFileFields(fileHeadingFields);
                } else {
                    toast.error("Empty or invalid XLSX file");
                    navigate("/properties");
                }
            }
        };

        if (extension === 'csv') {
            reader.readAsText(file);
        } else if (extension === 'xlsx') {
            const blob = new Blob([file]);
            reader.readAsArrayBuffer(blob);
        }
    };

    useEffect(() => {
        if (fileData && fileData.length > 0) {
            const firstFile = fileData[0];
            parseFileData(firstFile);
        }
    }, [fileData]);


    useEffect(() => {
        const filterPropertyData = importedFileFields.filter(field => {
            const result = fieldsInCrm.find(data => field === data?.accessor || field === data?.Header);
            if (result) {
                setFieldValue(result?.accessor, field);
                return true;
            }
            return false;
        });
        setFilterProperty(filterPropertyData);
    }, [importedFileFields]);


    return (
        <>
            <Card overflowY={"auto"} className="importTable">
                <Text color={"secondaryGray.900"}
                    fontSize="22px"
                    fontWeight="700"
                    mb='20px'
                >Import Properties </Text>
                <Grid templateColumns="repeat(12, 1fr)" mb={3} pb={2} gap={1} borderBottom={'1px solid #e2e8f0'}>
                    {
                        columns.map((column, index) => (
                            <GridItem key={index} colSpan={{ base: 6 }} fontWeight={'600'} fontSize={{ sm: "14px", lg: "14px" }} color="secondaryGray.900" style={{ textTransform: "uppercase" }}>
                                {column.Header}
                            </GridItem>
                        ))
                    }
                </Grid>
                <Grid templateColumns="repeat(12, 1fr)" mb={3} gap={1} overflowY={'auto'}>
                    {
                        fieldsInCrm?.map((item, index) => (
                            <>
                                <GridItem colSpan={{ base: 6 }} key={item.id} mt='10px'>
                                    {item.Header}
                                </GridItem>
                                <GridItem colSpan={{ base: 4 }}>
                                    <Select
                                        variant="flushed"
                                        fontWeight='500'
                                        isSearchable
                                        value={values[item.accessor]}
                                        name={item.accessor}
                                        onChange={handleChange}
                                    >
                                        <option value=''> {filterProperty ? filterProperty.find((data) => (item.Header === data || item.accessor === data) && data) ? filterProperty.find((data) => (item.Header === data || item.accessor === data) && data) : 'Select Field In File' : 'Select Field In File'}</option>                                        {
                                            importedFileFields?.map(field => (
                                                <option value={field} key={field}>{field}</option>
                                            ))
                                        }
                                    </Select>
                                </GridItem>
                            </>
                        ))
                    }
                </Grid>

                <Flex Flex justifyContent={'end'} mt='5' >
                    <Button size="sm" onClick={() => handleSubmit()} variant="brand">Save</Button>
                </Flex>
            </Card>
        </>
    )
}

export default PropertyImport

================
File: Client/src/views/admin/property/components/propertyPhoto.js
================
import { Button, Grid, GridItem, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text } from '@chakra-ui/react'
import Spinner from 'components/spinner/Spinner'
import { useFormik } from 'formik'
import { useState } from 'react'
import { postApi } from 'services/api'
import Upload from './Upload'

const PropertyPhoto = (props) => {
    const { onClose, isOpen, fetchData, text } = props
    const [isLoding, setIsLoding] = useState(false)

    const initialValues = {
        property: ''
    }

    const formik = useFormik({
        initialValues: initialValues,
        onSubmit: (values, { resetForm }) => {
            AddData();
            resetForm();
        },
    });
    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, } = formik

    const AddData = async () => {
        try {
            setIsLoding(true)
            const formData = new FormData();
            // Append property to the formData
            values.property.forEach((file) => {
                formData?.append('property', file);
            });
            let response;
            if (text === 'Property Photos') {
                response = await postApi(`api/property/add-property-photos/${props.id}`, formData);
            } else if (text === 'Virtual Tours or Videos') {
                response = await postApi(`api/property/add-virtual-tours-or-videos/${props.id}`, formData);
            } else if (text === 'Floor Plans') {
                response = await postApi(`api/property/add-floor-plans/${props.id}`, formData);
            } else if (text === 'Property Documents') {
                response = await postApi(`api/property/add-property-documents/${props.id}`, formData);
            }

            if (response?.status === 200) {
                fetchData(1);
                formik.resetForm()
                onClose();
            }

        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };


    return (
        <Modal onClose={onClose} isOpen={isOpen} isCentered>
            <ModalOverlay />
            <ModalContent>
                <ModalHeader>Select {text} </ModalHeader>
                <ModalCloseButton />
                <ModalBody>
                    <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                        <GridItem colSpan={{ base: 12 }}>
                            <Upload count={values.property.length} onFileSelect={(file) => setFieldValue('property', file)} text={text} />
                            <Text mb='10px' color={'red'}> {errors.property && touched.property && <>Please Select {text}</>}</Text>
                        </GridItem>
                    </Grid>
                </ModalBody>
                <ModalFooter>
                    <Button size="sm" variant='brand' onClick={handleSubmit} mr={1} disabled={isLoding ? true : false} >{isLoding ? <Spinner /> : 'Save'}</Button>
                    <Button size="sm" colorScheme="red" variant="outline" onClick={() => {
                        onClose()
                        formik.resetForm()
                    }}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    )
}

export default PropertyPhoto

================
File: Client/src/views/admin/property/components/Upload.js
================
// Chakra imports
import {
  Box, Flex,
  Grid,
  GridItem,
  Icon,
  Text,
  useColorModeValue
} from "@chakra-ui/react";
// Custom components
// Assets
import Dropzone from "components/Dropzone";
import { MdUpload } from "react-icons/md";

export default function Upload(props) {
  const { used, total, count, ...rest } = props;
  // Chakra Color Mode
  const textColorPrimary = useColorModeValue("secondaryGray.900", "white");
  const brandColor = useColorModeValue("brand.500", "white");
  const textColorSecondary = "gray.400";
  return (
    <Grid templateColumns="repeat(12, 1fr)" gap={2}>
      <GridItem colSpan={{ base: 12 }} >
        <Dropzone
          w={{ base: "100%" }}
          me='36px'
          minH={200}
          img={props.text === 'Property Photos' ? 'img' : ''}
          height={'100%'}
          onFileSelect={props.onFileSelect}
          content={
            <Box>
              <Icon as={MdUpload} w='80px' h='80px' color={brandColor} />
              <Flex justify='center' mx='auto' mb='12px'>
                <Text fontSize='xl' fontWeight='700' color={brandColor}>
                  Upload Files
                </Text>
              </Flex>
              {count > 0 && <Text fontSize='sm' fontWeight='500' color='secondaryGray.500'>
                Selected Files : {count}
              </Text>}
            </Box>
          }
        />
      </GridItem>
      <GridItem colSpan={{ base: 12 }} >
        <Flex direction='column' >
          <Text
            color={textColorPrimary}
            fontWeight='bold'
            textAlign='start'
            fontSize='2xl'
            mt={{ base: "20px" }}>
            Upload {props.text}
          </Text>
          <Text
            color={textColorSecondary}
            fontSize='md'
            my={{ base: "auto" }}
            mx='auto'
            textAlign='start'>
            Accepted File Types (Images files - 15MB max) only 10 files
          </Text>
        </Flex>
      </GridItem>
    </Grid>
  );
}

================
File: Client/src/views/admin/property/Add.js
================
import { CloseIcon } from '@chakra-ui/icons';
import { Button, Drawer, DrawerBody, DrawerContent, DrawerFooter, DrawerHeader, DrawerOverlay, IconButton } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import { useFormik } from 'formik';
import { useState } from 'react';
import { postApi } from 'services/api';
import { generateValidationSchema } from 'utils';
import CustomForm from 'utils/customForm';
import * as yup from 'yup'

const Add = (props) => {
    const [isLoding, setIsLoding] = useState(false)

    const initialFieldValues = Object.fromEntries(
        (props?.propertyData?.fields || []).map(field => [field?.name, ''])
    );

    const initialValues = {
        ...initialFieldValues,
        createBy: JSON.parse(localStorage.getItem('user'))._id
    };

    const formik = useFormik({
        initialValues: initialValues,
        enableReinitialize: true,
        validationSchema: yup.object().shape(generateValidationSchema(props?.propertyData?.fields)),

        onSubmit: (values, { resetForm }) => {
            AddData();
        },
    });

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, } = formik


    const AddData = async () => {
        try {
            setIsLoding(true)
            let response = await postApi('api/form/add', { ...values, moduleId: props?.propertyData?._id })
            if (response.status === 200) {
                props.onClose();
                formik.resetForm();
                props.setAction((pre) => !pre)
            }
        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };

    return (
        <div>
            <Drawer isOpen={props.isOpen} size={props.size}>
                <DrawerOverlay />
                <DrawerContent>
                    <DrawerHeader alignItems={"center"} justifyContent='space-between' display='flex' >
                        Add Property
                        <IconButton onClick={props.onClose} icon={<CloseIcon />} />
                    </DrawerHeader>
                    <DrawerBody>
                        <CustomForm moduleData={props.propertyData} values={values} setFieldValue={setFieldValue} handleChange={handleChange} handleBlur={handleBlur} errors={errors} touched={touched} />
                    </DrawerBody>


                    <DrawerFooter>
                        <Button size="sm" sx={{ textTransform: "capitalize" }} disabled={isLoding ? true : false} variant="brand" type="submit" onClick={handleSubmit}                        >
                            {isLoding ? <Spinner /> : 'Save'}
                        </Button>
                        <Button size="sm"
                            variant="outline"
                            colorScheme='red'
                            sx={{
                                marginLeft: 2,
                                textTransform: "capitalize",
                            }}
                            onClick={props.onClose}
                        >
                            Close
                        </Button>
                    </DrawerFooter>

                </DrawerContent>
            </Drawer>
        </div>
    )
}

export default Add

================
File: Client/src/views/admin/property/Edit.js
================
import { CloseIcon } from '@chakra-ui/icons';
import { Button, Drawer, DrawerBody, DrawerContent, DrawerFooter, DrawerHeader, DrawerOverlay, Flex, IconButton } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import { useFormik } from 'formik';
import { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { getApi, putApi } from 'services/api';
import { generateValidationSchema } from 'utils';
import CustomForm from 'utils/customForm';
import * as yup from 'yup'

const Edit = (props) => {
    const { data } = props
    const initialFieldValues = Object.fromEntries(
        (props?.leadData?.fields || []).map(field => [field?.name, ''])
    );
    const [initialValues, setInitialValues] = useState({
        ...initialFieldValues,
        createBy: JSON.parse(localStorage.getItem('user'))._id
    })

    const param = useParams()

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: yup.object().shape(generateValidationSchema(props?.propertyData?.fields)),
        enableReinitialize: true,
        onSubmit: (values, { resetForm }) => {
            EditData();
        },
    });

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, } = formik;

    const [isLoding, setIsLoding] = useState(false)

    const EditData = async () => {
        try {
            setIsLoding(true)
            let response = await putApi(`api/property/edit/${props?.selectedId || param.id}`, values)
            if (response.status === 200) {
                props.onClose();
                props.setAction((pre) => !pre)
            }
        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };

    const handleClose = () => {
        props.onClose(false)
        props.setSelectedId && props?.setSelectedId()
    }

    let response


    const fetchData = async () => {
        if (data) {
            setInitialValues((prev) => ({ ...prev, ...data }))
        } else if (props?.selectedId) {
            try {
                setIsLoding(true)
                response = await getApi('api/property/view/', props?.selectedId)
                setInitialValues((prev) => ({ ...prev, ...response?.data?.property }))
            } catch (e) {
                console.error(e)
            } finally {
                setIsLoding(false)
            }
        }
    }

    useEffect(() => {
        fetchData()
    }, [props?.selectedId, data])

    return (
        <div>
            <Drawer isOpen={props.isOpen} size={props.size}>
                <DrawerOverlay />
                <DrawerContent>
                    <DrawerHeader alignItems={"center"} justifyContent='space-between' display='flex' >
                        Edit Property
                        <IconButton onClick={handleClose} icon={<CloseIcon />} />
                    </DrawerHeader>
                    <DrawerBody>
                        {isLoding ?
                            <Flex justifyContent={'center'} alignItems={'center'} width="100%" >
                                <Spinner />
                            </Flex>
                            :
                            <CustomForm moduleData={props.propertyData} values={values} setFieldValue={setFieldValue} handleChange={handleChange} handleBlur={handleBlur} errors={errors} touched={touched} />
                        }
                    </DrawerBody>
                    <DrawerFooter>
                        <Button size="sm"
                            sx={{ textTransform: "capitalize" }}
                            variant="brand"
                            disabled={isLoding ? true : false}
                            type="submit"
                            onClick={handleSubmit}
                        >
                            {isLoding ? <Spinner /> : 'Update'}
                        </Button>
                        <Button size="sm"
                            variant="outline"
                            colorScheme='red'
                            sx={{
                                marginLeft: 2,
                                textTransform: "capitalize",
                            }}
                            onClick={() => { props.onClose(false) }}
                        >
                            Close
                        </Button>
                    </DrawerFooter>

                </DrawerContent>
            </Drawer>
        </div>
    )
}

export default Edit

================
File: Client/src/views/admin/property/index.js
================
import { useEffect, useState } from 'react';
import { useNavigate } from "react-router-dom";
import { HasAccess } from "../../../redux/accessUtils";
import { Grid, GridItem, Text, Menu, MenuButton, MenuItem, MenuList, useDisclosure } from '@chakra-ui/react';
import { DeleteIcon, ViewIcon, EditIcon, } from "@chakra-ui/icons";
import { CiMenuKebab } from "react-icons/ci";
import { getApi } from "services/api";
import CommonCheckTable from '../../../components/reactTable/checktable';
import Add from "./Add";
import Edit from "./Edit";
import ImportModal from './components/ImportModal';
import CommonDeleteModel from 'components/commonDeleteModel';
import { deleteManyApi } from 'services/api';
import { fetchPropertyCustomFiled } from '../../../redux/slices/propertyCustomFiledSlice';
import { useDispatch, useSelector } from 'react-redux';
import { fetchPropertyData } from '../../../redux/slices/propertySlice'
import { toast } from 'react-toastify';

const Index = () => {
    const user = JSON.parse(localStorage.getItem("user"));
    const navigate = useNavigate();
    const dispatch = useDispatch();
    const [permission] = HasAccess(['Properties']);
    const [isLoding, setIsLoding] = useState(false);
    // const [data, setData] = useState([]);
    const [tableColumns, setTableColumns] = useState([]);
    const [columns, setColumns] = useState([]);
    // const [dataColumn, setDataColumn] = useState([]);
    // const [selectedColumns, setSelectedColumns] = useState([]);
    const [action, setAction] = useState(false);
    const { isOpen, onOpen, onClose } = useDisclosure();
    const [propertyData, setPropertyData] = useState([]);
    const [edit, setEdit] = useState(false);
    const [deleteModel, setDelete] = useState(false);
    const [selectedId, setSelectedId] = useState();
    const [selectedValues, setSelectedValues] = useState([]);
    const [isImportProperty, setIsImportProperty] = useState(false);

    const data = useSelector((state) => state?.propertyData?.data)

    const fetchCustomDataFields = async () => {
        setIsLoding(true);
        const result = await dispatch(fetchPropertyCustomFiled())
        if (result.payload.status === 200) {
            setPropertyData(result?.payload?.data);
        } else {
            toast.error("Failed to fetch data", "error");
        }
        const actionHeader = {
            Header: "Action",
            accessor: "action",
            isSortable: false,
            center: true,
            cell: ({ row }) => (
                <Text fontSize="md" fontWeight="900" textAlign={"center"} >
                    <Menu isLazy>
                        <MenuButton><CiMenuKebab /></MenuButton>
                        <MenuList minW={'fit-content'} transform={"translate(1520px, 173px);"}>
                            {permission?.update &&
                                <MenuItem py={2.5} icon={<EditIcon fontSize={15} mb={1} />} onClick={() => { setEdit(true); setSelectedId(row?.values?._id); }}>Edit</MenuItem>}
                            {permission?.view &&
                                <MenuItem py={2.5} color={'green'} icon={<ViewIcon mb={1} fontSize={15} />} onClick={() => { navigate(`/propertyView/${row?.values?._id}`) }}>View</MenuItem>}
                            {permission?.delete &&
                                <MenuItem py={2.5} color={'red'} icon={<DeleteIcon fontSize={15} mb={1} />} onClick={() => { setDelete(true); setSelectedValues([row?.values?._id]); setSelectedId(row?.values?._id); }}>Delete</MenuItem>}
                        </MenuList>
                    </Menu>
                </Text>
            )
        };
        const tempTableColumns = [
            { Header: "#", accessor: "_id", isSortable: false, width: 10 },
            ...(result?.payload?.data && result.payload.data.length > 0
                ? result.payload.data[0]?.fields
                    ?.filter((field) => field?.isTableField === true && field?.isView)
                    ?.map(
                        (field) => ({
                            Header: field?.label,
                            accessor: field?.name,
                            cell: (cell) => (
                                <div className="selectOpt">
                                    <Text
                                        onClick={() => {
                                            navigate(`/propertyView/${cell?.row?.original?._id}`);
                                        }}
                                        me="10px"
                                        sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' }, cursor: 'pointer' }}
                                        color='brand.600'
                                        fontSize="sm"
                                        fontWeight="700"
                                    >
                                        {cell?.value || "-"}
                                    </Text>
                                </div>
                            ),
                        })) || []
                : []),
            ...(result?.payload?.data?.[0]?.fields || []) // Ensure result.payload[0].fields is an array
                .filter(field => field?.isTableField === true && !field?.isView) // Filter out fields where isTableField is true
                .map(field => ({ Header: field?.label, accessor: field?.name })),
            ...(permission?.update || permission?.view || permission?.delete ? [actionHeader] : [])
        ];


        setColumns(tempTableColumns);
        setIsLoding(false);
    }

    const handleDeleteProperties = async (ids) => {
        try {
            setIsLoding(true)
            let response = await deleteManyApi('api/property/deleteMany', ids)
            if (response.status === 200) {
                setSelectedValues([])
                setDelete(false)
                setAction((pre) => !pre)
            }
        } catch (error) {
            console.log(error)
        }
        finally {
            setIsLoding(false)
        }
    }

    useEffect(() => {
        dispatch(fetchPropertyData());
        fetchCustomDataFields();
    }, [action])

    // useEffect(() => {
    //     setDataColumn(tableColumns?.filter(item => selectedColumns?.find(colum => colum?.Header === item.Header)));
    // }, [tableColumns, selectedColumns])

    return (
        <div>
            <Grid templateColumns="repeat(6, 1fr)" mb={3} gap={4}>
                {!isLoding &&
                    <GridItem colSpan={6}>
                        <CommonCheckTable
                            title={"Properties"}
                            isLoding={isLoding}
                            columnData={columns ?? []}
                            // dataColumn={dataColumn ?? []}
                            allData={data ?? []}
                            tableData={data}
                            tableCustomFields={propertyData?.[0]?.fields?.filter((field) => field?.isTableField === true) || []}
                            access={permission}
                            // action={action}
                            // setAction={setAction}
                            // selectedColumns={selectedColumns}
                            // setSelectedColumns={setSelectedColumns}
                            // isOpen={isOpen}
                            // onClose={onclose}
                            onOpen={onOpen}
                            selectedValues={selectedValues}
                            setSelectedValues={setSelectedValues}
                            setDelete={setDelete}
                            setIsImport={setIsImportProperty}
                        />
                    </GridItem>
                }
            </Grid>
            {isOpen && <Add propertyData={propertyData[0]} isOpen={isOpen} size={"lg"} onClose={onClose} setAction={setAction} />}
            {edit && <Edit isOpen={edit} size={"lg"} propertyData={propertyData[0]} selectedId={selectedId} setSelectedId={setSelectedId} onClose={setEdit} setAction={setAction} />}
            {deleteModel && <CommonDeleteModel isOpen={deleteModel} onClose={() => setDelete(false)} type='Properties' handleDeleteData={handleDeleteProperties} ids={selectedValues} />}
            {isImportProperty && <ImportModal text='Property file' isOpen={isImportProperty} onClose={setIsImportProperty} customFields={propertyData?.[0]?.fields || []} />}

        </div>
    )
}

export default Index

================
File: Client/src/views/admin/property/View.js
================
import { AddIcon, ChevronDownIcon, DeleteIcon, EditIcon } from "@chakra-ui/icons";
import { Box, Button, Flex, Grid, GridItem, Heading, Image, Menu, MenuButton, MenuDivider, MenuItem, MenuList, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Tab, TabList, TabPanel, TabPanels, Tabs, Text, useColorModeValue, useDisclosure } from "@chakra-ui/react";
import Card from "components/card/Card";
import { HSeparator } from "components/separator/Separator";
import Spinner from "components/spinner/Spinner";
import { useEffect, useState } from "react";
import { IoIosArrowBack } from "react-icons/io";
import { Link, useNavigate, useParams } from "react-router-dom";
import { getApi } from "services/api";
import Add from "./Add";
import Edit from "./Edit";
import PropertyPhoto from "./components/propertyPhoto";
import { HasAccess } from "../../../redux/accessUtils";
import DataNotFound from "components/notFoundData";
import xlsx from '../../../assets/img/fileImage/xlsx.png'
import jpg from '../../../assets/img/fileImage/jpg.png'
import png from '../../../assets/img/fileImage/png.png'
import pdf from '../../../assets/img/fileImage/pdf.png'
import xls from '../../../assets/img/fileImage/xls.png'
import csv from '../../../assets/img/fileImage/csv.png'
import file from '../../../assets/img/fileImage/file.png'
import CustomView from "utils/customView";
import CommonCheckTable from "components/reactTable/checktable";
import CommonDeleteModel from "components/commonDeleteModel";
import { deleteApi } from "services/api";
import { useDispatch, useSelector } from "react-redux";
import { fetchPropertyCustomFiled } from "../../../redux/slices/propertyCustomFiledSlice";
import { fetchContactCustomFiled } from '../../../redux/slices/contactCustomFiledSlice';
import { FaFilePdf } from "react-icons/fa";
import html2pdf from "html2pdf.js";
import moment from 'moment';

const View = () => {

    const user = JSON.parse(localStorage.getItem("user"))
    const param = useParams()
    const buttonbg = useColorModeValue("gray.200", "white");
    const textColor = useColorModeValue("gray.500", "white");

    const [data, setData] = useState()
    const [filteredContacts, setFilteredContacts] = useState([])
    const { isOpen, onOpen, onClose } = useDisclosure()
    const [edit, setEdit] = useState(false);
    const [deleteModel, setDelete] = useState(false);
    const [action, setAction] = useState(false)
    const [propertyPhoto, setPropertyPhoto] = useState(false);
    const [showProperty, setShowProperty] = useState(false);
    const [virtualToursorVideos, setVirtualToursorVideos] = useState(false);
    const [floorPlans, setFloorPlans] = useState(false);
    const [propertyDocuments, setPropertyDocuments] = useState(false);
    const [isLoding, setIsLoding] = useState(false)
    const [displayPropertyPhoto, setDisplayPropertyPhoto] = useState(false)
    const [selectedTab, setSelectedTab] = useState(0);
    const dispatch = useDispatch();
    const propertyData = useSelector((state) => state?.propertyCustomFiled?.data?.data)

    const [contactData, setContactData] = useState([]);
    const [columns, setColumns] = useState([]);
    const [type, setType] = useState(false)
    const navigate = useNavigate();

    const size = "lg";

    const contactColumns = [
        { Header: 'Title', accessor: 'title' },
        { Header: "First Name", accessor: "firstName" },
        { Header: "Last Name", accessor: "lastName" },
        { Header: "Phone Number", accessor: "phoneNumber" },
        { Header: "Email Address", accessor: "email" },
        { Header: "Contact Method", accessor: "preferredContactMethod" },
    ];

    const fetchCustomDataFields = async () => {
        setIsLoding(true);
        const result = await dispatch(fetchContactCustomFiled())
        setContactData(result?.payload?.data);

        const tempTableColumns = [
            { Header: "#", accessor: "_id", isSortable: false, width: 10 },
            ...result?.payload?.data?.[0]?.fields?.filter((field) => field?.isTableField === true)?.map((field) => ({ Header: field?.label, accessor: field?.name })),
        ];
        setColumns(tempTableColumns);
        setIsLoding(false);
    };

    const [selectedColumns, setSelectedColumns] = useState([...columns]);

    const handleTabChange = (index) => {
        setSelectedTab(index);
    };

    const fetchData = async (i) => {
        setIsLoding(true)
        let response = await getApi('api/property/view/', param.id)
        setData(response.data.property);
        setFilteredContacts(response?.data?.filteredContacts);
        setIsLoding(false)
        setSelectedTab(i)
    }
    const generatePDF = () => {
        const element = document.getElementById("reports");
        if (element) {
            element.style.display = 'block';
            element.style.width = '100%'; // Adjust width for mobile
            element.style.height = 'auto';
            // setTimeout(() => {
            html2pdf()
                .from(element)
                .set({
                    margin: [0, 0, 0, 0],
                    filename: `Property_Details_${moment().format("DD-MM-YYYY")}.pdf`,
                    image: { type: "jpeg", quality: 0.98 },
                    html2canvas: { scale: 2, useCORS: true, allowTaint: true },
                    jsPDF: { unit: "in", format: "letter", orientation: "portrait" },
                })
                .save().then(() => {
                    element.style.display = '';
                })
            // }, 500);
        } else {
            console.error("Element with ID 'reports' not found.");
        }
    };
    const handleDeleteProperties = async (id) => {
        try {
            setIsLoding(true)
            let response = await deleteApi('api/property/delete/', id)
            if (response.status === 200) {
                setDelete(false)
                setAction((pre) => !pre)
                navigate('/properties')
            }
        } catch (error) {
            console.log(error)
        }
        finally {
            setIsLoding(false)
        }
    }

    useEffect(() => {
        dispatch(fetchPropertyCustomFiled())
        fetchData()
        fetchCustomDataFields()
    }, [])


    const [permission, contactAccess, emailAccess, callAccess] = HasAccess(['Properties', 'Contacts', 'Emails', 'Calls']);

    return (
        <>
            <Add isOpen={isOpen} size={size} onClose={onClose} propertyData={propertyData?.[0]} />
            <Edit isOpen={edit} size={size} onClose={setEdit} setAction={setAction} propertyData={propertyData?.[0]} data={data} />
            <CommonDeleteModel isOpen={deleteModel} onClose={() => setDelete(false)} type='Property' handleDeleteData={handleDeleteProperties} ids={param.id} />

            {isLoding ?
                <Flex justifyContent={'center'} alignItems={'center'} width="100%" >
                    <Spinner />
                </Flex> : <>
                    <Heading size="lg" mt={0} m={3}>
                        {data?.name || ""}
                    </Heading>
                    <Tabs onChange={handleTabChange} index={selectedTab}>
                        <Grid templateColumns={'repeat(12, 1fr)'} mb={3} gap={1}>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <TabList sx={{
                                    border: "none",
                                    '& button:focus': { boxShadow: 'none', },
                                    '& button': {
                                        margin: { sm: "0 3px", md: "0 5px" }, padding: { sm: "5px", md: "8px" }, border: '2px solid #8080803d', borderTopLeftRadius: "10px", borderTopRightRadius: "10px", borderBottom: 0, fontSize: { sm: "12px", md: "16px" }
                                    },
                                    '& button[aria-selected="true"]': {
                                        border: "2px solid brand.200", borderBottom: 0, zIndex: '0'
                                    },
                                }} >
                                    <Tab >Information</Tab>
                                    <Tab>Gallery</Tab>
                                </TabList>

                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }} mt={{ sm: "3px", md: "5px" }} >
                                <Flex justifyContent={"right"}>
                                    <Menu>
                                        {(user.role === 'superAdmin' || permission?.create || permission?.update || permission?.delete) && <MenuButton variant="outline" size="sm" colorScheme='blackAlpha' va mr={2.5} as={Button} rightIcon={<ChevronDownIcon />}>
                                            Actions
                                        </MenuButton>}
                                        <MenuDivider />
                                        <MenuList minWidth={2}>
                                            {(user.role === 'superAdmin' || permission?.create) && <MenuItem alignItems={'start'} color={'blue'} onClick={() => onOpen()} icon={<AddIcon />}>Add</MenuItem>}
                                            {(user.role === 'superAdmin' || permission?.update) && <MenuItem alignItems={'start'} onClick={() => setEdit(true)} icon={<EditIcon />}>Edit</MenuItem>}
                                            <MenuItem onClick={generatePDF} alignItems={"start"} icon={<FaFilePdf />} display={"flex"} style={{ alignItems: "center" }}>Print as PDF</MenuItem >
                                            {(user.role === 'superAdmin' || permission?.delete) && <>
                                                <MenuDivider />
                                                <MenuItem alignItems={'start'} color={'red'} onClick={() => setDelete(true)} icon={<DeleteIcon />}>Delete</MenuItem>
                                            </>}
                                        </MenuList>
                                    </Menu>
                                    <Link to="/properties">
                                        <Button size="sm" leftIcon={<IoIosArrowBack />} variant="brand">
                                            Back
                                        </Button>
                                    </Link>
                                </Flex>
                            </GridItem>
                        </Grid>

                        <TabPanels>
                            <TabPanel pt={4} p={0}>
                                <CustomView data={propertyData?.[0]} fieldData={data} fetchData={fetchData} editUrl={`api/property/edit/${param.id}`} moduleId={propertyData?.[0]?._id} id="reports" />
                                {filteredContacts?.length > 0 &&
                                    <GridItem colSpan={{ base: 12 }} mt={4}>
                                        <Grid templateColumns={{ base: "1fr" }} >
                                            <GridItem colSpan={2}>
                                                <Grid templateColumns={'repeat(2, 1fr)'} >
                                                    <GridItem colSpan={{ base: 2 }}>
                                                        <CommonCheckTable
                                                            AdvanceSearch={false}
                                                            ManageGrid={false}
                                                            access={false}
                                                            columnData={columns ?? []}
                                                            // dataColumn={columns ?? []}
                                                            title={"Interested Contact"}
                                                            allData={filteredContacts ?? []}
                                                            tableData={filteredContacts}
                                                            // selectedColumns={selectedColumns}
                                                            // setSelectedColumns={setSelectedColumns}
                                                            size={"md"}
                                                            tableCustomFields={contactData?.[0]?.fields?.filter((field) => field?.isTableField === true) || []}
                                                            customSearch={true}
                                                            checkBox={false}
                                                        />
                                                    </GridItem>
                                                </Grid>
                                            </GridItem>

                                        </Grid>
                                    </GridItem>
                                }
                            </TabPanel>

                            <TabPanel pt={4} p={0}>
                                <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                                    <GridItem colSpan={{ base: 12, md: 6 }}>
                                        <Card >
                                            <Grid templateColumns="repeat(12, 1fr)" gap={4}>
                                                <GridItem colSpan={12}>
                                                    <Box>
                                                        <Flex flexWrap={'wrap'} mb={3} justifyContent={'space-between'} alingItem={'center'} >
                                                            <Heading size="md" >
                                                                Property Photos
                                                            </Heading>
                                                            <Button size="sm" leftIcon={<AddIcon />} onClick={() => setPropertyPhoto(true)} variant="brand">Add New</Button>
                                                            <PropertyPhoto text='Property Photos' fetchData={fetchData} isOpen={propertyPhoto} onClose={setPropertyPhoto} id={param.id} />
                                                        </Flex>
                                                        <HSeparator />
                                                    </Box>
                                                </GridItem>
                                                <GridItem colSpan={{ base: 12 }} >
                                                    <Flex overflowY={"scroll"} height={"150px"} alingItem={'center'} >
                                                        {data?.propertyPhotos?.length > 0 ?
                                                            data && data?.propertyPhotos?.length > 0 && data?.propertyPhotos?.map((item) => (
                                                                <Image width={'150px'} m={1} src={item.img} alt="Your Image" />
                                                            )) : <Text textAlign={'center'} width="100%" color={textColor} fontSize="sm" fontWeight="700">
                                                                <DataNotFound />
                                                            </Text>}
                                                    </Flex>
                                                    {data?.propertyPhotos?.length > 0 ?
                                                        <Flex justifyContent={"end"} mt={1}>
                                                            <Button size="sm" colorScheme="brand" variant="outline" onClick={() => { setDisplayPropertyPhoto(true); setType("photo"); }}>Show more</Button>
                                                        </Flex> : ""}
                                                </GridItem>
                                            </Grid>
                                        </Card>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12, md: 6 }}>
                                        <Card >
                                            <Grid templateColumns="repeat(12, 1fr)" gap={4}>
                                                <GridItem colSpan={12}>
                                                    <Box>
                                                        <Flex flexWrap={'wrap'} mb={3} justifyContent={'space-between'} alingItem={'center'} >
                                                            <Heading size="md" >
                                                                Virtual Tours or Videos
                                                            </Heading>
                                                            <Button size="sm" leftIcon={<AddIcon />} onClick={() => setVirtualToursorVideos(true)} variant="brand">Add New</Button>
                                                            <PropertyPhoto text='Virtual Tours or Videos' fetchData={fetchData} isOpen={virtualToursorVideos} onClose={setVirtualToursorVideos} id={param.id} />
                                                        </Flex>
                                                        <HSeparator />
                                                    </Box>
                                                </GridItem>
                                                <GridItem colSpan={{ base: 12 }} >
                                                    <Flex overflowY={"scroll"} height={"150px"} alingItem={'center'} >
                                                        {data?.virtualToursOrVideos?.length > 0 ?
                                                            data && data?.virtualToursOrVideos?.length > 0 && data?.virtualToursOrVideos?.map((item) => (
                                                                <video width="200" controls autoplay loop style={{ margin: "0 5px" }}>
                                                                    <source src={item.img} type="video/mp4" />
                                                                    <source src={item.img} type="video/ogg" />
                                                                </video>
                                                            )) : <Text textAlign={'center'} width="100%" color={textColor} fontSize="sm" fontWeight="700">
                                                                <DataNotFound />
                                                            </Text>}

                                                    </Flex>

                                                </GridItem>
                                            </Grid>
                                        </Card>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12, md: 6 }}>
                                        <Card >
                                            <Grid templateColumns="repeat(12, 1fr)" gap={4}>
                                                <GridItem colSpan={12}>
                                                    <Box>
                                                        <Flex flexWrap={'wrap'} mb={3} justifyContent={'space-between'} alingItem={'center'} >
                                                            <Heading size="md" >
                                                                Floor Plans
                                                            </Heading>
                                                            <Button size="sm" leftIcon={<AddIcon />} onClick={() => setFloorPlans(true)} variant="brand">Add New</Button>
                                                            <PropertyPhoto text='Floor Plans' fetchData={fetchData} isOpen={floorPlans} onClose={setFloorPlans} id={param.id} />
                                                        </Flex>
                                                        <HSeparator />
                                                    </Box>
                                                </GridItem>
                                                <GridItem colSpan={{ base: 12 }} >
                                                    <Flex overflowY={"scroll"} height={"150px"} alingItem={'center'} >
                                                        {data?.floorPlans?.length > 0 ?
                                                            data && data?.floorPlans?.length > 0 && data?.floorPlans?.map((item) => (
                                                                <Image key={item.createOn} width={'30%'} m={1} src={item.img} alt="Your Image" />
                                                            )) : <Text textAlign={'center'} width="100%" color={textColor} fontSize="sm" fontWeight="700">
                                                                <DataNotFound />
                                                            </Text>}
                                                    </Flex>
                                                    {data?.floorPlans?.length > 0 ?
                                                        <Flex justifyContent={"end"} mt={1}>
                                                            <Button size="sm" colorScheme="brand" variant="outline" onClick={() => { setDisplayPropertyPhoto(true); setType("floor"); }}>Show more</Button>
                                                        </Flex> : ""}
                                                </GridItem>
                                            </Grid>
                                        </Card>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12, md: 6 }}>
                                        <Card  >
                                            <Grid templateColumns="repeat(12, 1fr)" gap={4}>
                                                <GridItem colSpan={12}>
                                                    <Box>
                                                        <Flex flexWrap={'wrap'} mb={3} justifyContent={'space-between'} alingItem={'center'} >
                                                            <Heading size="md" >
                                                                Property Documents
                                                            </Heading>
                                                            <Button size="sm" variant="brand" leftIcon={<AddIcon />} onClick={() => setPropertyDocuments(true)}>Add New</Button>
                                                            <PropertyPhoto text='Property Documents' fetchData={fetchData} isOpen={propertyDocuments} onClose={setPropertyDocuments} id={param.id} />
                                                        </Flex>
                                                        <HSeparator />
                                                    </Box>
                                                </GridItem>
                                                <GridItem colSpan={12} sx={{ maxHeight: '200px', overflowX: 'auto' }}>
                                                    {data?.propertyDocuments?.length > 0 ?
                                                        (data && data?.propertyDocuments?.length > 0 && data?.propertyDocuments?.map((item) => {
                                                            const parts = item.filename.split('.');
                                                            const lastIndex = parts[parts.length - 1]
                                                            return (
                                                                <Flex alignItems={'center'} mt='3'>
                                                                    {lastIndex === 'xlsx' && <Image src={xlsx} boxSize='50px' />}
                                                                    {lastIndex === 'jpg' && <Image src={jpg} boxSize='50px' />}
                                                                    {lastIndex === 'png' && <Image src={png} boxSize='50px' />}
                                                                    {lastIndex === 'pdf' && <Image src={pdf} boxSize='50px' />}
                                                                    {lastIndex === 'xls' && <Image src={xls} boxSize='50px' />}
                                                                    {lastIndex === 'csv' && <Image src={csv} boxSize='50px' />}
                                                                    {!(lastIndex === 'xls' || lastIndex === 'csv' || lastIndex === 'png' || lastIndex === 'pdf' || lastIndex === 'xlsx' || lastIndex === 'jpg') && <Image src={file} boxSize='50px' />}
                                                                    <Text ml={2} color='green.400' onClick={() => window.open(item?.img)} cursor={'pointer'} sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}>
                                                                        {item.filename}
                                                                    </Text>
                                                                </Flex>
                                                            )
                                                        }))
                                                        :
                                                        <Text textAlign={'center'} width="100%" color={textColor} fontSize="sm" fontWeight="700">
                                                            <DataNotFound />
                                                        </Text>}
                                                </GridItem>
                                            </Grid>
                                            {data?.propertyDocuments?.length > 0 ?
                                                <Flex justifyContent={"end"} mt={1}>
                                                    <Button size="sm" colorScheme="brand" variant="outline" onClick={() => { setShowProperty(true); setType("Doucument"); }}>Show more</Button>
                                                </Flex> : ""}
                                        </Card>
                                    </GridItem>
                                </Grid>
                            </TabPanel>
                        </TabPanels>

                    </Tabs>

                    {(permission?.delete || permission?.update || user?.role === 'superAdmin') && <Card mt={3}>
                        <Grid templateColumns="repeat(6, 1fr)" gap={1}>
                            <GridItem colStart={6} >
                                <Flex justifyContent={"right"}>
                                    {permission?.update && <Button onClick={() => setEdit(true)} size="sm" leftIcon={<EditIcon />} mr={2.5} variant="outline" colorScheme="green">Edit</Button>}
                                    {permission?.delete && <Button style={{ background: 'red.800' }} size="sm" onClick={() => setDelete(true)} leftIcon={<DeleteIcon />} colorScheme="red" >Delete</Button>}
                                </Flex>
                            </GridItem>
                        </Grid>
                    </Card>}
                </>}

            {/* property photo modal */}
            <Modal onClose={() => setDisplayPropertyPhoto(false)} isOpen={displayPropertyPhoto} >
                <ModalOverlay />
                <ModalContent maxWidth={"6xl"} height={"750px"}>
                    <ModalHeader>{type === "photo" ? "Property All Photos" : type === "video" ? "Virtual Tours or Videos" : type === "floor" ? "Floors plans" : ""}</ModalHeader>
                    <ModalCloseButton onClick={() => setDisplayPropertyPhoto(false)} />
                    <ModalBody overflowY={"auto"} height={"700px"}>
                        <div style={{ columns: 3 }}  >
                            {
                                type === "photo" ?
                                    data && data?.propertyPhotos?.length > 0 && data?.propertyPhotos?.map((item) => (
                                        <a href={item.img} target="_blank"> <Image width={"100%"} m={1} mb={4} src={item.img} alt="Your Image" /></a>
                                    )) :
                                    type === "video" ? data && data?.virtualToursOrVideos?.length > 0 && data?.virtualToursOrVideos?.map((item) => (
                                        <a href={item.img} target="_blank">
                                            <video width="380" controls autoplay loop style={{ margin: " 5px" }}>
                                                <source src={item.img} type="video/mp4" />
                                                <source src={item.img} type="video/ogg" />
                                            </video>
                                        </a>
                                    )) : type === "floor" ?
                                        data && data?.floorPlans?.length > 0 && data?.floorPlans?.map((item) => (
                                            <a href={item.img} target="_blank">
                                                <Image width={"100%"} m={1} mb={4} src={item.img} alt="Your Image" />
                                            </a>
                                        )) : ""
                            }
                        </div>
                    </ModalBody>
                    <ModalFooter>
                        <Button size="sm" variant="outline" colorScheme='red' mr={2} onClick={() =>
                            setDisplayPropertyPhoto(false)} >Close</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>

            {/* property document modal */}
            <Modal onClose={() => setShowProperty(false)} isOpen={showProperty} >
                <ModalOverlay />
                <ModalContent maxWidth={"xl"} height={"750px"}>
                    <ModalHeader>Property All Document</ModalHeader>
                    <ModalCloseButton onClick={() => setShowProperty(false)} />
                    <ModalBody overflowY={"auto"} height={"700px"}>
                        {data?.propertyDocuments?.length > 0 ?
                            (data && data?.propertyDocuments?.length > 0 && data?.propertyDocuments?.map((item) => {
                                const parts = item.filename.split('.');
                                const lastIndex = parts[parts.length - 1]
                                return (
                                    <Flex alignItems={'center'} mt='3'>
                                        {lastIndex === 'xlsx' && <Image src={xlsx} boxSize='50px' />}
                                        {lastIndex === 'jpg' && <Image src={jpg} boxSize='50px' />}
                                        {lastIndex === 'png' && <Image src={png} boxSize='50px' />}
                                        {lastIndex === 'pdf' && <Image src={pdf} boxSize='50px' />}
                                        {lastIndex === 'xls' && <Image src={xls} boxSize='50px' />}
                                        {lastIndex === 'csv' && <Image src={csv} boxSize='50px' />}
                                        {!(lastIndex === 'xls' || lastIndex === 'csv' || lastIndex === 'png' || lastIndex === 'pdf' || lastIndex === 'xlsx' || lastIndex === 'jpg') && <Image src={file} boxSize='50px' />}
                                        <Text ml={2} color='green.400' onClick={() => window.open(item?.img)} cursor={'pointer'} sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}>
                                            {item.filename}
                                        </Text>
                                    </Flex>
                                )
                            }))
                            :
                            <Text textAlign={'center'} width="100%" color={textColor} fontSize="sm" fontWeight="700">
                                <DataNotFound />
                            </Text>}
                    </ModalBody>
                    <ModalFooter>
                        <Button size="sm" variant="outline" colorScheme='red' mr={2} onClick={() =>
                            setShowProperty(false)} >Close</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>

        </>
    );
};

export default View;

================
File: Client/src/views/admin/quotes/components/ImportModel.js
================
import { Button, Grid, GridItem, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text } from '@chakra-ui/react'
import Spinner from 'components/spinner/Spinner'
import { useFormik } from 'formik'
import { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import CommonFileUpload from 'components/commonFileUpload'

const ImportModal = (props) => {
    const { onClose, isOpen, text, customFields } = props
    const [isLoding, setIsLoding] = useState(false)
    const navigate = useNavigate();

    const initialValues = {
        quotes: ''
    }

    const formik = useFormik({
        initialValues: initialValues,
        onSubmit: (values, { resetForm }) => {
            AddData()
            resetForm();
        },
    });
    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik

    const AddData = async () => {
        try {
            setIsLoding(true)
            resetForm()

            if (values.quotes) {
                onClose();
                navigate('/quotesImport', { state: { fileData: values.quotes, customFields: customFields } });
            }

        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };

    return (
        <Modal onClose={onClose} isOpen={isOpen} isCentered>
            <ModalOverlay />
            <ModalContent>
                <ModalHeader>Import Quotes</ModalHeader>
                <ModalCloseButton />
                <ModalBody>
                    <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                        <GridItem colSpan={{ base: 12 }}>
                            <CommonFileUpload count={values.quotes.length} onFileSelect={(file) => setFieldValue('quotes', file)} text={text} />
                            <Text mb='10px' color={'red'}> {errors.quotes && touched.quotes && <>Please Select {text}</>}</Text>
                        </GridItem>
                    </Grid>
                </ModalBody>
                <ModalFooter>
                    <Button size="sm" variant='brand' onClick={handleSubmit} disabled={isLoding ? true : false} >{isLoding ? <Spinner /> : 'Save'}</Button>
                    <Button sx={{
                        marginLeft: 2,
                        textTransform: "capitalize",
                    }} variant="outline"
                        colorScheme="red" size="sm" onClick={() => {
                            onClose()
                            formik.resetForm()
                        }}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    )
}

export default ImportModal

================
File: Client/src/views/admin/quotes/components/QuotesAdvanceSearch.js
================
import React from 'react';
import { useFormik } from "formik";
import * as yup from "yup";
import { Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Grid, GridItem, Input, FormLabel, Select, Text, Button, } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import { setSearchValue, getSearchData, setGetTagValues } from '../../../../redux/slices/advanceSearchSlice';
import { useDispatch } from 'react-redux';



const QuotesAdvanceSearch = (props) => {
    const { state, allData, advanceSearch, setAdvanceSearch, isLoding, setSearchedData, setDisplaySearchData, setSearchClear, setSearchbox } = props;

    const dispatch = useDispatch();
    const initialValues = {
        quoteNumber: '',
        title: '',
        quoteStage: '',
        contactName: '',
        accountName: '',
        grandTotal: '',
        validUntil: '',
    }
    const validationSchema = yup.object({
        quoteNumber: yup.string(),
        title: yup.string(),
        quoteStage: yup.string(),
        contactName: yup.string(),
        accountName: yup.string(),
        grandTotal: yup.string(),
        validUntil: yup.string()
    });
    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: validationSchema,
        onSubmit: (values, { resetForm }) => {
            dispatch(setSearchValue(values))
            dispatch(getSearchData({ values: values, allData: allData, type: 'quotes' }))

            const getValue = [
                {
                    name: ["quoteNumber"],
                    value: values.quoteNumber
                },
                {
                    name: ["title"],
                    value: values.title
                },
                {
                    name: ["quoteStage"],
                    value: values.quoteStage
                },
                {
                    name: ["contactName"],
                    value: values.contactName
                },
                {
                    name: ["accountName"],
                    value: values.accountName
                },
                {
                    name: ["grandTotal"],
                    value: values.grandTotal
                },
                {
                    name: ["validUntil"],
                    value: values.validUntil
                },
            ]
            dispatch(setGetTagValues(getValue.filter(item => item.value)))
            setDisplaySearchData(true)
            setAdvanceSearch(false)
            resetForm();
            setSearchbox('');
        }
    })

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm, dirty } = formik;

    return (
        <>
            <Modal onClose={() => { setAdvanceSearch(false); resetForm() }} isOpen={advanceSearch} isCentered>
                <ModalOverlay />
                <ModalContent>
                    <ModalHeader>Advance Search</ModalHeader>
                    <ModalCloseButton onClick={() => { setAdvanceSearch(false); resetForm() }} />
                    <ModalBody>
                        <Grid templateColumns="repeat(12, 1fr)" mb={3} gap={2}>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Quote Number
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.quoteNumber}
                                    name="quoteNumber"
                                    type='number'
                                    placeholder='Enter Quote Number'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.quoteNumber && touched.quoteNumber && errors.quoteNumber}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Title
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.title}
                                    name="title"
                                    placeholder='Enter Title'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.title && touched.title && errors.title}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Quote Stage
                                </FormLabel>
                                <Select
                                    value={values.quoteStage}
                                    name="quoteStage"
                                    onChange={handleChange}
                                    mb={errors.quoteStage && touched.quoteStage ? undefined : '10px'}
                                    fontWeight='500'
                                    placeholder={'Quote Stage'}
                                    borderColor={errors.quoteStage && touched.quoteStage ? "red.300" : null}
                                >
                                    <option value="Draft" >Draft</option>
                                    <option value="Negotiation" >Negotiation</option>
                                    <option value="Delivered" >Delivered</option>
                                    <option value="On Hold" >On Hold</option>
                                    <option value="Confirmed" >Confirmed</option>
                                    <option value="Closed Accepted" >Closed Accepted</option>
                                    <option value="Closed Lost" >Closed Lost</option>
                                    <option value="Closed Dead" >Closed Dead</option>
                                </Select>
                                <Text mb='10px' color={'red'}> {errors.quoteStage && touched.quoteStage && errors.quoteStage}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Contact
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.contactName}
                                    name="contactName"
                                    placeholder='Enter Contact Name'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.contactName && touched.contactName && errors.contactName}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Account
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.accountName}
                                    name="accountName"
                                    placeholder='Enter Account Name'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.accountName && touched.accountName && errors.accountName}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Grand Total
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.grandTotal}
                                    name="grandTotal"
                                    placeholder='Enter Grand Total'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.grandTotal && touched.grandTotal && errors.grandTotal}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Valid Untile
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.validUntil}
                                    name="validUntil"
                                    type='date'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.validUntil && touched.validUntil && errors.validUntil}</Text>
                            </GridItem>
                        </Grid>
                    </ModalBody>
                    <ModalFooter>
                        <Button size="sm" variant="brand" mr={2} onClick={handleSubmit} disabled={isLoding || !dirty ? true : false} >{isLoding ? <Spinner /> : 'Search'}</Button>
                        <Button size="sm" variant="outline" colorScheme="red" onClick={() => resetForm()}>Clear</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        </>
    )
}

export default QuotesAdvanceSearch

================
File: Client/src/views/admin/quotes/components/QuotesImport.js
================
import React, { useState, useEffect } from 'react'
import { useLocation, useNavigate } from 'react-router-dom';
import Papa from 'papaparse';
import {
    Flex,
    useColorModeValue,
    Select,
    Button,
    Grid,
    GridItem,
    Text
} from "@chakra-ui/react";
import { useFormik } from "formik";
import { postApi } from 'services/api';
import { toast } from 'react-toastify';
import moment from 'moment';
import ExcelJS from 'exceljs';
import Card from 'components/card/Card';

function QuotesImport() {

    const location = useLocation();
    const { fileData, customFields } = location.state || {};
    const [importedFileFields, setImportedFileFields] = useState([]);
    const [importedFileData, setImportedFileData] = useState([]);
    const [isLoding, setIsLoding] = useState(false);
    const navigate = useNavigate();
    const userId = JSON.parse(localStorage.getItem('user'))._id;
    const [filterContact, setFilterContact] = useState([]);

    const columns = [
        { Header: 'Fields In Crm', accessor: 'crmFields' },
        { Header: 'Fields In File', accessor: 'fileFields' },
    ];

    const initialFieldValues = Object.fromEntries(
        (customFields || []).map(field => [field?.name, ''])
    );
    const initialValues = {
        ...initialFieldValues
    };

    const fieldsInCrm = [
        ...customFields?.map((field) => ({ Header: field?.label, accessor: field?.name, type: field?.type, formikType: field?.validations?.find(obj => obj.hasOwnProperty('formikType')) }))
    ];

    const formik = useFormik({
        initialValues: initialValues,
        onSubmit: (values, { resetForm }) => {

            const quotesData = importedFileData?.map((item, ind) => {
                const quotes = {
                    createdDate: new Date(),
                    deleted: item[values.deleted || "deleted"] || false,
                    createBy: JSON.parse(localStorage.getItem('user'))._id,
                    modifiedBy: JSON.parse(localStorage.getItem('user'))._id,
                };

                fieldsInCrm?.forEach(field => {
                    const selectedField = values[field?.accessor];
                    const fieldValue = item[selectedField] || '';

                    if (field?.type?.toLowerCase() === "date") {
                        quotes[field?.accessor] = moment(fieldValue).isValid() ? fieldValue : '';
                    } else if (field?.type?.toLowerCase() === "number" && ['positive', 'negative'].includes(field?.formikType?.toLowerCase())) {
                        quotes[field?.accessor] = parseFloat(fieldValue) || '';
                    } else if (field?.type?.toLowerCase() === "number") {
                        quotes[field?.accessor] = parseInt(fieldValue, 10) || '';
                    } else {
                        quotes[field?.accessor] = fieldValue;
                    }
                });

                return quotes;
            });

            AddData(quotesData);
        }
    });

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik

    const AddData = async (quotes) => {
        try {
            setIsLoding(true);
            let response = await postApi('api/quotes/addMany', quotes)
            if (response.status === 200) {
                toast.success(`Quotes imported successfully`)
                resetForm();
                navigate('/quotes');
            }
        } catch (e) {
            console.error(e);
            toast.error(`Quotes import failed`)
            resetForm();
            navigate('/quotes');
        }
        finally {
            setIsLoding(false)
        }
    };

    const parseFileData = async (file) => {
        const reader = new FileReader();
        const extension = file.name.split('.').pop().toLowerCase();

        reader.onload = async ({ target }) => {

            if (extension === 'csv') {
                const csv = Papa.parse(target.result, {
                    header: true,
                });
                const parsedData = csv?.data;

                if (parsedData && parsedData.length > 0) {
                    setImportedFileData(parsedData);
                    const fileHeadingFields = Object.keys(parsedData[0]);
                    setImportedFileFields(fileHeadingFields);
                } else {
                    toast.error("Empty or invalid CSV file");
                    navigate("/quotes");
                }

            } else if (extension === 'xlsx') {
                const data = new Uint8Array(target.result);
                const workbook = new ExcelJS.Workbook();

                await workbook.xlsx.load(data);

                const worksheet = workbook.getWorksheet(1);
                const jsonData = [];

                // Iterate over rows and cells
                worksheet.eachRow({ includeEmpty: true }, (row, rowNumber) => {
                    const rowData = {};
                    row.eachCell({ includeEmpty: true }, (cell, colNumber) => {
                        rowData[worksheet.getCell(1, colNumber).value] = cell.value;
                    });
                    jsonData.push(rowData);
                });
                jsonData?.splice(0, 1);
                setImportedFileData(jsonData);

                if (jsonData && jsonData.length > 0) {
                    const fileHeadingFields = Object.keys(jsonData[0]);
                    setImportedFileFields(fileHeadingFields);
                } else {
                    toast.error("Empty or invalid XLSX file");
                    navigate("/quotes");
                }
            }
        };

        if (extension === 'csv') {
            reader.readAsText(file);
        } else if (extension === 'xlsx') {
            const blob = new Blob([file]);
            reader.readAsArrayBuffer(blob);
        }
    };

    useEffect(() => {
        if (fileData && fileData.length > 0) {
            const firstFile = fileData[0];
            parseFileData(firstFile);
        }
    }, [fileData]);


    useEffect(() => {
        const filterContactData = importedFileFields?.filter(field => {
            const result = fieldsInCrm?.find(data => field === data?.accessor || field === data?.Header);
            if (result) {
                setFieldValue(result?.accessor, field);
                return true;
            }
            return false;
        });
        setFilterContact(filterContactData);
    }, [importedFileFields]);

    return (
        <>
            <Card overflowY={"auto"} className="importTable">
                <Text color={"secondaryGray.900"}
                    fontSize="22px"
                    fontWeight="700"
                    mb='20px'
                >Import Quotes</Text>
                <Grid templateColumns="repeat(12, 1fr)" mb={3} pb={2} gap={1} borderBottom={'1px solid #e2e8f0'}>
                    {
                        columns.map((column, index) => (
                            <GridItem key={index} colSpan={{ base: 6 }} fontWeight={'600'} fontSize={{ sm: "14px", lg: "14px" }} color="secondaryGray.900" style={{ textTransform: "uppercase" }}>
                                {column.Header}
                            </GridItem>
                        ))
                    }
                </Grid>
                <Grid templateColumns="repeat(12, 1fr)" mb={3} gap={1} overflowY={'auto'}>
                    {
                        fieldsInCrm?.map((item, index) => (
                            <>
                                <GridItem colSpan={{ base: 6 }} key={item.id} mt='10px'>
                                    {item.Header}
                                </GridItem>
                                <GridItem colSpan={{ base: 4 }}>
                                    <Select
                                        variant="flushed"
                                        fontWeight='500'
                                        isSearchable
                                        value={values[item.accessor]}
                                        name={item.accessor}
                                        onChange={handleChange}
                                    >
                                        <option value=''> {filterContact ? filterContact.find((data) => (item.Header === data || item.accessor === data) && data) ? filterContact.find((data) => (item.Header === data || item.accessor === data) && data) : 'Select Field In File' : 'Select Field In File'}</option>
                                        {
                                            importedFileFields?.map(field => (
                                                <option value={field} key={field}>{field}</option>
                                            ))
                                        }
                                    </Select>
                                </GridItem>
                            </>
                        ))
                    }
                </Grid>

                <Flex Flex justifyContent={'end'} mt='5' >
                    <Button size="sm" onClick={() => handleSubmit()} variant="brand">Save</Button>
                </Flex>
            </Card>
        </>
    )
}

export default QuotesImport

================
File: Client/src/views/admin/quotes/AddEdit.js
================
import { AddIcon, CloseIcon } from '@chakra-ui/icons';
import { Box, Button, Checkbox, Drawer, DrawerBody, DrawerContent, DrawerFooter, DrawerHeader, DrawerOverlay, Flex, FormControl, FormLabel, Grid, GridItem, Heading, IconButton, Input, Select, Table, Tbody, Td, Text, Textarea, Th, Thead, Tr } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import dayjs from 'dayjs';
import { useFormik } from 'formik';
import { useState, useEffect, useCallback } from 'react';
import { LiaMousePointerSolid } from 'react-icons/lia';
import { postApi, getApi, putApi } from 'services/api';
import { generateValidationSchema } from 'utils';
import CustomForm from 'utils/customForm';
import * as yup from 'yup'
import { quoteSchema } from '../../../schema/quoteSchema';
import UserModel from 'components/commonTableModel/UserModel';
import OpprtunityModel from 'components/commonTableModel/OpprtunityModel';
import { toast } from 'react-toastify';
import { useDispatch, useSelector } from 'react-redux';
import { fetchOpportunityData } from '../../../redux/slices/opportunitySlice';
import AccountModel from 'components/commonTableModel/AccountModel';
import { fetchAccountData } from '../../../redux/slices/accountSlice';
import ContactModel from 'components/commonTableModel/ContactModel';
import { HasAccess } from '../../../redux/accessUtils';

const AddEdit = (props) => {
    const { isOpen, size, onClose, type, setAction, selectedId, contactId } = props;
    const [isLoding, setIsLoding] = useState(false)
    const [userModel, setUserModel] = useState(false)
    const [opprtunityModel, setOpprtunityModel] = useState(false)
    const [userData, setUserData] = useState([]);
    const [accountModel, setAccountModel] = useState(false)
    const [contactModel, setContactModel] = useState(false)
    const [quotesDetails, setQuotesDetails] = useState({});
    const dispatch = useDispatch();
    const user = JSON.parse(localStorage.getItem("user"))
    const [accountAccess, contactAccess, opportunityAccess] = HasAccess(['Account', 'Contacts', 'Opportunities'])

    const opportunityList = useSelector((state) => state?.opportunityData?.data?.data)
    const accountList = useSelector((state) => state?.accountData?.data?.data)
    const contactList = useSelector((state) => state?.contactData?.data)

    const initialValues = {
        title: type === "edit" ? quotesDetails?.title : "",
        oppotunity: type === "edit" ? quotesDetails?.oppotunity : null,
        quoteStage: type === "edit" ? quotesDetails?.quoteStage : "Draft",
        invoiceStatus: type === "edit" ? quotesDetails?.invoiceStatus : "Not Invoiced",
        validUntil: type === "edit" ? quotesDetails?.validUntil : "",
        assignedTo: type === "edit" ? quotesDetails?.assignedTo : null,
        paymentTerms: type === "edit" ? quotesDetails?.paymentTerms : "",
        approvalStatus: type === "edit" ? quotesDetails?.approvalStatus : "",
        nonPrimaryEmail: type === "edit" ? quotesDetails?.nonPrimaryEmail : "",
        approvalIssues: type === "edit" ? quotesDetails?.approvalIssues : "",
        terms: type === "edit" ? quotesDetails?.terms : "",
        description: type === "edit" ? quotesDetails?.description : "",
        account: type === "edit" ? quotesDetails?.account : null,
        contact: type === "edit" ? quotesDetails?.contact : contactId ? contactId : null,
        billingStreet: type === "edit" ? quotesDetails?.billingStreet : "",
        shippingStreet: type === "edit" ? quotesDetails?.shippingStreet : "",
        billingCity: type === "edit" ? quotesDetails?.billingCity : "",
        shippingCity: type === "edit" ? quotesDetails?.shippingCity : "",
        billingState: type === "edit" ? quotesDetails?.billingState : "",
        shippingState: type === "edit" ? quotesDetails?.shippingState : "",
        billingPostalCode: type === "edit" ? quotesDetails?.billingPostalCode : "",
        shippingPostalCode: type === "edit" ? quotesDetails?.shippingPostalCode : "",
        billingCountry: type === "edit" ? quotesDetails?.billingCountry : "",
        shippingCountry: type === "edit" ? quotesDetails?.shippingCountry : "",
        isCheck: type === "edit" ? quotesDetails?.isCheck : false,
        currency: type === "edit" ? quotesDetails?.currency : "$",
        total: type === "edit" ? quotesDetails?.total : "",
        discount: type === "edit" ? quotesDetails?.discount : "",
        subtotal: type === "edit" ? quotesDetails?.subtotal : "",
        shipping: type === "edit" ? quotesDetails?.shipping : "",
        shippingTax: type === "edit" ? quotesDetails?.shippingTax : "",
        ptax: type === "edit" ? quotesDetails?.ptax : "",
        tax: type === "edit" ? quotesDetails?.tax : "",
        grandTotal: type === "edit" ? quotesDetails?.grandTotal : "",
        discountType: type === "edit" ? quotesDetails?.discountType : "none",
        items: type === "edit" ? quotesDetails?.items : [],
        createBy: JSON.parse(localStorage.getItem('user'))._id,
        modifiedBy: JSON.parse(localStorage.getItem('user'))._id
    };


    const addData = async (values) => {
        try {
            setIsLoding(true)
            let response = await postApi('api/quotes/add', values)
            if (response.status === 200) {
                onClose();
                toast.success(`Quotes Save successfully`)
                formik.resetForm();
                setAction((pre) => !pre)
            }
        } catch (e) {
            console.log(e);
            toast.error(`server error`)
        }
        finally {
            setIsLoding(false)
        }
    };
    const editData = async (values) => {
        try {
            setIsLoding(true)
            let response = await putApi(`api/quotes/edit/${selectedId}`, values)
            if (response.status === 200) {
                onClose();
                toast.success(`Quotes Update successfully`)
                formik.resetForm();
                setAction((pre) => !pre)
            }
        } catch (e) {
            console.log(e);
            toast.error(`server error`)
        }
        finally {
            setIsLoding(false)
        }
    };

    const handleCancel = () => {
        formik.resetForm();
        onClose()
    }

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: quoteSchema,
        enableReinitialize: true,
        onSubmit: (values, { resetForm }) => {
            if (type === "add") {
                addData(values)
            } else {
                const payload = { ...values, modifiedDate: new Date() }
                editData(payload)
            }
        },
    });

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, } = formik

    const handleCheck = (e) => {
        setFieldValue("isCheck", e.target.checked)
        if (e.target.checked) {
            setFieldValue("shippingStreet", values?.billingStreet)
            setFieldValue("shippingCity", values?.billingCity)
            setFieldValue("shippingState", values?.billingState)
            setFieldValue("shippingPostalCode", values?.billingPostalCode)
            setFieldValue("shippingCountry", values?.billingCountry)
        } else {
            setFieldValue("shippingStreet", "")
            setFieldValue("shippingCity", "")
            setFieldValue("shippingState", "")
            setFieldValue("shippingPostalCode", "")
            setFieldValue("shippingCountry", "")
        }
    }

    const fetchData = async () => {
        setIsLoding(true)
        let result = await getApi('api/user/');
        setUserData(result?.data?.user);
        setIsLoding(false)
    }


    const fetchQuotesDetails = async () => {
        if (type === "edit") {
            try {
                setIsLoding(true)
                let result = await getApi('api/quotes/view/', selectedId)
                if (result?.status === 200) {
                    setQuotesDetails(result?.data?.result)
                }

            }
            catch (e) {
                console.log(e);
            }
            finally {
                setIsLoding(false)
            }
        }
    }

    const calculateAmounts = (items) => {
        const totalAmount = items.reduce((sum, item) => sum + item.amount, 0);
        const totalDiscount = items.reduce((sum, item) => sum + item.totalDiscount, 0);
        const netAmount = Number(totalAmount) - Number(totalDiscount);
        return { totalAmount, netAmount, discount: totalDiscount };
    };

    const handleAddItem = () => {
        setFieldValue("items", [
            ...values.items,
            { id: values.items.length + 1, productName: "", qty: 0, rate: 0, discount: 0, discountType: "none", totalDiscount: 0, amount: 0 }
        ]);
    };

    const handleRemoveItem = (index) => {
        const newItems = values.items.filter((_, idx) => idx !== index);
        setFieldValue("items", newItems);
        const { totalAmount, netAmount, discount } = calculateAmounts(newItems);
        setFieldValue("total", totalAmount);
        setFieldValue("grandTotal", netAmount);
        setFieldValue("discount", discount);
    };

    const handleChangeCalculation = (index, field, value) => {
        const newItems = values.items.map((item, idx) => {
            if (idx === index) {
                const updatedItem = { ...item, [field]: value };
                if (['qty', 'rate', 'discount', 'discountType'].includes(field)) {
                    const discountValue = updatedItem.discountType === 'percent'
                        ? (updatedItem.rate * updatedItem.qty * updatedItem.discount / 100)
                        : updatedItem.discountType === 'none'
                            ? 0
                            : updatedItem.discount;
                    updatedItem.amount = updatedItem.rate * updatedItem.qty - discountValue;
                    updatedItem.totalDiscount = discountValue;
                }
                return updatedItem;
            }
            return item;
        });

        setFieldValue("items", newItems);
        const { totalAmount, netAmount, discount } = calculateAmounts(newItems);
        setFieldValue("discount", discount);
        setFieldValue("total", totalAmount);
        setFieldValue("subtotal", totalAmount);
        setFieldValue("grandTotal", netAmount);
    };

    const calculateValues = useCallback(() => {
        const subtotal = values.subtotal;
        const shipping = Number(values.shipping);
        const ptax = Number(values.ptax);
        const shippingTax = Number(subtotal) + Number(shipping);
        const tax = shippingTax * ptax / 100;
        const grandTotal = Number(shippingTax) + Number(tax);

        setFieldValue('shippingTax', shippingTax?.toFixed(2));
        setFieldValue('tax', tax?.toFixed(2));
        setFieldValue('grandTotal', grandTotal?.toFixed(2));
    }, [values.subtotal, values.shipping, values.ptax]);

    useEffect(() => {
        calculateValues();
    }, [calculateValues]);

    useEffect(() => {
        if (type === "edit") fetchQuotesDetails();
        if (user.role === 'superAdmin') fetchData();
    }, [type, selectedId])

    useEffect(() => {
        if (opportunityList?.length === 0 || opportunityList === undefined) { dispatch(fetchOpportunityData()) }
        if (accountList?.length === 0 || accountList === undefined) { dispatch(fetchAccountData()) }
    }, [])

    return (
        <div>
            {userModel && <UserModel onClose={() => setUserModel(false)} isOpen={userModel} fieldName={"assignedTo"} setFieldValue={setFieldValue} data={userData} isLoding={isLoding} setIsLoding={setIsLoding} />}
            {opprtunityModel && <OpprtunityModel onClose={() => setOpprtunityModel(false)} isOpen={opprtunityModel} fieldName={"oppotunity"} setFieldValue={setFieldValue} data={opportunityList} isLoding={isLoding} setIsLoding={setIsLoding} type="quotes" billingState="billingState" billingCity="billingCity" billingPostalCode="billingPostalCode" billingCountry="billingCountry" billingStreet="billingStreet" />}
            {accountModel && <AccountModel onClose={() => setAccountModel(false)} isOpen={accountModel} fieldName={"account"} setFieldValue={setFieldValue} data={accountList} />}
            {contactModel && <ContactModel isOpen={contactModel} data={contactList} onClose={setContactModel} values={values} fieldName='contact' setFieldValue={setFieldValue} />}

            <Drawer isOpen={isOpen} size={size}>
                <DrawerOverlay />
                <DrawerContent>
                    <DrawerHeader alignItems={"center"} justifyContent='space-between' display='flex'  >
                        {type === "add" ? "Add" : "Edit"} Quotes
                        <IconButton onClick={() => handleCancel()} icon={<CloseIcon />} />
                    </DrawerHeader>
                    <DrawerBody>
                        <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                            <GridItem colSpan={{ base: 12 }}>
                                <Heading as="h1" size="md" mt='10px'>
                                    Overview
                                </Heading>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Title<Text color={"red"}>*</Text>
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.title}
                                    name="title"
                                    onChange={handleChange}
                                    placeholder='Title'
                                    fontWeight='500'
                                    borderColor={errors.title && touched.title ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.title && touched.title && errors.title}</Text>
                            </GridItem>
                            {
                                (user.role === 'superAdmin' || opportunityAccess?.view) &&
                                <GridItem colSpan={{ base: 12, md: 6 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                        Opportunity
                                    </FormLabel>
                                    <Flex justifyContent={'space-between'}>
                                        <Select
                                            value={values.oppotunity}
                                            name="oppotunity"
                                            onChange={handleChange}
                                            mb={errors.oppotunity && touched.oppotunity ? undefined : '10px'}
                                            fontWeight='500'
                                            placeholder={'Opportunity'}
                                            borderColor={errors.oppotunity && touched.oppotunity ? "red.300" : null}
                                        >
                                            {opportunityList?.length > 0 && opportunityList?.map((item) => {
                                                return <option value={item._id} key={item._id}>{`${item?.opportunityName}`}</option>
                                            })}
                                        </Select>
                                        <IconButton onClick={() => setOpprtunityModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />
                                    </Flex>
                                    <Text mb='10px' fontSize='sm' color={'red'}> {errors.oppotunity && touched.oppotunity && errors.oppotunity}</Text>
                                </GridItem>
                            }
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Quote Stage<Text color={"red"}>*</Text>
                                </FormLabel>
                                <Select
                                    value={values.quoteStage}
                                    name="quoteStage"
                                    onChange={handleChange}
                                    mb={errors.quoteStage && touched.quoteStage ? undefined : '10px'}
                                    fontWeight='500'
                                    placeholder={'Quote Stage'}
                                    borderColor={errors.quoteStage && touched.quoteStage ? "red.300" : null}
                                >
                                    <option value="Draft" >Draft</option>
                                    <option value="Negotiation" >Negotiation</option>
                                    <option value="Delivered" >Delivered</option>
                                    <option value="On Hold" >On Hold</option>
                                    <option value="Confirmed" >Confirmed</option>
                                    <option value="Closed Accepted" >Closed Accepted</option>
                                    <option value="Closed Lost" >Closed Lost</option>
                                    <option value="Closed Dead" >Closed Dead</option>
                                </Select>
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.quoteStage && touched.quoteStage && errors.quoteStage}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Invoice Status
                                </FormLabel>
                                <Select
                                    value={values.invoiceStatus}
                                    name="invoiceStatus"
                                    onChange={handleChange}
                                    mb={errors.invoiceStatus && touched.invoiceStatus ? undefined : '10px'}
                                    fontWeight='500'
                                    placeholder={'Invoice Status'}
                                    borderColor={errors.invoiceStatus && touched.invoiceStatus ? "red.300" : null}
                                >
                                    <option value="Not Invoiced">Not Invoiced</option>
                                    <option value="Invoiced">Invoiced</option>
                                </Select>
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.invoiceStatus && touched.invoiceStatus && errors.invoiceStatus}</Text>
                            </GridItem>

                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Valid Until<Text color={"red"}>*</Text>
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={dayjs(values.validUntil).format("YYYY-MM-DD")}
                                    name="validUntil"
                                    type="date"
                                    onChange={handleChange}
                                    placeholder='Valid Until'
                                    fontWeight='500'
                                    borderColor={errors.validUntil && touched.validUntil ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.validUntil && touched.validUntil && errors.validUntil}</Text>
                            </GridItem>
                            {
                                user.role === 'superAdmin' &&
                                <GridItem colSpan={{ base: 12, md: 6 }} >
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                        Assigned To
                                    </FormLabel>
                                    <Flex justifyContent={'space-between'}>
                                        <Select
                                            value={values.assignedTo}
                                            name="assignedTo"
                                            onChange={handleChange}
                                            mb={errors.assignedTo && touched.assignedTo ? undefined : '10px'}
                                            fontWeight='500'
                                            placeholder={'Assigned To'}
                                            borderColor={errors.assignedTo && touched.assignedTo ? "red.300" : null}
                                        >
                                            {userData?.map((item) => {
                                                return <option value={item._id} key={item._id}>{`${item?.firstName} ${item?.lastName}`}</option>
                                            })}
                                        </Select>
                                        <IconButton onClick={() => setUserModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />
                                    </Flex>
                                </GridItem>
                            }
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Payment Terms
                                </FormLabel>
                                <Select
                                    value={values.paymentTerms}
                                    name="paymentTerms"
                                    onChange={handleChange}
                                    mb={errors.paymentTerms && touched.paymentTerms ? undefined : '10px'}
                                    fontWeight='500'
                                    placeholder={'Payment Terms'}
                                    borderColor={errors.paymentTerms && touched.paymentTerms ? "red.300" : null}
                                >
                                    <option value="Nett 15" >Nett 15</option>
                                    <option value="Nett 30" >Nett 30</option>
                                </Select>
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.paymentTerms && touched.paymentTerms && errors.paymentTerms}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Approval Status
                                </FormLabel>
                                <Select
                                    value={values.approvalStatus}
                                    name="approvalStatus"
                                    onChange={handleChange}
                                    mb={errors.approvalStatus && touched.approvalStatus ? undefined : '10px'}
                                    fontWeight='500'
                                    placeholder={'Approval Status'}
                                    borderColor={errors.approvalStatus && touched.approvalStatus ? "red.300" : null}
                                >
                                    <option value="Approved">Approved</option>
                                </Select>
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.approvalStatus && touched.approvalStatus && errors.approvalStatus}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Approval Issues
                                </FormLabel>
                                <Textarea
                                    fontSize='sm'
                                    value={values.approvalIssues}
                                    name="approvalIssues"
                                    resize={"none"}
                                    onChange={handleChange}
                                    placeholder='Approval Issues'
                                    fontWeight='500'
                                    borderColor={errors.approvalIssues && touched.approvalIssues ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.approvalIssues && touched.approvalIssues && errors.approvalIssues}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Terms
                                </FormLabel>
                                <Textarea
                                    fontSize='sm'
                                    value={values.terms}
                                    name="terms"
                                    resize={"none"}
                                    onChange={handleChange}
                                    placeholder='Terms'
                                    fontWeight='500'
                                    borderColor={errors.terms && touched.terms ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.terms && touched.terms && errors.terms}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Description
                                </FormLabel>
                                <Textarea
                                    fontSize='sm'
                                    value={values.description}
                                    name="description"
                                    resize={"none"}
                                    onChange={handleChange}
                                    placeholder='Description'
                                    fontWeight='500'
                                    borderColor={errors.description && touched.description ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.description && touched.description && errors.description}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12 }}>
                                <Heading as="h1" size="md" mt='10px'>
                                    Address Information
                                </Heading>
                            </GridItem>
                            {
                                (user.role === 'superAdmin' || accountAccess?.view) &&

                                <GridItem colSpan={{ base: 12, md: 6 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                        Account
                                    </FormLabel>
                                    <Flex justifyContent={'space-between'}>
                                        <Select
                                            value={values.account}
                                            name="account"
                                            onChange={handleChange}
                                            mb={errors.account && touched.account ? undefined : '10px'}
                                            fontWeight='500'
                                            placeholder={'Account'}
                                            borderColor={errors.account && touched.account ? "red.300" : null}
                                        >
                                            {accountList?.length > 0 && accountList?.map((item) => {
                                                return <option value={item._id} key={item._id}>{`${item?.name}`}</option>
                                            })}
                                        </Select>
                                        <IconButton onClick={() => setAccountModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />
                                    </Flex>
                                    <Text mb='10px' fontSize='sm' color={'red'}> {errors.account && touched.account && errors.account}</Text>
                                </GridItem>
                            }
                            {
                                (user.role === 'superAdmin' || contactAccess?.view) &&
                                <GridItem colSpan={{ base: 12, md: 6 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                        Contact
                                    </FormLabel>
                                    <Flex justifyContent={'space-between'}>
                                        <Select
                                            value={values.contact}
                                            name="contact"
                                            onChange={handleChange}
                                            mb={errors.contact && touched.contact ? undefined : '10px'}
                                            fontWeight='500'
                                            placeholder={'Contact'}
                                            borderColor={errors.contact && touched.contact ? "red.300" : null}
                                        >
                                            {contactList?.length > 0 && contactList?.map((item) => {
                                                return <option value={item._id} key={item._id}>{`${item.firstName} ${item.lastName}`}</option>
                                            })}
                                        </Select>
                                        <IconButton onClick={() => setContactModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />
                                    </Flex>
                                    <Text mb='10px' fontSize='sm' color={'red'}> {errors.contact && touched.contact && errors.contact}</Text>
                                </GridItem>
                            }

                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <Heading as="h1" size="md" mt='10px'>
                                    Billing Address
                                </Heading>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <Heading as="h1" size="md" mt='10px'>
                                    Shipping Address
                                </Heading>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <Checkbox isChecked={values?.isCheck} onChange={(e) => handleCheck(e)} visibility={"hidden"}>
                                    Copy address from left
                                </Checkbox>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px' mt={3}>
                                    Billing Street
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.billingStreet}
                                    name="billingStreet"
                                    onChange={handleChange}
                                    placeholder='Billing Street'
                                    fontWeight='500'
                                    borderColor={errors.billingStreet && touched.billingStreet ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.billingStreet && touched.billingStreet && errors.billingStreet}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <Checkbox isChecked={values?.isCheck} onChange={(e) => handleCheck(e)}>
                                    Copy address from left
                                </Checkbox>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px' mt={3}>
                                    Shipping Street
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.shippingStreet}
                                    name="shippingStreet"
                                    disabled={values?.isCheck}
                                    onChange={handleChange}
                                    placeholder='Shipping Street'
                                    fontWeight='500'
                                    borderColor={errors.shippingStreet && touched.shippingStreet ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.shippingStreet && touched.shippingStreet && errors.shippingStreet}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Billing City
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.billingCity}
                                    name="billingCity"
                                    onChange={handleChange}
                                    placeholder='Billing City'
                                    fontWeight='500'
                                    borderColor={errors.billingCity && touched.billingCity ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.billingCity && touched.billingCity && errors.billingCity}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Shipping City
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.shippingCity}
                                    name="shippingCity"
                                    disabled={values?.isCheck}
                                    onChange={handleChange}
                                    placeholder='Shipping City'
                                    fontWeight='500'
                                    borderColor={errors.shippingCity && touched.shippingCity ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.shippingCity && touched.shippingCity && errors.shippingCity}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Billing State
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.billingState}
                                    name="billingState"
                                    onChange={handleChange}
                                    placeholder='Billing State'
                                    fontWeight='500'
                                    borderColor={errors.billingState && touched.billingState ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.billingState && touched.billingState && errors.billingState}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Shipping State
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.shippingState}
                                    disabled={values?.isCheck}
                                    name="shippingState"
                                    onChange={handleChange}
                                    placeholder='Shipping State'
                                    fontWeight='500'
                                    borderColor={errors.shippingState && touched.shippingState ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.shippingState && touched.shippingState && errors.shippingState}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Billing Postal Code
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.billingPostalCode}
                                    name="billingPostalCode"
                                    onChange={handleChange}
                                    type='number'
                                    placeholder='Billing Postal Code'
                                    fontWeight='500'
                                    borderColor={errors.billingPostalCode && touched.billingPostalCode ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.billingPostalCode && touched.billingPostalCode && errors.billingPostalCode}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Shipping Postal Code
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.shippingPostalCode}
                                    disabled={values?.isCheck}
                                    name="shippingPostalCode"
                                    type='number'
                                    onChange={handleChange}
                                    placeholder='Shipping Postal Code'
                                    fontWeight='500'
                                    borderColor={errors.shippingPostalCode && touched.shippingPostalCode ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.shippingPostalCode && touched.shippingPostalCode && errors.shippingPostalCode}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Billing Country
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.billingCountry}
                                    name="billingCountry"
                                    onChange={handleChange}
                                    placeholder='Billing Country'
                                    fontWeight='500'
                                    borderColor={errors.billingCountry && touched.billingCountry ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.billingCountry && touched.billingCountry && errors.billingCountry}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Shipping Country
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.shippingCountry}
                                    name="shippingCountry"
                                    onChange={handleChange}
                                    disabled={values?.isCheck}
                                    placeholder='Shipping Country'
                                    fontWeight='500'
                                    borderColor={errors.shippingCountry && touched.shippingCountry ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.shippingCountry && touched.shippingCountry && errors.shippingCountry}</Text>
                            </GridItem>

                            <GridItem colSpan={{ base: 12 }}>
                                <Heading as="h1" size="md" mt='10px'>
                                    Line Items
                                </Heading>
                            </GridItem>
                            <GridItem colSpan={{ base: 12 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Currency
                                </FormLabel>
                                <Select
                                    value={values.currency}
                                    name="currency"
                                    onBlur={handleBlur}
                                    onChange={handleChange}
                                    mb={errors.currency && touched.currency ? undefined : '10px'}
                                    fontWeight='500'
                                    placeholder={'Select Currency'}
                                    borderColor={errors.currency && touched.currency ? "red.300" : null}
                                >
                                    <option value="$" selected>USD</option>
                                </Select>
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.currency && touched.currency && errors.currency}</Text>
                            </GridItem>

                            <GridItem colSpan={{ base: 12 }}>
                                <Box>
                                    <Table variant="simple" size="sm" mt={5} backgroundColor="#f9f9f9">
                                        <Thead>
                                            <Tr>
                                                <Th></Th>
                                                <Th>#</Th>
                                                <Th>Item</Th>
                                                <Th>Qty</Th>
                                                <Th>Rate</Th>
                                                <Th>Discount</Th>
                                                <Th>Amount</Th>
                                            </Tr>
                                        </Thead>
                                        <Tbody>
                                            {values?.items?.length > 0 && values?.items?.map((item, index) => (
                                                <Tr key={item.id}>
                                                    <Td className="text-center">
                                                        <IconButton
                                                            icon={<CloseIcon />}
                                                            onClick={() => handleRemoveItem(index)}
                                                            colorScheme="red"
                                                            variant="outline"
                                                            size="sm"
                                                            style={{ fontSize: "10px" }}
                                                        />
                                                    </Td>
                                                    <Td>{index + 1}</Td>
                                                    <Td>
                                                        <FormControl>
                                                            <Input
                                                                type="text"
                                                                value={item?.productName}
                                                                onChange={(e) => handleChangeCalculation(index, 'productName', e.target.value)}
                                                                size="sm"
                                                            />
                                                        </FormControl>
                                                    </Td>
                                                    <Td>
                                                        <FormControl>
                                                            <Input
                                                                type="number"
                                                                value={item?.qty}
                                                                onChange={(e) => handleChangeCalculation(index, 'qty', Number(e.target.value))}
                                                                size="sm"
                                                            />
                                                        </FormControl>
                                                    </Td>
                                                    <Td>
                                                        <FormControl>
                                                            <Input
                                                                type="number"
                                                                value={item?.rate}
                                                                onChange={(e) => handleChangeCalculation(index, 'rate', Number(e.target.value))}
                                                                size="sm"
                                                            />
                                                        </FormControl>
                                                    </Td>
                                                    <Td style={{ display: "flex" }}>
                                                        <FormControl>
                                                            <Input
                                                                type="number"
                                                                value={item?.discount}
                                                                onChange={(e) => handleChangeCalculation(index, 'discount', Number(e.target.value))}
                                                                size="sm"
                                                                disabled={item?.discountType === "none"}
                                                            />
                                                            <Select
                                                                value={item?.discountType}
                                                                onChange={(e) => { handleChangeCalculation(index, 'discountType', e.target.value); }}
                                                                size="sm"
                                                            >
                                                                <option value="none">none</option>
                                                                <option value="percent">%</option>
                                                                <option value="flatAmount">{values?.currency}</option>
                                                            </Select>
                                                        </FormControl>
                                                    </Td>
                                                    <Td>
                                                        <FormControl>
                                                            <Input
                                                                type="number"
                                                                value={item?.amount}
                                                                readOnly
                                                                size="sm"
                                                            />
                                                        </FormControl>
                                                    </Td>
                                                </Tr>
                                            ))}
                                            <Tr>
                                                <Td colSpan={4} display="flex" justifyContent={"end"}>
                                                    <IconButton
                                                        icon={<AddIcon />}
                                                        onClick={handleAddItem}
                                                        colorScheme="green"
                                                        variant="outline"
                                                        size="sm"
                                                        style={{ fontSize: "10px" }}
                                                    />
                                                </Td>
                                                <Td></Td>
                                                <Td></Td>
                                                <Td></Td>
                                            </Tr>
                                        </Tbody>
                                    </Table>
                                </Box>
                            </GridItem>
                            <GridItem colSpan={{ base: 12 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Total
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.total}
                                    name="total"
                                    onChange={handleChange}
                                    placeholder='Total'
                                    fontWeight='500'
                                    type='number'
                                    borderColor={errors.total && touched.total ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.total && touched.total && errors.total}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Total Discount
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.discount}
                                    name="discount"
                                    onBlur={handleBlur}
                                    type='number'
                                    onChange={handleChange}
                                    fontWeight='500'
                                    borderColor={errors.discount && touched.discount ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.discount && touched.discount && errors.discount}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Subtotal
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.subtotal}
                                    name="subtotal"
                                    type='number'
                                    onChange={handleChange}
                                    placeholder='Subtotal'
                                    fontWeight='500'
                                    borderColor={errors.subtotal && touched.subtotal ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.subtotal && touched.subtotal && errors.subtotal}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Shipping
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.shipping}
                                    name="shipping"
                                    type='number'
                                    onChange={handleChange}
                                    placeholder='Shipping'
                                    fontWeight='500'
                                    borderColor={errors.shipping && touched.shipping ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.shipping && touched.shipping && errors.shipping}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 10 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Shipping Tax
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.shippingTax}
                                    name="shippingTax"
                                    onChange={handleChange}
                                    placeholder='Shipping Tax'
                                    type='number'
                                    fontWeight='500'
                                    borderColor={errors.shippingTax && touched.shippingTax ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.shippingTax && touched.shippingTax && errors.shippingTax}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 2 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px' visibility={"hidden"}>
                                    -
                                </FormLabel>
                                <Select
                                    value={values.ptax}
                                    name="ptax"
                                    onChange={handleChange}
                                    mb={errors.ptax && touched.ptax ? undefined : '10px'}
                                    fontWeight='500'
                                    borderColor={errors.ptax && touched.ptax ? "red.300" : null}
                                >
                                    <option value="0">0%</option>
                                    <option value="10">10%</option>
                                    <option value="18">18%</option>
                                </Select>
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.ptax && touched.ptax && errors.ptax}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px' >
                                    Tax
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.tax}
                                    name="tax"
                                    onChange={handleChange}
                                    fontWeight='500'
                                    type="number"
                                    placeholder='Tax'
                                    borderColor={errors.tax && touched.tax ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.tax && touched.tax && errors.tax}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px' >
                                    Grand Total
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    value={values.grandTotal}
                                    name="grandTotal"
                                    onChange={handleChange}
                                    fontWeight='500'
                                    type="number"
                                    placeholder='Grand Total'
                                    borderColor={errors.grandTotal && touched.grandTotal ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.grandTotal && touched.grandTotal && errors.grandTotal}</Text>
                            </GridItem>
                        </Grid>
                    </DrawerBody>
                    <DrawerFooter>
                        <Button sx={{ textTransform: "capitalize" }} size="sm" disabled={isLoding ? true : false} variant="brand" type="submit" onClick={handleSubmit}                        >
                            {isLoding ? <Spinner /> : 'Save'}
                        </Button>
                        <Button
                            variant="outline"
                            colorScheme='red' size="sm"
                            sx={{
                                marginLeft: 2,
                                textTransform: "capitalize",
                            }}
                            onClick={handleCancel}
                        >
                            Close
                        </Button>
                    </DrawerFooter>
                </DrawerContent>
            </Drawer>
        </div>
    )
}

export default AddEdit

================
File: Client/src/views/admin/quotes/index.js
================
import { useEffect, useState } from 'react';
import { Link, useNavigate } from "react-router-dom";
import { DeleteIcon, EditIcon, ViewIcon } from '@chakra-ui/icons';
import { Button, Menu, MenuButton, MenuItem, MenuList, Text, useDisclosure } from '@chakra-ui/react';
import { getApi, deleteManyApi } from 'services/api';
import { HasAccess } from '../../../redux/accessUtils';
import CommonCheckTable from '../../../components/reactTable/checktable';
import { SearchIcon } from "@chakra-ui/icons";
import { CiMenuKebab } from 'react-icons/ci';
import moment from 'moment';
import { MdLeaderboard } from 'react-icons/md';
import { IoIosContact } from 'react-icons/io';
import AddEdit from './AddEdit';
import { useDispatch } from 'react-redux';
import { fetchEmailsData } from '../../../redux/slices/emailsSlice';
import { toast } from 'react-toastify';
import QuotesAdvanceSearch from './components/QuotesAdvanceSearch';
import CommonDeleteModel from '../../../components/commonDeleteModel'
import ImportModal from './components/ImportModel';
import { fetchQuotesData } from '../../../redux/slices/quotesSlice';
import { TbFileInvoice } from 'react-icons/tb';
import { postApi } from 'services/api';

const Index = (props) => {
    const [action, setAction] = useState(false);
    const { isOpen, onOpen, onClose } = useDisclosure();
    const [selectedValues, setSelectedValues] = useState([]);
    const [advanceSearch, setAdvanceSearch] = useState(false);
    const [getTagValuesOutSide, setGetTagValuesOutside] = useState([]);
    const [searchboxOutside, setSearchboxOutside] = useState('');
    const user = JSON.parse(localStorage.getItem("user"));
    const navigate = useNavigate();
    const dispatch = useDispatch();
    const [isLoding, setIsLoding] = useState(false);
    const [data, setData] = useState([]);
    const [displaySearchData, setDisplaySearchData] = useState(false);
    const [searchedData, setSearchedData] = useState([]);
    const [selectedId, setSelectedId] = useState();
    const [deleteModel, setDelete] = useState(false);
    const [edit, setEdit] = useState(false);
    const [type, setType] = useState("")
    const [isImport, setIsImport] = useState(false);

    const [permission, accountAccess, contactAccess] = HasAccess(["Quotes", "Account", "Contacts"]);

    const actionHeader = {
        Header: "Action",
        accessor: "action",
        isSortable: false,
        center: true,
        cell: ({ row, i }) => (
            <Text fontSize="md" fontWeight="900" textAlign={"center"}>
                <Menu isLazy>
                    <MenuButton>
                        <CiMenuKebab />
                    </MenuButton>
                    <MenuList
                        minW={"fit-content"}
                        transform={"translate(1520px, 173px);"}
                    >
                        {permission?.update && (
                            <MenuItem
                                py={2.5}
                                icon={<EditIcon fontSize={15} mb={1} />}
                                onClick={() => {
                                    setType("edit");
                                    onOpen();
                                    setSelectedId(row?.values?._id);
                                }}
                            >
                                Edit
                            </MenuItem>
                        )}
                        {permission?.view && (
                            <MenuItem
                                py={2.5}
                                color={"green"}
                                icon={<ViewIcon mb={1} fontSize={15} />}
                                onClick={() => {
                                    navigate(`/quotesView/${row?.values?._id}`);
                                }}
                            >
                                View
                            </MenuItem>
                        )}
                        <MenuItem
                            py={2.5}
                            color={"black"}
                            icon={<TbFileInvoice fontSize={15} mb={1} />}
                            onClick={() => {
                                convertToInvoice(row?.values?._id);
                            }}
                        >
                            Convert To Invoice
                        </MenuItem>
                        {permission?.delete && (
                            <MenuItem
                                py={2.5}
                                color={"red"}
                                icon={<DeleteIcon fontSize={15} mb={1} />}
                                onClick={() => {
                                    setDelete(true);
                                    setSelectedValues([row?.values?._id]);
                                }}
                            >
                                Delete
                            </MenuItem>
                        )}
                    </MenuList>
                </Menu>
            </Text>
        ),
    };
    const tableColumns = [
        { Header: "#", accessor: "_id", isSortable: false, width: 10 },
        { Header: "Quote Number", accessor: "quoteNumber", isSortable: false, width: 10 },
        {
            Header: 'Title', accessor: 'title', cell: (cell) => (
                <div className="selectOpt">
                    <Text
                        onClick={() => handleViewOpen(cell?.row?.original._id)}
                        me="10px"
                        sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' }, cursor: 'pointer' }}
                        color='brand.600'
                        fontSize="sm"
                        fontWeight="700"
                    >
                        {cell?.value}
                    </Text>
                </div>
            )
        },
        { Header: 'Quote Stage', accessor: 'quoteStage' },
        {
            Header: 'Contact',
            accessor: 'contact',
            cell: (cell) => (
                (user.role === 'superAdmin' || contactAccess?.view) ?
                    <div className="selectOpt">
                        <Text
                            onClick={() => navigate(cell?.row?.original.contact !== null && `/contactView/${cell?.row?.original.contact}`)}
                            me="10px"
                            sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' }, cursor: 'pointer' }}
                            color='brand.600'
                            fontSize="sm"
                            fontWeight="700"
                        >
                            {cell?.row?.original?.contactName ? cell?.row?.original?.contactName : "-"}
                        </Text>
                    </div>
                    :
                    <Text
                    >
                        {cell?.row?.original?.contactName ? cell?.row?.original?.contactName : "-"}
                    </Text>
            )
        },
        {
            Header: 'Account',
            accessor: 'account',
            cell: (cell) => (
                (user.role === 'superAdmin' || accountAccess?.view) ?
                    <div className="selectOpt">
                        <Text
                            onClick={() => navigate(cell?.row?.original.account !== null && `/accountView/${cell?.row?.original.account}`)}
                            me="10px"
                            sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' }, cursor: 'pointer' }}
                            color='brand.600'
                            fontSize="sm"
                            fontWeight="700"
                        >
                            {cell?.row?.original?.accountName ? cell?.row?.original?.accountName : "-"}
                        </Text>
                    </div>
                    :
                    <Text
                    >
                        {cell?.row?.original?.accountName ? cell?.row?.original?.accountName : "-"}
                    </Text>
            )
        },
        {
            Header: "Grand Total",
            accessor: "grandTotal",
            cell: (cell) => (
                <div className="selectOpt">
                    <Text
                    >
                        {cell?.row?.original?.grandTotal ? `${cell?.row?.original?.currency} ${cell?.row?.original?.grandTotal}` : '-'}
                    </Text>
                </div>
            )
        },
        { Header: "valid Until", accessor: "validUntil" },
        ...(permission?.update || permission?.view || permission?.delete ? [actionHeader] : [])

    ];
    const handleViewOpen = (id) => {
        navigate(`/quotesView/${id}`)
    }
    const customFields = [
        {
            "name": "quoteNumber",
            "label": "Quote Number",
            "type": "number",
            "fixed": false,
            "isDefault": false,
            "delete": false,
            "belongsTo": null,
            "backendType": "Mixed",
            "isTableField": false,
            "isView": false,
            "options": [
                {
                    "name": "",
                    "value": "",
                    "_id": "669508bc20a9be3594c8652f"
                },
                {
                    "name": "",
                    "value": "",
                    "_id": "669508bc20a9be3594c86530"
                }
            ],
            "validation": [
                {
                    "require": true,
                    "message": "Quote Number is required",
                    "_id": "669508bc20a9be3594c86531"
                },
                {
                    "min": false,
                    "value": "",
                    "message": "",
                    "_id": "669508bc20a9be3594c86532"
                },
                {
                    "max": false,
                    "value": "",
                    "message": "",
                    "_id": "669508bc20a9be3594c86533"
                },
                {
                    "value": "",
                    "message": "",
                    "match": false,
                    "_id": "669508bc20a9be3594c86534"
                },
                {
                    "message": "",
                    "formikType": "",
                    "_id": "669508bc20a9be3594c86535"
                }
            ],
            "_id": "669508bc20a9be3594c8652e"
        },
        {
            "name": "title",
            "label": "Title",
            "type": "text",
            "fixed": false,
            "isDefault": false,
            "delete": false,
            "belongsTo": null,
            "backendType": "Mixed",
            "isTableField": false,
            "isView": false,
            "options": [
                {
                    "name": "",
                    "value": "",
                    "_id": "669508f820a9be3594c8686c"
                },
                {
                    "name": "",
                    "value": "",
                    "_id": "669508f820a9be3594c8686d"
                }
            ],
            "validation": [
                {
                    "require": true,
                    "message": "Title is required ",
                    "_id": "669508f820a9be3594c8686e"
                },
                {
                    "min": false,
                    "value": "",
                    "message": "",
                    "_id": "669508f820a9be3594c8686f"
                },
                {
                    "max": false,
                    "value": "",
                    "message": "",
                    "_id": "669508f820a9be3594c86870"
                },
                {
                    "value": "",
                    "message": "",
                    "match": false,
                    "_id": "669508f820a9be3594c86871"
                },
                {
                    "message": "",
                    "formikType": "",
                    "_id": "669508f820a9be3594c86872"
                }
            ],
            "_id": "669508f820a9be3594c8686b"
        },
        {
            "name": "quoteStage",
            "label": "Quote Stage",
            "type": "select",
            "fixed": false,
            "isDefault": false,
            "delete": false,
            "belongsTo": null,
            "backendType": "Mixed",
            "isTableField": false,
            "isView": false,
            "options": [
                {
                    "name": "Draft",
                    "value": "Draft",
                    "_id": "6695095120a9be3594c86bc1"
                },
                {
                    "name": "Negotiation",
                    "value": "Negotiation",
                    "_id": "6695095120a9be3594c86bc2"
                },
                {
                    "name": "Delivered",
                    "value": "Delivered",
                    "_id": "6695095120a9be3594c86bc3"
                },
                {
                    "name": "On Hold",
                    "value": "On Hold",
                    "_id": "6695095120a9be3594c86bc4"
                },
                {
                    "name": "Confirmed",
                    "value": "Confirmed",
                    "_id": "6695095120a9be3594c86bc5"
                },
                {
                    "name": "Closed Accepted",
                    "value": "Closed Accepted",
                    "_id": "6695095120a9be3594c86bc6"
                },
                {
                    "name": "Closed Lost",
                    "value": "Closed Lost",
                    "_id": "6695095120a9be3594c86bc7"
                },
                {
                    "name": "Closed Dead",
                    "value": "Closed Dead",
                    "_id": "6695095120a9be3594c86bc8"
                }
            ],
            "validation": [
                {
                    "require": false,
                    "message": "",
                    "_id": "6695095120a9be3594c86bc9"
                },
                {
                    "min": false,
                    "value": "",
                    "message": "",
                    "_id": "6695095120a9be3594c86bca"
                },
                {
                    "max": false,
                    "value": "",
                    "message": "",
                    "_id": "6695095120a9be3594c86bcb"
                },
                {
                    "value": "",
                    "message": "",
                    "match": false,
                    "_id": "6695095120a9be3594c86bcc"
                },
                {
                    "message": "",
                    "formikType": "",
                    "_id": "6695095120a9be3594c86bcd"
                }
            ],
            "_id": "6695095120a9be3594c86bc0"
        },
        {
            "name": "contact",
            "label": "Contact",
            "type": "text",
            "fixed": false,
            "isDefault": false,
            "delete": false,
            "belongsTo": null,
            "backendType": "Mixed",
            "isTableField": false,
            "isView": false,
            "options": [
                {
                    "name": "",
                    "value": "",
                    "_id": "6695099520a9be3594c86f46"
                },
                {
                    "name": "",
                    "value": "",
                    "_id": "6695099520a9be3594c86f47"
                }
            ],
            "validation": [
                {
                    "require": false,
                    "message": "",
                    "_id": "6695099520a9be3594c86f48"
                },
                {
                    "min": false,
                    "value": "",
                    "message": "",
                    "_id": "6695099520a9be3594c86f49"
                },
                {
                    "max": false,
                    "value": "",
                    "message": "",
                    "_id": "6695099520a9be3594c86f4a"
                },
                {
                    "value": "",
                    "message": "",
                    "match": false,
                    "_id": "6695099520a9be3594c86f4b"
                },
                {
                    "message": "",
                    "formikType": "",
                    "_id": "6695099520a9be3594c86f4c"
                }
            ],
            "_id": "6695099520a9be3594c86f45"
        },
        {
            "name": "account",
            "label": "Account",
            "type": "text",
            "fixed": false,
            "isDefault": false,
            "delete": false,
            "belongsTo": null,
            "backendType": "Mixed",
            "isTableField": false,
            "isView": false,
            "options": [
                {
                    "name": "",
                    "value": "",
                    "_id": "669509a320a9be3594c872dd"
                },
                {
                    "name": "",
                    "value": "",
                    "_id": "669509a320a9be3594c872de"
                }
            ],
            "validation": [
                {
                    "require": false,
                    "message": "",
                    "_id": "669509a320a9be3594c872df"
                },
                {
                    "min": false,
                    "value": "",
                    "message": "",
                    "_id": "669509a320a9be3594c872e0"
                },
                {
                    "max": false,
                    "value": "",
                    "message": "",
                    "_id": "669509a320a9be3594c872e1"
                },
                {
                    "value": "",
                    "message": "",
                    "match": false,
                    "_id": "669509a320a9be3594c872e2"
                },
                {
                    "message": "",
                    "formikType": "",
                    "_id": "669509a320a9be3594c872e3"
                }
            ],
            "_id": "669509a320a9be3594c872dc"
        },
        {
            "name": "grandTotal",
            "label": "Grand Total",
            "type": "number",
            "fixed": false,
            "isDefault": false,
            "delete": false,
            "belongsTo": null,
            "backendType": "Mixed",
            "isTableField": false,
            "isView": false,
            "options": [
                {
                    "name": "",
                    "value": "",
                    "_id": "669509b120a9be3594c8768c"
                },
                {
                    "name": "",
                    "value": "",
                    "_id": "669509b120a9be3594c8768d"
                }
            ],
            "validation": [
                {
                    "require": false,
                    "message": "",
                    "_id": "669509b120a9be3594c8768e"
                },
                {
                    "min": false,
                    "value": "",
                    "message": "",
                    "_id": "669509b120a9be3594c8768f"
                },
                {
                    "max": false,
                    "value": "",
                    "message": "",
                    "_id": "669509b120a9be3594c87690"
                },
                {
                    "value": "",
                    "message": "",
                    "match": false,
                    "_id": "669509b120a9be3594c87691"
                },
                {
                    "message": "",
                    "formikType": "",
                    "_id": "669509b120a9be3594c87692"
                }
            ],
            "_id": "669509b120a9be3594c8768b"
        },
        {
            "name": "validUntil",
            "label": "Valid Until",
            "type": "date",
            "fixed": false,
            "isDefault": false,
            "delete": false,
            "belongsTo": null,
            "backendType": "Mixed",
            "isTableField": false,
            "isView": false,
            "options": [
                {
                    "name": "",
                    "value": "",
                    "_id": "669509d320a9be3594c87a53"
                },
                {
                    "name": "",
                    "value": "",
                    "_id": "669509d320a9be3594c87a54"
                }
            ],
            "validation": [
                {
                    "require": false,
                    "message": "",
                    "_id": "669509d320a9be3594c87a55"
                },
                {
                    "min": false,
                    "value": "",
                    "message": "",
                    "_id": "669509d320a9be3594c87a56"
                },
                {
                    "max": false,
                    "value": "",
                    "message": "",
                    "_id": "669509d320a9be3594c87a57"
                },
                {
                    "value": "",
                    "message": "",
                    "match": false,
                    "_id": "669509d320a9be3594c87a58"
                },
                {
                    "message": "",
                    "formikType": "date",
                    "_id": "669509d320a9be3594c87a59"
                }
            ],
            "_id": "669509d320a9be3594c87a52"
        }
    ]

    const handleOpenAdd = () => {
        onOpen();
        setType("add")
    }

    const convertToInvoice = async (id) => {
        try {
            setIsLoding(true);
            let response = await postApi("api/quotes/convertToInvoice", { _id: id });
            if (response.status === 200) {
                toast.success(`Invoice Convert successfully`)
                setAction((pre) => !pre);
            }
        } catch (error) {
            console.log(error);
            toast.error(`server error`)

        } finally {
            setIsLoding(false);
        }
    }

    const handleDelete = async (ids) => {
        try {
            setIsLoding(true);
            let response = await deleteManyApi("api/quotes/deleteMany", ids);
            if (response.status === 200) {
                toast.success(`Quotes Delete successfully`)
                setSelectedValues([]);
                setDelete(false);
                setAction((pre) => !pre);
            }
        } catch (error) {
            console.log(error);
            toast.error(`server error`)

        } finally {
            setIsLoding(false);
        }
    };

    const fetchData = async () => {
        setIsLoding(true)
        const result = await dispatch(fetchQuotesData())

        if (result.payload.status === 200) {
            setData(result?.payload?.data);
        } else {
            toast.error("Failed to fetch data", "error");
        }
        setIsLoding(false)
    }

    // const [columns, setColumns] = useState([...tableColumns]);
    // const [selectedColumns, setSelectedColumns] = useState([...tableColumns]);
    // const dataColumn = tableColumns?.filter(item => selectedColumns?.find(colum => colum?.Header === item.Header))

    useEffect(() => {
        fetchData();
    }, [action])

    return (
        <div>
            <CommonCheckTable
                title={"Quotes"}
                isLoding={isLoding}
                columnData={tableColumns ?? []}
                // dataColumn={dataColumn ?? []}
                allData={data ?? []}
                tableData={data}
                searchDisplay={displaySearchData}
                setSearchDisplay={setDisplaySearchData}
                searchedDataOut={searchedData}
                setSearchedDataOut={setSearchedData}
                tableCustomFields={[]}
                access={permission}
                // action={action}
                // setAction={setAction}
                // selectedColumns={selectedColumns}
                // setSelectedColumns={setSelectedColumns}
                // isOpen={isOpen}
                onClose={onclose}
                setIsImport={setIsImport}
                onOpen={handleOpenAdd}
                selectedValues={selectedValues}
                setSelectedValues={setSelectedValues}
                setDelete={setDelete}
                deleteMany={false}
                AdvanceSearch={
                    <Button variant="outline" colorScheme='brand' leftIcon={<SearchIcon />} mt={{ sm: "5px", md: "0" }} size="sm" onClick={() => setAdvanceSearch(true)}>Advance Search</Button>
                }
                getTagValuesOutSide={getTagValuesOutSide}
                searchboxOutside={searchboxOutside}
                setGetTagValuesOutside={setGetTagValuesOutside}
                setSearchboxOutside={setSearchboxOutside}
                handleSearchType="QuotesSearch"
            />

            <QuotesAdvanceSearch
                advanceSearch={advanceSearch}
                setAdvanceSearch={setAdvanceSearch}
                setSearchedData={setSearchedData}
                setDisplaySearchData={setDisplaySearchData}
                allData={data ?? []}
                setAction={setAction}
                setGetTagValues={setGetTagValuesOutside}
                setSearchbox={setSearchboxOutside}
            />

            <AddEdit isOpen={isOpen} size={"lg"} onClose={onClose} setAction={setAction} type={type} selectedId={selectedId} />
            <CommonDeleteModel
                isOpen={deleteModel}
                onClose={() => setDelete(false)}
                type="Quotes"
                handleDeleteData={handleDelete}
                ids={selectedValues}
            />

            <ImportModal
                text="Quotes file"
                isOpen={isImport}
                onClose={setIsImport}
                customFields={customFields}
            />
        </div>
    )
}

export default Index

================
File: Client/src/views/admin/quotes/View.js
================
import { Button, Grid, GridItem, Flex, IconButton, Text, Menu, MenuButton, MenuDivider, MenuItem, MenuList, useDisclosure, Box, Heading, Input, Select, Textarea } from '@chakra-ui/react'
import { AddIcon, ChevronDownIcon, DeleteIcon, EditIcon } from "@chakra-ui/icons";
import React from 'react'
import moment from 'moment'
import { Link, useNavigate, useParams } from 'react-router-dom'
import { BiLink } from 'react-icons/bi'
import { useEffect } from 'react'
import { useState } from 'react'
import Card from 'components/card/Card'
import { IoIosArrowBack } from "react-icons/io";
import { HasAccess } from '../../../redux/accessUtils';
import { HSeparator } from 'components/separator/Separator';
import AddEdit from './AddEdit';
import CommonDeleteModel from 'components/commonDeleteModel';
import { deleteManyApi, putApi, getApi } from '../../../services/api';
import { FaFilePdf } from "react-icons/fa";
import html2pdf from "html2pdf.js";
import { opprtunitiesSchema } from '../../../schema/opprtunitiesSchema';
import { useFormik } from 'formik';
import dayjs from 'dayjs';
import { toast } from 'react-toastify';
import { quoteSchema } from '../../../schema/quoteSchema';
import CommonCheckTable from "components/reactTable/checktable";

const View = (props) => {
    const params = useParams()
    const { id } = params
    const user = JSON.parse(localStorage.getItem("user"))

    const [quotesAccess, accountAccess, contactAccess, opportunityAccess, invoicesAccess] = HasAccess(['Quotes', 'Account', 'Contacts', 'Opportunities', 'Invoices'])

    const [data, setData] = useState()
    const [invoiceData, setInvoiceData] = useState([])
    const { onOpen, onClose } = useDisclosure()
    const [edit, setEdit] = useState(false);
    const [deleteModel, setDelete] = useState(false);
    const [deleteManyModel, setDeleteManyModel] = useState(false);
    const [loading, setLoading] = useState(false)
    const [isLoding, setIsLoding] = useState(false)
    const navigate = useNavigate()
    const [type, setType] = useState("")
    const [editableField, setEditableField] = useState(null);
    const [editableFieldName, setEditableFieldName] = useState(null);
    const [showInvoices, setShowInvoices] = useState(false);

    const today = new Date().toISOString().split('T')[0];
    const todayTime = new Date().toISOString().split('.')[0];

    const invoicesColumns = [
        { Header: "Invoice Number", accessor: "invoiceNumber", isSortable: false, width: 10 },
        {
            Header: 'Title', accessor: 'title', cell: (cell) => (
                <div className="selectOpt">
                    <Text
                        onClick={() => navigate(`/invoicesView/${cell?.row?.original._id}`)}
                        me="10px"
                        sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' }, cursor: 'pointer' }}
                        color='brand.600'
                        fontSize="sm"
                        fontWeight="700"
                    >
                        {cell?.value}
                    </Text>
                </div>
            )
        },
        {
            Header: 'Status', accessor: 'status',
        },
        {
            Header: 'Contact', accessor: 'contact',
            cell: (cell) => (
                (user.role === 'superAdmin' || contactAccess?.view) ?
                    <div className="selectOpt">
                        <Text
                            onClick={() => navigate(cell?.row?.original.contact !== null && `/contactView/${cell?.row?.original.contact}`)}
                            me="10px"
                            sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' }, cursor: 'pointer' }}
                            color='brand.600'
                            fontSize="sm"
                            fontWeight="700"
                        >
                            {cell?.row?.original?.contactName ? cell?.row?.original?.contactName : "-"}
                        </Text>
                    </div>
                    :
                    <Text
                    >
                        {cell?.row?.original?.contactName ? cell?.row?.original?.contactName : "-"}
                    </Text>
            )
        },
        {
            Header: 'Account', accessor: 'account',
            cell: (cell) => (
                (user.role === 'superAdmin' || accountAccess?.view) ?
                    <div className="selectOpt">
                        <Text
                            onClick={() => navigate(cell?.row?.original.account !== null && `/accountView/${cell?.row?.original.account}`)}
                            me="10px"
                            sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' }, cursor: 'pointer' }}
                            color='brand.600'
                            fontSize="sm"
                            fontWeight="700"
                        >
                            {cell?.row?.original?.accountName ? cell?.row?.original?.accountName : "-"}
                        </Text>
                    </div>
                    :
                    <Text
                    >
                        {cell?.row?.original?.accountName ? cell?.row?.original?.accountName : "-"}
                    </Text>
            )
        },
        {
            Header: "Grand Total",
            accessor: "grandTotal",
            cell: (cell) => (
                <div className="selectOpt">
                    <Text>
                        {cell?.row?.original?.grandTotal ? `$${cell?.row?.original?.grandTotal}` : '-'}
                    </Text>
                </div>
            )
        },
        {
            Header: "Convert Date&Time",
            accessor: "invoiceConvertDate",
            cell: (cell) => (
                <div className="selectOpt">
                    <Text>
                        {cell?.row?.original?.invoiceConvertDate ? `${moment(cell?.row?.original?.invoiceConvertDate).format("DD-MM-YYYY HH:MM a")}` : '-'}
                    </Text>
                </div>
            )
        },
    ];
    const fetchViewData = async () => {
        if (id) {
            let result = await getApi('api/quotes/view/', id);
            setData(result?.data?.result);
            setInvoiceData(result?.data?.invoiceDetails)
        }
    }
    const generatePDF = () => {
        setLoading(true)
        const element = document.getElementById("reports");
        const hideBtn = document.getElementById("hide-btn");

        if (element) {
            hideBtn.style.display = 'none';
            html2pdf()
                .from(element)
                .set({
                    margin: [0, 0, 0, 0],
                    filename: `Quotes_Details_${moment().format("DD-MM-YYYY")}.pdf`,
                    image: { type: "jpeg", quality: 0.98 },
                    html2canvas: { scale: 2, useCORS: true, allowTaint: true },
                    jsPDF: { unit: "in", format: "letter", orientation: "portrait" },
                })
                .save().then(() => {
                    setLoading(false)
                    hideBtn.style.display = '';
                })
            // }, 500);
        } else {
            console.error("Element with ID 'reports' not found.");
            setLoading(false)
        }
    };
    const handleDeleteAccount = async (ids) => {
        try {
            let response = await deleteManyApi('api/quotes/deleteMany', ids)
            if (response.status === 200) {
                navigate('/quotes')
                toast.success(`Quotes Delete successfully`)
                setDeleteManyModel(false)
            }
        } catch (error) {
            console.log(error)
            toast.error(`server error`)

        }

    }

    const initialValues = {
        title: data?.title,
        oppotunity: data?.oppotunity,
        quoteStage: data?.quoteStage,
        invoiceStatus: data?.invoiceStatus,
        validUntil: data?.validUntil,
        assignedTo: data?.assignedTo,
        paymentTerms: data?.paymentTerms,
        approvalStatus: data?.approvalStatus,
        nonPrimaryEmail: data?.nonPrimaryEmail,
        approvalIssues: data?.approvalIssues,
        terms: data?.terms,
        description: data?.description,
        account: data?.account,
        contact: data?.contact,
        billingStreet: data?.billingStreet,
        shippingStreet: data?.shippingStreet,
        billingCity: data?.billingCity,
        shippingCity: data?.shippingCity,
        billingState: data?.billingState,
        shippingState: data?.shippingState,
        billingPostalCode: data?.billingPostalCode,
        shippingPostalCode: data?.shippingPostalCode,
        billingCountry: data?.billingCountry,
        shippingCountry: data?.shippingCountry,
        isCheck: data?.isCheck,
        currency: data?.currency,
        total: data?.total,
        discount: data?.discount,
        subtotal: data?.subtotal,
        shipping: data?.shipping,
        shippingTax: data?.shippingTax,
        ptax: data?.ptax,
        tax: data?.tax,
        grandTotal: data?.grandTotal,
        modifiedBy: JSON.parse(localStorage.getItem('user'))._id
    }

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: quoteSchema,
        enableReinitialize: true,
        onSubmit: async (values, { resetForm }) => {
            const payload = {
                ...values,
                modifiedDate: new Date()
            }
            let response = await putApi(`api/quotes/edit/${id}`, payload)
            if (response.status === 200) {
                setEditableField(null);
                fetchViewData()
                toast.success(`${editableFieldName} Update successfully`)
            } else {
                toast.error(`${editableFieldName} not Update`)
            }
        },
    });
    const handleDoubleClick = (fieldName, value, name) => {
        formik.setFieldValue(fieldName, value);
        setEditableField(fieldName)
        setEditableFieldName(name)
    };

    const handleBlur = (e) => {
        formik.handleSubmit();
    };
    useEffect(() => {
        fetchViewData()
    }, [id, edit])
    return (
        <div>
            <Grid templateColumns="repeat(4, 1fr)" gap={3} id="reports">
                <GridItem colSpan={{ base: 4 }}>
                    <Heading size="lg" m={3}>
                        {data?.title || ""}
                    </Heading>
                </GridItem>
                <GridItem colSpan={{ base: 4 }}>
                    <Card >
                        <Grid gap={4}>
                            <GridItem colSpan={2}>
                                <Box>
                                    <Box display={"flex"} justifyContent={"space-between"} >
                                        <Heading size="md" mb={3}>
                                            Quotes Details
                                        </Heading>
                                        <Flex id="hide-btn" >
                                            <Menu>
                                                {(user.role === 'superAdmin' || quotesAccess?.create || quotesAccess?.update || quotesAccess?.delete) && <MenuButton variant="outline" colorScheme='blackAlpha' size="sm" va mr={2.5} as={Button} rightIcon={<ChevronDownIcon />}>
                                                    Actions
                                                </MenuButton>}
                                                <MenuDivider />
                                                <MenuList minWidth={2}>
                                                    {(user.role === 'superAdmin' || quotesAccess?.create) && <MenuItem onClick={() => { setEdit(true); setType("add"); formik.resetForm() }
                                                    } alignItems={'start'} color={'blue'} icon={<AddIcon />}>Add</MenuItem>}
                                                    {(user.role === 'superAdmin' || quotesAccess?.update) && <MenuItem onClick={() => { setEdit(true); setType("edit") }} alignItems={'start'} icon={<EditIcon />}>Edit</MenuItem>}
                                                    <MenuItem onClick={generatePDF} alignItems={"start"} icon={<FaFilePdf />} display={"flex"} style={{ alignItems: "center" }}>Print as PDF</MenuItem >

                                                    {(user.role === 'superAdmin' || quotesAccess?.delete) && <>
                                                        <MenuDivider />
                                                        <MenuItem alignItems={'start'} onClick={() => setDeleteManyModel(true)} color={'red'} icon={<DeleteIcon />}>Delete</MenuItem>
                                                    </>}
                                                </MenuList>
                                            </Menu>
                                            <Button leftIcon={<IoIosArrowBack />} size='sm' variant="brand" onClick={() => navigate(-1)} >
                                                Back
                                            </Button>
                                        </Flex>
                                    </Box>
                                    <HSeparator />
                                </Box>
                            </GridItem>

                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Quotes Number </Text>
                                <Text >{data?.quoteNumber ? data?.quoteNumber : ' - '}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Title </Text>
                                {
                                    editableField === "title" ?
                                        <>
                                            <Input
                                                id="text"
                                                name="title"
                                                type="text"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.title}
                                                borderColor={formik?.errors?.title && formik?.touched?.title ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.title && formik?.touched.title && formik?.errors.title}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("title", data?.title, "Title")}>{data?.title ? data?.title : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Opportunity</Text>
                                {
                                    data?.oppotunity ?
                                        <Link to={opportunityAccess?.view && `/opportunitiesView/${data?.oppotunity}`}>
                                            <Text color={opportunityAccess?.view ? 'blue.500' : 'blackAlpha.900'} sx={{ '&:hover': { color: opportunityAccess?.view ? 'blue.500' : 'blackAlpha.900', textDecoration: opportunityAccess?.view ? 'underline' : 'none' } }} style={{ cursor: "pointer" }}>{data?.oppotunityName ? data?.oppotunityName : ' - '}</Text>
                                        </Link>
                                        :
                                        <Text color={opportunityAccess?.view ? 'blue.500' : 'blackAlpha.900'} sx={{ '&:hover': { color: opportunityAccess?.view ? 'blue.500' : 'blackAlpha.900', textDecoration: opportunityAccess?.view ? 'underline' : 'none' } }}>{data?.oppotunityName ? data?.oppotunityName : ' - '}</Text>

                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Quote Stage </Text>
                                {
                                    editableField === "quoteStage" ?
                                        <>
                                            <Select
                                                value={formik?.values.quoteStage}
                                                name="quoteStage"
                                                onChange={formik?.handleChange}
                                                onBlur={handleBlur}
                                                mb={formik?.errors.quoteStage && formik?.touched.quoteStage ? undefined : '10px'}
                                                fontWeight='500'
                                                placeholder={'Quote Stage'}
                                                borderColor={formik?.errors.quoteStage && formik?.touched.quoteStage ? "red.300" : null}
                                            >
                                                <option value="Draft" >Draft</option>
                                                <option value="Negotiation" >Negotiation</option>
                                                <option value="Delivered" >Delivered</option>
                                                <option value="On Hold" >On Hold</option>
                                                <option value="Confirmed" >Confirmed</option>
                                                <option value="Closed Accepted" >Closed Accepted</option>
                                                <option value="Closed Lost" >Closed Lost</option>
                                                <option value="Closed Dead" >Closed Dead</option>
                                            </Select>
                                            <Text mb='10px' color={'red'}> {formik?.errors.quoteStage && formik?.touched.quoteStage && formik?.errors.quoteStage}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("quoteStage", data?.quoteStage, "Quote Stage")}>{data?.quoteStage ? data?.quoteStage : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Invoice Status </Text>
                                {
                                    editableField === "invoiceStatus" ?
                                        <>
                                            <Select
                                                value={formik?.values.invoiceStatus}
                                                name="invoiceStatus"
                                                onChange={formik?.handleChange}
                                                onBlur={handleBlur}
                                                mb={formik?.errors.invoiceStatus && formik?.touched.invoiceStatus ? undefined : '10px'}
                                                fontWeight='500'
                                                placeholder={'Invoice Status'}
                                                borderColor={formik?.errors.invoiceStatus && formik?.touched.invoiceStatus ? "red.300" : null}
                                            >
                                                <option value="Not Invoiced">Not Invoiced</option>
                                                <option value="Invoiced">Invoiced</option>
                                            </Select>
                                            <Text mb='10px' color={'red'}> {formik?.errors.invoiceStatus && formik?.touched.invoiceStatus && formik?.errors.invoiceStatus}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("invoiceStatus", data?.invoiceStatus, "Invoice Status")}>{data?.invoiceStatus ? data?.invoiceStatus : ' - '}</Text>
                                }
                            </GridItem>

                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Valid Until</Text>
                                {
                                    editableField === "validUntil" ?
                                        <>
                                            <Input
                                                name="validUntil"
                                                type="date"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={dayjs(formik.values.validUntil).format("YYYY-MM-DD")}
                                                borderColor={formik?.errors?.validUntil && formik?.touched?.validUntil ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.validUntil && formik?.touched.validUntil && formik?.errors.validUntil}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("validUntil", data?.validUntil, "Valid Until")}>{data?.validUntil ? data?.validUntil : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Payment Terms</Text>
                                {
                                    editableField === "paymentTerms" ?
                                        <>
                                            <Select
                                                value={formik?.values.paymentTerms}
                                                name="paymentTerms"
                                                onChange={formik?.handleChange}
                                                onBlur={handleBlur}
                                                mb={formik?.errors.paymentTerms && formik?.touched.paymentTerms ? undefined : '10px'}
                                                fontWeight='500'
                                                placeholder={'Payment Terms'}
                                                borderColor={formik?.errors.paymentTerms && formik?.touched.paymentTerms ? "red.300" : null}
                                            >
                                                <option value="Nett 15" >Nett 15</option>
                                                <option value="Nett 30" >Nett 30</option>
                                            </Select>
                                            <Text mb='10px' color={'red'}> {formik?.errors.paymentTerms && formik?.touched.paymentTerms && formik?.errors.paymentTerms}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("paymentTerms", data?.paymentTerms, "Payment Terms")}>{data?.paymentTerms ? data?.paymentTerms : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Approval Status</Text>
                                {
                                    editableField === "approvalStatus" ?
                                        <>
                                            <Select
                                                value={formik?.values.approvalStatus}
                                                name="approvalStatus"
                                                onChange={formik?.handleChange}
                                                onBlur={handleBlur}
                                                mb={formik?.errors.approvalStatus && formik?.touched.approvalStatus ? undefined : '10px'}
                                                fontWeight='500'
                                                placeholder={'Approval Status'}
                                                borderColor={formik?.errors.approvalStatus && formik?.touched.approvalStatus ? "red.300" : null}
                                            >
                                                <option value="Approved">Approved</option>
                                            </Select>
                                            <Text mb='10px' color={'red'}> {formik?.errors.approvalStatus && formik?.touched.approvalStatus && formik?.errors.approvalStatus}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("approvalStatus", data?.approvalStatus, "Approval Status")}>{data?.approvalStatus ? data?.approvalStatus : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Approval Issues</Text>
                                {
                                    editableField === "approvalIssues" ?
                                        <>
                                            <Textarea
                                                fontSize='sm'
                                                value={formik?.values.approvalIssues}
                                                name="approvalIssues"
                                                resize={"none"}
                                                onBlur={handleBlur}
                                                onChange={formik?.handleChange}
                                                placeholder='Approval Issues'
                                                fontWeight='500'
                                                borderColor={formik?.errors.approvalIssues && formik?.touched.approvalIssues ? "red.300" : null}
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.approvalIssues && formik?.touched.approvalIssues && formik?.errors.approvalIssues}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("approvalIssues", data?.approvalIssues, "Approval Issues")} style={{ width: "300px" }}>{data?.approvalIssues ? data?.approvalIssues : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Terms</Text>
                                {
                                    editableField === "terms" ?
                                        <>
                                            <Textarea
                                                fontSize='sm'
                                                value={formik?.values.terms}
                                                name="terms"
                                                resize={"none"}
                                                onBlur={handleBlur}
                                                onChange={formik?.handleChange}
                                                placeholder='Terms'
                                                fontWeight='500'
                                                borderColor={formik?.errors.terms && formik?.touched.terms ? "red.300" : null}
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.terms && formik?.touched.terms && formik?.errors.terms}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("terms", data?.terms, "Terms")} style={{ width: "300px" }}>{data?.terms ? data?.terms : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Description</Text>
                                {
                                    editableField === "description" ?
                                        <>
                                            <Textarea
                                                fontSize='sm'
                                                value={formik?.values.description}
                                                name="description"
                                                resize={"none"}
                                                onBlur={handleBlur}
                                                onChange={formik?.handleChange}
                                                placeholder='Description'
                                                fontWeight='500'
                                                borderColor={formik?.errors.description && formik?.touched.description ? "red.300" : null}
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.description && formik?.touched.description && formik?.errors.description}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("description", data?.description, "Description")} style={{ width: "300px" }}>{data?.description ? data?.description : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Account</Text>
                                {
                                    data?.account ?
                                        <Link to={accountAccess?.view && `/accountView/${data?.account}`}>
                                            <Text color={accountAccess?.view ? 'blue.500' : 'blackAlpha.900'} sx={{ '&:hover': { color: accountAccess?.view ? 'blue.500' : 'blackAlpha.900', textDecoration: accountAccess?.view ? 'underline' : 'none' } }} style={{ cursor: "pointer" }}>{data?.accountName ? data?.accountName : ' - '}</Text>
                                        </Link>
                                        :
                                        <Text color={accountAccess?.view ? 'blue.500' : 'blackAlpha.900'} sx={{ '&:hover': { color: accountAccess?.view ? 'blue.500' : 'blackAlpha.900', textDecoration: accountAccess?.view ? 'underline' : 'none' } }}>{data?.accountName ? data?.accountName : ' - '}</Text>

                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Contact</Text>
                                {
                                    data?.contact ?
                                        <Link to={contactAccess?.view && `/contactView/${data?.contact}`}>
                                            <Text color={contactAccess?.view ? 'blue.500' : 'blackAlpha.900'} sx={{ '&:hover': { color: contactAccess?.view ? 'blue.500' : 'blackAlpha.900', textDecoration: contactAccess?.view ? 'underline' : 'none' } }} style={{ cursor: "pointer" }}>{data?.contactName ? data?.contactName : ' - '}</Text>
                                        </Link>
                                        :
                                        <Text color={contactAccess?.view ? 'blue.500' : 'blackAlpha.900'} sx={{ '&:hover': { color: contactAccess?.view ? 'blue.500' : 'blackAlpha.900', textDecoration: contactAccess?.view ? 'underline' : 'none' } }}>{data?.contactName ? data?.contactName : ' - '}</Text>

                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Billing Street</Text>
                                {
                                    editableField === "billingStreet" ?
                                        <>
                                            <Input
                                                name="billingStreet"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.billingStreet}
                                                borderColor={formik?.errors?.billingStreet && formik?.touched?.billingStreet ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.billingStreet && formik?.touched.billingStreet && formik?.errors.billingStreet}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("billingStreet", data?.billingStreet, "Billing Street")}>{data?.billingStreet ? data?.billingStreet : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Shipping Street</Text>
                                {
                                    editableField === "shippingStreet" ?
                                        <>
                                            <Input
                                                name="shippingStreet"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.shippingStreet}
                                                borderColor={formik?.errors?.shippingStreet && formik?.touched?.shippingStreet ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.shippingStreet && formik?.touched.shippingStreet && formik?.errors.shippingStreet}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("shippingStreet", data?.shippingStreet, "Shipping Street")}>{data?.shippingStreet ? data?.shippingStreet : ' - '}</Text>
                                }
                            </GridItem>

                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Billing City
                                </Text>
                                {
                                    editableField === "billingCity" ?
                                        <>
                                            <Input
                                                name="billingCity"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.billingCity}
                                                borderColor={formik?.errors?.billingCity && formik?.touched?.billingCity ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.billingCity && formik?.touched.billingCity && formik?.errors.billingCity}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("billingCity", data?.billingCity, "Billing City")}>{data?.billingCity ? data?.billingCity : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Shipping City
                                </Text>
                                {
                                    editableField === "shippingCity" ?
                                        <>
                                            <Input
                                                name="shippingCity"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.shippingCity}
                                                borderColor={formik?.errors?.shippingCity && formik?.touched?.shippingCity ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.shippingCity && formik?.touched.shippingCity && formik?.errors.shippingCity}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("shippingCity", data?.shippingCity, "Shipping City")}>{data?.shippingCity ? data?.shippingCity : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Billing State</Text>
                                {
                                    editableField === "billingState" ?
                                        <>
                                            <Input
                                                name="billingState"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.billingState}
                                                borderColor={formik?.errors?.billingState && formik?.touched?.billingState ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.billingState && formik?.touched.billingState && formik?.errors.billingState}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("billingState", data?.billingState, "Billing State")}>{data?.billingState ? data?.billingState : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Shipping State</Text>
                                {
                                    editableField === "shippingState" ?
                                        <>
                                            <Input
                                                name="shippingState"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.shippingState}
                                                borderColor={formik?.errors?.shippingState && formik?.touched?.shippingState ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.shippingState && formik?.touched.shippingState && formik?.errors.shippingState}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("shippingState", data?.shippingState, "Shipping State")}>{data?.shippingState ? data?.shippingState : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Billing Postal Code</Text>
                                {
                                    editableField === "billingPostalCode" ?
                                        <>
                                            <Input
                                                name="billingPostalCode"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.billingPostalCode}
                                                borderColor={formik?.errors?.billingPostalCode && formik?.touched?.billingPostalCode ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.billingPostalCode && formik?.touched.billingPostalCode && formik?.errors.billingPostalCode}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("billingPostalCode", data?.billingPostalCode, "Billing Postal Code")}>{data?.billingPostalCode ? data?.billingPostalCode : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Shipping Postal Code</Text>
                                {
                                    editableField === "shippingPostalCode" ?
                                        <>
                                            <Input
                                                name="shippingPostalCode"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.shippingPostalCode}
                                                borderColor={formik?.errors?.shippingPostalCode && formik?.touched?.shippingPostalCode ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.shippingPostalCode && formik?.touched.shippingPostalCode && formik?.errors.shippingPostalCode}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("shippingPostalCode", data?.shippingPostalCode, "Shipping Postal Code")}>{data?.shippingPostalCode ? data?.shippingPostalCode : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Billing Country</Text>
                                {
                                    editableField === "billingCountry" ?
                                        <>
                                            <Input
                                                name="billingCountry"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.billingCountry}
                                                borderColor={formik?.errors?.billingCountry && formik?.touched?.billingCountry ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.billingCountry && formik?.touched.billingCountry && formik?.errors.billingCountry}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("billingCountry", data?.billingCountry, "Billing Country")}>{data?.billingCountry ? data?.billingCountry : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Shipping Country</Text>
                                {
                                    editableField === "shippingCountry" ?
                                        <>
                                            <Input
                                                name="shippingCountry"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.shippingCountry}
                                                borderColor={formik?.errors?.shippingCountry && formik?.touched?.shippingCountry ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.shippingCountry && formik?.touched.shippingCountry && formik?.errors.shippingCountry}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("shippingCountry", data?.shippingCountry, "Shipping Country")}>{data?.shippingCountry ? data?.shippingCountry : ' - '}</Text>
                                }
                            </GridItem>

                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Assigned To</Text>
                                {
                                    data?.assignedTo ?
                                        <Link to={user.role === 'superAdmin' && `/userView/${data?.assignedTo}`}>
                                            <Text color={user.role === 'superAdmin' ? 'blue.500' : 'blackAlpha.900'} sx={{ '&:hover': { color: user.role === 'superAdmin' ? 'blue.500' : 'blackAlpha.900', textDecoration: user.role === 'superAdmin' ? 'underline' : 'none' } }} style={{ cursor: "pointer" }}>{data?.assignUserName ? data?.assignUserName : ' - '}</Text>
                                        </Link>
                                        :
                                        <Text color={user.role === 'superAdmin' ? 'blue.500' : 'blackAlpha.900'} sx={{ '&:hover': { color: user.role === 'superAdmin' ? 'blue.500' : 'blackAlpha.900', textDecoration: user.role === 'superAdmin' ? 'underline' : 'none' } }}>{data?.assignUserName ? data?.assignUserName : ' - '}</Text>

                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Total</Text>
                                <Text>{`${data?.currency}${data?.total ? data?.total : '0'}`}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Discount</Text>
                                <Text >{`${data?.currency}${data?.discount || "0"}`}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Subtotal</Text>
                                <Text>{`${data?.currency}${data?.subtotal ? data?.subtotal : '0'}`}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Shipping</Text>
                                <>{`${data?.currency}${data?.shipping ? data?.shipping : '0'}`}</>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Shipping Tax</Text>
                                <Text >{`${data?.currency}${data?.shippingTax ? data?.shippingTax : '0'}`}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Tax</Text>
                                <Text >{`${data?.currency}${data?.tax ? data?.tax : '0'}`}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Grand Total</Text>
                                <Text>{`${data?.currency}${data?.grandTotal ? data?.grandTotal : '0'}`}</Text>
                            </GridItem>

                        </Grid>
                    </Card>
                </GridItem>
            </Grid>
            {invoicesAccess?.view &&
                <GridItem colSpan={{ base: 12 }} mt={5}>
                    <Card overflow={'scroll'}>
                        <CommonCheckTable
                            title={"Invoices"}
                            isLoding={isLoding}
                            columnData={invoicesColumns ?? []}
                            allData={invoiceData ?? []}
                            tableData={invoiceData ?? []}
                            AdvanceSearch={false}
                            tableCustomFields={[]}
                            checkBox={false}
                            deleteMany={true}
                            ManageGrid={false}
                            access={false}
                        />

                    </Card>
                </GridItem>
            }
            {
                (quotesAccess?.update || quotesAccess?.delete || user?.role === 'superAdmin') && <Card mt={3}>
                    <Grid templateColumns="repeat(6, 1fr)" gap={1}>
                        <GridItem colStart={6} >
                            <Flex justifyContent={"right"}>
                                {(quotesAccess?.update || user?.role === 'superAdmin') && <Button size="sm" onClick={() => { setEdit(true); setType("edit") }} leftIcon={<EditIcon />} mr={2.5} variant="outline" colorScheme="green">Edit</Button>}
                                {(quotesAccess?.delete || user?.role === 'superAdmin') && <Button size="sm" style={{ background: 'red.800' }} onClick={() => setDeleteManyModel(true)} leftIcon={<DeleteIcon />} colorScheme="red" >Delete</Button>}
                            </Flex>
                        </GridItem>
                    </Grid>
                </Card>
            }
            <AddEdit isOpen={edit} size="lg" onClose={() => setEdit(false)} viewClose={onClose} selectedId={id?.event ? id?.event?._def?.extendedProps?._id : id} type={type} />
            <CommonDeleteModel isOpen={deleteManyModel} onClose={() => setDeleteManyModel(false)} type='Account' handleDeleteData={handleDeleteAccount} ids={[id]} />


        </div>
    )
}

export default View

================
File: Client/src/views/admin/reports/components/chart.js
================
import { Grid } from '@chakra-ui/react';
import Card from "components/card/Card";
import { useState } from 'react';
import ReactApexChart from "react-apexcharts";
import 'react-datepicker/dist/react-datepicker.css';


const ReportChart = (props) => {
    const [Chartseries, setChartSeries] = useState([44, 55, 13, 33]);

    const options = {
        chart: {
            width: 380,
            type: "donut",
        },
        dataLabels: {
            enabled: false,
        },
        responsive: [
            {
                breakpoint: 480,
                options: {
                    chart: {
                        width: 200,
                    },
                    legend: {
                        show: false,
                    },
                },
            },
        ],
        legend: {
            position: "bottom",
        },
    };
    return (
        <Card>
            <Grid py={5}>
                <div >
                    <ReactApexChart
                        options={options}
                        series={Chartseries}
                        type="donut"
                        width={450}
                    />
                </div>
            </Grid>
        </Card>
    )
}

export default ReportChart

================
File: Client/src/views/admin/reports/components/CheckTable.js
================
import {
    Box,
    Flex,
    Table, Tbody,
    Td,
    Text,
    Th,
    Thead,
    Tr,
    useColorModeValue
} from "@chakra-ui/react";
import { useMemo, useState } from "react";
import {
    useGlobalFilter,
    usePagination,
    useSortBy,
    useTable,
} from "react-table";

// Custom components
import { DeleteIcon } from "@chakra-ui/icons";
import Card from "components/card/Card";
import Pagination from "components/pagination/Pagination";
import { FaSort, FaSortDown, FaSortUp } from "react-icons/fa";
import Delete from "views/admin/contact/Delete";
import DataNotFound from "components/notFoundData";
import Spinner from "components/spinner/Spinner";


export default function CheckTable(props) {
    const { columnsData, barData, isLoding } = props;

    const textColor = useColorModeValue("gray.500", "white");
    const borderColor = useColorModeValue("gray.200", "whiteAlpha.100");
    const columns = useMemo(() => columnsData, [columnsData]);
    const [selectedValues, setSelectedValues] = useState([]);

    const [deleteModel, setDelete] = useState(false);
    const data = useMemo(() => barData, [barData]);
    const [gopageValue, setGopageValue] = useState()


    const tableInstance = useTable(
        {
            columns, data,
            initialState: { pageIndex: 0 }
        },
        useGlobalFilter,
        useSortBy,
        usePagination
    );

    const {
        getTableProps,
        getTableBodyProps,
        headerGroups,
        prepareRow,
        page,
        canPreviousPage,
        canNextPage,
        pageOptions,
        pageCount,
        gotoPage,
        nextPage,
        previousPage,
        setPageSize,
        state: { pageIndex, pageSize }
    } = tableInstance;

    if (pageOptions.length < gopageValue) {
        setGopageValue(pageOptions.length)
    }


    return (
        <Card
            direction="column"
            w="100%"
            px="0px"
            overflowX={{ sm: "scroll", lg: "scroll" }}
        >
            <Flex px="25px" justify="space-between" mb="20px" align="center">
                <Text
                    color={"secondaryGray.900"}
                    fontSize="22px"
                    fontWeight="700"
                    lineHeight="100%"
                >
                    Reports ({data.length})
                </Text>
                {/* <Menu /> */}
                {selectedValues.length > 0 && <DeleteIcon onClick={() => setDelete(true)} color={'red'} />}
            </Flex>
            {/* Delete model */}
            <Delete isOpen={deleteModel} onClose={setDelete} setSelectedValues={setSelectedValues} url='api/contact/deleteMany' data={selectedValues} method='many' />
            <Box overflowY={"auto"} className="table-fix-container">

                <Table {...getTableProps()} variant="simple" color="gray.500" mb="24px">
                    <Thead>
                        {headerGroups?.map((headerGroup, index) => (
                            <Tr {...headerGroup.getHeaderGroupProps()} key={index}>
                                {headerGroup.headers?.map((column, index) => (
                                    <Th
                                        {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}
                                        pe="10px"
                                        key={index}
                                        borderColor={borderColor}
                                    >
                                        <Flex
                                            align="center"
                                            justifyContent={column.center ? "center" : "start"}
                                            fontSize={{ sm: "14px", lg: "16px" }}
                                            color="secondaryGray.900"
                                        >
                                            <span style={{ textTransform: "capitalize", marginRight: "8px" }}>
                                                {column.render("Header")}
                                            </span>
                                            {column.isSortable !== false && (
                                                <span>
                                                    {column.isSorted ? (column.isSortedDesc ? <FaSortDown /> : <FaSortUp />) : <FaSort />}
                                                </span>
                                            )}
                                        </Flex>
                                    </Th>
                                ))}
                            </Tr>
                        ))}
                    </Thead>
                    <Tbody {...getTableBodyProps()}>
                        {isLoding ? (
                            <Tr>
                                <Td colSpan={columns?.length}>
                                    <Flex
                                        justifyContent={"center"}
                                        alignItems={"center"}
                                        width="100%"
                                        color={textColor}
                                        fontSize="sm"
                                        fontWeight="700"
                                    >
                                        <Spinner />
                                    </Flex>
                                </Td>
                            </Tr>
                        ) : data?.length === 0 ? (
                            <Tr>
                                <Td colSpan={columns.length}>
                                    <Text
                                        textAlign={"center"}
                                        width="100%"
                                        color={textColor}
                                        fontSize="sm"
                                        fontWeight="700"
                                    >
                                        <DataNotFound />
                                    </Text>
                                </Td>
                            </Tr>
                        ) :
                            page?.map((row, i) => {
                                prepareRow(row);
                                return (
                                    <Tr {...row?.getRowProps()} key={i}>
                                        {row?.cells?.map((cell, index) => {
                                            let data = "";
                                            if (cell?.column.Header === "#") {
                                                data = (
                                                    <Flex align="center">
                                                        <Text color={textColor} fontSize="sm" fontWeight="700">
                                                            {cell?.row?.index + 1}
                                                        </Text>
                                                    </Flex>
                                                );
                                            } else if (cell?.column.Header === "Name") {
                                                data = (
                                                    <Text
                                                        me="10px"
                                                        color={textColor}
                                                        fontSize="sm"
                                                        fontWeight="700"
                                                    >
                                                        {cell?.value}
                                                    </Text>
                                                );
                                            } else if (cell?.column.Header === "Email Sent") {
                                                data = (

                                                    <Text
                                                        me="10px"
                                                        color={textColor}
                                                        fontSize="sm"
                                                        fontWeight="700"
                                                    >
                                                        {cell?.value}
                                                    </Text>
                                                );
                                            } else if (cell?.column.Header === "Text Sent") {
                                                data = (
                                                    <Text
                                                        me="10px"
                                                        color={textColor}
                                                        fontSize="sm"
                                                        fontWeight="700"
                                                    >
                                                        {cell?.value}
                                                    </Text>
                                                );
                                            }
                                            else if (cell?.column.Header === "Outbound Calls") {
                                                data = (
                                                    <Text
                                                        me="10px"
                                                        color={textColor}
                                                        fontSize="sm"
                                                        fontWeight="700"
                                                    >
                                                        {cell?.value}
                                                    </Text>
                                                );
                                            }
                                            else if (cell?.column.Header === "Email Received") {
                                                data = (
                                                    <Text
                                                        me="10px"
                                                        color={textColor}
                                                        fontSize="sm"
                                                        fontWeight="700"
                                                    >
                                                        {cell?.value}
                                                    </Text>
                                                );
                                            }
                                            else if (cell?.column.Header === "Text Received") {
                                                data = (
                                                    <Text
                                                        me="10px"
                                                        color={textColor}
                                                        fontSize="sm"
                                                        fontWeight="700"
                                                    >
                                                        {cell?.value}
                                                    </Text>
                                                );
                                            }

                                            return (
                                                <Td
                                                    {...cell?.getCellProps()}
                                                    key={index}
                                                    fontSize={{ sm: "14px" }}
                                                    minW={{ sm: "150px", md: "200px", lg: "auto" }}
                                                    borderColor="transparent"
                                                >
                                                    {data}
                                                </Td>
                                            );
                                        })}
                                    </Tr>
                                );
                            })}
                    </Tbody>
                </Table>
            </Box>
            {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage} pageSize={pageSize} pageIndex={pageIndex} />}
        </Card>
    );
}

================
File: Client/src/views/admin/reports/components/reportChart.js
================
import { Box, Grid, Radio, RadioGroup, Select, Stack } from '@chakra-ui/react';
import Card from "components/card/Card";
import moment from 'moment';
import { useEffect, useState } from 'react';
import ReactApexChart from "react-apexcharts";
import ReactDatePicker from "react-datepicker";
import 'react-datepicker/dist/react-datepicker.css';
import { useSelector } from 'react-redux';
import { postApi } from "services/api";


const ReportChart = (props) => {
    const { dashboard } = props;
    const [reportChart, setReportChart] = useState({})
    const [startDate, setStartDate] = useState(new Date(new Date() - 14 * 24 * 60 * 60 * 1000));
    const [endDate, setEndDate] = useState(new Date());
    const [select, setSelect] = useState('all');
    const [selection, setSelection] = useState('day');
    const modules = useSelector((state) => state?.modules?.data)
    const user = JSON.parse(localStorage.getItem("user"))
    const isEmailsActive = modules?.find((item) => item?.moduleName === "Emails");
    const isCallsActive = modules?.find((item) => item?.moduleName === "Calls");
    const featchChart = async () => {
        const data = {
            startDate: moment(startDate).format('YYYY-MM-DD'),
            endDate: moment(endDate).format('YYYY-MM-DD'),
            filter: selection
        }
        let result = await postApi(user.role === 'superAdmin' ? 'api/reporting/index' : `api/reporting/index?sender=${user._id}`, data);
        if (result.status === 200) {
            setReportChart(result?.data);
        }
    }

    const options = {
        chart: {
            id: 'line-chart',
        },
        xaxis: {
            type: 'datetime',
        },
        yaxis: {
            title: {
                text: 'Count',
            },
        },
        dataLabels: {
            enabled: true,
        }
    };

    const series = Object.keys(reportChart).map((key) => {
        const dataSet = reportChart[key][0];
        let seriesData = [];

        if (dataSet?.Emails && isEmailsActive?.isActive) {
            seriesData = seriesData.concat(
                dataSet?.Emails?.map((item) => ({ x: item?.date, y: item?.Emailcount }))
            );
        }
        if (dataSet?.Calls && isCallsActive?.isActive) {
            seriesData = seriesData.concat(
                dataSet?.Calls?.map((item) => ({ x: item?.date, y: item?.Callcount }))
            );
        }

        return {
            name: (key === "Email" && isEmailsActive?.isActive) ? "Emails" : (key === "Call" && isCallsActive?.isActive) ? "Call" : ((key === "Email" && isEmailsActive?.isActive) && (key === "Call" && isCallsActive?.isActive) ? key : ""),
            data: seriesData,
        };

    });

    useEffect(() => {
        featchChart()
    }, [startDate, endDate, selection])


    const selectedSeries = select === 'all' ? series?.filter(series => series?.name !== "") : series?.filter(series => series?.name === select);

    return (
        <Card>
            {!dashboard &&
                <Box display='flex' alignItems='center' flexWrap={'wrap'} justifyContent='space-between' mb={4}>
                    <Select value={select} onChange={(e) => setSelect(e.target.value)} size='sm' width={{ base: '100%', md: '15%' }} mb={{ base: 3, md: 'auto' }}>
                        <option value='all'>All</option>
                        <option value='EmailDetails'>Email</option>
                        <option value='outboundcall'>Call</option>
                    </Select>
                    <Box width={{ base: '100%', md: 'auto' }} flexWrap={'wrap'} justifyContent={'left'} mb={{ base: 3, md: 'auto' }} display='flex'>
                        <ReactDatePicker selected={startDate} onChange={(date) => setStartDate(date)} className='datePickerBorder' />
                        <ReactDatePicker selected={endDate} onChange={(date) => setEndDate(date)} className='datePickerBorder' />
                    </Box>
                    <Box width={{ base: '100%', md: 'auto' }} display={'flex'} justifyContent={'right'} mb={{ base: 3, md: 'auto' }}>
                        <RadioGroup onChange={(e) => setSelection(e)} value={selection}>
                            <Stack direction='row'>
                                <Radio value='day' >Daily</Radio>
                                <Radio value='week'>Weekly</Radio>
                            </Stack>
                        </RadioGroup>
                    </Box>
                </Box>
            }
            <div id="chart">
                <div id="chart-timeline">
                    {selectedSeries && (
                        <ReactApexChart
                            options={options}
                            series={selectedSeries}
                            type='area'
                            height={300}
                        />
                    )}
                </div>
            </div>



        </Card>
    )
}

export default ReportChart

================
File: Client/src/views/admin/reports/index.js
================
import Card from "components/card/Card";
import { useEffect, useState } from 'react';
import 'react-datepicker/dist/react-datepicker.css';
import { getApi } from 'services/api';
import ReportChart from './components/reportChart';
import CommonCheckTable from "components/reactTable/checktable";

const Report = () => {
    const title = 'Reports'
    const [data, setData] = useState([])
    const [isLoding, setIsLoding] = useState(false)
    const [selectedValues, setSelectedValues] = useState([]);
    // const [selectedColumns, setSelectedColumns] = useState([]);
    // const [columns, setColumns] = useState([]);

    const user = JSON.parse(localStorage.getItem("user"))

    const tableColumns = [
        { Header: 'Email Sent', accessor: 'emailsent' },
        { Header: "Outbound Calls", accessor: "outboundcall" },
    ];

    // const fetchCustomDataFields = async () => {
    //     const tempTableColumns = [
    //         { Header: '#', accessor: '_id' },
    //         { Header: 'Name', accessor: 'firstName' },
    //         { Header: 'Email Sent', accessor: 'emailsent' },
    //         { Header: "Outbound Calls", accessor: "outboundcall" },
    //     ];
    //     // setSelectedColumns(JSON.parse(JSON.stringify(tempTableColumns)));
    // }

    if (user.role === 'superAdmin') {
        tableColumns.unshift({
            Header: "#",
            accessor: "_id",
            isSortable: false,
            width: 10
        }, { Header: 'Name', accessor: 'firstName' })
    }

    const fetchData = async () => {
        setIsLoding(true)
        let result = await getApi(user.role === 'superAdmin' ? 'api/reporting' : `api/reporting?_id=${user._id}`);
        if (result && result.status === 200) {
            setData(result?.data)
        }
        setIsLoding(false)
    }

    // const [columns, setColumns] = useState([...tableColumns]);
    // const [selectedColumns, setSelectedColumns] = useState([...tableColumns]);
    // const dataColumn = tableColumns?.filter(item => selectedColumns?.find(colum => colum?.Header === item.Header))
    useEffect(() => {
        fetchData()
        // fetchCustomDataFields()
    }, [])

    return (
        <div>
            <ReportChart />
            <Card mt={4}>
                <CommonCheckTable
                    title={title}
                    isLoding={isLoding}
                    columnData={tableColumns ?? []}
                    // dataColumn={dataColumn ?? []}
                    allData={data ?? []}
                    tableData={data}
                    AdvanceSearch={false}
                    checkBox={false}
                    tableCustomFields={[]}
                    deleteMany={true}
                // selectedValues={selectedValues}
                // setSelectedValues={setSelectedValues}
                // selectedColumns={selectedColumns}
                // setSelectedColumns={setSelectedColumns}
                />
            </Card>
        </div>
    )
}

export default Report

================
File: Client/src/views/admin/role/components/CheckTable.js
================
import {
  Box,
  Flex,
  Grid,
  GridItem,
  Button,
  Table,
  Tbody,
  Td,
  Text,
  Th,
  Thead,
  Tr,
  useColorModeValue,
  useDisclosure,
} from "@chakra-ui/react";
import { useEffect, useMemo, useState } from "react";
import {
  useGlobalFilter,
  usePagination,
  useSortBy,
  useTable,
} from "react-table";

// Custom components
import { AddIcon } from "@chakra-ui/icons";
import Card from "components/card/Card";
import CountUpComponent from "components/countUpComponent/countUpComponent";
import Spinner from "components/spinner/Spinner";
import {  useNavigate } from "react-router-dom";
import RoleModal from "./roleModal";
import AddRole from "../Add";
import { IoIosArrowBack } from "react-icons/io";
import DataNotFound from "components/notFoundData";

export default function CheckTable(props) {
  const { columnsData, tableData,  fetchData, isLoding, setAction } = props;
  const { onOpen } = useDisclosure();

  const textColor = useColorModeValue("gray.500", "white");
  const borderColor = useColorModeValue("gray.200", "whiteAlpha.100");
  const columns = useMemo(() => columnsData, [columnsData]);

  const [roleModal, setRoleModal] = useState(false);
  const [access, setAccess] = useState([])
  const [accessRole, setAccessRole] = useState([])
  const [roleName, setRoleName] = useState('')
  const [roleId, setRoleId] = useState('')
  const [gopageValue, setGopageValue] = useState()
  const data = useMemo(() => tableData, [tableData]);
  const [addRoleModal, setAddRoleModal] = useState(false);
  const navigate = useNavigate();

  const user = JSON.parse(localStorage.getItem("user"))

  const rowColumns = [
    {
      Header: "#",
      accessor: "_id",
      isSortable: false,
      width: 10,
      display: false
    },

    { Header: "title", accessor: "title" },
    { Header: "create", accessor: "create", width: '20px' },
    { Header: "view", accessor: "view", width: '20px' },
    { Header: "update", accessor: "update", width: '20px' },
    { Header: "delete", accessor: "delete", width: '20px' },
  ]


  const tableInstance = useTable(
    {
      columns, data,
      initialState: { pageIndex: 0 }
    },
    useGlobalFilter,
    useSortBy,
    usePagination
  );

  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    prepareRow,
    page,
    canPreviousPage,
    canNextPage,
    pageOptions,
    pageCount,
    gotoPage,
    nextPage,
    previousPage,
    setPageSize,
    state: { pageIndex, pageSize }
  } = tableInstance;

  if (pageOptions.length < gopageValue) {
    setGopageValue(pageOptions.length)
  }

  useEffect(() => {
    fetchData()
  }, [])

  return (
    <>
      <Card
        direction="column"
        w="100%"
        overflowX={{ sm: "scroll", lg: "hidden" }}
      >
        <Grid templateColumns="repeat(12, 1fr)" mb={3} gap={4} mx={4}>
          <GridItem colSpan={8}>
            <Flex alignItems="center" flexWrap='wrap'>
              <Text
                color={"secondaryGray.900"}
                fontSize="22px"
                fontWeight="700"
                lineHeight="100%"
              >
                Roles (<CountUpComponent key={data?.length} targetNumber={data?.length} />)
              </Text>
            </Flex>
          </GridItem>
          <GridItem colSpan={4} justifyContent="end" alignItems="center" textAlign="right">
            <Button onClick={() => setAddRoleModal(true)} variant="brand" size="sm" leftIcon={<AddIcon />}>Add New</Button>
            <Button onClick={() => navigate('/admin-setting')} variant="brand" size="sm" ml={2} leftIcon={<IoIosArrowBack />}>Back</Button>
          </GridItem>
        </Grid>

        <Box overflowY={"auto"} className="table-fix-container">
          <Table>
            <Thead>
              {headerGroups?.map((headerGroup, index) => (
                <Tr {...headerGroup.getHeaderGroupProps()} key={index}>
                  {headerGroup.headers?.map((column, index) => (
                    <Th
                      {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}
                      pe="10px"
                      key={index}
                      borderColor={borderColor}
                    >
                      <Flex
                        align="center"
                        justifyContent={column.center ? "center" : "start"}
                        fontSize={{ sm: "14px", lg: "16px" }}
                        color="secondaryGray.900"
                      >
                        <span style={{ textTransform: "capitalize", marginRight: "8px" }}>
                          {column.render("Header")}
                        </span>
                     
                      </Flex>
                    </Th>
                  ))}
                </Tr>
              ))}
            </Thead>
            <Tbody {...getTableBodyProps()}>
              {isLoding ? (
                <Tr>
                  <Td colSpan={columns?.length}>
                    <Flex
                      justifyContent={"center"}
                      alignItems={"center"}
                      width="100%"
                      color={textColor}
                      fontSize="sm"
                      fontWeight="700"
                    >
                      <Spinner />
                    </Flex>
                  </Td>
                </Tr>
              ) : data?.length === 0 ? (
                <Tr>
                  <Td colSpan={columns.length}>
                    <Text
                      textAlign={"center"}
                      width="100%"
                      color={textColor}
                      fontSize="sm"
                      fontWeight="700"
                    >
                        <DataNotFound />
                    </Text>
                  </Td>
                </Tr>
              ) : (
                page?.map((row, i) => {
                  prepareRow(row);
                  return (
                    <Tr {...row?.getRowProps()} key={i}>
                      {row?.cells?.map((cell, index) => {
                        let data = "";
                        if (cell?.column.Header === "#") {
                          data = (
                            <Flex align="center">

                              <Text
                                color={textColor}
                                fontSize="sm"
                                fontWeight="700"
                              >
                                {cell?.row?.index + 1}
                              </Text>
                            </Flex>
                          );
                        } else if (cell?.column.Header === "Role Name") {
                          data = (
                            <Text
                              me="10px"
                              onClick={() => { setRoleModal(true); setRoleName(cell?.value); setRoleId(cell?.row?.original?._id); setAccess(cell?.row?.original?.access); setAccessRole(cell?.row?.original?.access) }}
                              color='brand.600'
                              sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline', cursor: 'pointer' } }}
                              fontSize="sm"
                              fontWeight="700"
                            >
                              {cell?.value}
                            </Text>
                          );
                        } else if (cell?.column.Header === "Description") {
                          data = (
                            <Text color={textColor} fontSize="sm" fontWeight="700">
                              {cell?.value}
                            </Text>
                          );
                        }
                        return (
                          <Td
                            {...cell?.getCellProps()}
                            key={index}
                            fontSize={{ sm: "14px" }}
                            borderColor="transparent"
                          >
                            {data}
                          </Td>
                        );
                      })}
                    </Tr>
                  );
                })
              )}
            </Tbody>
          </Table>
        </Box>


        {access && <RoleModal isOpen={roleModal}
          setRoleModal={setRoleModal}
          onOpen={onOpen}
          isLoding={isLoding} columnsData={rowColumns} name={roleName} _id={roleId} tableData={access} accessRole={accessRole} setAccessRole={setAccessRole} setAccess={setAccess} fetchData={fetchData} setAction={setAction} />}
      </Card>

      <AddRole isOpen={addRoleModal} size={"sm"} setAction={setAction} onClose={setAddRoleModal} />
    </>
  );
}

================
File: Client/src/views/admin/role/components/roleModal.js
================
import React, { useEffect, useMemo, useState } from "react";
import {
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
  Button,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Flex,
  Text,
  Td,
  useColorModeValue,
} from "@chakra-ui/react";
import Spinner from "components/spinner/Spinner";
import {
  useGlobalFilter,
  usePagination,
  useSortBy,
  useTable,
} from "react-table";
import ChangeAccess from "../changeAccess";
import UserModal from "./userModal";
import { getApi } from "services/api";
import DataNotFound from "components/notFoundData";

function RoleModal(props) {
  const {
    name,
    tableData,
    fetchData,
    columnsData,
    isOpen,
    setAction,
    setAccess,
    _id,
    onOpen,
    setRoleModal,
  } = props;

  const tableColumns = [
    {
      Header: "#",
      accessor: "_id",
      isSortable: false,
      width: 10
    },
    { Header: 'email Id', accessor: 'username' },
    { Header: "first Name", accessor: "firstName", },
    { Header: "last Name", accessor: "lastName", },
    { Header: "role", accessor: "role", },
  ];

  const textColor = useColorModeValue("secondaryGray.900", "white");
  const borderColor = useColorModeValue("gray.200", "whiteAlpha.100");
  const columns = useMemo(() => columnsData, [columnsData]);
  const [isLoding, setIsLoding] = useState(false);

  const [editModal, setEditModal] = useState(false);
  const [openUser, setOpenUser] = useState();
  const [gopageValue, setGopageValue] = useState();
  const data = useMemo(() => tableData || [], [tableData]);
  const user = JSON.parse(localStorage.getItem("user"));
  const [userdata, setUserData] = useState([]);

  const tableInstance = useTable(
    {
      columns,
      data,
      initialState: { pageIndex: 0, pageSize: 500 },
    },
    useGlobalFilter,
    useSortBy,
    usePagination
  );

  const {
    getTableBodyProps,
    headerGroups,
    prepareRow,
    page,
    pageOptions,
    state: { pageIndex, pageSize },
  } = tableInstance;

  if (pageOptions.length < gopageValue) {
    setGopageValue(pageOptions.length);
  }

  const userFetchData = async () => {
    if (_id) {
      let result = await getApi('api/role-access/assignedUsers/', _id);
      setUserData(result?.data);
    }
  }

  useEffect(() => {
    userFetchData()
  }, [_id])

  return (
    <>
      <Modal onClose={() => setRoleModal(false)} isOpen={isOpen} isCentered size={"xl"}>
        <ModalOverlay />
        <ModalContent height={"580px"} maxWidth={"2xl"}>
          <ModalHeader>
            <Flex justifyContent={'space-between'}>
              <Text textTransform={"capitalize"}>{name} Access</Text>
              <Text style={{
                marginRight: "25px",
                fontSize: "15px",
                fontWeight: "700",
                marginTop: '5px',
                color: 'blue',
                cursor: 'pointer',
                textDecoration: 'underline'
              }} onClick={() => { setOpenUser(true); setRoleModal(false); }}>View user's in {name} role</Text>
              <ModalCloseButton mt='2' />
            </Flex>
          </ModalHeader>
          <ModalBody overflow={"auto"} height={"400px"}>
            <Table>
              <Thead>
                {headerGroups?.map((headerGroup, index) => (
                  <Tr {...headerGroup.getHeaderGroupProps()} key={index}>
                    {headerGroup.headers?.map((column, index) => (
                      <Th
                        sx={{ width: "10px" }}
                        key={index}
                        borderColor={borderColor}
                        display={column.display === false && "none"}
                      >
                        {column.display !== false && column.render("Header")}
                      </Th>
                    ))}
                  </Tr>
                ))}
              </Thead>
              <Tbody {...getTableBodyProps()}>
                {isLoding ? (
                  <Tr>
                    <Td colSpan={columns?.length}>
                      <Flex
                        justifyContent={"center"}
                        alignItems={"center"}
                        width="100%"
                        color={textColor}
                        fontSize="sm"
                        fontWeight="700"
                      >
                        <Spinner />
                      </Flex>
                    </Td>
                  </Tr>
                ) : data?.length === 0 ? (
                  <Tr>
                    <Td colSpan={columns.length}>
                      <Text
                        textAlign={"center"}
                        width="100%"
                        color={textColor}
                        fontSize="sm"
                        fontWeight="700"
                      >
                        <DataNotFound />
                      </Text>
                    </Td>
                  </Tr>
                ) : (
                  page?.map((row, i) => {
                    prepareRow(row);
                    return (
                      <Tr {...row?.getRowProps()} key={i}>
                        {row?.cells?.map((cell, index) => {
                          let data = "";
                          if (cell?.column.Header === "title") {
                            data = (
                              <Text
                                me="10px"
                                color={textColor}
                                fontSize="sm"
                                fontWeight="700"
                              >
                                {cell?.value}
                              </Text>
                            );
                          } else if (cell?.column.Header === "create") {
                            data = (
                              <Text
                                color={textColor}
                                fontSize="sm"
                                fontWeight="700"
                              >
                                {cell?.value ? 'Yes' : 'No'}
                              </Text>
                            );
                          } else if (cell?.column.Header === "view") {
                            data = (
                              <Text
                                color={textColor}
                                fontSize="sm"
                                fontWeight="700"
                              >
                                {cell?.value ? 'Yes' : 'No'}
                              </Text>
                            );
                          } else if (cell?.column.Header === "update") {
                            data = (
                              <Text
                                color={textColor}
                                fontSize="sm"
                                fontWeight="700"
                              >
                                {cell?.value ? 'Yes' : 'No'}
                              </Text>
                            );
                          } else if (cell?.column.Header === "delete") {
                            data = (
                              <Text
                                color={textColor}
                                fontSize="sm"
                                fontWeight="700"
                              >
                                {cell?.value ? 'Yes' : 'No'}
                              </Text>
                            );
                          }
                          return (
                            <Td
                              {...cell?.getCellProps()}
                              key={index}
                              fontSize={{ sm: "14px" }}
                              minW={{ sm: "150px", md: "200px", lg: "auto" }}
                              borderColor="transparent"
                              sx={{
                                display: cell?.column.Header === "#" && "none",
                              }}
                            >
                              {data}
                            </Td>
                          );
                        })}
                      </Tr>
                    );
                  })
                )}
              </Tbody>
            </Table>
          </ModalBody>
          <ModalFooter>
            <Button variant="brand" size="sm" onClick={() => { setEditModal(true); setRoleModal(false) }}>
              Change Access
            </Button>
            <Button
              size="sm"
              onClick={() => setRoleModal(false)}
              variant="outline"
              colorScheme="red"
              sx={{
                marginLeft: 2,
                textTransform: "capitalize",
              }}
            >
              Close
            </Button>
          </ModalFooter>
        </ModalContent>
      </Modal>
      <ChangeAccess tableData={tableData ?? []} accessRole={tableData ?? []} setAccess={setAccess} setRoleModal={setRoleModal} columnsData={columnsData ?? []} _id={_id} fetchData={fetchData} name={name} setEditModal={setEditModal} setAction={setAction} editModal={editModal} />
      <UserModal isOpen={openUser}
        setRoleModal={setRoleModal}
        setOpenUser={setOpenUser}
        onOpen={onOpen}
        columnsData={tableColumns ?? []}
        tableData={userdata ?? []}
        setAction={setAction}
        _id={_id}
        fetchData={userFetchData}
        userdata={userdata}
      />
    </>
  );
}

export default RoleModal;

================
File: Client/src/views/admin/role/components/roleUser.js
================
import { Button, Flex, Modal, ModalBody, Text, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, useColorModeValue, Tr, Td, Spinner, Thead, Table, Tbody, Th, Checkbox } from '@chakra-ui/react';
import DataNotFound from 'components/notFoundData';
import Pagination from 'components/pagination/Pagination';
import React, { useEffect, useMemo, useState } from 'react'
import { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';
import { useGlobalFilter, usePagination, useSortBy, useTable } from 'react-table';
import { putApi } from 'services/api';

const RoleUser = (props) => {

    const { setUserModal, userModal, tableData, columnsData, setOpenUser, _id, userRole, fetchData } = props;

    const textColor = useColorModeValue("secondaryGray.900", "white");
    const borderColor = useColorModeValue("gray.200", "whiteAlpha.100");
    const columns = useMemo(() => columnsData, [columnsData]);
    const [isLoding, setIsLoding] = useState(false);
    const [selectedValues, setSelectedValues] = useState([]);
    const data = useMemo(() => tableData, [tableData]);
    const [gopageValue, setGopageValue] = useState();

    const tableInstance = useTable(
        {
            columns, data,
            initialState: { pageIndex: 0 }
        },
        useGlobalFilter,
        useSortBy,
        usePagination
    );

    const {
        getTableProps,
        getTableBodyProps,
        headerGroups,
        prepareRow,
        page,
        canPreviousPage,
        canNextPage,
        pageOptions,
        pageCount,
        gotoPage,
        nextPage,
        previousPage,
        setPageSize,
        state: { pageIndex, pageSize }
    } = tableInstance;

    if (pageOptions.length < gopageValue) {
        setGopageValue(pageOptions.length)
    }

    const uniqueValues = [...new Set(selectedValues)];


    const handleCheckboxChange = (event, value) => {
        if (event.target.checked) {
            setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);
        } else {
            setSelectedValues((prevSelectedValues) =>
                prevSelectedValues.filter((selectedValue) => selectedValue !== value)
            );
        }
    };

    useEffect(() => {
        const pre = userRole?.map((item) => item._id)
        setSelectedValues(pre)
    }, [userModal])


    const addUser = async () => {
        const response = await putApi(`api/role-access/assignedUsers/${_id}`, uniqueValues)
        if (response.status === 200) {
            setUserModal(false)
            fetchData()
        }
    }

    return (
        <Modal onClose={() => setUserModal(false)} isOpen={userModal} isCentered size={"4xl"} style={{ height: "560px" }}>
            <ModalOverlay />
            <ModalContent>
                <ModalHeader>
                    <Flex justifyContent={'space-between'}>
                        <Text>Users</Text>
                        <ModalCloseButton mt='2' />
                    </Flex>
                </ModalHeader>
                <ModalBody overflowY={"auto"} height={"400px"}>
                    <Table {...getTableProps()} variant="simple" color="gray.500" mb="24px">
                        <Thead>
                            {headerGroups?.map((headerGroup, index) => (
                                <Tr {...headerGroup.getHeaderGroupProps()} key={index}>
                                    {headerGroup.headers?.map((column, index) => (
                                        <Th
                                            {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}
                                            pe="10px"
                                            key={index}
                                            borderColor={borderColor}
                                        >

                                            <Flex
                                                align="center"
                                                justifyContent={column.center ? "center" : "start"}
                                                fontSize={{ sm: "14px", lg: "16px" }}
                                                color=" secondaryGray.900"
                                            >
                                                <span style={{
                                                    textTransform: "capitalize",
                                                    //  marginRight: "8px"
                                                }}>
                                                    {column.render("Header")}
                                                </span>
                                                {column.isSortable !== false && (
                                                    <span>
                                                        {column.isSorted ? (column.isSortedDesc ? <FaSortDown /> : <FaSortUp />) : <FaSort />}
                                                    </span>
                                                )}
                                            </Flex>
                                        </Th>
                                    ))}
                                </Tr>
                            ))}
                        </Thead>
                        <Tbody {...getTableBodyProps()}>
                            {isLoding ?
                                <Tr>
                                    <Td colSpan={columns?.length}>
                                        <Flex justifyContent={'center'} alignItems={'center'} width="100%" color={textColor} fontSize="sm" fontWeight="700">
                                            <Spinner />
                                        </Flex>
                                    </Td>
                                </Tr>
                                : data?.length === 0 ? (
                                    <Tr>
                                        <Td colSpan={columns.length}>
                                            <Text textAlign={'center'} width="100%" color={textColor} fontSize="sm" fontWeight="700">
                                                <DataNotFound />
                                            </Text>
                                        </Td>
                                    </Tr>
                                ) : page?.map((row, i) => {
                                    prepareRow(row);
                                    return (
                                        <Tr {...row?.getRowProps()} key={i}>
                                            {row?.cells?.map((cell, index) => {
                                                let data = "";
                                                if (cell?.column.Header === "#") {
                                                    data = (
                                                        <Flex align="center" >
                                                            <Checkbox colorScheme="brandScheme" value={selectedValues} isChecked={selectedValues.includes(cell?.value)} onChange={(event) => handleCheckboxChange(event, cell?.value)} me="10px" />
                                                            <Text color={textColor} fontSize="sm" fontWeight="700">
                                                                {cell?.row?.index + 1}
                                                            </Text>
                                                        </Flex>
                                                    );
                                                } else if (cell?.column.Header === "email Id") {
                                                    data = (
                                                        <Text
                                                            me="10px"
                                                            color={textColor}
                                                            fontSize="sm"
                                                            fontWeight="700"
                                                        >
                                                            {cell?.value}
                                                        </Text>
                                                    );
                                                } else if (cell?.column.Header === "first Name") {
                                                    data = (
                                                        <Text
                                                            me="10px"
                                                            color={textColor}
                                                            fontSize="sm"
                                                            fontWeight="700"
                                                        >
                                                            {cell?.value ? cell?.value : ' - '}
                                                        </Text>
                                                    );
                                                } else if (cell?.column.Header === "last Name") {
                                                    data = (
                                                        <Text
                                                            me="10px"
                                                            color={textColor}
                                                            fontSize="sm"
                                                            fontWeight="700"
                                                        >
                                                            {cell?.value ? cell?.value : ' - '}
                                                        </Text>
                                                    );
                                                } else if (cell?.column.Header === "role") {
                                                    data = (
                                                        <Text color={textColor} fontSize="sm" fontWeight="700">
                                                            {cell?.value}
                                                        </Text>
                                                    );
                                                }
                                                return (
                                                    <Td
                                                        {...cell?.getCellProps()}
                                                        key={index}
                                                        fontSize={{ sm: "14px" }}
                                                        minW={{ sm: "150px", md: "200px", lg: "auto" }}
                                                        borderColor="transparent"
                                                    >
                                                        {data}
                                                    </Td>
                                                );
                                            })}
                                        </Tr>
                                    );
                                })}
                        </Tbody>
                    </Table>
                    {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage} pageSize={pageSize} pageIndex={pageIndex} />}

                </ModalBody>
                <ModalFooter>
                    <Button variant="brand" size="sm" onClick={() => { addUser(); setOpenUser(true) }}>
                        Save
                    </Button>
                    <Button size="sm"
                        onClick={() => { setUserModal(false); setSelectedValues([]); setOpenUser(true) }}
                        variant="outline"
                        colorScheme="red"
                        sx={{
                            marginLeft: 2,
                            textTransform: "capitalize",
                        }}
                    >
                        Close
                    </Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    )
}

export default RoleUser

================
File: Client/src/views/admin/role/components/userModal.js
================
import React, { useEffect, useMemo, useState } from "react";
import {
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
  Button,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Flex,
  Text,
  Td,
  useColorModeValue,
} from "@chakra-ui/react";
import Spinner from "components/spinner/Spinner";
import {
  useGlobalFilter,
  usePagination,
  useSortBy,
  useTable,
} from "react-table";
import { FaSort, FaSortDown, FaSortUp } from "react-icons/fa";
import Pagination from "components/pagination/Pagination";
import RoleUser from "./roleUser";
import { getApi } from "services/api";
import DataNotFound from "components/notFoundData";

function UserModal(props) {
  const {
    tableData,
    columnsData,
    isOpen,
    _id,
    setRoleModal,
    setOpenUser,
    fetchData,
  } = props;

  const textColor = useColorModeValue("secondaryGray.900", "white");
  const borderColor = useColorModeValue("gray.200", "whiteAlpha.100");
  const columns = useMemo(() => columnsData, [columnsData]);
  const [selectedValues, setSelectedValues] = useState([]);
  const [isLoding, setIsLoding] = useState(false);
  const data = useMemo(() => tableData, [tableData]);
  const [userModal, setUserModal] = useState(false);
  const [userData, setUserData] = useState([]);
  const [gopageValue, setGopageValue] = useState();

  const tableInstance = useTable(
    {
      columns, data,
      initialState: { pageIndex: 0 }
    },
    useGlobalFilter,
    useSortBy,
    usePagination
  );

  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    prepareRow,
    page,
    canPreviousPage,
    canNextPage,
    pageOptions,
    pageCount,
    gotoPage,
    nextPage,
    previousPage,
    setPageSize,
    state: { pageIndex, pageSize }
  } = tableInstance;

  if (pageOptions.length < gopageValue) {
    setGopageValue(pageOptions.length)
  }


  const handleCheckboxChange = (event, value) => {
    if (event.target.checked) {
      setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);
    } else {
      setSelectedValues((prevSelectedValues) =>
        prevSelectedValues.filter((selectedValue) => selectedValue !== value)
      );
    }
  };

  const userFetchData = async () => {
    let result = await getApi('api/user/?role=user');
    setUserData(result?.data?.user);
  }

  useEffect(() => {
    userFetchData()
  }, [])



  return (
    <>
      <Modal onClose={() => setOpenUser(false)} isOpen={isOpen} isCentered size={"4xl"} style={{ height: "560px" }}>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader height={"580px"} >
            <Flex justifyContent={'space-between'}>
              <Text>Users</Text>
              <Button variant="brand" size="sm" me={'2rem'} onClick={() => { setOpenUser(false); setUserModal(true) }}>Manage Users</Button>
              <ModalCloseButton mt='2' />
            </Flex>
          </ModalHeader>
          <ModalBody overflow={"auto"} height={"400px"}>
            <Table {...getTableProps()} variant="simple" color="gray.500" mb="24px">
              <Thead>
                {headerGroups?.map((headerGroup, index) => (
                  <Tr {...headerGroup.getHeaderGroupProps()} key={index}>
                    {headerGroup.headers?.map((column, index) => (
                      <Th
                        {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}
                        pe="10px"
                        key={index}
                        borderColor={borderColor}
                      >

                        <Flex
                          align="center"
                          justifyContent={column.center ? "center" : "start"}
                          fontSize={{ sm: "14px", lg: "16px" }}
                          color=" secondaryGray.900"
                        >
                          <span style={{
                            textTransform: "capitalize",
                          }}>
                            {column.render("Header")}
                          </span>
                          {column.isSortable !== false && (
                            <span>
                              {column.isSorted ? (column.isSortedDesc ? <FaSortDown /> : <FaSortUp />) : <FaSort />}
                            </span>
                          )}
                        </Flex>
                      </Th>
                    ))}
                  </Tr>
                ))}
              </Thead>
              <Tbody {...getTableBodyProps()}>
                {isLoding ?
                  <Tr>
                    <Td colSpan={columns?.length}>
                      <Flex justifyContent={'center'} alignItems={'center'} width="100%" color={textColor} fontSize="sm" fontWeight="700">
                        <Spinner />
                      </Flex>
                    </Td>
                  </Tr>
                  : data?.length === 0 ? (
                    <Tr>
                      <Td colSpan={columns.length}>
                        <Text textAlign={'center'} width="100%" color={textColor} fontSize="sm" fontWeight="700">
                          <DataNotFound />
                        </Text>
                      </Td>
                    </Tr>
                  ) : page?.map((row, i) => {
                    prepareRow(row);
                    return (
                      <Tr {...row?.getRowProps()} key={i}>
                        {row?.cells?.map((cell, index) => {
                          let data = "";
                          if (cell?.column.Header === "#") {
                            data = (
                              <Flex align="center" >
                                <Text color={textColor} fontSize="sm" fontWeight="700">
                                  {cell?.row?.index + 1}
                                </Text>
                              </Flex>
                            );
                          } else if (cell?.column.Header === "email Id") {
                            data = (
                              <Text
                                me="10px"
                                color={textColor}
                                fontSize="sm"
                                fontWeight="700"
                              >
                                {cell?.value}
                              </Text>
                            );
                          } else if (cell?.column.Header === "first Name") {
                            data = (
                              <Text
                                me="10px"
                                color={textColor}
                                fontSize="sm"
                                fontWeight="700"
                              >
                                {cell?.value ? cell?.value : ' - '}
                              </Text>
                            );
                          } else if (cell?.column.Header === "last Name") {
                            data = (
                              <Text
                                me="10px"
                                color={textColor}
                                fontSize="sm"
                                fontWeight="700"
                              >
                                {cell?.value ? cell?.value : ' - '}
                              </Text>
                            );
                          } else if (cell?.column.Header === "role") {
                            data = (
                              <Text color={textColor} fontSize="sm" fontWeight="700">
                                {cell?.value}
                              </Text>
                            );
                          }
                          return (
                            <Td
                              {...cell?.getCellProps()}
                              key={index}
                              fontSize={{ sm: "14px" }}
                              minW={{ sm: "150px", md: "200px", lg: "auto" }}
                              borderColor="transparent"
                            >
                              {data}
                            </Td>
                          );
                        })}
                      </Tr>
                    );
                  })}
              </Tbody>
            </Table>
            {data?.length > 5 && (
              <Pagination
                gotoPage={gotoPage}
                gopageValue={gopageValue}
                setGopageValue={setGopageValue}
                pageCount={pageCount}
                canPreviousPage={canPreviousPage}
                previousPage={previousPage}
                canNextPage={canNextPage}
                pageOptions={pageOptions}
                setPageSize={setPageSize}
                nextPage={nextPage}
                pageSize={pageSize}
                pageIndex={pageIndex}
              />
            )}
          </ModalBody>
          <ModalFooter>
            <Button
              size="sm"
              onClick={() => {
                setOpenUser(false);
                setRoleModal(true);
              }}
              variant="outline"
              colorScheme="red"
              sx={{
                marginLeft: 2,
                textTransform: "capitalize",
              }}
            >
              Close
            </Button>
          </ModalFooter>
        </ModalContent>
      </Modal>
      <RoleUser
        fetchData={fetchData}
        userModal={userModal}
        setOpenUser={setOpenUser}
        _id={_id}
        setUserModal={setUserModal}
        userFetchData={userFetchData}
        userRole={tableData}
        tableData={userData || []}
        columnsData={columnsData || []}
      />
    </>
  );
}

export default UserModal;

================
File: Client/src/views/admin/role/Add.js
================
import { CloseIcon } from '@chakra-ui/icons';
import { Button, FormLabel, Grid, GridItem, IconButton, Input, Modal, ModalBody, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import { useFormik } from 'formik';
import React, { useState } from 'react';
import { toast } from 'react-toastify';
import { postApi } from 'services/api';
import * as yup from 'yup'

const AddRole = (props) => {
    const { onClose, isOpen, setAction } = props;
    const [isLoding, setIsLoding] = useState(false);

    const initialValues = {
        roleName: '',
        description: '',
    };

    const validationSchema = yup.object({
        roleName: yup.string().required("Role Name is required"),
        description: yup.string().required("Description is required")
    });

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: validationSchema,
        onSubmit: (values, { resetForm }) => {
            AddData();
            resetForm();
        },
    });
    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik

    const AddData = async () => {
        try {
            setIsLoding(true)
            let response = await postApi('api/role-access/add', values)
            if (response && response.status === 200) {
                onClose(false);
                setAction((pre) => !pre)
            } else {
                toast.error(response.response.data?.message)
            }
        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };

    return (
        <Modal isOpen={isOpen} isCentered>
            <ModalOverlay />
            <ModalContent>
                <ModalHeader justifyContent='space-between' display='flex' >
                    Add Role
                    <IconButton onClick={() => onClose(false)} icon={<CloseIcon />} />
                </ModalHeader>
                <ModalBody>

                    <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Role Name<Text color={"red"}>*</Text>
                            </FormLabel>
                            <Input
                                fontSize='sm'
                                onChange={handleChange} onBlur={handleBlur}
                                value={values.roleName}
                                name="roleName"
                                placeholder='Enter Role Name'
                                fontWeight='500'
                                borderColor={errors.roleName && touched.roleName ? "red.300" : null}
                            />
                            <Text mb='10px' fontSize={'sm'} color={'red'}> {errors.roleName && touched.roleName && errors.roleName}</Text>
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Description<Text color={"red"}>*</Text>
                            </FormLabel>
                            <Input
                                fontSize='sm'
                                onChange={handleChange} onBlur={handleBlur}
                                value={values.description}
                                name="description"
                                placeholder='Enter Description'
                                fontWeight='500'
                                borderColor={errors.description && touched.description ? "red.300" : null}
                            />
                            <Text mb='10px' fontSize={'sm'} color={'red'}> {errors.description && touched.description && errors.description}</Text>
                        </GridItem>
                    </Grid>

                </ModalBody>
                <ModalFooter>
                    <Button size="sm" variant='brand' mr={1} disabled={isLoding ? true : false} onClick={handleSubmit}>{isLoding ? <Spinner /> : 'Save'}</Button>
                    <Button size="sm" variant='outline' color={'red'} colorScheme='red' onClick={() => {
                        formik.resetForm()
                        onClose(false)
                    }}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    )
}

export default AddRole

================
File: Client/src/views/admin/role/changeAccess.js
================
import React, { useEffect, useMemo, useState } from "react";
import {
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
  Button,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Flex,
  Text,
  Td,
  Checkbox,
  useColorModeValue,
} from "@chakra-ui/react";
import Spinner from "components/spinner/Spinner";
import {
  useGlobalFilter,
  usePagination,
  useSortBy,
  useTable,
} from "react-table";
import { useFormik } from "formik";
import { putApi } from "services/api";
import DataNotFound from "components/notFoundData";

function ChangeAccess(props) {
  const {
    columnsData,
    name,
    tableData,
    fetchData,
    setAccess,
    _id,
    setRoleModal,
    editModal, setEditModal,
  } = props;

  const textColor = useColorModeValue("secondaryGray.900", "white");
  const borderColor = useColorModeValue("gray.200", "whiteAlpha.100");
  const columns = useMemo(() => columnsData, [columnsData]);
  const [isLoding, setIsLoding] = useState(false);

  const [gopageValue, setGopageValue] = useState();
  const data = useMemo(() => tableData || [], [tableData]);

  const tableInstance = useTable(
    {
      columns,
      data,
      initialState: { pageIndex: 0 },
    },
    useGlobalFilter,
    useSortBy,
    usePagination
  );

  const {
    getTableBodyProps,
    headerGroups,
    prepareRow,
    page,
    pageOptions,
    setPageSize,
    state: { pageIndex, pageSize },
  } = tableInstance;

  if (pageOptions.length < gopageValue) {
    setGopageValue(pageOptions.length);
  }

  const initialValues = {
    roleName: name,
    access: tableData,
  };

  const formik = useFormik({
    initialValues: initialValues,
    enableReinitialize: true,
    onSubmit: (values, { resetForm }) => {
      EditData();
    },
  });

  const {
    values,
    handleSubmit,
    setFieldValue,
    resetForm
  } = formik;

  // const handleCheckboxChange = (index, fieldName, secondFieldName) => (event) => {
  //   const { checked } = event.target;

  //   let updatedAccess = values.access.map((item, idx) => {
  //     if (idx === index) {
  //       const updatedItem = { ...item, [fieldName]: checked };
  //       if (secondFieldName && checked === false) {
  //         updatedItem[secondFieldName] = checked;
  //         updatedItem.update = checked;
  //         updatedItem.delete = checked;
  //       } else if (secondFieldName) {
  //         updatedItem[secondFieldName] = checked;
  //       }

  //       return updatedItem;
  //     }
  //     return item;
  //   });
  //   const leadsIndex = values.access.findIndex(accessItem => accessItem.title === "Leads");
  //   const contactsIndex = values.access.findIndex(accessItem => accessItem.title === "Contacts");

  //   const lc = ((updatedAccess[index]?.title === "Leads" || updatedAccess[index]?.title === "Contacts") && (!updatedAccess[contactsIndex]?.view && !updatedAccess[leadsIndex]?.view))

  //   const mm = updatedAccess?.map((i, idx) => {
  //     let newItem = { ...i };
  //     if (secondFieldName && checked === false && lc) {
  //       if (i.title === "Emails" || i.title === "Calls" || i.title === "Meetings") {
  //         newItem.create = false;
  //         newItem.delete = false;
  //         newItem.update = false;
  //         newItem.view = false;
  //       }
  //     }
  //     return newItem;
  //   })

  //   // setFieldValue('access', updatedAccess);
  //   setFieldValue('access', mm);
  // };

  const handleCheckboxChange = (index, fieldName, secondFieldName) => (event) => {
    const { checked } = event.target;
    const leadsIndex = values.access.findIndex(accessItem => accessItem.title === "Leads");
    const contactsIndex = values.access.findIndex(accessItem => accessItem.title === "Contacts");

    const updatedAccess = values.access.map((item, idx) => {
      if (idx === index) {
        const updatedItem = { ...item, [fieldName]: checked };
        if (secondFieldName && !checked) {
          updatedItem[secondFieldName] = updatedItem.update = updatedItem.delete = checked;
        } else if (secondFieldName) {
          updatedItem[secondFieldName] = checked;
        }
        return updatedItem;
      }
      return item;
    });

    const finalUpdatedAccessWith = updatedAccess.map((item, idx) => {
      if (secondFieldName && checked === false && (!updatedAccess[contactsIndex]?.view && !updatedAccess[leadsIndex]?.view)) {
        if (["Emails", "Calls", "Meetings"].includes(item.title)) {
          return {
            ...item,
            create: false,
            delete: false,
            update: false,
            view: false
          };
        }
      }
      return item;
    });

    setFieldValue('access', finalUpdatedAccessWith);
  };

  const EditData = async () => {
    try {
      setIsLoding(true);
      setAccess(values?.access)
      let response = await putApi(`api/role-access/edit/${_id}`, values);
      if (response.status === 200) {
        setEditModal(false)
        fetchData()
        setRoleModal(true)
      }
    } catch (e) {
      console.log(e);
    } finally {
      setIsLoding(false);
    }
  };

  const disable = (cell) => {
    if (["Emails", "Calls", "Meetings"].includes(cell.title)) {
      return !values?.access?.some((i => (i.title === "Contacts" || i.title === "Leads") && i.view));
    }
    return false;
  }

  useEffect(() => {
    fetchData()
  }, [editModal])

  useEffect(() => {
    if (Array.isArray(data) && data?.length > 0) {
      setPageSize(data?.length); // Ensure the pageSize is set to the length of the data
    }
  }, [data, setPageSize]);

  return (
    <Modal onClose={() => setEditModal(false)} isOpen={editModal} isCentered size={"xl"}>
      <ModalOverlay />
      <ModalContent height={"580px"} maxWidth={"2xl"}>
        <ModalHeader textTransform={"capitalize"}>{name} Access</ModalHeader>
        <ModalCloseButton />
        <ModalBody overflow={"auto"} height={"400px"}>
          <Table>
            <Thead>
              {headerGroups?.map((headerGroup, index) => (
                <Tr {...headerGroup.getHeaderGroupProps()} key={index}>
                  {headerGroup.headers?.map((column, index) => (
                    <Th
                      sx={{ width: "10px" }}
                      pe="10px"
                      key={index}
                      borderColor={borderColor}
                      display={column.display === false && "none"}
                    >
                      <Flex
                        justify="space-between"
                        align="center"
                        fontSize={{ sm: "10px", lg: "12px" }}
                        color="gray.400"
                      >
                        {column.display !== false && column.render("Header")}
                      </Flex>
                    </Th>
                  ))}
                </Tr>
              ))}
            </Thead>
            <Tbody {...getTableBodyProps()}>
              {isLoding ? (
                <Tr>
                  <Td colSpan={columns?.length}>
                    <Flex
                      justifyContent={"center"}
                      alignItems={"center"}
                      width="100%"
                      color={textColor}
                      fontSize="sm"
                      fontWeight="700"
                    >
                      <Spinner />
                    </Flex>
                  </Td>
                </Tr>
              ) : data?.length === 0 ? (
                <Tr>
                  <Td colSpan={columns.length}>
                    <Text
                      textAlign={"center"}
                      width="100%"
                      color={textColor}
                      fontSize="sm"
                      fontWeight="700"
                    >
                      <DataNotFound />
                    </Text>
                  </Td>
                </Tr>
              ) : (
                page?.map((row, i) => {
                  prepareRow(row);
                  return (
                    <Tr {...row?.getRowProps()} key={i}>
                      {row?.cells?.map((cell, index) => {
                        let data = "";
                        if (cell?.column.Header === "title") {
                          data = (
                            <Text
                              me="10px"
                              color={textColor}
                              fontSize="sm"
                              fontWeight="700"
                            >
                              {cell?.value}
                            </Text>
                          );
                        } else if (cell?.column.Header === "create") {
                          data = (
                            <Text
                              color={textColor}
                              fontSize="sm"
                              fontWeight="700"
                            >
                              <Checkbox
                                disabled={disable(cell?.row?.original)}
                                isChecked={values?.access[i]?.create}
                                defaultChecked={values?.access[i]?.create}
                                onChange={handleCheckboxChange(i, 'create', "view")}
                              />
                            </Text>
                          );
                        } else if (cell?.column.Header === "view") {
                          data = (
                            <Text
                              color={textColor}
                              fontSize="sm"
                              fontWeight="700"
                            >
                              <Checkbox
                                disabled={disable(cell?.row?.original)}
                                isChecked={values?.access[i]?.view}
                                defaultChecked={values?.access[i]?.view}
                                onChange={handleCheckboxChange(i, 'view', "create")}
                              />
                            </Text>
                          );
                        } else if (cell?.column.Header === "update") {
                          data = (
                            <Text
                              color={textColor}
                              fontSize="sm"
                              fontWeight="700"
                            >
                              <Checkbox
                                disabled={!values?.access[i]?.view}
                                isChecked={values?.access[i]?.update}
                                defaultChecked={values?.access[i]?.update}
                                onChange={handleCheckboxChange(i, 'update')}
                              />
                            </Text>
                          );
                        } else if (cell?.column.Header === "delete") {
                          data = (
                            <Text
                              color={textColor}
                              fontSize="sm"
                              fontWeight="700"
                            >
                              <Checkbox
                                disabled={!values?.access[i]?.view}
                                isChecked={values?.access[i]?.delete}
                                defaultChecked={values?.access[i]?.delete}
                                onChange={handleCheckboxChange(i, 'delete')}
                              />
                            </Text>
                          );
                        }
                        return (
                          <Td
                            {...cell?.getCellProps()}
                            key={index}
                            fontSize={{ sm: "14px" }}
                            minW={{ sm: "150px", md: "200px", lg: "auto" }}
                            borderColor="transparent"
                            sx={{
                              display: cell?.column.Header === "#" && "none",
                            }}
                          >
                            {data}
                          </Td>
                        );
                      })}
                    </Tr>
                  );
                })
              )}
            </Tbody>
          </Table>
        </ModalBody>
        <ModalFooter>
          <Button size="sm" variant="brand" onClick={handleSubmit}>
            Save
          </Button>
          <Button size="sm"
            onClick={() => { resetForm(); setEditModal(false); setRoleModal(true); }}
            variant="outline"
            colorScheme="red"
            sx={{
              marginLeft: 2,
              textTransform: "capitalize",
            }}
          >
            Close
          </Button>
        </ModalFooter>
      </ModalContent>
    </Modal>
  );
}

export default ChangeAccess;

================
File: Client/src/views/admin/role/index.js
================
import { Button, Text, useDisclosure } from "@chakra-ui/react";
import { useEffect, useState } from "react";
import { getApi } from "services/api";
import CommonCheckTable from "components/reactTable/checktable";
import { IoIosArrowBack } from "react-icons/io";
import { useNavigate } from "react-router-dom";
import RoleModal from "./components/roleModal";
import AddRole from "./Add";

const Index = () => {
  const { isOpen, onOpen, onClose } = useDisclosure();
  const [roleModal, setRoleModal] = useState(false);
  const [access, setAccess] = useState([])
  const [roleId, setRoleId] = useState('')
  const [searchboxOutside, setSearchboxOutside] = useState('');
  const [getTagValuesOutSide, setGetTagValuesOutside] = useState([]);
  const [displaySearchData, setDisplaySearchData] = useState(false);
  const [roleName, setRoleName] = useState('')
  const [searchedData, setSearchedData] = useState([]);

  const columns = [
    {
      Header: "#",
      accessor: "_id",
      isSortable: false,
      width: 10,
      display: false
    },
    {
      Header: "Role Name", accessor: "roleName", cell: (cell) => (
        <Text
          me="10px"
          onClick={() => { setRoleModal(true); setRoleName(cell?.value); setRoleId(cell?.row?.original?._id); setAccess(cell?.row?.original?.access); }}
          color='brand.600'
          sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline', cursor: 'pointer' } }}
          fontSize="sm"
          fontWeight="700"
        >
          {cell?.value}
        </Text>
      )
    },
    { Header: "Description", accessor: "description" }
  ];
  const rowColumns = [
    {
      Header: "#",
      accessor: "_id",
      isSortable: false,
      width: 10,
      display: false
    },

    { Header: "title", accessor: "title" },
    { Header: "create", accessor: "create", width: '20px' },
    { Header: "view", accessor: "view", width: '20px' },
    { Header: "update", accessor: "update", width: '20px' },
    { Header: "delete", accessor: "delete", width: '20px' },
  ]
  const [action, setAction] = useState(false);
  const [isLoding, setIsLoding] = useState(false);
  const [data, setData] = useState([]);
  const size = "lg";
  const navigate = useNavigate()

  const fetchData = async () => {
    setIsLoding(true);
    let result = await getApi("api/role-access");
    setData(result.data);
    setIsLoding(false);
  };

  useEffect(() => {
    fetchData()
  }, [action])

  return (
    <div>
      <CommonCheckTable
        title={'Roles'}
        isLoding={isLoding}
        columnData={columns ?? []}
        // dataColumn={columns ?? []}
        allData={data || []}
        tableData={data}
        // AdvanceSearch={() => ""}
        AdvanceSearch={false}
        tableCustomFields={[]}
        searchedDataOut={searchedData}
        searchDisplay={displaySearchData}
        setSearchDisplay={setDisplaySearchData}
        setSearchedDataOut={setSearchedData}
        searchboxOutside={searchboxOutside}
        // setSearchboxOutside={setSearchboxOutside}
        BackButton={<Button onClick={() => navigate('/admin-setting')} variant="brand" size="sm" leftIcon={<IoIosArrowBack />} ml={2}>Back</Button>}
        deleteMany={true}
        access={true}
        checkBox={false}
        getTagValuesOutSide={getTagValuesOutSide}
        setGetTagValuesOutside={setGetTagValuesOutside}
        ManageGrid={false}
        onOpen={onOpen}
        customSearch={true}
      />
      <AddRole isOpen={isOpen} size={"sm"} setAction={setAction} onClose={onClose} />
      {access && <RoleModal isOpen={roleModal}
        setRoleModal={setRoleModal}
        onOpen={onOpen}
        isLoding={isLoding}
        columnsData={rowColumns ?? []}
        name={roleName}
        _id={roleId}
        tableData={access ?? []}
        setAccess={setAccess}
        fetchData={fetchData}
        setAction={setAction}
      />}
    </div>
  );
};

export default Index;

================
File: Client/src/views/admin/tableField/index.js
================
import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import {
    Box,
    Button,
    Flex,
    Menu,
    MenuButton,
    Checkbox,
    GridItem,
    Text,
    MenuItem,
    Grid,
    MenuList,
    useColorModeValue,
} from "@chakra-ui/react";
import { ChevronDownIcon } from "@chakra-ui/icons";
import { IoIosArrowBack } from "react-icons/io";
import Card from "components/card/Card";
import { getApi, putApi } from "services/api";
import Spinner from "components/spinner/Spinner";
import { BsThreeDots } from "react-icons/bs";

const Index = () => {
    const [isLoading, setIsLoading] = useState(false);
    const [allModulesData, setAllModulesData] = useState([]);
    const navigate = useNavigate();
    const [moduleName, setModuleName] = useState("");
    const [moduleId, setModuleId] = useState("");
    const [fields, setFields] = useState([]);
    const [initialFields, setInitialFields] = useState([]);
    const [action, setAction] = useState(false);
    const textColor = useColorModeValue("gray.500", "white");
    const [selectedFields, setSelectedFields] = useState({});

    // const handleCheckboxChange = (event, fieldId) => {
    //     let updatedFields = [...fields];

    //     let index = fields.findIndex((field) => field._id === fieldId);

    //     updatedFields[index].isTableField = event.target.checked;
    //     setFields([...updatedFields]);

    //     const valueChanged = initialFields[index].isTableField !== event.target.checked;

    //     if (valueChanged) {
    //         setSelectedFields((prevSelectedFields) => ({
    //             ...prevSelectedFields,
    //             [fieldId]: event.target.checked,
    //         }));
    //     } else {
    //         setSelectedFields((prevSelectedFields) => {
    //             const { [fieldId]: omit, ...rest } = prevSelectedFields;
    //             return rest;
    //         });
    //     }
    // };

    const handleCheckboxChange = (event, fieldId, fieldProperty) => {
        let updatedFields = [...fields];
        let index = fields.findIndex((field) => field._id === fieldId);
        const isChecked = event.target.checked;

        // If updating 'isView' and the checkbox is checked, ensure only one item can have 'isView' set to true
        if (fieldProperty === 'isView') {
            handleUpdateTableViewField({
                fieldId,
                isChecked
            })
        }

        if (fieldProperty === 'isView' && isChecked) {
            updatedFields = updatedFields.map((field, i) => {
                if (i !== index) {
                    return { ...field, isView: false };
                }
                return field;
            });
        }

        updatedFields[index][fieldProperty] = isChecked;
        setFields([...updatedFields]);

        const valueChanged = initialFields[index][fieldProperty] !== isChecked;

        if (valueChanged && fieldProperty !== 'isView') {
            setSelectedFields((prevSelectedFields) => ({
                ...prevSelectedFields,
                [fieldId]: isChecked,
            }));
        } else {
            setSelectedFields((prevSelectedFields) => {
                const { [fieldId]: omit, ...rest } = prevSelectedFields;
                return rest;
            });
        }
    };


    // const handleCheckboxChange = (event, fieldId, fieldProperty) => {
    //     let updatedFields = [...fields];
    //     let index = fields.findIndex((field) => field._id === fieldId);

    //     updatedFields[index][fieldProperty] = event.target.checked;
    //     setFields([...updatedFields]);

    //     const valueChanged = initialFields[index][fieldProperty] !== event.target.checked;

    //     if (valueChanged) {
    //         setSelectedFields((prevSelectedFields) => ({
    //             ...prevSelectedFields,
    //             [fieldId]: event.target.checked,
    //         }));
    //     } else {
    //         setSelectedFields((prevSelectedFields) => {
    //             const { [fieldId]: omit, ...rest } = prevSelectedFields;
    //             return rest;
    //         });
    //     }
    // };

    const handleUpdateTableFields = async () => {
        try {
            setIsLoading(true);

            const updates = Object.entries(selectedFields)?.map(
                ([fieldId, isTableField]) => ({
                    fieldId: fieldId,
                    isTableField,
                })
            );

            await putApi("api/custom-field/change-table-fields/", {
                moduleId,
                updates,
            });

            setSelectedFields({});
            setAction((pre) => !pre);
        } catch (error) {
            console.error(error);
        } finally {
            setIsLoading(false);
        }
    };

    const handleUpdateTableViewField = async (values) => {
        try {
            setIsLoading(true);
            await putApi("api/custom-field/change-view-fields/", {
                moduleId,
                values,
            });

            setAction((pre) => !pre);
        } catch (error) {
            console.error(error);
        } finally {
            setIsLoading(false);
        }
    };

    const fetchData = async () => {
        setIsLoading(true);

        let responseAllData = await getApi(`api/custom-field`);
        setAllModulesData(responseAllData?.data);

        if (moduleName) {
            let response = await getApi(`api/custom-field/?moduleName=${moduleName}`);
            let fieldsData = response?.data[0]?.fields;
            setFields(fieldsData);
            setInitialFields(JSON.parse(JSON.stringify(fieldsData)));
        }

        setIsLoading(false);
    };

    useEffect(() => {
        if (fetchData) fetchData();
    }, [moduleName, action]);

    return (
        <>
            <Card>
                <Flex justifyContent={"space-between"} alignItems={"center"}>
                    <Box>
                        <Text color={"secondaryGray.900"} fontSize="22px" fontWeight="700">
                            {moduleName ? `${moduleName} Fields` : "Select Module"}
                        </Text>
                    </Box>
                    <Box>
                        <Flex>
                            {!isLoading && (
                                <Menu>
                                    <MenuButton
                                        as={Button}
                                        size="sm"
                                        rightIcon={<ChevronDownIcon />}
                                        variant="outline"
                                    >
                                        {moduleName ? moduleName : "Select Module"}
                                    </MenuButton>
                                    <MenuList minWidth={"10rem"}>
                                        <MenuItem
                                            onClick={() => {
                                                setModuleName("");
                                                setModuleId("");
                                            }}
                                        >
                                            Select Module
                                        </MenuItem>
                                        {allModulesData?.map((item, id) => (
                                            <MenuItem
                                                key={id}
                                                onClick={() => {
                                                    setModuleName(item.moduleName);
                                                    setModuleId(item._id);
                                                }}
                                            >
                                                {item.moduleName}
                                            </MenuItem>
                                        ))}
                                    </MenuList>
                                </Menu>
                            )}
                            <Button
                                onClick={() => navigate("/admin-setting")}
                                variant="brand"
                                size="sm"
                                leftIcon={<IoIosArrowBack />}
                                ml={2}
                            >
                                Back
                            </Button>
                        </Flex>
                    </Box>
                </Flex>

                {isLoading ? (
                    <Flex
                        justifyContent={"center"}
                        alignItems={"center"}
                        width="100%"
                        color={textColor}
                        fontSize="sm"
                        fontWeight="700"
                    >
                        <Spinner />
                    </Flex>
                ) : (
                    <>
                        {moduleName ? (
                            <>
                                {" "}
                                <Grid templateColumns="repeat(12, 1fr)" gap={3} mt={5}>
                                    {fields &&
                                        fields?.map((item, i) => (
                                            <GridItem colSpan={{ base: 12, md: 6 }} key={item._id}>
                                                <Box className="CustomFieldName">
                                                    <Flex
                                                        alignItems="center"
                                                        width="100%"
                                                        size="sm"
                                                        colorScheme="gray"
                                                        ms="4px"
                                                        mt={4}
                                                        fontSize="md"
                                                        fontWeight="500"
                                                        mb="8px"
                                                        justifyContent="space-between"
                                                    >
                                                        <Flex alignItems="center">
                                                            <Checkbox
                                                                colorScheme="brandScheme"
                                                                value={item?.isTableField}
                                                                isChecked={item?.isTableField}
                                                                onChange={(event) => handleCheckboxChange(event, item?._id, 'isTableField')}
                                                                // onChange={(event) =>
                                                                //     handleCheckboxChange(event, item?._id)
                                                                // }
                                                                me="10px"
                                                            />
                                                            {item?.label}
                                                        </Flex>
                                                        <div>
                                                            {item?.isTableField && (
                                                                <Menu isLazy>
                                                                    <MenuButton>
                                                                        <BsThreeDots />
                                                                    </MenuButton>
                                                                    <MenuList minW={"fit-content"} zIndex={2}>
                                                                        {/* <MenuItem
                                                                            onClick={() => console.log(true)}
                                                                            width={"165px"}
                                                                        > */}
                                                                        <Flex alignItems="center" m={2}>
                                                                            <Checkbox
                                                                                colorScheme="brandScheme"
                                                                                value={item?.isView}
                                                                                isChecked={item?.isView}
                                                                                onChange={(event) => handleCheckboxChange(event, item?._id, 'isView')}
                                                                                title="View"
                                                                                me="10px"
                                                                            />{" "}
                                                                            Open View
                                                                        </Flex>
                                                                        {/* </MenuItem> */}
                                                                    </MenuList>
                                                                </Menu>
                                                            )}
                                                        </div>
                                                    </Flex>
                                                </Box>
                                            </GridItem>
                                        ))}
                                </Grid>
                                <Flex Flex justifyContent={"end"} mt="5">
                                    {Object.keys(selectedFields)?.length > 0 && (
                                        <Button
                                            colorScheme="brand"
                                            mr={2}
                                            onClick={() => handleUpdateTableFields()}
                                            size="sm"
                                        >
                                            Update
                                        </Button>
                                    )}
                                </Flex>
                            </>
                        ) : (
                            <Text
                                textAlign={"center"}
                                width="100%"
                                color={"gray.500"}
                                fontSize="sm"
                                my="7"
                                fontWeight="700"
                            >
                                -- Please Select Module --
                            </Text>
                        )}
                    </>
                )}
            </Card>
        </>
    );
};

export default Index;

================
File: Client/src/views/admin/task/components/AddEdit.js
================
import { CloseIcon } from '@chakra-ui/icons';
import { Button, Checkbox, Flex, FormLabel, Grid, GridItem, IconButton, Input, Modal, ModalBody, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Radio, RadioGroup, Select, Stack, Text, Textarea } from '@chakra-ui/react';
import ContactModel from "components/commonTableModel/ContactModel";
import LeadModel from "components/commonTableModel/LeadModel";
import Spinner from 'components/spinner/Spinner';
import { useFormik } from 'formik';
import { useEffect, useState } from 'react';
import { LiaMousePointerSolid } from 'react-icons/lia';
import { TaskSchema } from 'schema';
import { getApi, postApi } from 'services/api';
import moment from 'moment';
import { putApi } from 'services/api';
import dayjs from 'dayjs';
import { useSelector } from 'react-redux';
import { HasAccess } from "../../../../redux/accessUtils";

const AddEdit = (props) => {
    const { onClose, isOpen, fetchData, userAction, setAction, id, view, data } = props
    const [isChecked, setIsChecked] = useState(false);
    const userId = JSON.parse(localStorage.getItem('user'))._id
    const [assignToLeadData, setAssignToLeadData] = useState([]);
    const [assignToContactData, setAssignToContactData] = useState([]);
    const user = JSON.parse(localStorage.getItem("user"))
    const [isLoding, setIsLoding] = useState(false)
    const [contactModelOpen, setContactModel] = useState(false);
    const [leadModelOpen, setLeadModel] = useState(false);
    const leadData = useSelector((state) => state?.leadData?.data);


    const today = new Date().toISOString().split('T')[0];
    const todayTime = new Date().toISOString().split('.')[0];

    const [leadAccess, contactAccess] = HasAccess(['Leads', 'Contacts']);

    const contactData = useSelector((state) => state?.contactData?.data)

    const initialValues = {
        title: '',
        category: props.leadContect === 'contactView' ? 'Contact' : props.leadContect === 'leadView' ? 'Lead' : 'None',
        description: '',
        notes: '',
        assignTo: props.leadContect === 'contactView' && id ? id : '',
        assignToLead: props.leadContect === 'leadView' && id ? id : '',
        reminder: '',
        start: '',
        end: '',
        backgroundColor: '',
        borderColor: '#ffffff',
        textColor: '',
        allDay: false,
        display: '',
        url: '',
        createBy: userId,
    }

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: TaskSchema,
        enableReinitialize: true,
        onSubmit: (values, { resetForm }) => {
            AddData();
            resetForm()
        },
    });

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik

    const AddData = async () => {
        if (userAction === "add") {
            try {
                setIsLoding(true)

                if (values?.start) {
                    values.start = values?.allDay ? moment(values?.start).format('YYYY-MM-DD') : moment(values?.start).format('YYYY-MM-DD HH:mm');
                }
                if (values?.end) {
                    values.end = values?.allDay ? moment(values?.end).format('YYYY-MM-DD') : moment(values?.end).format('YYYY-MM-DD HH:mm');
                }

                let response = await postApi('api/task/add', values)
                if (response.status === 200) {
                    formik.resetForm()
                    onClose();
                    fetchData(1)
                }
            } catch (e) {
                console.log(e);
            }
            finally {
                setIsLoding(false)
            }
        } else if (userAction === "edit") {
            try {
                setIsLoding(true)

                if (values?.start) {
                    values.start = values?.allDay ? moment(values?.start).format('YYYY-MM-DD') : moment(values?.start).format('YYYY-MM-DD HH:mm');
                }
                if (values?.end) {
                    values.end = values?.allDay ? moment(values?.end).format('YYYY-MM-DD') : moment(values?.end).format('YYYY-MM-DD HH:mm');
                }

                let response = await putApi(`api/task/edit/${id}`, values)
                if (response.status === 200) {
                    formik.resetForm()
                    onClose();
                    setAction((pre) => !pre)
                }
            } catch (e) {
                console.log(e);
            }
            finally {
                setIsLoding(false)
            }
        }
    };
    const fetchTaskData = async () => {
        if (id) {
            try {
                setIsLoding(true)
                let result = await getApi('api/task/view/', id)
                setFieldValue('title', result?.data?.title)
                setFieldValue('category', result?.data?.category)
                setFieldValue('description', result?.data?.description)
                setFieldValue('notes', result?.data?.notes)
                setFieldValue('assignTo', result?.data?.assignTo)
                setFieldValue('reminder', result?.data?.reminder)
                setFieldValue('start', result?.data?.start)
                setFieldValue('end', result?.data?.end)
                setFieldValue('backgroundColor', result?.data?.backgroundColor)
                setFieldValue('borderColor', result?.data?.borderColor)
                setFieldValue('textColor', result?.data?.textColor)
                setFieldValue('display', result?.data?.display)
                setFieldValue('url', result?.data?.url)
                setFieldValue("status", result?.data?.status)
                setFieldValue('assignToLead', result?.data?.assignToLead)
                // setFieldValue('allDay', result?.data?.allDay === 'Yes' ? 'Yes' : 'No')
                setFieldValue('allDay', result?.data?.allDay)

                // setIsChecked(result?.data?.allDay === 'Yes' ? true : false)
            }
            catch (e) {
                console.log(e);
            }
            finally {
                setIsLoding(false)
            }
        } else if (data) {
            setFieldValue('title', data?.title)
            setFieldValue('category', data?.category)
            setFieldValue('description', data?.description)
            setFieldValue('notes', data?.notes)
            setFieldValue('assignTo', data?.assignTo)
            setFieldValue('reminder', data?.reminder)
            setFieldValue('start', data?.start)
            setFieldValue('end', data?.end)
            setFieldValue('backgroundColor', data?.backgroundColor)
            setFieldValue('borderColor', data?.borderColor)
            setFieldValue('textColor', data?.textColor)
            setFieldValue('display', data?.display)
            setFieldValue('url', data?.url)
            setFieldValue("status", data?.status)
            setFieldValue('assignToLead', data?.assignToLead)
            setFieldValue('allDay', data?.allDay === 'Yes' ? 'Yes' : 'No')
            setFieldValue('allDay', data?.allDay)

            // setIsChecked(data?.allDay === 'Yes' ? true : false)
        }
    }

    useEffect(async () => {
        values.start = props?.date
        if (view === true) {
            if (values.category === "Contact" && assignToContactData.length <= 0) {
                setAssignToContactData(contactData)
                // result = await getApi(user.role === 'superAdmin' ? 'api/contact/' : `api/contact/?createBy=${user._id}`)
                // setAssignToContactData(result?.data)
            } else if (values.category === "Lead" && assignToLeadData.length <= 0) {
                setAssignToLeadData(leadData)
            }
        } else {
            try {
                let result
                if (values.category === "Contact" && assignToContactData.length <= 0) {
                    result = await getApi(user.role === 'superAdmin' ? 'api/contact/' : `api/contact/?createBy=${user._id}`)
                    setAssignToContactData(result?.data)
                } else if (values.category === "Lead" && assignToLeadData.length <= 0) {
                    result = await getApi(user.role === 'superAdmin' ? 'api/lead/' : `api/lead/?createBy=${user._id}`);
                    setAssignToLeadData(result?.data)
                }
            }
            catch (e) {
                console.log(e);
            }
        }
    }, [props, values.category])
    useEffect(() => {
        if (userAction === "edit" || data) {
            fetchTaskData()
        }
        fetchTaskData()

    }, [userAction, id, data])

    return (
        <Modal isOpen={isOpen} size={'xl'} >
            {!props.from && <ModalOverlay />}
            <ModalContent overflowY={"auto"} height={"600px"}>
                <ModalHeader justifyContent='space-between' display='flex' >
                    {
                        userAction === "add" ? "Create Task" : "Edit Task"
                    }

                    <IconButton onClick={() => onClose(false)} icon={<CloseIcon />} />
                </ModalHeader>
                <ModalBody overflowY={"auto"} height={"700px"}>
                    {/* Contact Model  */}
                    <ContactModel isOpen={contactModelOpen} data={assignToContactData} onClose={setContactModel} values={values} fieldName='assignTo' setFieldValue={setFieldValue} />
                    {/* Lead Model  */}
                    <LeadModel isOpen={leadModelOpen} data={assignToLeadData} onClose={setLeadModel} values={values} fieldName='assignToLead' setFieldValue={setFieldValue} />
                    {isLoding ?
                        <Flex justifyContent={'center'} alignItems={'center'} width="100%" >
                            <Spinner />
                        </Flex>
                        :
                        <Grid templateColumns="repeat(12, 1fr)" gap={3} >
                            <GridItem colSpan={{ base: 12, md: 6 }} >
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Title<Text color={"red"}>*</Text>
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    value={values.title}
                                    name="title"
                                    placeholder='Title'
                                    fontWeight='500'
                                    borderColor={errors?.title && touched?.title ? "red.300" : null}
                                />
                                <Text mb='10px' color={'red'} fontSize='sm'> {errors.title && touched.title && errors.title}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }} >
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Related
                                </FormLabel>
                                <RadioGroup onChange={(e) => { setFieldValue('category', e); setFieldValue('assignTo', null); setFieldValue('assignToLead', null); }} value={values.category}>
                                    <Stack direction='row'>
                                        <Stack direction='row'>
                                            <Radio value='None'>None</Radio>
                                            {props.leadContect === 'contactView' && <Radio value='Contact'>Contact</Radio>}
                                            {props.leadContect === 'leadView' && <Radio value='Lead'>Lead</Radio>}
                                            {!props.leadContect &&
                                                <>
                                                    {(user?.role === "superAdmin" || contactAccess?.create) && <Radio value='Contact'>Contact</Radio>}
                                                    {(user?.role === "superAdmin" || leadAccess?.create) && <Radio value='Lead'>Lead</Radio>}
                                                </>
                                            }
                                        </Stack>

                                    </Stack>
                                </RadioGroup>
                                <Text mb='10px' color={'red'}> {errors.category && touched.category && errors.category}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: values.category === "None" ? 12 : 6 }} >
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Description
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    value={values.description}
                                    name="description"
                                    placeholder='Description'
                                    fontWeight='500'
                                    borderColor={errors?.description && touched?.description ? "red.300" : null}
                                />
                                <Text mb='10px' color={'red'}> {errors.description && touched.description && errors.description}</Text>
                            </GridItem>
                            {values.category === "Contact" ?
                                <>
                                    <GridItem colSpan={{ base: 12, md: 6 }} >
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                            Assign To  Contact
                                        </FormLabel>
                                        <Flex justifyContent={'space-between'}>
                                            <Select
                                                value={values.assignTo}
                                                name="assignTo"
                                                onChange={handleChange}
                                                mb={errors.assignTo && touched.assignTo ? undefined : '10px'}
                                                fontWeight='500'
                                                placeholder={'Assign To'}
                                                borderColor={errors.assignTo && touched.assignTo ? "red.300" : null}
                                            >
                                                {assignToContactData?.map((item) => {
                                                    return <option value={item._id} key={item._id}>{values.category === 'Contact' ? `${item.firstName} ${item.lastName}` : item.leadName}</option>
                                                })}
                                            </Select>
                                            <IconButton onClick={() => setContactModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />
                                        </Flex>
                                        <Text mb='10px' color={'red'}> {errors.assignTo && touched.assignTo && errors.assignTo}</Text>
                                    </GridItem>
                                </>
                                : values.category === "Lead" ?
                                    <>
                                        <GridItem colSpan={{ base: 12, md: 6 }} >
                                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                                Assign To Lead
                                            </FormLabel>
                                            <Flex justifyContent={'space-between'}>
                                                <Select
                                                    value={values.assignToLead}
                                                    name="assignToLead"
                                                    onChange={handleChange}
                                                    mb={errors.assignToLead && touched.assignToLead ? undefined : '10px'}
                                                    fontWeight='500'
                                                    placeholder={'Assign To'}
                                                    borderColor={errors.assignToLead && touched.assignToLead ? "red.300" : null}
                                                >
                                                    {assignToLeadData?.map((item) => {
                                                        return <option value={item._id} key={item._id}>{item.leadName}</option>
                                                    })}
                                                </Select>
                                                <IconButton onClick={() => setLeadModel(true)} ml={2} fontSize='25px' icon={<LiaMousePointerSolid />} />
                                            </Flex>
                                            <Text mb='10px' color={'red'}> {errors.assignToLead && touched.assignToLead && errors.assignToLead}</Text>
                                        </GridItem>
                                    </>
                                    : ''
                            }
                            <GridItem colSpan={{ base: 12 }} >
                                <Checkbox isChecked={values?.allDay} name='allDay'
                                    onChange={handleChange}
                                // onChange={(e) => {
                                //     const target = e.target.checked;
                                //     // setFieldValue('allDay', e.target.checked === true ? 'Yes' : 'No');
                                //     setIsChecked(target);
                                // }}
                                >
                                    All Day Task ?
                                </Checkbox>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }} >
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Start Date<Text color={"red"}>*</Text>
                                </FormLabel>
                                <Input
                                    type={values?.allDay ? 'date' : 'datetime-local'}
                                    fontSize='sm'
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    min={values?.allDay ? dayjs(today).format('YYYY-MM-DD') : dayjs(todayTime).format('YYYY-MM-DD HH:mm')}
                                    value={values?.allDay ? values?.start && dayjs(values?.start).format('YYYY-MM-DD') || null : values?.start && dayjs(values?.start).format('YYYY-MM-DD HH:mm') || null}
                                    name="start"
                                    fontWeight='500'
                                    borderColor={errors?.start && touched?.start ? "red.300" : null}
                                />
                                <Text mb='10px' fontSize='sm' color={'red'}> {errors.start && touched.start && errors.start}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }} >
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    End Date
                                </FormLabel>
                                <Input
                                    type={values?.allDay ? 'date' : 'datetime-local'}
                                    min={values.start}
                                    fontSize='sm'
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    value={values?.allDay ? values?.end && dayjs(values?.end).format('YYYY-MM-DD') || null : values?.end && dayjs(values?.end).format('YYYY-MM-DD HH:mm') || null}
                                    name="end"
                                    fontWeight='500'
                                    borderColor={errors?.end && touched?.end ? "red.300" : null}
                                />
                                <Text mb='10px' color={'red'}> {errors.end && touched.end && errors.end}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, sm: 4 }} >
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Background-Color
                                </FormLabel>
                                <Input
                                    type='color'
                                    fontSize='sm'
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    value={values.backgroundColor}
                                    name="backgroundColor"
                                    fontWeight='500'
                                    borderColor={errors?.backgroundColor && touched?.backgroundColor ? "red.300" : null}
                                />
                                <Text mb='10px' color={'red'}> {errors.backgroundColor && touched.backgroundColor && errors.backgroundColor}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, sm: 4 }} >
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Border-Color
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    type='color'
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    value={values.borderColor}
                                    name="borderColor"
                                    placeholder='borderColor'
                                    fontWeight='500'
                                    borderColor={errors?.borderColor && touched?.borderColor ? "red.300" : null}
                                />
                                <Text mb='10px' color={'red'}> {errors.borderColor && touched.borderColor && errors.borderColor}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, sm: 4 }} >
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Text-Color
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    type='color'
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    value={values.textColor}
                                    name="textColor"
                                    placeholder='textColor'
                                    fontWeight='500'
                                    textColor={errors?.textColor && touched?.textColor ? "red.300" : null}
                                />
                                <Text mb='10px' color={'red'}> {errors.textColor && touched.textColor && errors.textColor}</Text>
                            </GridItem>


                            <GridItem colSpan={{ base: 12, md: 6 }} >
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Url
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    value={values.url}
                                    name="url"
                                    placeholder='Enter url'
                                    fontWeight='500'
                                    borderColor={errors?.url && touched?.url ? "red.300" : null}
                                />
                                <Text mb='10px' color={'red'}> {errors.url && touched.url && errors.url}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }} >
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Status
                                </FormLabel>
                                <Select
                                    onChange={(e) => setFieldValue("status", e.target.value)}
                                    value={values?.status}
                                    style={{ fontSize: "14px" }}>
                                    <option value='todo'>Todo</option>
                                    <option value='onHold'>On Hold</option>
                                    <option value='pending'>Pending</option>
                                    <option value='inProgress'>In Progress</option>
                                    <option value='completed'>Completed</option>
                                </Select>
                            </GridItem>
                            <GridItem colSpan={{ base: 12 }} >
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Notes
                                </FormLabel>
                                <Textarea
                                    resize={'none'}
                                    fontSize='sm'
                                    onChange={handleChange}
                                    onBlur={handleBlur}
                                    value={values.notes}
                                    name="notes"
                                    placeholder='Notes'
                                    fontWeight='500'
                                    borderColor={errors?.notes && touched?.notes ? "red.300" : null}
                                />
                                <Text mb='10px' color={'red'}> {errors.notes && touched.notes && errors.notes}</Text>
                            </GridItem>
                        </Grid>
                    }
                </ModalBody>
                <ModalFooter>
                    <Button size="sm" variant='brand' onClick={handleSubmit}>{userAction === "add" ? "Save" : "Update"}</Button>
                    <Button type="reset" sx={{
                        marginLeft: 2,
                        textTransform: "capitalize",
                    }} variant="outline"
                        colorScheme="red" size="sm" ml={2} onClick={() => { onClose(false); resetForm(); }}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal >
    )
}

export default AddEdit

================
File: Client/src/views/admin/task/components/TaskAdvanceSearch.js
================
import React from 'react';
import { useFormik } from "formik";
import * as yup from "yup";
import { Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Grid, GridItem, Input, FormLabel, Select, Text, Button, } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import { setSearchValue, setGetTagValues, getSearchData } from '../../../../redux/slices/advanceSearchSlice';
import { useDispatch, useSelector } from 'react-redux';


const TaskAdvanceSearch = (props) => {
    const { state, allData, advanceSearch, setAdvanceSearch, isLoding, setSearchedData, setDisplaySearchData, setSearchbox } = props;
    const dispatch = useDispatch()
    const searchResult = useSelector((state) => state?.advanceSearchData?.searchResult)
    const initialValues = {
        title: '',
        category: '',
        start: '',
        end: '',
        status: '',
        leadAddress: '',
        assignToName: '',
        fromLeadScore: '',
        toLeadScore: ''
    }
    const validationSchema = yup.object({
        title: yup.string(),
        category: yup.string(),
        start: yup.date(),
        end: yup.date(),
        leadAddress: yup.string(),
        assignToName: yup.string(),
        fromLeadScore: yup.number().min(0, "From Lead Score is invalid"),
        toLeadScore: yup.number().min(yup.ref('fromLeadScore'), "To Lead Score must be greater than or equal to From Lead Score")
    });
    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: validationSchema,
        onSubmit: (values, { resetForm }) => {

            dispatch(setSearchValue(values))
            dispatch(getSearchData({ values: values, allData: allData, type: 'Tasks' }))
            const getValue = [
                {
                    name: ["title"],
                    value: values.title
                },
                {
                    name: ["status"],
                    value: values.status
                },
                {
                    name: ["category"],
                    value: values.category
                },
                {
                    name: ["assignToName"],
                    value: values.assignToName
                },
                {
                    name: ["start"],
                    value: values.start
                },
                {
                    name: ["end"],
                    value: values.end
                }
            ]

            dispatch(setGetTagValues(getValue.filter(item => item.value)))

            setSearchedData(searchResult);
            setDisplaySearchData(true);
            setAdvanceSearch(false);
            resetForm();
            setSearchbox('');
        }
    });

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm, dirty } = formik;

    return (
        <>
            <Modal onClose={() => { setAdvanceSearch(false); resetForm() }} isOpen={advanceSearch} isCentered>
                <ModalOverlay />
                <ModalContent>
                    <ModalHeader>Advance Search</ModalHeader>
                    <ModalCloseButton onClick={() => { setAdvanceSearch(false); resetForm() }} />
                    <ModalBody>
                        <Grid templateColumns="repeat(12, 1fr)" mb={3} gap={2}>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Title
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.title}
                                    name="title"
                                    placeholder='Enter Title'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.title && touched.title && errors.title}</Text>

                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Status
                                </FormLabel>
                                <Select
                                    value={values?.status}
                                    fontSize='sm'
                                    name="status"
                                    onChange={handleChange}
                                    fontWeight='500'
                                >
                                    {!state && <option value=''>Select Status</option>}
                                    <option value='completed'>Completed</option>
                                    <option value='todo'>Todo</option>
                                    <option value='pending'>Pending</option>
                                    <option value='inProgress'>In Progress</option>
                                    <option value='onHold'>On Hold</option>
                                </Select>
                                <Text mb='10px' color={'red'}> {errors.status && touched.status && errors.status}</Text>

                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Related
                                </FormLabel>
                                <Select
                                    value={values?.category}
                                    fontSize='sm'
                                    name="category"
                                    onChange={handleChange}
                                    fontWeight='500'
                                    placeholder={'Select Category'}
                                >
                                    <option value='contact'>Contact</option>
                                    <option value='lead'>Lead</option>
                                    <option value='none'>None</option>
                                </Select>

                                <Text mb='10px' color={'red'}> {errors.category && touched.category && errors.category}</Text>

                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Assign To
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.assignToName}
                                    name="assignToName"
                                    placeholder='Enter Assign To'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.assignToName && touched.assignToName && errors.assignToName}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2} >
                                    Start Date
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.start}
                                    name="start"
                                    type="date"
                                    placeholder='Enter Start Date'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.start && touched.start && errors.start}</Text>

                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    End Date
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    type="date"
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.end}
                                    min={values?.start}
                                    name="end"
                                    placeholder='Enter  End Date'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.end && touched.end && errors.end}</Text>

                            </GridItem>
                        </Grid>
                    </ModalBody>
                    <ModalFooter>
                        <Button size="sm" variant="brand" mr={2} onClick={handleSubmit} disabled={isLoding || !dirty ? true : false} >{isLoding ? <Spinner /> : 'Search'}</Button>
                        <Button size="sm" variant="outline" colorScheme="red" onClick={() => resetForm()}>Clear</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        </>
    )
}

export default TaskAdvanceSearch

================
File: Client/src/views/admin/task/components/taskView.js
================
import { Button, Grid, GridItem, Flex, IconButton, Text, Menu, MenuButton, MenuDivider, MenuItem, MenuList, useDisclosure, Box, Heading, Input } from '@chakra-ui/react'
import { AddIcon, ChevronDownIcon, DeleteIcon, EditIcon } from "@chakra-ui/icons";
import React from 'react'
import moment from 'moment'
import { Link, useNavigate, useParams } from 'react-router-dom'
import { BiLink } from 'react-icons/bi'
import { useEffect } from 'react'
import { useState } from 'react'
import { getApi } from 'services/api'
import Card from 'components/card/Card'
import { IoIosArrowBack } from "react-icons/io";
import { HasAccess } from '../../../../redux/accessUtils';
import { HSeparator } from 'components/separator/Separator';
import AddEdit from './AddEdit';
import CommonDeleteModel from 'components/commonDeleteModel';
import { deleteManyApi } from 'services/api';
import { FaFilePdf } from "react-icons/fa";
import html2pdf from "html2pdf.js";
import { TaskSchema } from 'schema';
import { useFormik } from 'formik';
import { putApi } from 'services/api';
import dayjs from 'dayjs';

const TaskView = (props) => {
    const params = useParams()
    const { id } = params
    const user = JSON.parse(localStorage.getItem("user"))

    const [permission, contactAccess, leadAccess] = HasAccess(['Tasks', 'Contacts', 'Leads'])

    const [data, setData] = useState()
    const { onOpen, onClose } = useDisclosure()
    const [edit, setEdit] = useState(false);
    const [deleteModel, setDelete] = useState(false);
    const [deleteManyModel, setDeleteManyModel] = useState(false);
    const [loading, setLoading] = useState(false)
    const navigate = useNavigate()
    const [editableField, setEditableField] = useState(null);
    const today = new Date().toISOString().split('T')[0];
    const todayTime = new Date().toISOString().split('.')[0];
    const fetchViewData = async () => {
        if (id) {
            let result = await getApi('api/task/view/', id?.event ? id?.event?._def?.extendedProps?._id : id);
            setData(result?.data);
        }
    }
    const generatePDF = () => {
        setLoading(true)
        const element = document.getElementById("reports");
        const hideBtn = document.getElementById("hide-btn");

        if (element) {
            hideBtn.style.display = 'none';
            html2pdf()
                .from(element)
                .set({
                    margin: [0, 0, 0, 0],
                    filename: `Task_Details_${moment().format("DD-MM-YYYY")}.pdf`,
                    image: { type: "jpeg", quality: 0.98 },
                    html2canvas: { scale: 2, useCORS: true, allowTaint: true },
                    jsPDF: { unit: "in", format: "letter", orientation: "portrait" },
                })
                .save().then(() => {
                    setLoading(false)
                    hideBtn.style.display = '';
                })
            // }, 500);
        } else {
            console.error("Element with ID 'reports' not found.");
            setLoading(false)
        }
    };
    const handleDeleteTask = async (ids) => {
        try {
            let response = await deleteManyApi('api/task/deleteMany', ids)
            if (response.status === 200) {
                navigate('/task')
                setDeleteManyModel(false)
            }
        } catch (error) {
            console.log(error)
        }

    }

    const initialValues = {
        title: data?.title,
        description: data?.description,
        notes: data?.notes,
        start: data?.start,
        end: data?.end,
    }

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: TaskSchema,
        enableReinitialize: true,
        onSubmit: async (values, { resetForm }) => {
            let response = await putApi(`api/task/edit/${id}`, values)
            if (response.status === 200) {
                setEditableField(null);
                fetchViewData()
            }
        },
    });
    const handleDoubleClick = (fieldName, value) => {
        formik.setFieldValue(fieldName, value);
        setEditableField(fieldName)
    };

    const handleBlur = (e) => {
        formik.handleSubmit();
    };
    useEffect(() => {
        fetchViewData()
    }, [id, edit])

    const handleClick = () => {
        onOpen()
    }
    return (
        <div>
            <Grid templateColumns="repeat(4, 1fr)" gap={3} id="reports">
                <GridItem colSpan={{ base: 4 }}>
                    <Heading size="lg" m={3}>
                        {data?.title || ""}
                    </Heading>
                </GridItem>
                <GridItem colSpan={{ base: 4 }}>
                    <Card >
                        <Grid gap={4}>
                            <GridItem colSpan={2}>
                                <Box>
                                    <Box display={"flex"} justifyContent={"space-between"} >
                                        <Heading size="md" mb={3}>
                                            Task Details
                                        </Heading>
                                        <Flex id="hide-btn" >
                                            <Menu>
                                                {(user.role === 'superAdmin' || permission?.create || permission?.update || permission?.delete) && <MenuButton variant="outline" colorScheme='blackAlpha' size="sm" va mr={2.5} as={Button} rightIcon={<ChevronDownIcon />}>
                                                    Actions
                                                </MenuButton>}
                                                <MenuDivider />
                                                <MenuList minWidth={2}>
                                                    {(user.role === 'superAdmin' || permission?.create) && <MenuItem onClick={() => handleClick()} alignItems={'start'} color={'blue'} icon={<AddIcon />}>Add</MenuItem>}
                                                    {(user.role === 'superAdmin' || permission?.update) && <MenuItem onClick={() => setEdit(true)} alignItems={'start'} icon={<EditIcon />}>Edit</MenuItem>}
                                                    <MenuItem onClick={generatePDF} alignItems={"start"} icon={<FaFilePdf />} display={"flex"} style={{ alignItems: "center" }}>Print as PDF</MenuItem >

                                                    {(user.role === 'superAdmin' || permission?.delete) && <>
                                                        <MenuDivider />
                                                        <MenuItem alignItems={'start'} onClick={() => setDeleteManyModel(true)} color={'red'} icon={<DeleteIcon />}>Delete</MenuItem>
                                                    </>}
                                                </MenuList>
                                            </Menu>
                                            <Button leftIcon={<IoIosArrowBack />} size='sm' variant="brand" onClick={() => navigate(-1)} >
                                                Back
                                            </Button>
                                        </Flex>
                                    </Box>
                                    <HSeparator />
                                </Box>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Task Title </Text>
                                {
                                    editableField === "title" ?
                                        <>
                                            <Input
                                                id="text"
                                                name="title"
                                                type="text"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.title}
                                                borderColor={formik?.errors?.title && formik?.touched?.title ? "red.300" : null}
                                                autoFocus
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.title && formik?.touched.title && formik?.errors.title}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("title", data?.title)}>{data?.title ? data?.title : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Task Related To </Text>
                                <Text>{data?.category ? data?.category : ' - '}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Task start </Text>
                                {
                                    editableField === "start" ?
                                        <>
                                            <Input
                                                name="start"
                                                type={data?.allDay ? 'date' : 'datetime-local'}
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={data.allDay === true
                                                    ? moment(formik.values.start).format('YYYY-MM-DD')
                                                    : moment(formik.values.start).format('YYYY-MM-DD HH:mm A')}
                                                autoFocus
                                                borderColor={formik?.errors?.start && formik?.touched?.start ? "red.300" : null}
                                                min={data?.allDay ? dayjs(today).format('YYYY-MM-DD') : dayjs(todayTime).format('YYYY-MM-DD HH:mm')}
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.start && formik?.touched.start && formik?.errors.start}</Text>

                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("start", data?.start)}>
                                            {data && data?.start ? (
                                                data.allDay === true
                                                    ? moment(data.start).format('DD-MM-YYYY')
                                                    : moment(data.start).format('DD-MM-YYYY HH:mm A')
                                            ) : (
                                                "-"
                                            )}
                                        </Text>
                                }

                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Task end  </Text>
                                {
                                    editableField === "end" ?
                                        <>
                                            <Input
                                                name="end"
                                                type={data?.allDay ? 'date' : 'datetime-local'}
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                min={formik.values.start}
                                                value={data.allDay === true
                                                    ? moment(formik.values.end).format('YYYY-MM-DD')
                                                    : moment(formik.values.end).format('YYYY-MM-DD HH:mm A')}
                                                autoFocus
                                                borderColor={formik.errors?.end && formik.touched?.end ? "red.300" : null}

                                            />
                                            <Text mb='10px' color={'red'}> {formik.errors.end && formik.touched.end && formik.errors.end}</Text>
                                        </>

                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("end", data?.end)}>{data?.allDay === true ? moment(data?.end).format('DD-MM-YYYY') : moment(data?.end).format('DD-MM-YYYY HH:mm A')}</Text>

                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Task Link </Text>
                                {data?.url ?
                                    <a target='_blank' href={data?.url}>
                                        <IconButton borderRadius="10px" size="md" icon={<BiLink />} />
                                    </a> : '-'
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Task reminder </Text>
                                <Text>{data?.reminder ? data?.reminder : ' - '}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Assign To  </Text>
                                <Link to={data?.assignTo ? contactAccess?.view && `/contactView/${data?.assignTo}` : leadAccess?.view && `/leadView/${data?.assignToLead}`}>
                                    <Text color={(data?.category === 'contact' && (contactAccess?.view || user?.role === 'superAdmin')) ? 'brand.600' : (leadAccess?.view || user?.role === 'superAdmin' && data?.category === 'lead') ? 'brand.600' : 'blackAlpha.900'} sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}>{data?.assignToName ? data?.assignToName : ' - '}</Text>
                                </Link>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Task createBy </Text>
                                <Text>{data?.createByName ? data?.createByName : ' - '}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 2 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Task Description</Text>
                                {
                                    editableField === "description" ?
                                        <>
                                            <Input
                                                id="text"
                                                name="description"
                                                type="text"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.description}
                                                autoFocus
                                                borderColor={formik?.errors?.description && formik?.touched?.description ? "red.300" : null}
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.description && formik?.touched.description && formik?.errors.description}</Text>
                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("description", data?.description)}>{data?.description ? data?.description : ' - '}</Text>
                                }
                            </GridItem>
                            <GridItem colSpan={{ base: 2 }} >
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Task notes </Text>
                                {
                                    editableField === "notes" ?
                                        <>
                                            <Input
                                                id="text"
                                                name="notes"
                                                type="text"
                                                onChange={formik.handleChange}
                                                onBlur={handleBlur}
                                                value={formik.values.notes}
                                                autoFocus
                                                borderColor={formik?.errors?.notes && formik?.touched?.notes ? "red.300" : null}
                                            />
                                            <Text mb='10px' color={'red'}> {formik?.errors.notes && formik?.touched.notes && formik?.errors.notes}</Text>

                                        </>
                                        :
                                        <Text onDoubleClick={() => handleDoubleClick("notes", data?.notes)}>{data?.notes ? data?.notes : ' - '}</Text>
                                }
                            </GridItem>
                        </Grid>
                    </Card>
                </GridItem>

            </Grid>
            {(permission?.update || permission?.delete || user?.role === 'superAdmin') && <Card mt={3}>
                <Grid templateColumns="repeat(6, 1fr)" gap={1}>
                    <GridItem colStart={6} >
                        <Flex justifyContent={"right"}>
                            {(permission?.update || user?.role === 'superAdmin') && <Button size="sm" onClick={() => setEdit(true)} leftIcon={<EditIcon />} mr={2.5} variant="outline" colorScheme="green">Edit</Button>}
                            {(permission?.delete || user?.role === 'superAdmin') && <Button size="sm" style={{ background: 'red.800' }} onClick={() => setDeleteManyModel(true)} leftIcon={<DeleteIcon />} colorScheme="red" >Delete</Button>}
                        </Flex>
                    </GridItem>
                </Grid>
            </Card>}
            <AddEdit isOpen={edit} onClose={() => setEdit(false)} viewClose={onClose} id={id?.event ? id?.event?._def?.extendedProps?._id : id} userAction={"edit"} />
            <CommonDeleteModel isOpen={deleteManyModel} onClose={() => setDeleteManyModel(false)} type='Task' handleDeleteData={handleDeleteTask} ids={[id]} />
        </div >
    )
}

export default TaskView

================
File: Client/src/views/admin/task/eventView.js
================
import { CloseIcon, DeleteIcon, EditIcon, ViewIcon } from '@chakra-ui/icons'
import { DrawerFooter, Flex, Grid, GridItem, IconButton, Modal, ModalBody, ModalContent, ModalHeader, ModalOverlay, Text } from '@chakra-ui/react'
import Spinner from "components/spinner/Spinner"
import moment from 'moment'
import { useEffect, useState } from 'react'
import { BiLink } from 'react-icons/bi'
import { Link } from 'react-router-dom'
import { getApi } from 'services/api'
import { useNavigate } from 'react-router-dom';
import AddEdit from './components/AddEdit'

const EventView = (props) => {
    const { onClose, isOpen, id, fetchData, setAction, action, access, contactAccess, leadAccess } = props
    const [data, setData] = useState()
    const [edit, setEdit] = useState(false);
    const [deleteModel, setDelete] = useState(false);
    const user = JSON.parse(localStorage.getItem("user"))
    const [isLoding, setIsLoding] = useState(false)
    const navigate = useNavigate()

    const fetchViewData = async () => {
        if (id) {
            setIsLoding(true)
            let result = await getApi('api/task/view/', id?.event ? id?.event?.id : id);
            setData(result?.data);
            setIsLoding(false)
        }
    }

    useEffect(() => {
        fetchViewData()
    }, [action, id])

    const handleViewOpen = () => {
        if (id?.event) {
            navigate(`/view/${id?.event?.id}`)
        }
        else {
            navigate(`/view/${id}`)
        }
    }
    return (
        <>
            <Modal isOpen={isOpen} size={'md'} isCentered>
                <ModalOverlay />
                <ModalContent>
                    <ModalHeader justifyContent='space-between' display='flex' >
                        Task
                        <IconButton onClick={() => onClose(false)} icon={<CloseIcon />} />
                    </ModalHeader>
                    {isLoding ?
                        <Flex justifyContent={'center'} alignItems={'center'} mb={30} width="100%" >
                            <Spinner />
                        </Flex> : <>
                            <ModalBody>
                                <Grid templateColumns="repeat(12, 1fr)" gap={3} >

                                    <GridItem colSpan={{ base: 12, md: 6 }} >
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Task Title </Text>
                                        <Text>{data?.title ? data?.title : ' - '}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12, md: 6 }} >
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Task Related To </Text>
                                        <Text>{data?.category ? data?.category : ' - '}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12, md: 6 }} >
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Task start </Text>
                                        <Text>{data?.start ? moment(data?.start).format('L LT') : ' - '}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12, md: 6 }} >
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Task end  </Text>
                                        <Text>{data?.end ? moment(data?.end).format('L LT') : moment(data?.start).format('L')}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12, md: 6 }} >
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Task Link </Text>
                                        {data?.url ?
                                            <a target='_blank' href={data?.url}>
                                                <IconButton borderRadius="10px" size="md" icon={<BiLink />} />
                                            </a> : '-'
                                        }
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12, md: 6 }} >
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Task reminder </Text>
                                        <Text>{data?.reminder ? data?.reminder : ' - '}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12, md: 6 }} >
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> assignment To  </Text>
                                        {data?.assignTo ?
                                            <Link to={contactAccess?.view && `/contactView/${data?.assignTo}`}>
                                                <Text color={contactAccess?.view ? 'blue.500' : 'blackAlpha.900'} sx={{ '&:hover': { color: contactAccess?.view ? 'blue.500' : 'blackAlpha.900', textDecoration: contactAccess?.view ? 'underline' : 'none' } }}>{data?.assignToName ? data?.assignToName : ' - '}</Text>
                                            </Link> : <Link to={leadAccess?.view && `/leadView/${data?.assignToLead}`}>
                                                <Text color={leadAccess?.view ? 'blue.500' : 'blackAlpha.900'} sx={{ '&:hover': { color: leadAccess?.view ? 'blue.500' : 'blackAlpha.900', textDecoration: leadAccess?.view ? 'underline' : 'none' } }}>{data?.assignToName ? data?.assignToName : ' - '}</Text>
                                            </Link>
                                        }
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12, md: 6 }} >
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Task createBy </Text>
                                        <Text>{data?.createByName ? data?.createByName : ' - '}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12 }} >
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Task Description</Text>
                                        <Text>{data?.description ? data?.description : ' - '}</Text>
                                    </GridItem>
                                    <GridItem colSpan={{ base: 12 }} >
                                        <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Task notes </Text>
                                        <Text>{data?.notes ? data?.notes : ' - '}</Text>
                                    </GridItem>
                                </Grid>

                            </ModalBody>
                            <DrawerFooter>
                                {(access?.view || user?.role === "superAdmin") && <IconButton variant='outline' colorScheme={'green'} onClick={() => handleViewOpen()} borderRadius="10px" size="md" icon={<ViewIcon />} />}
                                {(access?.update || user?.role === "superAdmin") && <IconButton variant='outline' onClick={() => setEdit(true)} ml={3} borderRadius="10px" size="md" icon={<EditIcon />} />}
                                {(access?.delete || user?.role === "superAdmin") && <IconButton colorScheme='red' onClick={() => setDelete(true)} ml={3} borderRadius="10px" size="md" icon={<DeleteIcon />} />}
                                <AddEdit isOpen={edit} fetchData={fetchData} onClose={() => setEdit(false)} userAction={"edit"} id={id} setAction={setAction} />
                                {/* <EditTask setAction={setAction} isOpen={edit} onClose={setEdit} viewClose={onClose} id={id?.event ? id?.event?.id : id} from="view" /> */}
                                {/* <DeleteTask fetchData={props.fetchData} isOpen={deleteModel} onClose={setDelete} viewClose={onClose} url='api/task/delete/' method='one' id={id?.event ? id?.event?.id : id} /> */}
                            </DrawerFooter>
                        </>}
                </ModalContent>
            </Modal>
        </>
    )
}

export default EventView

================
File: Client/src/views/admin/task/index.js
================
import { useEffect, useState } from 'react';
import { DeleteIcon, EditIcon, ViewIcon } from '@chakra-ui/icons';
import { Button, Menu, MenuButton, MenuItem, MenuList, Select, Text, useDisclosure } from '@chakra-ui/react';
import { getApi } from 'services/api';
import { HasAccess } from '../../../redux/accessUtils';
import CommonCheckTable from '../../../components/reactTable/checktable';
import TaskAdvanceSearch from './components/TaskAdvanceSearch';
import { SearchIcon } from "@chakra-ui/icons";
import { CiMenuKebab } from 'react-icons/ci';
import EventView from './eventView';
import ImportModal from '../lead/components/ImportModal';
import { putApi } from 'services/api';
import { useLocation } from 'react-router-dom';
import CommonDeleteModel from 'components/commonDeleteModel';
import { deleteManyApi } from 'services/api';
import AddEdit from './components/AddEdit';
import { useNavigate } from 'react-router-dom';
import { useDispatch } from 'react-redux';
import { fetchTaskData } from '../../../redux/slices/taskSlice';
import { toast } from 'react-toastify';

const Task = () => {
    const [action, setAction] = useState(false);
    const { isOpen, onOpen, onClose } = useDisclosure();
    const [edit, setEdit] = useState(false);
    const [eventView, setEventView] = useState(false)
    const [id, setId] = useState('')
    const [selectedId, setSelectedId] = useState();
    const [selectedValues, setSelectedValues] = useState([]);
    const [advanceSearch, setAdvanceSearch] = useState(false);
    const [getTagValuesOutSide, setGetTagValuesOutside] = useState([]);
    const [searchboxOutside, setSearchboxOutside] = useState('');
    const user = JSON.parse(localStorage.getItem("user"));
    const [deleteMany, setDeleteMany] = useState(false);
    const [isImportLead, setIsImportLead] = useState(false);
    const [isLoding, setIsLoding] = useState(false);
    const [data, setData] = useState([]);
    const [displaySearchData, setDisplaySearchData] = useState(false);
    const [searchedData, setSearchedData] = useState([]);
    const [userAction, setUserAction] = useState("");
    const [permission, leadAccess, contactAccess] = HasAccess(["Tasks", 'Leads', 'Contacts']);
    const location = useLocation();
    const state = location.state;
    const navigate = useNavigate()
    const dispatch = useDispatch();

    console.log("displaySearchData----::", displaySearchData)
    const handleEditOpen = (row) => {
        onOpen();
        setUserAction("edit")
        setSelectedId(row?.values?._id);
    }
    const actionHeader = {
        Header: "Action", isSortable: false, center: true,
        cell: ({ row }) => (
            <Text fontSize="md" fontWeight="900" textAlign={"center"}>
                <Menu isLazy >
                    <MenuButton ><CiMenuKebab /></MenuButton>
                    <MenuList minW={'fit-content'} transform={"translate(1520px, 173px);"}>
                        {permission?.update &&
                            <MenuItem py={2.5} icon={<EditIcon fontSize={15} mb={1} />} onClick={() => handleEditOpen(row)}>Edit</MenuItem>}
                        {permission?.view &&
                            <MenuItem py={2.5} color={'green'} icon={<ViewIcon mb={1} fontSize={15} />} onClick={() => { setId(row?.original._id); handleViewOpen(row?.values?._id); }}>View</MenuItem>}
                        {permission?.delete &&
                            <MenuItem py={2.5} color={'red'} icon={<DeleteIcon fontSize={15} mb={1} />} onClick={() => { setDeleteMany(true); setSelectedValues([row?.values?._id]); }}>Delete</MenuItem>}
                    </MenuList>
                </Menu>
            </Text>
        )
    }
    const tableColumns = [
        {
            Header: "#",
            accessor: "_id",
            isSortable: false,
            width: 5
        },
        {
            Header: 'Title', accessor: 'title', type: 'text', formikType: '', cell: (cell) => (
                <div className="selectOpt">
                    <Text
                        onClick={() => handleViewOpen(cell?.row?.original._id)}
                        me="10px"
                        sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' }, cursor: 'pointer' }}
                        color='brand.600'
                        fontSize="sm"
                        fontWeight="700"
                    >
                        {cell?.value}
                    </Text>
                </div>
            )
        },
        { Header: "Related", accessor: "category", type: 'text', formikType: '' },
        {
            Header: "Status", accessor: "status", type: 'select', formikType: '', cell: (cell) => (
                <div className="selectOpt">
                    <Select className={changeStatus(cell)} onChange={(e) => setStatusData(cell, e)} height={7} width={130} value={cell?.value} style={{ fontSize: "14px" }}>
                        <option value='completed'>Completed</option>
                        <option value='todo'>Todo</option>
                        <option value='onHold'>On Hold</option>
                        <option value='inProgress'>In Progress</option>
                        <option value='pending'>Pending</option>
                    </Select>
                </div>
            )
        },
        { Header: "Assign To", accessor: "assignToName", type: 'text', formikType: '' },
        { Header: "Start Date", accessor: "start", type: 'date', formikType: '' },
        { Header: "End Date", accessor: "end", type: 'date', formikType: '' },
        ...(permission?.update || permission?.view || permission?.delete ? [actionHeader] : []),
    ];

    const fetchData = async () => {
        setIsLoding(true)
        const result = await dispatch(fetchTaskData())
        if (result.payload.status === 200) {
            setData(result?.payload?.data);
        } else {
            toast.error("Failed to fetch data", "error");
        }
        setIsLoding(false)
    }
    const setStatusData = async (cell, e) => {
        try {
            setIsLoding(true)
            let response = await putApi(`api/task/changeStatus/${cell?.row?.original?._id}`, { status: e.target.value });
            if (response.status === 200) {
                setAction((pre) => !pre)
            }
        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    }
    const changeStatus = (cell) => {
        switch (cell.value) {
            case 'pending':
                return 'pending';
            case 'completed':
                return 'completed';
            case 'todo':
                return 'toDo';
            case 'onHold':
                return 'onHold';
            case 'inProgress':
                return 'inProgress';
            default:
                return '';
        }

    }

    const handleDeleteTask = async (ids) => {
        try {
            setIsLoding(true)
            let response = await deleteManyApi('api/task/deleteMany', ids)
            if (response.status === 200) {
                setSelectedValues([])
                setDeleteMany(false)
                setAction((pre) => !pre)
            }
        } catch (error) {
            console.log(error)
        }
        finally {
            setIsLoding(false)
        }
    }


    const handleDateClick = (cell) => {
        setId(cell?.row?.values?._id)
        setEventView(true)
    }
    // const [selectedColumns, setSelectedColumns] = useState([...tableColumns]);
    // const dataColumn = tableColumns?.filter(item => selectedColumns?.find(colum => colum?.Header === item.Header))

    const handleViewOpen = (id) => {
        navigate(`/view/${id}`)
    }

    const addBtn = () => {
        onOpen();
        setUserAction("add");
    }

    const handleClose = () => {
        onClose();
        setSelectedId("")
    }
    useEffect(() => {
        fetchData();
    }, [action])

    return (
        <div>
            <CommonCheckTable
                title={"Tasks"}
                isLoding={isLoding}
                columnData={tableColumns ?? []}
                // dataColumn={dataColumn ?? []}
                allData={data ?? []}
                searchDisplay={displaySearchData}
                setSearchDisplay={setDisplaySearchData}
                searchedDataOut={searchedData}
                setSearchedDataOut={setSearchedData}
                tableCustomFields={[]}
                access={permission}
                // selectedColumns={selectedColumns}
                // setSelectedColumns={setSelectedColumns}
                state={state}
                onOpen={addBtn}
                selectedValues={selectedValues}
                setSelectedValues={setSelectedValues}
                setDelete={setDeleteMany}
                AdvanceSearch={
                    <Button variant="outline" colorScheme='brand' leftIcon={<SearchIcon />} mt={{ sm: "5px", md: "0" }} size="sm" onClick={() => setAdvanceSearch(true)}>Advance Search</Button>
                }
                getTagValuesOutSide={getTagValuesOutSide}
                searchboxOutside={searchboxOutside}
                setGetTagValuesOutside={setGetTagValuesOutside}
                setSearchboxOutside={setSearchboxOutside}
                handleSearchType="TasksSearch"
            />

            <TaskAdvanceSearch
                advanceSearch={advanceSearch}
                setAdvanceSearch={setAdvanceSearch}
                state={state}
                setSearchedData={setSearchedData}
                setDisplaySearchData={setDisplaySearchData}
                allData={data ?? []}
                setAction={setAction}
                setGetTagValues={setGetTagValuesOutside}
                setSearchbox={setSearchboxOutside}
            />
            <AddEdit isOpen={isOpen} fetchData={fetchData} onClose={handleClose} userAction={userAction} id={selectedId} setAction={setAction} />
            {/* <EditTask isOpen={edit} onClose={setEdit} viewClose={onClose} id={selectedId} setAction={setAction} /> */}
            {/* <EventView fetchData={fetchData} isOpen={eventView} access={permission} contactAccess={contactAccess} leadAccess={leadAccess} onClose={setEventView} id={id} setAction={setAction} action={action} /> */}
            <CommonDeleteModel isOpen={deleteMany} onClose={() => setDeleteMany(false)} type='Tasks' handleDeleteData={handleDeleteTask} ids={selectedValues} />
            <ImportModal text='Lead file' fetchData={fetchData} isOpen={isImportLead} onClose={setIsImportLead} />
        </div>
    )
}

export default Task

================
File: Client/src/views/admin/users/components/roleModal.js
================
import { AddIcon } from '@chakra-ui/icons'
import { Button, Flex, Modal, Thead, Tbody, ModalBody, Tr, Th, Text, Td, Box, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Table, useColorModeValue, Checkbox } from '@chakra-ui/react'
import DataNotFound from 'components/notFoundData'
import Spinner from 'components/spinner/Spinner'
import { useEffect, useMemo, useState } from 'react'
import { useGlobalFilter, usePagination, useSortBy, useTable } from 'react-table'
import { putApi } from 'services/api'

const RoleModal = (props) => {
    const {
        columnsData,
        tableData,
        fetchData,
        isOpen,
        id,
        onClose,
        interestRoles
    } = props;

    const textColor = useColorModeValue("secondaryGray.900", "white");
    const borderColor = useColorModeValue("gray.200", "whiteAlpha.100");
    const columns = useMemo(() => columnsData, [columnsData]);
    const [selectedValues, setSelectedValues] = useState([]);
    const [isLoding, setIsLoding] = useState(false);

    const [gopageValue, setGopageValue] = useState();
    const data = useMemo(() => tableData, [tableData]);

    const tableInstance = useTable(
        {
            columns,
            data,
            initialState: { pageIndex: 0 },
        },
        useGlobalFilter,
        useSortBy,
        usePagination
    );

    const {
        getTableProps,
        getTableBodyProps,
        headerGroups,
        prepareRow,
        page,
        pageOptions,
        state: { pageIndex, pageSize },
    } = tableInstance;

    if (pageOptions.length < gopageValue) {
        setGopageValue(pageOptions.length);
    }

    const handleCheckboxChange = (event, value) => {
        if (event.target.checked) {
            setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);
        } else {
            setSelectedValues((prevSelectedValues) =>
                prevSelectedValues.filter((selectedValue) => selectedValue !== value)
            );
        }
    };

    const uniqueValues = [...new Set(selectedValues)];

    const handleSubmit = async () => {
        try {
            setIsLoding(true)
            let result = await putApi(`api/user/change-roles/${id}`, uniqueValues);
            if (result && result.status === 200) {
                fetchData()
                onClose()
            }
        }
        catch (e) {
            console.log(e)
        }
        finally {
            setIsLoding(false)
        }
    }

    useEffect(() => {
        interestRoles?.map((item) => setSelectedValues((prevSelectedValues) => [...prevSelectedValues, item]))
    }, [interestRoles])

    return (
        <Modal onClose={onClose} size='full' isOpen={isOpen} >
            <ModalOverlay />
            <ModalContent >
                <ModalHeader>Change Role</ModalHeader>
                <ModalCloseButton />
                <ModalBody>
                    {isLoding ?
                        <Flex justifyContent={'center'} alignItems={'center'} width="100%" >
                            <Spinner />
                        </Flex> :
                        <Box overflowY={"auto"} className="table-fix-container">
                            <Table {...getTableProps()} variant="simple" color="gray.500" mb="24px">
                                <Thead>
                                    {headerGroups?.map((headerGroup, index) => (
                                        <Tr {...headerGroup.getHeaderGroupProps()} key={index}>
                                            {headerGroup.headers?.map((column, index) => (
                                                <Th
                                                    {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}
                                                    pe="10px"
                                                    key={index}
                                                    borderColor={borderColor}
                                                >
                                                    <Flex
                                                        justify="space-between"
                                                        align="center"
                                                        fontSize={{ sm: "10px", lg: "12px" }}
                                                        color="gray.400"
                                                    >
                                                        {column.render("Header")}

                                                    </Flex>
                                                </Th>
                                            ))}
                                        </Tr>
                                    ))}
                                </Thead>
                                <Tbody {...getTableBodyProps()}>
                                    {isLoding ?
                                        <Tr>
                                            <Td colSpan={columns?.length}>
                                                <Flex justifyContent={'center'} alignItems={'center'} width="100%" color={textColor} fontSize="sm" fontWeight="700">
                                                    <Spinner />
                                                </Flex>
                                            </Td>
                                        </Tr>
                                        : data?.length === 0 ? (
                                            <Tr>
                                                <Td colSpan={columns.length}>
                                                    <Text textAlign={'center'} width="100%" color={textColor} fontSize="sm" fontWeight="700">
                                                        <DataNotFound />
                                                    </Text>
                                                </Td>
                                            </Tr>
                                        ) : page?.map((row, i) => {
                                            prepareRow(row);
                                            return (
                                                <Tr {...row?.getRowProps()} key={i}>
                                                    {row?.cells?.map((cell, index) => {
                                                        let data = "";
                                                        if (cell?.column.Header === "#") {
                                                            data = (
                                                                <Flex align="center" >
                                                                    <Checkbox colorScheme="brandScheme" value={selectedValues} isChecked={selectedValues.includes(cell?.value)} onChange={(event) => handleCheckboxChange(event, cell?.value)} me="10px" />
                                                                    <Text color={textColor} fontSize="sm" fontWeight="700">
                                                                        {cell?.row?.index + 1}
                                                                    </Text>
                                                                </Flex>
                                                            );
                                                        } else if (cell?.column.Header === "Role Name") {
                                                            data = (
                                                                <Text
                                                                    me="10px"
                                                                    color={textColor}
                                                                    fontSize="sm"
                                                                    fontWeight="700"
                                                                >
                                                                    {cell?.value}
                                                                </Text>
                                                            );
                                                        } else if (cell?.column.Header === "Description") {
                                                            data = (
                                                                <Text
                                                                    me="10px"
                                                                    color={textColor}
                                                                    fontSize="sm"
                                                                    fontWeight="700"
                                                                >
                                                                    {cell?.value ? cell?.value : ' - '}
                                                                </Text>
                                                            );
                                                        }
                                                        return (
                                                            <Td
                                                                {...cell?.getCellProps()}
                                                                key={index}
                                                                fontSize={{ sm: "14px" }}
                                                                minW={{ sm: "150px", md: "200px", lg: "auto" }}
                                                                borderColor="transparent"
                                                            >
                                                                {data}
                                                            </Td>
                                                        );
                                                    })}
                                                </Tr>
                                            );
                                        })}
                                </Tbody>
                            </Table>
                        </Box>
                    }
                </ModalBody>
                <ModalFooter>
                    <Button size="sm" variant='brand' onClick={handleSubmit} disabled={isLoding ? true : false} leftIcon={<AddIcon />}> {isLoding ? <Spinner /> : 'Add'}</Button>
                    <Button size="sm" variant="outline"
                        colorScheme="red"
                        sx={{
                            marginLeft: 2,
                            textTransform: "capitalize",
                        }} onClick={() => onClose()}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>

    )
}

export default RoleModal

================
File: Client/src/views/admin/users/components/roleTable.js
================
import {
  Box, Button,
  Flex, Table,
  Tbody,
  Td,
  Text,
  Th,
  Thead,
  Tr,
  useColorModeValue
} from "@chakra-ui/react";
import { useMemo } from "react";
import {
  useGlobalFilter,
  usePagination,
  useSortBy,
  useTable,
} from "react-table";

// Custom components
import Card from "components/card/Card";
import CountUpComponent from "components/countUpComponent/countUpComponent";
import DataNotFound from "components/notFoundData";
import { useState } from "react";
import { FaCreativeCommonsBy } from "react-icons/fa";


export default function RoleTable(props) {
  const { columnsData, tableData, title, fetchData, selectedValues, setSelectedValues, roleModal, setRoleModal } = props;

  const columns = useMemo(() => columnsData, [columnsData]);
  const data = useMemo(() => tableData, [tableData]);
  const user = JSON.parse(localStorage.getItem("user"))
  const [gopageValue, setGopageValue] = useState()
  const buttonbg = useColorModeValue("gray.200", "white");
  const textColor = useColorModeValue("secondaryGray.900", "white");
  const borderColor = useColorModeValue("gray.200", "whiteAlpha.100");

  const tableInstance = useTable(
    {
      columns, data,
      initialState: { pageIndex: 0 }
    },
    useGlobalFilter,
    useSortBy,
    usePagination
  );

  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    prepareRow,
    page,
    pageOptions,
    state: { pageIndex, pageSize }
  } = tableInstance;

  if (pageOptions.length < gopageValue) {
    setGopageValue(pageOptions.length)
  }


  return (
    <Card
      direction='column'
      w='100%'
      padding='0'
      px='0px'
      style={{ border: '1px solid gray.200' }
      }
      overflowX={{ sm: "scroll", lg: "hidden" }}>
      <Flex px='25px' justify='space-between' mb='20px' align='center'>
        <Text
          color={textColor}
          fontSize='22px'
          fontWeight='700'
          lineHeight='100%'>
          {title}  (<CountUpComponent key={data?.length} targetNumber={data?.length} />)
        </Text>
        {user?.role === 'superAdmin' && <Button onClick={() => setRoleModal(true)} leftIcon={<FaCreativeCommonsBy />} bg={buttonbg} size="sm" colorScheme="gray" >Change Role</Button>}
      </Flex>
      <Box overflowY={'auto'} className="table-container-property" >
        <Table  {...getTableProps()} variant='simple' color='gray.500' mb='24px'>
          <Thead >
            {headerGroups?.map((headerGroup, index) => (
              <Tr {...headerGroup.getHeaderGroupProps()} key={index}>
                {headerGroup.headers.map((column, index) => (
                  <Th
                    {...column.getHeaderProps(column.getSortByToggleProps())}
                    pe='10px'
                    key={index}
                    borderColor={borderColor}>
                    <Flex
                      justify='space-between'
                      align='center'
                      fontSize={{ sm: "10px", lg: "12px" }}
                      color='gray.400'>
                      {column.render("Header")}
                    </Flex>
                  </Th>
                ))}
              </Tr>
            ))}
          </Thead>
          <Tbody  {...getTableBodyProps()}>
            {data?.length === 0 && (
              <Tr>
                <Td colSpan={columns.length}>
                  <Text textAlign={'center'} width="100%" color={textColor} fontSize="sm" fontWeight="700">
                    <DataNotFound />
                  </Text>
                </Td>
              </Tr>
            )}
            {page?.map((row, index) => {
              prepareRow(row);
              return (
                <Tr {...row?.getRowProps()} key={index}>
                  {row?.cells?.map((cell, index) => {
                    let data = "";
                    if (cell?.column.Header === "#") {
                      data = (
                        <Flex align="center">
                          <Text color={textColor} fontSize="sm" fontWeight="700">
                            {cell?.row?.index + 1}
                          </Text>
                        </Flex>
                      );
                    } else if (cell?.column.Header === "Role Name") {
                      data = (
                        <Text
                          me="10px"
                          color={textColor}
                          fontSize="sm"
                          fontWeight="700"
                        >
                          {cell?.value}
                        </Text>
                      );
                    } else if (cell?.column.Header === "Description") {
                      data = (

                        <Text
                          me="10px"
                          //   sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}
                          //   color='green.400'
                          fontSize="sm"
                          fontWeight="700"
                          color={textColor}
                        >
                          {cell?.value}
                        </Text>
                      );
                    }
                    return (
                      <Td
                        {...cell?.getCellProps()}
                        key={index}
                        fontSize={{ sm: "14px" }}
                        minW={{ sm: "150px", md: "200px", lg: "auto" }}
                        borderColor='transparent'>
                        {data}
                      </Td>
                    );
                  })}
                </Tr>
              );
            })}
          </Tbody>
        </Table>

      </Box>

      {/* {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage} pageSize={pageSize} pageIndex={pageIndex} />} */}

    </Card>
  );
}

================
File: Client/src/views/admin/users/components/userAdvanceSearch.js
================
import React from 'react';
import { useFormik } from "formik";
import * as yup from "yup";
import { Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Grid, GridItem, Input, FormLabel, Text, Button, } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import { getSearchData, setGetTagValues, setSearchValue } from '../../../../redux/slices/advanceSearchSlice';
import { useDispatch } from 'react-redux';

const UserAdvanceSearch = (props) => {
    const { allData, advanceSearch, setAdvanceSearch, isLoding, setDisplaySearchData, setSearchbox } = props;

    const dispatch = useDispatch();

    const initialValues = {
        firstName: '',
        username: '',
        lastName: '',
    }
    const validationSchema = yup.object({
        firstName: yup.string(),
        username: yup.string().email("User Email is invalid"),
        lastName: yup.string(),
    });
    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: validationSchema,
        onSubmit: (values, { resetForm }) => {
            dispatch(setSearchValue(values))
            dispatch(getSearchData({ values: values, allData: allData, type: 'Users' }))
            resetForm();
            const getValue = [
                {
                    name: ["firstName"],
                    value: values.firstName
                },
                {
                    name: ["lastName"],
                    value: values.lastName
                },
                {
                    name: ["username"],
                    value: values.username
                },
            ]
            dispatch(setGetTagValues(getValue.filter(item => item.value)))
            // setSearchedData(searchResult);
            setDisplaySearchData(true)
            setAdvanceSearch(false)
            setSearchbox('');
        }
    })

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, resetForm, dirty } = formik;

    return (
        <>
            <Modal onClose={() => { setAdvanceSearch(false); resetForm() }} isOpen={advanceSearch} isCentered>
                <ModalOverlay />
                <ModalContent>
                    <ModalHeader>Advance Search</ModalHeader>
                    <ModalCloseButton onClick={() => { setAdvanceSearch(false); resetForm() }} />
                    <ModalBody>
                        <Grid templateColumns="repeat(12, 1fr)" mb={3} gap={2}>
                            <GridItem colSpan={{ base: 12 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    First Name
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.firstName}
                                    name="firstName"
                                    placeholder='Enter First Name'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.firstName && touched.firstName && errors.firstName}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2}>
                                    Last Name
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.lastName}
                                    name="lastName"
                                    placeholder='Enter Last Name'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.lastName && touched.lastName && errors.lastName}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 12 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='600' color={"#000"} mb="0" mt={2} >
                                    Email Id
                                </FormLabel>
                                <Input
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values?.username}
                                    name="username"
                                    placeholder='Enter User Name'
                                    fontWeight='500'
                                />
                                <Text mb='10px' color={'red'}> {errors.username && touched.username && errors.username}</Text>

                            </GridItem>
                        </Grid>
                    </ModalBody>
                    <ModalFooter>
                        <Button size="sm" variant="brand" mr={2} onClick={handleSubmit} disabled={isLoding || !dirty ? true : false} >{isLoding ? <Spinner /> : 'Search'}</Button>
                        <Button size="sm" variant="outline" colorScheme="red" onClick={() => resetForm()}>Clear</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        </>
    )
}

export default UserAdvanceSearch

================
File: Client/src/views/admin/users/Add.js
================
import { CloseIcon, PhoneIcon } from '@chakra-ui/icons';
import { Button, FormLabel, Grid, GridItem, Icon, IconButton, Input, InputGroup, InputLeftElement, InputRightElement, Modal, ModalBody, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import { useFormik } from 'formik';
import React, { useState } from 'react';
import { MdOutlineRemoveRedEye } from 'react-icons/md';
import { RiEyeCloseLine } from 'react-icons/ri';
import { toast } from 'react-toastify';
import { userSchema } from 'schema';
import { postApi } from 'services/api';

const AddUser = (props) => {
    const { onClose, isOpen, setAction } = props
    const [isLoding, setIsLoding] = useState(false)

    const [show, setShow] = React.useState(false);
    const showPass = () => setShow(!show);

    const initialValues = {
        firstName: '',
        lastName: '',
        username: '',
        phoneNumber: '',
        password: '',
    }

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: userSchema,
        onSubmit: (values) => {
            AddData();
        },
    });
    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik

    const AddData = async () => {
        try {
            setIsLoding(true)
            let response = await postApi('api/user/register', values)
            if (response && response.status === 200) {
                props.onClose();
                resetForm();
                setAction((pre) => !pre)
            } else {
                toast.error(response.response.data?.message)
            }
        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };

    return (
        <Modal isOpen={isOpen} isCentered>
            <ModalOverlay />
            <ModalContent>
                <ModalHeader justifyContent='space-between' display='flex' >
                    Add User
                    <IconButton onClick={onClose} icon={<CloseIcon />} />
                </ModalHeader>
                <ModalBody>

                    <Grid templateColumns="repeat(12, 1fr)" gap={3}>

                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                First Name<Text color={"red"}>*</Text>
                            </FormLabel>
                            <Input
                                fontSize='sm'
                                onChange={handleChange} onBlur={handleBlur}
                                value={values.firstName}
                                name="firstName"
                                placeholder='firstName'
                                fontWeight='500'
                                borderColor={errors.firstName && touched.firstName ? "red.300" : null}
                            />
                            <Text mb='10px' color={'red'}> {errors.firstName && touched.firstName && errors.firstName}</Text>
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Last Name
                            </FormLabel>
                            <Input
                                fontSize='sm'
                                onChange={handleChange} onBlur={handleBlur}
                                value={values.lastName}
                                name="lastName"
                                placeholder='Last Name'
                                fontWeight='500'
                                borderColor={errors.lastName && touched.lastName ? "red.300" : null}
                            />
                            <Text mb='10px' color={'red'}> {errors.lastName && touched.lastName && errors.lastName}</Text>
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Email<Text color={"red"}>*</Text>
                            </FormLabel>
                            <Input
                                fontSize='sm'
                                type='email'
                                onChange={handleChange} onBlur={handleBlur}
                                value={values.username}
                                name="username"
                                placeholder='Email Address'
                                fontWeight='500'
                                borderColor={errors.username && touched.username ? "red.300" : null}
                            />
                            <Text mb='10px' color={'red'}> {errors.username && touched.username && errors.username}</Text>
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Phone Number<Text color={"red"}>*</Text>
                            </FormLabel>
                            <InputGroup>
                                <InputLeftElement
                                    pointerEvents="none"
                                    children={<PhoneIcon color="gray.300" borderRadius="16px" />}
                                />
                                <Input type="tel"
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values.phoneNumber}
                                    name="phoneNumber"
                                    fontWeight='500'
                                    borderColor={errors.phoneNumber && touched.phoneNumber ? "red.300" : null}
                                    placeholder="Phone number" borderRadius="16px" />
                            </InputGroup>
                            <Text mb='10px' color={'red'}>{errors.phoneNumber && touched.phoneNumber && errors.phoneNumber}</Text>
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Password
                            </FormLabel>
                            <InputGroup size='md'>
                                <Input
                                    isRequired={true}
                                    fontSize='sm'
                                    placeholder='Enter Your Password'
                                    name='password'
                                    size='lg'
                                    variant='auth'
                                    type={show ? "text" : "password"}
                                    value={values.password} onChange={handleChange} onBlur={handleBlur}
                                    borderColor={errors.password && touched.password ? "red.300" : null}
                                    className={errors.password && touched.password ? "isInvalid" : null}
                                />
                                <InputRightElement display='flex' alignItems='center' mt='4px'>
                                    <Icon
                                        color={'gray.400'}
                                        _hover={{ cursor: "pointer" }}
                                        as={show ? RiEyeCloseLine : MdOutlineRemoveRedEye}
                                        onClick={showPass}
                                    />
                                </InputRightElement>
                            </InputGroup>
                            <Text mb='10px' color={'red'}> {errors.password && touched.password && errors.password}</Text>
                        </GridItem>

                    </Grid>


                </ModalBody>
                <ModalFooter>
                    <Button variant='brand' size="sm" disabled={isLoding ? true : false} onClick={handleSubmit}>{isLoding ? <Spinner /> : 'Save'}</Button>
                    <Button sx={{
                        marginLeft: 2,
                        textTransform: "capitalize",
                    }} variant="outline"
                        colorScheme="red" size="sm" onClick={() => {
                            formik.resetForm()
                            onClose()
                        }}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    )
}

export default AddUser

================
File: Client/src/views/admin/users/AddEditUser.js
================
import { CloseIcon, PhoneIcon } from '@chakra-ui/icons';
import { Button, FormLabel, Grid, GridItem, Icon, IconButton, Input, InputGroup, InputLeftElement, InputRightElement, Modal, ModalBody, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import { useFormik } from 'formik';
import React, { useState } from 'react';
import { MdOutlineRemoveRedEye } from 'react-icons/md';
import { RiEyeCloseLine } from 'react-icons/ri';
import { toast } from 'react-toastify';
import { userSchema } from 'schema';
import { putApi } from 'services/api';
import { postApi } from 'services/api';

const AddEditUser = (props) => {
    const { onClose, isOpen, setAction, data, userAction, userData, selectedId, fetchData, setUserAction } = props
    const [isLoding, setIsLoding] = useState(false)
    const [show, setShow] = React.useState(false);
    const showPass = () => setShow(!show);

    const initialValues = {
        firstName: userAction === "add" ? '' : data?.firstName,
        lastName: userAction === "add" ? '' : data?.lastName,
        username: userAction === "add" ? '' : data?.username,
        phoneNumber: userAction === "add" ? '' : data?.phoneNumber,
        password: userAction === "add" ? '' : data?.password,
    }
    const user = JSON.parse(window.localStorage.getItem('user'))

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: userSchema,
        enableReinitialize: true,
        onSubmit: (values) => {
            AddData();
        },
    });
    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik

    const AddData = async () => {
        if (userAction === "add") {

            try {
                setIsLoding(true)
                let response = await postApi('api/user/register', values)
                if (response && response.status === 200) {
                    onClose();
                    resetForm();
                    setAction((pre) => !pre)
                    setUserAction('')
                } else {
                    toast.error(response.response.data?.message)
                }
            } catch (e) {
                console.log(e);
            }
            finally {
                setIsLoding(false)
            }
        } else if (userAction === "edit") {
            try {
                setIsLoding(true)
                let response = await putApi(`api/user/edit/${selectedId}`, values)
                if (response && response.status === 200) {
                    // setEdit(false)
                    fetchData()
                    let updatedUserData = userData; // Create a copy of userData
                    if (user?._id === selectedId) {
                        if (updatedUserData && typeof updatedUserData === 'object') {
                            // Create a new object with the updated firstName
                            updatedUserData = {
                                ...updatedUserData,
                                firstName: values?.firstName,
                                lastName: values?.lastName
                            };
                        }

                        const updatedDataString = JSON.stringify(updatedUserData);
                        localStorage.setItem('user', updatedDataString);
                        // dispatch(setUser(updatedDataString));
                    }


                    // dispatch(fetchRoles(user?._id))
                    onClose();
                    setUserAction('')
                    setAction((pre) => !pre)
                } else {
                    toast.error(response.response.data?.message)
                }
            } catch (e) {
                console.log(e);
            }
            finally {
                setIsLoding(false)
            }
        }
    };

    return (
        <Modal isOpen={isOpen} isCentered>
            <ModalOverlay />
            <ModalContent>
                <ModalHeader justifyContent='space-between' display='flex' >
                    {userAction === "add" ? "Add" : "Edit"} User
                    <IconButton onClick={onClose} icon={<CloseIcon />} />
                </ModalHeader>
                <ModalBody>

                    <Grid templateColumns="repeat(12, 1fr)" gap={3}>

                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                First Name<Text color={"red"}>*</Text>
                            </FormLabel>
                            <Input
                                fontSize='sm'
                                onChange={handleChange} onBlur={handleBlur}
                                value={values.firstName}
                                name="firstName"
                                placeholder='firstName'
                                fontWeight='500'
                                borderColor={errors.firstName && touched.firstName ? "red.300" : null}
                            />
                            <Text mb='10px' color={'red'}> {errors.firstName && touched.firstName && errors.firstName}</Text>
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Last Name
                            </FormLabel>
                            <Input
                                fontSize='sm'
                                onChange={handleChange} onBlur={handleBlur}
                                value={values.lastName}
                                name="lastName"
                                placeholder='Last Name'
                                fontWeight='500'
                                borderColor={errors.lastName && touched.lastName ? "red.300" : null}
                            />
                            <Text mb='10px' color={'red'}> {errors.lastName && touched.lastName && errors.lastName}</Text>
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Email<Text color={"red"}>*</Text>
                            </FormLabel>
                            <Input
                                fontSize='sm'
                                type='email'
                                onChange={handleChange} onBlur={handleBlur}
                                value={values.username}
                                name="username"
                                disabled={userAction === 'edit'}
                                placeholder='Email Address'
                                fontWeight='500'
                                borderColor={errors.username && touched.username ? "red.300" : null}
                            />
                            <Text mb='10px' color={'red'}> {errors.username && touched.username && errors.username}</Text>
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Phone Number<Text color={"red"}>*</Text>
                            </FormLabel>
                            <InputGroup>
                                <InputLeftElement
                                    pointerEvents="none"
                                    children={<PhoneIcon color="gray.300" borderRadius="16px" />}
                                />
                                <Input type="tel"
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values.phoneNumber}
                                    name="phoneNumber"
                                    fontWeight='500'
                                    borderColor={errors.phoneNumber && touched.phoneNumber ? "red.300" : null}
                                    placeholder="Phone number" borderRadius="16px" />
                            </InputGroup>
                            <Text mb='10px' color={'red'}>{errors.phoneNumber && touched.phoneNumber && errors.phoneNumber}</Text>
                        </GridItem>
                        {
                            userAction !== "edit" &&
                            <GridItem colSpan={{ base: 12 }}>
                                <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                    Password
                                </FormLabel>
                                <InputGroup size='md'>
                                    <Input
                                        isRequired={true}
                                        fontSize='sm'
                                        placeholder='Enter Your Password'
                                        name='password'
                                        size='lg'
                                        variant='auth'
                                        type={show ? "text" : "password"}
                                        value={values.password} onChange={handleChange} onBlur={handleBlur}
                                        borderColor={errors.password && touched.password ? "red.300" : null}
                                        className={errors.password && touched.password ? "isInvalid" : null}
                                    />
                                    <InputRightElement display='flex' alignItems='center' mt='4px'>
                                        <Icon
                                            color={'gray.400'}
                                            _hover={{ cursor: "pointer" }}
                                            as={show ? RiEyeCloseLine : MdOutlineRemoveRedEye}
                                            onClick={showPass}
                                        />
                                    </InputRightElement>
                                </InputGroup>
                                <Text mb='10px' color={'red'}> {errors.password && touched.password && errors.password}</Text>
                            </GridItem>

                        }
                    </Grid>


                </ModalBody>
                <ModalFooter>
                    <Button variant='brand' size="sm" disabled={isLoding ? true : false} onClick={handleSubmit}>{isLoding ? <Spinner /> : 'Save'}</Button>
                    <Button sx={{
                        marginLeft: 2,
                        textTransform: "capitalize",
                    }} variant="outline"
                        colorScheme="red" size="sm" onClick={() => {
                            formik.resetForm()
                            onClose()
                        }}>Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    )
}

export default AddEditUser

================
File: Client/src/views/admin/users/Edit.js
================
import { CloseIcon, PhoneIcon } from '@chakra-ui/icons';
import { Button, FormLabel, Grid, GridItem, IconButton, Input, InputGroup, InputLeftElement, Modal, ModalBody, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text } from '@chakra-ui/react';
import Spinner from 'components/spinner/Spinner';
import { useFormik } from 'formik';
import { useState } from 'react';
import { toast } from 'react-toastify';
import { fetchRoles } from '../../../redux/slices/roleSlice';
import { userSchema } from 'schema';
import { putApi } from 'services/api';
import { useDispatch } from 'react-redux';
import { setUser } from '../../../redux/slices/localSlice';


const Edit = (props) => {
    const { isOpen, fetchData, data, userData, setEdit } = props

    const initialValues = {
        firstName: data ? data?.firstName : '',
        lastName: data ? data?.lastName : '',
        username: data ? data?.username : '',
        phoneNumber: data ? data?.phoneNumber : ''
    }

    const user = JSON.parse(window.localStorage.getItem('user'))

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: userSchema,
        enableReinitialize: true,
        onSubmit: (values, { resetForm }) => {
            EditData();
            resetForm();
        },
    });
    const dispatch = useDispatch()

    const handleCloseModal = () => {
        setEdit(false);
        resetForm();
    };
    const { errors, touched, values, handleBlur, handleChange, handleSubmit, resetForm } = formik

    const [isLoding, setIsLoding] = useState(false)

    const EditData = async () => {
        try {
            setIsLoding(true)
            let response = await putApi(`api/user/edit/${props.selectedId}`, values)
            if (response && response.status === 200) {
                setEdit(false)
                let updatedUserData = userData; // Create a copy of userData
                if (user?._id === props.selectedId) {
                    if (updatedUserData && typeof updatedUserData === 'object') {
                        // Create a new object with the updated firstName
                        updatedUserData = {
                            ...updatedUserData,
                            firstName: values?.firstName,
                            lastName: values?.lastName
                        };
                    }

                    const updatedDataString = JSON.stringify(updatedUserData);
                    localStorage.setItem('user', updatedDataString);
                    dispatch(setUser(updatedDataString));
                }


                dispatch(fetchRoles(user?._id))
                handleCloseModal();
                fetchData()
                props.setAction((pre) => !pre)
            } else {
                toast.error(response.response.data?.message)
            }
        } catch (e) {
            console.log(e);
        }
        finally {
            setIsLoding(false)
        }
    };


    return (
        <Modal isOpen={isOpen} isCentered>
            <ModalOverlay />
            <ModalContent>
                <ModalHeader justifyContent='space-between' display='flex' >
                    Edit User
                    <IconButton onClick={() => setEdit(false)} icon={<CloseIcon />} />
                </ModalHeader>
                <ModalBody>

                    <Grid templateColumns="repeat(12, 1fr)" gap={3}>

                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                First Name<Text color={"red"}>*</Text>
                            </FormLabel>
                            <Input
                                fontSize='sm'
                                onChange={handleChange} onBlur={handleBlur}
                                value={values.firstName}
                                name="firstName"
                                placeholder='firstName'
                                fontWeight='500'
                                borderColor={errors.firstName && touched.firstName ? "red.300" : null}
                            />
                            <Text mb='10px' color={'red'}> {errors.firstName && touched.firstName && errors.firstName}</Text>
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Last Name
                            </FormLabel>
                            <Input
                                fontSize='sm'
                                onChange={handleChange} onBlur={handleBlur}
                                value={values.lastName}
                                name="lastName"
                                placeholder='Last Name'
                                fontWeight='500'
                                borderColor={errors.lastName && touched.lastName ? "red.300" : null}
                            />
                            <Text mb='10px' color={'red'}> {errors.lastName && touched.lastName && errors.lastName}</Text>
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Email<Text color={"red"}>*</Text>
                            </FormLabel>
                            <Input
                                fontSize='sm'
                                type='email'
                                onChange={handleChange} onBlur={handleBlur}
                                value={values.username}
                                name="username"
                                placeholder='Email Address'
                                fontWeight='500'
                                borderColor={errors.username && touched.username ? "red.300" : null}
                            />
                            <Text mb='10px' color={'red'}> {errors.username && touched.username && errors.username}</Text>
                        </GridItem>
                        <GridItem colSpan={{ base: 12 }}>
                            <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='8px'>
                                Phone Number<Text color={"red"}>*</Text>
                            </FormLabel>
                            <InputGroup>
                                <InputLeftElement
                                    pointerEvents="none"
                                    children={<PhoneIcon color="gray.300" borderRadius="16px" />}
                                />
                                <Input type="tel"
                                    fontSize='sm'
                                    onChange={handleChange} onBlur={handleBlur}
                                    value={values.phoneNumber}
                                    name="phoneNumber"
                                    fontWeight='500'
                                    borderColor={errors.phoneNumber && touched.phoneNumber ? "red.300" : null}
                                    placeholder="Phone number" borderRadius="16px" />
                            </InputGroup>
                            <Text mb='10px' color={'red'}>{errors.phoneNumber && touched.phoneNumber && errors.phoneNumber}</Text>
                        </GridItem>
                    </Grid>


                </ModalBody>
                <ModalFooter>
                    <Button size="sm" variant='brand' disabled={isLoding ? true : false} onClick={handleSubmit}>{isLoding ? <Spinner /> : 'Update'}</Button>
                    <Button variant="outline"
                        colorScheme='red' size="sm"
                        sx={{
                            marginLeft: 2,
                            textTransform: "capitalize",
                        }} onClick={() => handleCloseModal()}>close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    )
}

export default Edit

================
File: Client/src/views/admin/users/index.js
================
import { useEffect, useState } from 'react';
import { Link, useNavigate } from "react-router-dom";
import { DeleteIcon, EditIcon, ViewIcon } from '@chakra-ui/icons';
import { Button, Menu, MenuButton, MenuItem, MenuList, Text, useDisclosure } from '@chakra-ui/react';
import { getApi } from 'services/api';
import CommonCheckTable from '../../../components/reactTable/checktable';
import { SearchIcon } from "@chakra-ui/icons";
import { CiMenuKebab } from 'react-icons/ci';
import { IoIosArrowBack } from 'react-icons/io';
import AddUser from './Add';
import Edit from './Edit';
import UserAdvanceSearch from './components/userAdvanceSearch';
import { deleteManyApi } from 'services/api';
import CommonDeleteModel from 'components/commonDeleteModel';
import AddEditUser from './AddEditUser';


const Index = () => {
    const [action, setAction] = useState(false);
    const [edit, setEdit] = useState(false);
    const [editData, setEditData] = useState({});
    // const { onOpen, onClose } = useDisclosure();
    const [isOpen, setIsOpen] = useState(false)
    const [selectedId, setSelectedId] = useState();
    const [deleteMany, setDelete] = useState(false);
    const [selectedValues, setSelectedValues] = useState([]);
    const [advanceSearch, setAdvanceSearch] = useState(false);
    const [getTagValuesOutSide, setGetTagValuesOutside] = useState([]);
    const [searchboxOutside, setSearchboxOutside] = useState('');
    const navigate = useNavigate();
    const [isLoding, setIsLoding] = useState(false);
    const [data, setData] = useState([]);
    const [displaySearchData, setDisplaySearchData] = useState(false);
    const [searchedData, setSearchedData] = useState([]);
    const [userAction, setUserAction] = useState('')

    const tableColumns = [
        { Header: "#", accessor: "_id", isSortable: false, width: 10 },
        {
            Header: 'Email Id', accessor: 'username', cell: (cell) => (
                <Link to={`/userView/${cell?.row?.values._id}`}>
                    <Text
                        me="10px"
                        sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}
                        color='brand.600'
                        fontSize="sm"
                        fontWeight="700"
                    >
                        {cell?.value}
                    </Text>
                </Link>)
        },
        { Header: "First Name", accessor: "firstName", },
        { Header: "Last Name", accessor: "lastName", },
        { Header: "Role", accessor: "role", },
        {
            Header: "Action", accessor: 'action', isSortable: false, center: true,
            cell: ({ row }) => (
                <Text fontSize="md" fontWeight="900" textAlign={"center"}>
                    <Menu isLazy  >
                        <MenuButton><CiMenuKebab /></MenuButton>
                        <MenuList minW={'fit-content'} transform={"translate(1520px, 173px);"}>
                            <MenuItem py={2.5} onClick={() => { setEditData(row?.original); setIsOpen(true); setSelectedId(row?.original._id); setUserAction('edit') }} icon={<EditIcon mb={1} fontSize={15} />}>Edit</MenuItem>
                            <MenuItem py={2.5} color={'green'} onClick={() => navigate(`/userView/${row?.values._id}`)} icon={<ViewIcon mb={1} fontSize={15} />}>View</MenuItem>
                            {row?.original?.role === 'superAdmin' ? '' : <MenuItem py={2.5} color={'red'} onClick={() => { setSelectedValues([row?.original._id]); setDelete(true) }} icon={<DeleteIcon fontSize={15} />}>Delete</MenuItem>}
                        </MenuList>
                    </Menu>
                </Text>
            )
        },
    ];

    // const [columns, setColumns] = useState([...tableColumns]);
    // const [selectedColumns, setSelectedColumns] = useState([...tableColumns]);
    // const dataColumn = tableColumns?.filter(item => selectedColumns?.find(colum => colum?.Header === item.Header))

    const handleOpen = () => {
        setUserAction('add')
        setIsOpen(true)
    }
    const handleClose = () => {
        setIsOpen(false)
    }

    const fetchData = async () => {
        setIsLoding(true)
        let result = await getApi('api/user/');
        setData(result?.data?.user);
        setIsLoding(false)
    }

    const handleDeleteClick = async () => {

        try {
            setIsLoding(true)
            let response = await deleteManyApi(`api/user/deleteMany`, selectedValues)
            if (response.status === 200) {
                setSelectedValues([])
                setDelete(false)
                setAction((pre) => !pre)
            }
        } catch (error) {
            console.log(error)
        }
        finally {
            setIsLoding(false)
        }
    };

    useEffect(() => {
        fetchData();
    }, [action])

    return (
        <div>
            <CommonCheckTable
                title={"Users"}
                isLoding={isLoding}
                columnData={tableColumns ?? []}
                // dataColumn={dataColumn ?? []}
                allData={data ?? []}
                tableData={displaySearchData ? searchedData : data}
                searchDisplay={displaySearchData}
                setSearchDisplay={setDisplaySearchData}
                searchedDataOut={searchedData}
                setSearchedDataOut={setSearchedData}
                tableCustomFields={[]}
                // action={action}
                // setAction={setAction}
                // selectedColumns={selectedColumns}
                // setSelectedColumns={setSelectedColumns}
                // isOpen={isOpen}
                // onClose={onclose}
                access={{
                    create: true,
                    edit: true,
                    delete: true,
                    view: true,
                }}
                onOpen={handleOpen}
                selectedValues={selectedValues}
                setSelectedValues={setSelectedValues}
                setDelete={setDelete}
                BackButton={<Button onClick={() => navigate('/admin-setting')} variant="brand" size="sm" leftIcon={<IoIosArrowBack />} ml={2}>Back</Button>}
                AdvanceSearch={
                    <Button variant="outline" colorScheme='brand' leftIcon={<SearchIcon />} mt={{ sm: "5px", md: "0" }} size="sm" onClick={() => setAdvanceSearch(true)}>Advance Search</Button>
                }
                getTagValuesOutSide={getTagValuesOutSide}
                searchboxOutside={searchboxOutside}
                setGetTagValuesOutside={setGetTagValuesOutside}
                setSearchboxOutside={setSearchboxOutside}
                handleSearchType="UsersSearch"
            />
            <AddEditUser isOpen={isOpen} onClose={handleClose} data={editData} selectedId={selectedId} userAction={userAction} setUserAction={setUserAction} fetchData={fetchData} />
            <CommonDeleteModel isOpen={deleteMany} onClose={() => setDelete(false)} type='User' handleDeleteData={handleDeleteClick} ids={''} selectedValues={selectedValues} />

            <UserAdvanceSearch
                advanceSearch={advanceSearch}
                setAdvanceSearch={setAdvanceSearch}
                setSearchedData={setSearchedData}
                setDisplaySearchData={setDisplaySearchData}
                allData={data ?? []}
                setAction={setAction}
                setGetTagValues={setGetTagValuesOutside}
                setSearchbox={setSearchboxOutside}
            />
        </div>
    )
}

export default Index

================
File: Client/src/views/admin/users/View.js
================
import { AddIcon, ChevronDownIcon, DeleteIcon, EditIcon } from "@chakra-ui/icons";
import { Button, Flex, Grid, GridItem, Heading, Menu, MenuButton, MenuDivider, MenuItem, MenuList, Text, useDisclosure } from "@chakra-ui/react";
import Card from "components/card/Card";
import { HSeparator } from "components/separator/Separator";
import Spinner from "components/spinner/Spinner";
import { useEffect, useState } from "react";
import { IoIosArrowBack } from "react-icons/io";
import { Link, useNavigate, useParams } from "react-router-dom";
import { getApi } from "services/api";
import Add from "./Add";
import Edit from "./Edit";
import RoleTable from "./components/roleTable";
import RoleModal from "./components/roleModal";
import { useDispatch, useSelector } from "react-redux";
import { setUser } from "../../../redux/slices/localSlice";
import CommonDeleteModel from 'components/commonDeleteModel';
import { deleteApi } from "services/api";
import AddEditUser from './AddEditUser';

const View = () => {

    const RoleColumn = [
        { Header: '#', accessor: '_id', width: 10, display: false },
        { Header: 'Role Name', accessor: 'roleName' },
        { Header: "Description", accessor: "description", }
    ];
    const dispatch = useDispatch()
    const userData = useSelector(state => state.user.user)

    const userName = typeof userData === 'string' ? JSON.parse(userData) : userData

    const param = useParams()
    const navigate = useNavigate()
    const handleOpenModal = (userData) => {
        setEdit(true)
        dispatch(setUser(userData)); // Dispatch setUser action to set user data
    };


    const [data, setData] = useState()
    const [roleData, setRoleData] = useState([])
    // const { isOpen, onOpen, onClose } = useDisclosure()
    const [edit, setEdit] = useState(false);
    const [deleteModel, setDelete] = useState(false);
    const [roleModal, setRoleModal] = useState(false);
    const [isLoding, setIsLoding] = useState(false)
    const [action, setAction] = useState(false)
    const [userAction, setUserAction] = useState('')
    const [isOpen, setIsOpen] = useState(false)

    const size = "lg";

    const handleOpen = (type) => {
        setUserAction(type)
        setIsOpen(true)
    }
    const handleClose = () => {
        setIsOpen(false)
    }

    const fetchData = async () => {
        setIsLoding(true)
        let response = await getApi('api/user/view/', param.id)
        setData(response.data);
        setIsLoding(false)
    }

    useEffect(() => {
        if (param.id) {
            fetchData()
        }
    }, [action])

    useEffect(async () => {
        setIsLoding(true);
        let result = await getApi("api/role-access");
        setRoleData(result.data);
        setIsLoding(false);
    }, [])


    const handleDeleteClick = async () => {

        try {
            setIsLoding(true)
            let response = await deleteApi(`api/user/delete/`, param.id)
            if (response.status === 200) {
                setDelete(false)
                navigate(-1)
                setAction((pre) => !pre)
            }
        } catch (error) {
            console.log(error)
        }
        finally {
            setIsLoding(false)
        }
    };

    return (
        <>
            {isLoding ?
                <Flex justifyContent={'center'} alignItems={'center'} width="100%" >
                    <Spinner />
                </Flex> : <>
                    <AddEditUser isOpen={isOpen} onClose={handleClose} data={data} selectedId={param?.id} userAction={userAction} setUserAction={setUserAction} fetchData={fetchData} />
                    <CommonDeleteModel isOpen={deleteModel} onClose={() => setDelete(false)} type='User' handleDeleteData={handleDeleteClick} ids={''} selectedValues={param.id} />
                    <GridItem colSpan={{ base: 4 }}>
                        <Heading size="lg" m={3}>
                            {data?.firstName || ""}
                        </Heading>
                    </GridItem>
                    <Card>
                        <Grid templateColumns={'repeat(12, 1fr)'} gap={4}>
                            <GridItem colSpan={{ base: 12, md: 6 }}>
                                <Heading size="md" mb={3} textTransform={'capitalize'}>
                                    {data?.firstName || data?.lastName ? `${data?.firstName} ${data?.lastName}` : 'User'} Information
                                </Heading>

                            </GridItem>
                            <GridItem colSpan={{ base: 12, md: 6 }} >
                                <Flex justifyContent={{ base: 'start', sm: 'start', md: 'end' }}>
                                    {data?.role === 'superAdmin' && <Menu>
                                        <MenuButton variant="outline" colorScheme='blackAlpha' size="sm" va mr={2.5} as={Button} rightIcon={<ChevronDownIcon />}>
                                            Actions
                                        </MenuButton>
                                        <MenuDivider />
                                        <MenuList minWidth={'13rem'}>
                                            <MenuItem alignItems={"start"} onClick={() => handleOpen('add')} icon={<AddIcon />}>Add</MenuItem>
                                            <MenuItem alignItems={"start"} onClick={() => handleOpen('edit')} icon={<EditIcon />} color='green'>Edit</MenuItem>
                                            {data?.role !== 'superAdmin' && JSON.parse(localStorage.getItem('user'))?.role === 'superAdmin' && <>
                                                <MenuDivider />
                                                <MenuItem alignItems={"start"} onClick={() => setDelete(true)} icon={<DeleteIcon />}>Delete</MenuItem>
                                            </>}
                                        </MenuList>
                                    </Menu>}
                                    <Link to="/user">
                                        <Button leftIcon={<IoIosArrowBack />} variant="brand" size="sm">
                                            Back
                                        </Button>
                                    </Link>
                                </Flex>
                            </GridItem>
                        </Grid>
                        <HSeparator />
                        <Grid templateColumns={'repeat(2, 1fr)'} gap={4} mt='5'>
                            <GridItem colSpan={{ base: 2, md: 1 }}>
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> First Name </Text>
                                <Text>{data?.firstName ? data?.firstName : ' - '}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }}>
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> Last Name </Text>
                                <Text>{data?.lastName ? data?.lastName : ' - '}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }}>
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}>Phone Number</Text>
                                <Text>{data?.phoneNumber ? data?.phoneNumber : ' - '}</Text>
                            </GridItem>
                            <GridItem colSpan={{ base: 2, md: 1 }}>
                                <Text fontSize="sm" fontWeight="bold" color={'blackAlpha.900'}> User Email </Text>
                                <Text>{data?.username ? data?.username : ' - '}</Text>
                            </GridItem>
                        </Grid>
                    </Card>

                    {data?.role !== 'superAdmin' && <Card mt={3}>
                        <RoleTable fetchData={fetchData} columnsData={RoleColumn ?? []} roleModal={roleModal} setRoleModal={setRoleModal} tableData={data?.roles || []} title={'Role'} />
                    </Card>}
                    <RoleModal fetchData={fetchData} isOpen={roleModal} onClose={setRoleModal} columnsData={RoleColumn ?? []} id={param.id} tableData={roleData ?? []} interestRoles={data?.roles.map((item) => item._id)} />

                    <Card mt={3}>
                        <Grid templateColumns="repeat(6, 1fr)" gap={1}>
                            <GridItem colStart={6} >
                                <Flex justifyContent={"right"}>
                                    <Button onClick={() => { handleOpenModal(userData); handleOpen('edit') }} leftIcon={<EditIcon />} mr={2.5} variant="outline" size="sm" colorScheme="green">Edit</Button>
                                    {data?.role !== 'superAdmin' && JSON.parse(localStorage.getItem('user'))?.role === 'superAdmin' && <Button size="sm" style={{ background: 'red.800' }} onClick={() => setDelete(true)} leftIcon={<DeleteIcon />} colorScheme="red" >Delete</Button>}
                                </Flex>
                            </GridItem>
                        </Grid>
                    </Card>
                </>}
        </>
    );
};

export default View

================
File: Client/src/views/admin/validation/add.js
================
import { Button, Checkbox, Flex, FormLabel, Grid, GridItem, Heading, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Select, Text } from '@chakra-ui/react'
import Spinner from 'components/spinner/Spinner'
import React, { useState } from 'react'
import { useFormik } from 'formik'
import { HSeparator } from 'components/separator/Separator'
import { postApi } from 'services/api'
import { validationAddSchema } from 'schema/validationAddSchema'
import { toast } from 'react-toastify'



const Add = (props) => {
    const { onClose, isOpen, fetchData, setAction } = props;
    const [isLoding, setIsLoding] = useState(false)

    const initialValues = {
        name: "",
        validations: [
            {
                require: false,
                message: "",
            },
            {
                min: false,
                value: "",
                message: "",
            },
            {
                max: false,
                value: "",
                message: "",
            },
            {
                match: false,
                value: "",
                message: "",
            },
            {
                formikType: '',
                message: "",
            },
        ],
    };

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: validationAddSchema,
        validate: (values) => {
            const errors = {};

            // if (values?.validations && values.validations[0]?.require && !values.validations[0]?.message) {
            //     errors.validations = errors.validations || [];
            //     errors.validations[0] = errors.validations[0] || {};
            //     errors.validations[0].message = 'Message is required';
            // }
            if (values?.validations && values.validations[1]?.min && !values.validations[1]?.value) {
                errors.validations = errors.validations || [];
                errors.validations[1] = errors.validations[1] || {};
                errors.validations[1].value = 'Value is required';
            }
            if (values?.validations && values.validations[2]?.max && !values.validations[2]?.value) {
                errors.validations = errors.validations || [];
                errors.validations[2] = errors.validations[2] || {};
                errors.validations[2].value = 'Value is required';
            }
            if (values?.validations && values.validations[3]?.match && !values.validations[3]?.value && !values.validations[3]?.message) {
                errors.validations = errors.validations || [];
                errors.validations[3] = errors.validations[3] || {};
                errors.validations[3].value = 'Value is required';
                errors.validations[3].message = 'Meassage is required';
            }
            if (values?.validations && values.validations[4]?.types && !values.validations[4]?.formikType) {
                errors.validations = errors.validations || [];
                errors.validations[4] = errors.validations[4] || {};
                errors.validations[4].formikType = 'FormikType is required';
            }
            return errors;
        },
        onSubmit: (values, { resetForm }) => {
            AddData()
        },
    });

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik


    const AddData = async () => {
        try {
            setIsLoding(true)
            let response = await postApi('api/validation/add', values);
            if (response.status === 200) {
                fetchData()
                onClose()
                resetForm()
                setAction((pre) => !pre)
            } else {
                toast.error(response.response.data.message);
            }
        }
        catch {
        }
        finally {
            setIsLoding(false)
        }
    }

    return (
        <div>
            <Modal onClose={onClose} isOpen={isOpen} isCentered size='2xl'>
                <ModalOverlay />
                <ModalContent>
                    <ModalHeader>Add Validation</ModalHeader>
                    <ModalCloseButton />
                    {/* <HSeparator /> */}
                    <ModalBody>
                        <>
                            <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                                <GridItem colSpan={{ base: 12, sm: 6 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='2px'>
                                        Name
                                    </FormLabel>
                                    <Input
                                        fontSize='sm'
                                        onChange={handleChange} onBlur={handleBlur}
                                        value={values.name}
                                        name="name"
                                        placeholder='Enter Name'
                                        fontWeight='500'
                                        borderColor={errors.name && touched.name ? "red.300" : null}
                                    />
                                    <Text mb='10px' fontSize='sm' color={'red'}> {errors.name && touched.name && errors.name}</Text>
                                </GridItem>

                                <GridItem colSpan={{ base: 12 }}>
                                    <Flex >
                                        <FormLabel display='flex' ms='4px' fontSize='lg' fontWeight='600' mb="0">
                                            Validations
                                        </FormLabel>
                                    </Flex>
                                </GridItem>

                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }} mt={8}>
                                    <Flex>
                                        <Checkbox colorScheme="brandScheme" me="10px"
                                            isChecked={values?.validations[0]?.require}
                                            onChange={(e) => {
                                                const isChecked = e.target.checked;
                                                setFieldValue(`validations[${0}].require`, isChecked);
                                                setFieldValue(
                                                    'validations[0].message',
                                                    isChecked ? values?.validations[0]?.message : ''
                                                );
                                            }}
                                        />
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                            Require
                                        </FormLabel>
                                    </Flex>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, md: 8 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='2px'>
                                        Message
                                    </FormLabel>
                                    <Input
                                        disabled={values?.validations[0]?.require === true ? false : true}
                                        fontSize='sm'
                                        onChange={handleChange} onBlur={handleBlur}
                                        value={values?.validations[0]?.message}
                                        name={`validations[${0}].message`}
                                        placeholder='Enter message'
                                        fontWeight='500'
                                        borderColor={errors?.validations && touched?.validations && errors?.validations[0]?.message && touched?.validations[0]?.message ? "red.300" : null}
                                    />
                                    <Text mb='10px' fontSize='sm' color={'red'}> {errors?.validations && touched?.validations && touched?.validations[0]?.message && errors?.validations[0]?.message}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }} mt={8}>
                                    <Flex>
                                        <Checkbox colorScheme="brandScheme" name={`validations[${1}].min`} me="10px" isChecked={values?.validations[1]?.min} onChange={(e) => {
                                            const isChecked = e.target.checked;
                                            setFieldValue(`validations[${1}].min`, isChecked);
                                            setFieldValue(
                                                'validations[1].message',
                                                isChecked ? values?.validations[1]?.message : ''
                                            );
                                            setFieldValue(
                                                'validations[1].value',
                                                isChecked ? values?.validations[1]?.value : ''
                                            );
                                        }} />
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                            Min
                                        </FormLabel>
                                    </Flex>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='2px'>
                                        Value
                                    </FormLabel>
                                    <Input
                                        disabled={values.validations[1].min === true ? false : true}
                                        fontSize='sm'
                                        onChange={handleChange} onBlur={handleBlur}
                                        value={values.validations[1].value}
                                        name={`validations[${1}].value`}
                                        placeholder='Enter Min Value'
                                        fontWeight='500'
                                        borderColor={errors?.validations && touched?.validations && errors?.validations[1]?.value && touched?.validations[1]?.value ? "red.300" : null}
                                    />
                                    <Text fontSize='sm' mb='10px' color={'red'}> {errors?.validations && touched?.validations && touched?.validations[1]?.value && errors?.validations[1]?.value}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='2px'>
                                        Message
                                    </FormLabel>
                                    <Input
                                        disabled={values.validations[1].min === true ? false : true}
                                        fontSize='sm'
                                        onChange={handleChange} onBlur={handleBlur}
                                        value={values.validations[1].message}
                                        name={`validations[${1}].message`}
                                        placeholder='Enter Min message'
                                        fontWeight='500'
                                    // borderColor={errors.`validations[${1}].message` && touched.validations[1].message ? "red.300" : null}
                                    />
                                </GridItem>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }} mt={8}>
                                    <Flex>
                                        <Checkbox colorScheme="brandScheme" isChecked={values?.validations[1]?.max} onChange={(e) => {
                                            const isChecked = e.target.checked;
                                            setFieldValue(`validations[${2}].max`, isChecked);
                                            setFieldValue(
                                                'validations[2].message',
                                                isChecked ? values?.validations[2]?.message : ''
                                            );
                                            setFieldValue(
                                                'validations[2].value',
                                                isChecked ? values?.validations[2]?.value : ''
                                            )
                                        }} />
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                            Max
                                        </FormLabel>
                                    </Flex>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='2px'>
                                        Value
                                    </FormLabel>
                                    <Input
                                        disabled={values.validations[2].max === true ? false : true}
                                        fontSize='sm'
                                        onChange={handleChange} onBlur={handleBlur}
                                        value={values.validations[2].value}
                                        name={`validations[${2}].value`}
                                        placeholder='Enter Max Value'
                                        fontWeight='500'
                                        borderColor={errors?.validations && touched?.validations && errors?.validations[2]?.value && touched?.validations[2]?.value ? "red.300" : null}
                                    />
                                    <Text fontSize='sm' mb='10px' color={'red'}> {errors?.validations && touched?.validations && touched?.validations[2]?.value && errors?.validations[2]?.value}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='2px'>
                                        Message
                                    </FormLabel>
                                    <Input
                                        disabled={values.validations[2].max === true ? false : true}
                                        fontSize='sm'
                                        onChange={handleChange} onBlur={handleBlur}
                                        value={values.validations[2].massage}
                                        name={`validations[${2}].message`}
                                        placeholder='Enter Max Message'
                                        fontWeight='500'
                                        borderColor={errors.massage && touched.massage ? "red.300" : null}
                                    />
                                </GridItem>

                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }} mt={8}>
                                    <Flex>
                                        <Checkbox colorScheme="brandScheme" isChecked={values?.validations[3]?.match} me="10px" name={`validations[${3}].match`} onChange={(e) => {
                                            const isChecked = e.target.checked;
                                            setFieldValue(`validations[${3}].match`, isChecked);
                                            setFieldValue(
                                                'validations[3].message',
                                                isChecked ? values?.validations[3]?.message : ''
                                            );
                                            setFieldValue(
                                                'validations[3].value',
                                                isChecked ? values?.validations[3]?.value : ''
                                            );
                                        }} />
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                            Match
                                        </FormLabel>
                                    </Flex>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='2px'>
                                        Value
                                    </FormLabel>
                                    <Input
                                        disabled={values.validations[3].match === true ? false : true}
                                        fontSize='sm'
                                        onChange={handleChange} onBlur={handleBlur}
                                        value={values.validations[3].value}
                                        name={`validations[${3}].value`}
                                        placeholder='Enter Max Value'
                                        fontWeight='500'
                                        borderColor={errors?.validations && touched?.validations && errors?.validations[3]?.value && touched?.validations[3]?.value ? "red.300" : null}
                                    />
                                    <Text fontSize='sm' mb='10px' color={'red'}> {errors?.validations && touched?.validations && touched?.validations[3]?.value && errors?.validations[3]?.value}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='2px'>
                                        Message
                                    </FormLabel>
                                    <Input
                                        disabled={values.validations[3].match === true ? false : true}
                                        fontSize='sm'
                                        onChange={handleChange} onBlur={handleBlur}
                                        value={values.validations[3].massage}
                                        name={`validations[${3}].message`}
                                        placeholder='Enter Match Message'
                                        fontWeight='500'
                                        borderColor={errors?.validations && touched?.validations && errors?.validations[3]?.message && touched?.validations[3]?.message ? "red.300" : null}
                                    />
                                    <Text fontSize='sm' mb='10px' color={'red'}> {errors?.validations && touched?.validations && touched?.validations[3]?.message && errors?.validations[3]?.message}</Text>
                                </GridItem>

                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }} mt={8}>
                                    <Flex>
                                        <Checkbox colorScheme="brandScheme" isChecked={values.validations[4].types} name={`validations[${4}].types`} me="10px" onChange={(e) => {
                                            const isChecked = e.target.checked;
                                            setFieldValue(`validations[${4}].types`, isChecked);
                                            setFieldValue(
                                                'validations[4].formikType',
                                                isChecked ? values?.validations[4]?.formikType : ''
                                            );
                                            setFieldValue(
                                                'validations[4].message',
                                                isChecked ? values?.validations[4]?.message : ''
                                            );
                                        }} />
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                            Formik Type
                                        </FormLabel>
                                    </Flex>
                                </GridItem>

                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='2px'>
                                        FormikType
                                    </FormLabel>
                                    <Select
                                        disabled={values?.validations[4]?.types === true ? false : true}
                                        value={values.validations[4].formikType}
                                        name={`validations[${4}].formikType`}
                                        onChange={handleChange}
                                        fontWeight='500'
                                        placeholder={'Select Type'}
                                        borderColor={errors?.validations && touched?.validations && errors?.validations[4]?.formikType && touched?.validations[4]?.formikType ? "red.300" : null}
                                    >
                                        <option value='string'>String </option>
                                        <option value='email'>Email </option>
                                        <option value='date'>Date </option>
                                        <option value='number'>Number </option>
                                        <option value='object'>Object </option>
                                        <option value='array'>Array </option>
                                        <option value='url'>Url </option>
                                        <option value='boolean'>Boolean </option>
                                        <option value='positive'>Positive </option>
                                        <option value='negative'>Negative  </option>
                                        <option value='integer'>Integer  </option>
                                    </Select>
                                    <Text fontSize='sm' mb='10px' color={'red'}> {errors?.validations && touched?.validations && touched?.validations[4]?.formikType && errors?.validations[4]?.formikType}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='2px'>
                                        Message
                                    </FormLabel>
                                    <Input
                                        disabled={values?.validations[4]?.types === true ? false : true}
                                        fontSize='sm'
                                        onChange={handleChange} onBlur={handleBlur}
                                        value={values.validations[3].massage}
                                        name={`validations[${3}].message`}
                                        placeholder='Enter Formik Type Message'
                                        fontWeight='500'
                                        borderColor={errors?.validations && touched?.validations && errors?.validations[3]?.message && touched?.validations[3]?.message ? "red.300" : null}
                                    />
                                    <Text fontSize='sm' mb='10px' color={'red'}> {errors?.validations && touched?.validations && touched?.validations[3]?.message && errors?.validations[3]?.message}</Text>
                                </GridItem>

                            </Grid>
                        </>
                    </ModalBody>
                    <ModalFooter>
                        <Button colorScheme="brand" size='sm' mr={2} disabled={isLoding ? true : false} onClick={handleSubmit}>{isLoding ? <Spinner /> : 'Save'}</Button>
                        <Button sx={{
                            textTransform: "capitalize",
                        }} variant="outline"
                            colorScheme="red" size="sm" onClick={() => { onClose(); resetForm() }}>Close</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        </div>
    )
}

export default Add

================
File: Client/src/views/admin/validation/Edit.js
================
import { Button, Checkbox, Flex, FormLabel, Grid, GridItem, Heading, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Select, Text } from '@chakra-ui/react'
import Spinner from 'components/spinner/Spinner'
import React, { useState } from 'react'
import { useFormik } from 'formik'
import { HSeparator } from 'components/separator/Separator'
import { putApi } from 'services/api'
import { validationAddSchema } from 'schema/validationAddSchema'



const Edit = (props) => {
    const { onClose, isOpen, fetchData, selectedId, editdata, setAction, fetchViewData } = props;
    const [isLoding, setIsLoding] = useState(false)

    const initialValues = {
        name: editdata.name ? editdata.name : "",
        validations: [
            {
                require: editdata?.validations ? editdata?.validations[0]?.require : '',
                message: editdata?.validations ? editdata?.validations[0]?.message : '',
            },
            {
                min: editdata?.validations ? editdata?.validations[1]?.min : '',
                value: editdata?.validations ? editdata?.validations[1]?.value : '',
                message: editdata?.validations ? editdata?.validations[1]?.message : '',
            },
            {
                max: editdata?.validations ? editdata?.validations[2]?.max : '',
                value: editdata?.validations ? editdata?.validations[2]?.value : '',
                message: editdata?.validations ? editdata?.validations[2]?.message : '',
            },
            {
                match: editdata?.validations ? editdata?.validations[3]?.match : '',
                value: editdata?.validations ? editdata?.validations[3]?.value : '',
                message: editdata?.validations ? editdata?.validations[3]?.message : '',
            },
            {
                types: editdata?.validations ? editdata?.validations[4]?.formikType ? true : false : '',
                formikType: editdata?.validations ? editdata?.validations[4]?.formikType : '',
                message: editdata?.validations ? editdata?.validations[4]?.message : '',
            },
        ],
    };

    const formik = useFormik({
        initialValues: initialValues,
        validationSchema: validationAddSchema,
        enableReinitialize: true,
        validate: (values) => {
            const errors = {};

            if (values?.validations && values.validations[0]?.require && !values.validations[0]?.message) {
                errors.validations = errors.validations || [];
                errors.validations[0] = errors.validations[0] || {};
                errors.validations[0].message = 'Message is required';
            }
            if (values?.validations && values.validations[1]?.min && !values.validations[1]?.value) {
                errors.validations = errors.validations || [];
                errors.validations[1] = errors.validations[1] || {};
                errors.validations[1].value = 'Value is required';
            }
            if (values?.validations && values.validations[2]?.max && !values.validations[2]?.value) {
                errors.validations = errors.validations || [];
                errors.validations[2] = errors.validations[2] || {};
                errors.validations[2].value = 'Value is required';
            }
            if (values?.validations && values.validations[3]?.match && !values.validations[3]?.value && !values.validations[3]?.message) {
                errors.validations = errors.validations || [];
                errors.validations[3] = errors.validations[3] || {};
                errors.validations[3].value = 'Value is required';
                errors.validations[3].message = 'Meassage is required';
            }
            if (values?.validations && values.validations[4]?.types && !values.validations[4]?.formikType) {
                errors.validations = errors.validations || [];
                errors.validations[4] = errors.validations[4] || {};
                errors.validations[4].formikType = 'FormikType is required';
            }
            return errors;
        },
        onSubmit: (values, { resetForm }) => {
            EditData()
            resetForm()
        },
    });

    const EditData = async () => {
        try {

            let response = await putApi(`api/validation/edit/${selectedId}`, values);
            if (response.status === 200) {
                onClose()
                fetchData()
                if (fetchViewData) {
                    fetchViewData()
                }
                setAction((pre) => !pre)
            }
        }
        catch {
        }
        finally {
        }
    }

    const { errors, touched, values, handleBlur, handleChange, handleSubmit, setFieldValue, resetForm } = formik
    return (
        <div>
            <Modal onClose={onClose} isOpen={isOpen} isCentered size='2xl'>
                <ModalOverlay />
                <ModalContent>
                    <ModalHeader>Edit </ModalHeader>
                    <ModalCloseButton />
                    <HSeparator />
                    <ModalBody>
                        <>
                            <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                                <GridItem colSpan={{ base: 12, sm: 6 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='2px'>
                                        Name
                                    </FormLabel>
                                    <Input
                                        fontSize='sm'
                                        onChange={handleChange} onBlur={handleBlur}
                                        value={values.name}
                                        name="name"
                                        placeholder='Enter Name'
                                        fontWeight='500'
                                        borderColor={errors.name && touched.name ? "red.300" : null}
                                    />
                                    <Text mb='10px' color={'red'}> {errors.name && touched.name && errors.name}</Text>
                                </GridItem>

                                <GridItem colSpan={{ base: 12 }}>
                                    <Flex >
                                        <FormLabel display='flex' ms='4px' fontSize='lg' fontWeight='600' mb="0">
                                            Validations
                                        </FormLabel>
                                    </Flex>
                                </GridItem>

                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }} mt={8}>
                                    <Flex>
                                        <Checkbox colorScheme="brandScheme" me="10px" isChecked={values?.validations[0]?.require}
                                            onChange={(e) => {
                                                const isChecked = e.target.checked;
                                                setFieldValue(`validations[${0}].require`, isChecked);
                                                setFieldValue(
                                                    'validations[0].message',
                                                    isChecked ? values?.validations[0]?.message : ''
                                                );
                                            }}
                                        />
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                            Require
                                        </FormLabel>
                                    </Flex>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, md: 8 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='2px'>
                                        Message
                                    </FormLabel>
                                    <Input
                                        disabled={values?.validations[0]?.require === true ? false : true}
                                        fontSize='sm'
                                        onChange={handleChange} onBlur={handleBlur}
                                        value={values?.validations[0]?.message}
                                        name={`validations[${0}].message`}
                                        placeholder='Enter message'
                                        fontWeight='500'
                                        borderColor={errors?.validations && touched?.validations && errors?.validations[0]?.message && touched?.validations[0]?.message ? "red.300" : null}
                                    />
                                    <Text mb='10px' color={'red'}> {errors?.validations && touched?.validations && touched?.validations[0]?.message && errors?.validations[0]?.message}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }} mt={8}>
                                    <Flex>
                                        <Checkbox colorScheme="brandScheme" isChecked={values?.validations[1]?.min} onChange={(e) => {
                                            const isChecked = e.target.checked;
                                            setFieldValue(`validations[${1}].min`, isChecked);
                                            setFieldValue(
                                                'validations[1].message',
                                                (isChecked) ? values?.validations[1]?.message : ''
                                            );
                                            setFieldValue(
                                                'validations[1].value',
                                                (isChecked) ? values?.validations[1]?.value : ''
                                            )
                                        }} />
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                            Min
                                        </FormLabel>
                                    </Flex>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='2px'>
                                        Value
                                    </FormLabel>
                                    <Input
                                        disabled={values.validations[1].min === true ? false : true}
                                        fontSize='sm'
                                        onChange={handleChange} onBlur={handleBlur}
                                        value={values.validations[1].value}
                                        name={`validations[${1}].value`}
                                        placeholder='Enter Min Value'
                                        fontWeight='500'
                                        borderColor={errors?.validations && touched?.validations && errors?.validations[1]?.value && touched?.validations[1]?.value ? "red.300" : null}
                                    />
                                    <Text mb='10px' color={'red'}> {errors?.validations && touched?.validations && touched?.validations[1]?.value && errors?.validations[1]?.value}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='2px'>
                                        Message
                                    </FormLabel>
                                    <Input
                                        disabled={values.validations[1].min === true ? false : true}
                                        fontSize='sm'
                                        onChange={handleChange} onBlur={handleBlur}
                                        value={values.validations[1].message}
                                        name={`validations[${1}].message`}
                                        placeholder='Enter Min message'
                                        fontWeight='500'
                                    />
                                </GridItem>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }} mt={8}>
                                    <Flex>
                                        <Checkbox colorScheme="brandScheme" isChecked={values?.validations[1]?.max} onChange={(e) => {
                                            const isChecked = e.target.checked;
                                            setFieldValue(`validations[${2}].max`, isChecked);
                                            setFieldValue(
                                                'validations[2].message',
                                                isChecked ? values?.validations[2]?.message : ''
                                            );
                                            setFieldValue(
                                                'validations[2].value',
                                                isChecked ? values?.validations[2]?.value : ''
                                            )
                                        }} />
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                            Max
                                        </FormLabel>
                                    </Flex>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='2px'>
                                        Value
                                    </FormLabel>
                                    <Input
                                        disabled={values.validations[2].max === true ? false : true}
                                        fontSize='sm'
                                        onChange={handleChange} onBlur={handleBlur}
                                        value={values.validations[2].value}
                                        name={`validations[${2}].value`}
                                        placeholder='Enter Max Value'
                                        fontWeight='500'
                                        borderColor={errors?.validations && touched?.validations && errors?.validations[2]?.value && touched?.validations[2]?.value ? "red.300" : null}
                                    />
                                    <Text mb='10px' color={'red'}> {errors?.validations && touched?.validations && touched?.validations[2]?.value && errors?.validations[2]?.value}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='2px'>
                                        Message
                                    </FormLabel>
                                    <Input
                                        disabled={values.validations[2].max === true ? false : true}
                                        fontSize='sm'
                                        onChange={handleChange} onBlur={handleBlur}
                                        value={values.validations[2].massage}
                                        name={`validations[${2}].message`}
                                        placeholder='Enter Max Message'
                                        fontWeight='500'
                                        borderColor={errors.massage && touched.massage ? "red.300" : null}
                                    />
                                </GridItem>

                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }} mt={8}>
                                    <Flex>
                                        <Checkbox colorScheme="brandScheme" isChecked={values?.validations[3]?.match} me="10px" name={`validations[${3}].match`} onChange={(e) => {
                                            const isChecked = e.target.checked;
                                            setFieldValue(`validations[${3}].match`, isChecked);
                                            setFieldValue(
                                                'validations[3].message',
                                                isChecked ? values?.validations[3]?.message : ''
                                            );
                                            setFieldValue(
                                                'validations[3].value',
                                                isChecked ? values?.validations[3]?.value : ''
                                            );
                                        }} />
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                            Match
                                        </FormLabel>
                                    </Flex>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='2px'>
                                        Value
                                    </FormLabel>
                                    <Input
                                        disabled={values.validations[3].match === true ? false : true}
                                        fontSize='sm'
                                        onChange={handleChange} onBlur={handleBlur}
                                        value={values.validations[3].value}
                                        name={`validations[${3}].value`}
                                        placeholder='Enter Max Value'
                                        fontWeight='500'
                                        borderColor={errors?.validations && touched?.validations && errors?.validations[3]?.value && touched?.validations[3]?.value ? "red.300" : null}
                                    />
                                    <Text mb='10px' color={'red'}> {errors?.validations && touched?.validations && touched?.validations[3]?.value && errors?.validations[3]?.value}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='2px'>
                                        Message
                                    </FormLabel>
                                    <Input
                                        disabled={values.validations[3].match === true ? false : true}
                                        fontSize='sm'
                                        onChange={handleChange} onBlur={handleBlur}
                                        value={values.validations[3].massage}
                                        name={`validations[${3}].message`}
                                        placeholder='Enter Match Message'
                                        fontWeight='500'
                                        borderColor={errors?.validations && touched?.validations && errors?.validations[3]?.message && touched?.validations[3]?.message ? "red.300" : null}
                                    />
                                    <Text mb='10px' color={'red'}> {errors?.validations && touched?.validations && touched?.validations[3]?.message && errors?.validations[3]?.message}</Text>
                                </GridItem>

                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }} mt={8}>
                                    <Flex>
                                        <Checkbox colorScheme="brandScheme" isChecked={values.validations[4].types} name={`validations[${4}].types`} me="10px" onChange={(e) => {
                                            const isChecked = e.target.checked;
                                            setFieldValue(`validations[${4}].types`, isChecked);
                                            setFieldValue(
                                                'validations[4].formikType',
                                                isChecked ? values?.validations[4]?.formikType : ''
                                            );
                                            setFieldValue(
                                                'validations[4].message',
                                                isChecked ? values?.validations[4]?.message : ''
                                            );
                                        }} />
                                        <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                            Formik Type
                                        </FormLabel>
                                    </Flex>
                                </GridItem>

                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='2px'>
                                        FormikType
                                    </FormLabel>
                                    <Select
                                        disabled={values?.validations[4]?.types === true ? false : true}
                                        value={values.validations[4].formikType}
                                        name={`validations[${4}].formikType`}
                                        onChange={handleChange}
                                        fontWeight='500'
                                        placeholder={'Select Type'}
                                        borderColor={errors?.validations && touched?.validations && errors?.validations[4]?.formikType && touched?.validations[4]?.formikType ? "red.300" : null}
                                    >
                                        <option value='string'>String </option>
                                        <option value='email'>Email </option>
                                        <option value='date'>Date </option>
                                        <option value='number'>Number </option>
                                        <option value='object'>Object </option>
                                        <option value='array'>Array </option>
                                        <option value='url'>Url </option>
                                        <option value='boolean'>Boolean </option>
                                        <option value='positive'>Positive </option>
                                        <option value='negative'>Negative  </option>
                                        <option value='integer'>Integer  </option>
                                    </Select>
                                    <Text mb='10px' color={'red'}> {errors?.validations && touched?.validations && touched?.validations[4]?.formikType && errors?.validations[4]?.formikType}</Text>
                                </GridItem>
                                <GridItem colSpan={{ base: 12, sm: 6, md: 4 }}>
                                    <FormLabel display='flex' ms='4px' fontSize='sm' fontWeight='500' mb='2px'>
                                        Message
                                    </FormLabel>
                                    <Input
                                        disabled={values?.validations[4]?.types === true ? false : true}
                                        fontSize='sm'
                                        onChange={handleChange} onBlur={handleBlur}
                                        value={values.validations[4].massage}
                                        name={`validations[${3}].message`}
                                        placeholder='Enter Formik Type Message'
                                        fontWeight='500'
                                        borderColor={errors?.validations && touched?.validations && errors?.validations[3]?.message && touched?.validations[3]?.message ? "red.300" : null}
                                    />
                                    {/* <Text mb='10px' color={'red'}> {errors?.validations && touched?.validations && touched?.validations[3]?.message && errors?.validations[3]?.message}</Text> */}
                                </GridItem>

                            </Grid>
                        </>
                    </ModalBody>
                    <ModalFooter>
                        <Button colorScheme="brand" size='sm' mr={2} disabled={isLoding ? true : false} onClick={handleSubmit}>{isLoding ? <Spinner /> : 'Update'}</Button>
                        <Button sx={{
                            textTransform: "capitalize",
                        }} variant="outline"
                            colorScheme="red" size="sm" onClick={onClose}>Close</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        </div>
    )
}

export default Edit

================
File: Client/src/views/admin/validation/index.js
================
import { AddIcon, DeleteIcon, EditIcon, ViewIcon } from '@chakra-ui/icons'
import { Button, Checkbox, Flex, Grid, GridItem, Heading, Menu, MenuButton, MenuItem, MenuList, Text } from '@chakra-ui/react'
import Card from 'components/card/Card'
import { HSeparator } from 'components/separator/Separator'
import React, { useEffect, useState } from 'react'
import { getApi } from 'services/api'
import Edit from './Edit'
import View from './view'
import { useNavigate } from 'react-router-dom'
import { CiMenuKebab } from 'react-icons/ci'
import Add from './add'
import { IoIosArrowBack } from 'react-icons/io'
import DataNotFound from 'components/notFoundData'
import CommonDeleteModel from 'components/commonDeleteModel';
import { deleteApi } from 'services/api'
import { deleteManyApi } from 'services/api';

const Index = () => {
    const navigate = useNavigate()
    const [editModal, setEdit] = useState(false)
    const [viewModal, setViewModal] = useState(false)
    const [addModal, setAddModal] = useState(false)
    const [deleteMany, setDeleteMany] = useState(false)
    const [action, setAction] = useState(false)
    const [selectedId, setselectedId] = useState()
    const [editdata, setEditData] = useState([])
    const [validationData, setValidateData] = useState([])
    const [selectedValues, setSelectedValues] = useState([]);
    const [method, setMethod] = useState('')
    const [isLoding, setIsLoding] = useState(false)

    const fetchData = async () => {
        let response = await getApi(`api/validation`);
        setValidateData(response?.data);
    }
    useEffect(() => {
        fetchData()
    }, [action])

    const handleEditClose = () => {
        setEdit(false)
    }

    const handleEditOpen = (item) => {
        setselectedId(item._id)
        setEditData(item)
        setEdit(!editModal)
    }
    const handleViewOpen = (item) => {
        setselectedId(item._id)
        setViewModal(!viewModal)
    }
    const handleViewClose = () => {
        setViewModal(false)
    }
    const handleAddOpen = (item) => {
        setAddModal(!viewModal)
    }
    const handleAddClose = () => {
        setAddModal(false)
    }

    const handleCheckboxChange = (event, value) => {
        if (event.target.checked) {
            setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);
        } else {
            setSelectedValues((prevSelectedValues) =>
                prevSelectedValues.filter((selectedValue) => selectedValue !== value)
            );
        }
    };

    const handleOpenDeleteMany = (id, type) => {
        setMethod(type)
        setselectedId(id);
        setDeleteMany(true);
    }

    const handleDeleteValidation = async (id, fieldsIds) => {
        if (method === 'one') {
            try {
                if (id) {
                    setIsLoding(true)
                    const response = await deleteApi('api/validation/delete/', id)
                    if (response.status === 200) {
                        setDeleteMany(false)
                        fetchData()
                    }
                }
            } catch (error) {
                console.log(error)
            }
            finally {
                setIsLoding(false)
            }
        } else if (method === 'many') {
            try {
                setIsLoding(true)
                let response = await deleteManyApi('api/validation/deleteMany', fieldsIds)
                if (response.status === 200) {
                    setSelectedValues([])
                    setDeleteMany(false)
                    fetchData()
                }
            } catch (error) {
                console.log(error)
            }
            finally {
                setIsLoding(false)
            }
        }

    };

    return (
        <div>
            <Flex justifyContent={"end"} mb={3}>
                {selectedValues.length > 0 && <Button variant='outline' colorScheme='brand' color={"red"} mr={2} leftIcon={<DeleteIcon />} onClick={() => handleOpenDeleteMany('', "many")} size='sm' >Delete</Button>}
                <Button size='sm' variant='brand' me={1} onClick={() => handleAddOpen()} leftIcon={<AddIcon />}>Add New</Button>
                <Button size='sm' variant='brand' onClick={() => navigate(-1)} leftIcon={<IoIosArrowBack />}> Back</Button>
            </Flex>
            <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                {validationData && validationData?.map((item, i) => (
                    <GridItem rowSpan={2} colSpan={{ base: 12, md: 6, lg: 3 }} key={i}>
                        <Card>
                            <Flex alignItems={"center"} justifyContent={"space-between"}>
                                <Flex>
                                    <Checkbox colorScheme="brandScheme" value={selectedValues} isChecked={selectedValues.includes(item?._id)} onChange={(event) => handleCheckboxChange(event, item?._id)} me="10px" />
                                    <Heading size="md" fontWeight={"500"} textTransform={"capitalize"}
                                    >{item?.name}</Heading>
                                </Flex>
                                <Menu isLazy  >
                                    <MenuButton><CiMenuKebab /></MenuButton>
                                    <MenuList minW={'fit-content'} transform={"translate(-71px, 0px) !important;"}>
                                        <MenuItem py={2.5} alignItems={'start'} onClick={() => handleEditOpen(item)} icon={<EditIcon fontSize={15} />}>Edit</MenuItem>
                                        <MenuItem py={2.5} alignItems={'start'} color={'green'} onClick={() => handleViewOpen(item)} icon={<ViewIcon fontSize={15} />}>View</MenuItem>
                                        <MenuItem py={2.5} alignItems={'start'} color={'red'} icon={<DeleteIcon fontSize={15} />} onClick={() => handleOpenDeleteMany(item._id, "one")}>Delete</MenuItem>
                                    </MenuList>
                                </Menu>
                            </Flex>
                            <Text pt={3} textTransform={"capitalize"}>validations</Text>
                            <HSeparator mb={2} mt={1} />
                            <Flex>
                                <Text width={"50%"} pr={2} textTransform={"capitalize"}>require:</Text>
                                <Text width={"50%"} fontWeight={"500"}  > {item?.validations && item?.validations?.length > 0 && item?.validations[0]?.require === true ? "True" : "False"
                                }</Text>
                            </Flex>
                            <Flex>
                                <Text width={"50%"} pr={2} textTransform={"capitalize"}>min:</Text>
                                <Text width={"50%"} fontWeight={"500"}  >{item?.validations && item?.validations?.length > 0 && item?.validations[1]?.min === true ? "True" : "False"
                                }</Text>
                            </Flex>
                            <Flex>
                                <Text width={"50%"} pr={2} textTransform={"capitalize"}>max:</Text>
                                <Text width={"50%"} fontWeight={"500"}  >{item?.validations && item?.validations?.length > 0 && item?.validations[2]?.max === true ? "True" : "False"
                                }</Text>
                            </Flex>
                            <Flex>
                                <Text width={"50%"} pr={2} textTransform={"capitalize"}>match:</Text>
                                <Text width={"50%"} fontWeight={"500"}  >{item?.validations && item?.validations?.length > 0 && item?.validations[3]?.match === true ? "True" : "False"
                                }</Text>
                            </Flex>
                            <Flex>
                                <Text width={"50%"} pr={2} textTransform={"capitalize"}>formik type:</Text>
                                <Text width={"50%"} fontWeight={"500"}  >{item?.validations && item?.validations?.length > 0 && item?.validations[4]?.formikType ? "True" : "False"
                                }</Text>
                            </Flex>
                        </Card>
                    </GridItem>
                ))}
            </Grid>
            {!validationData || validationData.length === 0 && 
                <Card mt='5'>
                    <Text textAlign={'center'} width="100%" color={'gray.500'} fontSize="sm" fontWeight="700">
                        <DataNotFound />
                    </Text>
                </Card>
            }

            <Add isOpen={addModal} onClose={handleAddClose} fetchData={fetchData} setAction={setAction} />
            <Edit isOpen={editModal} onClose={handleEditClose} selectedId={selectedId} editdata={editdata} setAction={setAction} fetchData={fetchData} />
            <View isOpen={viewModal} onClose={handleViewClose} selectedId={selectedId} setAction={setAction} fetchData={fetchData} />

            <CommonDeleteModel isOpen={deleteMany} onClose={() => setDeleteMany(false)} type={method === "one" ? 'Validation' : 'Validations'} handleDeleteData={handleDeleteValidation} ids={selectedId} selectedValues={selectedValues} />
        </div>
    )
}

export default Index

================
File: Client/src/views/admin/validation/view.js
================
import { DeleteIcon, EditIcon } from '@chakra-ui/icons';
import { Box, Button, Flex, Grid, GridItem, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Text } from '@chakra-ui/react'
import { HSeparator } from 'components/separator/Separator';
import Spinner from 'components/spinner/Spinner'
import React, { useEffect, useState } from 'react'
import { getApi } from 'services/api';
import Edit from './Edit';



const View = (props) => {
    const { onClose, isOpen, selectedId, fetchData, setAction } = props;
    const [isLoding, setIsLoding] = useState(false)
    const [data, setData] = useState(false)
    const [editModal, setEditModal] = useState(false)

    const handleEditClose = () => {
        setEditModal(false)
    }

    const fetchViewData = async () => {
        setIsLoding(true)
        try {
            if (selectedId) {
                let response = await getApi(`api/validation/view/`, selectedId)
                setData(response.data)
            }
        } catch (error) {
            console.log(error)
        } finally {
            setIsLoding(false)
        }
    }
    useEffect(() => {
        fetchViewData()
    }, [selectedId, editModal])

    return (
        <div>
            <Modal onClose={onClose} isOpen={isOpen} isCentered size="lg">
                <ModalOverlay />
                <ModalContent>
                    <ModalHeader textTransform={"capitalize"}>{data?.name} </ModalHeader>
                    <ModalCloseButton />
                    <ModalBody>
                        <Box>
                            <Grid templateColumns="repeat(12, 1fr)" gap={3}>
                                <GridItem colSpan={{ base: 12 }}>
                                    <Flex>
                                        <Text fontWeight={"bold"} pr={2} textTransform={"capitalize"}>require :</Text>
                                        <Text >
                                            {data?.validations && data?.validations?.length > 0 && data?.validations[0]?.require === true ? "True" : "False"}
                                        </Text>
                                    </Flex>
                                </GridItem>
                                {data?.validations && data?.validations?.length > 0 && data?.validations[0]?.require === true &&
                                    <GridItem colSpan={{ base: 12 }} >
                                        <Flex>
                                            <Text display='flex' ms='4px' fontSize='sm' fontWeight={"bold"} mb="0">
                                                Message :
                                            </Text>
                                            <Text display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                                {data?.validations && data?.validations?.length > 0 && data?.validations[0]?.message}
                                            </Text>
                                        </Flex>
                                    </GridItem>
                                }
                                <GridItem colSpan={{ base: 12 }} ><HSeparator /></GridItem>
                                <GridItem colSpan={{ base: 12 }}>
                                    <Flex>
                                        <Text fontWeight={"bold"} pr={2} textTransform={"capitalize"}>Min :</Text>
                                        <Text >
                                            {data?.validations && data?.validations?.length > 0 && data?.validations[1]?.min === true ? "True" : "False"}
                                        </Text>
                                    </Flex>
                                </GridItem>
                                {data?.validations && data?.validations?.length > 0 && data?.validations[1]?.min === true &&
                                    <>
                                        <GridItem colSpan={{ base: 12, sm: 6 }} >
                                            <Flex>
                                                <Text display='flex' ms='4px' fontSize='sm' fontWeight={"bold"} mb="0">
                                                    Message:
                                                </Text>
                                                <Text display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                                    {data?.validations && data?.validations?.length > 0 && data?.validations[1]?.message}
                                                </Text>
                                            </Flex>
                                        </GridItem>
                                        <GridItem colSpan={{ base: 12, sm: 6 }} >
                                            <Flex>
                                                <Text display='flex' ms='4px' fontSize='sm' fontWeight={"bold"} mb="0">
                                                    Value :
                                                </Text>
                                                <Text display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                                    {data?.validations && data?.validations?.length > 0 && data?.validations[1]?.message}
                                                </Text>
                                            </Flex>
                                        </GridItem>
                                    </>
                                }
                                <GridItem colSpan={{ base: 12 }} ><HSeparator /></GridItem>

                                <GridItem colSpan={{ base: 12 }}>
                                    <Flex>
                                        <Text fontWeight={"bold"} pr={2} textTransform={"capitalize"}>Max :</Text>
                                        <Text >
                                            {data?.validations && data?.validations?.length > 0 && data?.validations[2]?.max === true ? "True" : "False"}
                                        </Text>
                                    </Flex>
                                </GridItem>
                                {data?.validations && data?.validations?.length > 0 && data?.validations[2]?.max === true &&
                                    <>
                                        <GridItem colSpan={{ base: 12, sm: 6 }} >
                                            <Flex>
                                                <Text display='flex' ms='4px' fontSize='sm' fontWeight={"bold"} mb="0">
                                                    Message:
                                                </Text>
                                                <Text display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                                    {data?.validations && data?.validations?.length > 0 && data?.validations[2]?.message}
                                                </Text>
                                            </Flex>
                                        </GridItem>
                                        <GridItem colSpan={{ base: 12, sm: 6 }} >
                                            <Flex>
                                                <Text display='flex' ms='4px' fontSize='sm' fontWeight={"bold"} mb="0">
                                                    Value :
                                                </Text>
                                                <Text display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                                    {data?.validations && data?.validations?.length > 0 && data?.validations[2]?.message}
                                                </Text>
                                            </Flex>

                                        </GridItem>
                                    </>
                                }
                                <GridItem colSpan={{ base: 12 }} ><HSeparator /></GridItem>
                                <GridItem colSpan={{ base: 12 }} >
                                    <Flex>
                                        <Text fontWeight={"bold"} pr={2} textTransform={"capitalize"}>Match:</Text>
                                        <Text >
                                            {data?.validations && data?.validations?.length > 0 && data?.validations[3]?.match === true ? "True" : "False"}
                                        </Text>
                                    </Flex>
                                </GridItem>
                                {data?.validations && data?.validations?.length > 0 && data?.validations[3]?.match === true &&
                                    <>
                                        <GridItem colSpan={{ base: 12, sm: 6 }} >
                                            <Flex>
                                                <Text display='flex' ms='4px' fontSize='sm' fontWeight={"bold"} mb="0">
                                                    Message:
                                                </Text>
                                                <Text display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                                    {data?.validations && data?.validations?.length > 0 && data?.validations[3]?.message}
                                                </Text>
                                            </Flex>
                                        </GridItem>
                                        <GridItem colSpan={{ base: 12, sm: 6 }} >
                                            <Flex>
                                                <Text display='flex' ms='4px' fontSize='sm' fontWeight={"bold"} mb="0">
                                                    Value :
                                                </Text>
                                                <Text display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                                    {data?.validations && data?.validations?.length > 0 && data?.validations[3]?.message}
                                                </Text>
                                            </Flex>
                                        </GridItem>
                                    </>
                                }
                                <GridItem colSpan={{ base: 12 }} >
                                    <HSeparator />
                                </GridItem>

                                <GridItem colSpan={{ base: 12 }} >
                                    <Flex>
                                        <Text fontWeight={"bold"} pr={2} textTransform={"capitalize"}>FormikType :</Text>
                                        <Text >
                                            {data?.validations && data?.validations?.length > 0 && data?.validations[4]?.formikType ? "True" : "False"}
                                        </Text>
                                    </Flex>
                                </GridItem>
                                {data?.validations && data?.validations?.length > 0 && data?.validations[4]?.formikType &&
                                    <GridItem colSpan={{ base: 12 }} >
                                        <Flex>
                                            <Text display='flex' ms='4px' fontSize='sm' fontWeight={"bold"} mb="0">
                                                Message :
                                            </Text>
                                            <Text display='flex' ms='4px' fontSize='sm' fontWeight='500' mb="0">
                                                {data?.validations && data?.validations?.length > 0 && data?.validations[4]?.message}
                                            </Text>
                                        </Flex>
                                    </GridItem>
                                }
                                <GridItem colSpan={{ base: 12 }} >
                                    <HSeparator />
                                </GridItem>
                            </Grid>
                        </Box>
                    </ModalBody>
                    <ModalFooter>
                        <Button variant="outline" colorScheme='green' size='sm' me={2} onClick={() => { onClose(); setEditModal(true) }} leftIcon={<EditIcon />}>Edit</Button>
                        <Button colorScheme="red" size='sm' mr={2} disabled={isLoding ? true : false} leftIcon={<DeleteIcon />} >{isLoding ? <Spinner /> : 'Delete'}</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
            <Edit isOpen={editModal} onClose={handleEditClose} selectedId={props.selectedId} editdata={data} setAction={setAction} fetchData={fetchData} fetchViewData={fetchViewData} />
        </div>
    )
}

export default View

================
File: Client/src/views/auth/signIn/index.jsx
================
import React, { useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useFormik } from "formik";
// Chakra imports
import {
  Box,
  Button,
  Checkbox,
  Flex,
  FormControl,
  FormErrorMessage,
  FormLabel,
  Heading,
  Icon,
  Input,
  InputGroup,
  InputRightElement,
  Text,
  useColorModeValue,
} from "@chakra-ui/react";

// Custom components
import DefaultAuth from "layouts/auth/Default";
// Assets

import { MdOutlineRemoveRedEye } from "react-icons/md";
import { RiEyeCloseLine } from "react-icons/ri";
import { postApi } from "services/api";
import { loginSchema } from "schema";
import { toast } from "react-toastify";
import Spinner from "components/spinner/Spinner";
import { useDispatch, useSelector } from "react-redux";
import { fetchImage } from "../../../redux/slices/imageSlice";
import { setUser } from "../../../redux/slices/localSlice";

function SignIn() {
  // Chakra color mode
  const textColor = useColorModeValue("navy.700", "white");
  const textColorSecondary = "gray.400";
  const brandStars = useColorModeValue("brand.500", "brand.400");
  const [isLoding, setIsLoding] = React.useState(false);
  const [checkBox, setCheckBox] = React.useState(true);

  const dispatch = useDispatch();

  useEffect(() => {
    // Dispatch the fetchRoles action on component mount
    dispatch(fetchImage("?isActive=true"));
  }, [dispatch]);

  const image = useSelector((state) => state?.images?.images);

  const [show, setShow] = React.useState(false);
  const showPass = () => setShow(!show);

  const initialValues = {
    username: "",
    password: "",
  };
  const {
    errors,
    values,
    touched,
    handleBlur,
    handleChange,
    resetForm,
    handleSubmit,
  } = useFormik({
    initialValues: initialValues,
    validationSchema: loginSchema,
    onSubmit: (values, { resetForm }) => {
      login();
    },
  });
  const navigate = useNavigate();

  const login = async () => {
    try {
      setIsLoding(true);
      let response = await postApi("api/user/login", values, checkBox);
      if (response && response.status === 200) {
        navigate("/superAdmin");
        toast.success("Login Successfully!");
        resetForm();
        dispatch(setUser(response?.data?.user))
      } else {
        toast.error(response.response.data?.error);
      }
    } catch (e) {
      console.log(e);
    } finally {
      setIsLoding(false);
    }
  };

  return (
    <DefaultAuth
      illustrationBackground={image?.length > 0 && image[0]?.authImg}
      image={image?.length > 0 && image[0]?.authImg}
    >
      <Flex
        maxW={{ base: "100%", md: "max-content" }}
        w="100%"
        mx={{ base: "auto", lg: "0px" }}
        me="auto"
        h="fit-content"
        alignItems="start"
        justifyContent="center"
        mb={{ base: "30px", md: "60px" }}
        px={{ base: "25px", md: "0px" }}
        mt={{ base: "40px", md: "14vh" }}
        flexDirection="column"
      >
        <Box me="auto">
          <Heading color={textColor} fontSize="36px" mb="10px">
            Sign In
          </Heading>
          <Text
            mb="36px"
            ms="4px"
            color={textColorSecondary}
            fontWeight="400"
            fontSize="md"
          >
            Enter your email and password to sign in!
          </Text>
        </Box>
        <Flex
          zIndex="2"
          direction="column"
          w={{ base: "100%", md: "420px" }}
          maxW="100%"
          background="transparent"
          borderRadius="15px"
          mx={{ base: "auto", lg: "unset" }}
          me="auto"
          mb={{ base: "20px", md: "auto" }}
        >
          <form onSubmit={handleSubmit}>
            <FormControl isInvalid={errors.username && touched.username}>
              <FormLabel
                display="flex"
                ms="4px"
                fontSize="sm"
                fontWeight="500"
                color={textColor}
                mb="8px"
              >
                Email<Text color={brandStars}>*</Text>
              </FormLabel>
              <Input
                fontSize="sm"
                onChange={handleChange}
                onBlur={handleBlur}
                value={values.username}
                name="username"
                ms={{ base: "0px", md: "0px" }}
                type="email"
                placeholder="mail@simmmple.com"
                mb={errors.username && touched.username ? undefined : "24px"}
                fontWeight="500"
                size="lg"
                borderColor={
                  errors.username && touched.username ? "red.300" : null
                }
                className={
                  errors.username && touched.username ? "isInvalid" : null
                }
              />
              {errors.username && touched.username && (
                <FormErrorMessage mb="24px">
                  {" "}
                  {errors.username}
                </FormErrorMessage>
              )}
            </FormControl>

            <FormControl
              isInvalid={errors.password && touched.password}
              mb="24px"
            >
              <FormLabel
                ms="4px"
                fontSize="sm"
                fontWeight="500"
                color={textColor}
                display="flex"
              >
                Password<Text color={brandStars}>*</Text>
              </FormLabel>
              <InputGroup size="md">
                <Input
                  isRequired={true}
                  fontSize="sm"
                  placeholder="Enter Your Password"
                  name="password"
                  mb={errors.password && touched.password ? undefined : "24px"}
                  value={values.password}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  size="lg"
                  variant="auth"
                  type={show ? "text" : "password"}
                  borderColor={
                    errors.password && touched.password ? "red.300" : null
                  }
                  className={
                    errors.password && touched.password ? "isInvalid" : null
                  }
                />
                <InputRightElement display="flex" alignItems="center" mt="4px">
                  <Icon
                    color={textColorSecondary}
                    _hover={{ cursor: "pointer" }}
                    as={show ? RiEyeCloseLine : MdOutlineRemoveRedEye}
                    onClick={showPass}
                  />
                </InputRightElement>
              </InputGroup>
              {errors.password && touched.password && (
                <FormErrorMessage mb="24px">
                  {" "}
                  {errors.password}
                </FormErrorMessage>
              )}
              <Flex justifyContent="space-between" align="center" mb="24px">
                <FormControl display="flex" alignItems="center">
                  <Checkbox
                    onChange={(e) => setCheckBox(e.target.checked)}
                    id="remember-login"
                    value={checkBox}
                    defaultChecked
                    colorScheme="brandScheme"
                    me="10px"
                  />
                  <FormLabel
                    htmlFor="remember-login"
                    mb="0"
                    fontWeight="normal"
                    color={textColor}
                    fontSize="sm"
                  >
                    Keep me logged in
                  </FormLabel>
                </FormControl>
              </Flex>

              <Flex
                justifyContent="space-between"
                align="center"
                mb="24px"
              ></Flex>
              <Button
                fontSize="sm"
                variant="brand"
                fontWeight="500"
                w="100%"
                h="50"
                type="submit"
                mb="24px"
                disabled={isLoding ? true : false}
              >
                {isLoding ? <Spinner /> : "Sign In"}
              </Button>
            </FormControl>
          </form>
        </Flex>
      </Flex>
    </DefaultAuth>
  );
}

export default SignIn;

================
File: Client/src/constant.js
================
export const constant = {
    baseUrl: process.env.REACT_APP_BASE_URL
}

================
File: Client/src/index.js
================
import React, { useEffect, useState } from 'react';
import ReactDOM from 'react-dom';
import 'assets/css/App.css';
import { BrowserRouter as Router, Routes, Route, useNavigate } from 'react-router-dom';
import AuthLayout from './layouts/auth';
import AdminLayout from 'layouts/admin';
import UserLayout from 'layouts/user';
import { ChakraProvider } from '@chakra-ui/react';
import theme from 'theme/theme';
import { ThemeEditorProvider } from '@hypertheme-editor/chakra-ui';
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { Provider } from 'react-redux';
import { store, persistor } from './redux/store';
import { PersistGate } from 'redux-persist/integration/react';

function App() {
	const token = localStorage.getItem("token") || sessionStorage.getItem("token");

	const user = JSON.parse(localStorage.getItem("user"))
	useNavigate()

	return (
		<>
			<ToastContainer />
			<Routes>
				{token && user?.role ? (
					user?.role === 'user' ?
						<Route path="/*" element={<UserLayout />} />
						: user?.role === 'superAdmin' ?
							<Route path="/*" element={<AdminLayout />} />
							: ''
				) : (
					<Route path="/*" element={<AuthLayout />} />
				)}
			</Routes>
		</>
	);
}

ReactDOM.render(
	<Provider store={store}>
		<PersistGate loading={null} persistor={persistor}>
			<ChakraProvider theme={theme}>
				<React.StrictMode>
					<ThemeEditorProvider>
						<Router>
							<App />
						</Router>
					</ThemeEditorProvider>
				</React.StrictMode>
			</ChakraProvider>
		</PersistGate>
	</Provider>
	, document.getElementById('root')
);

================
File: Client/src/roles.js
================
export const ROLE_PATH = {
    user: "/user",
    admin: "/admin",
    superAdmin: "/superAdmin",
    manager: "/manager",
    teamleader: "/teamleader",
    executive: "/executive",
    telecaller: "/telecaller"
}

export const ROLE = {
    admin: "admin",
    user: "user",
    manager: "manager",
    teamleader: "teamleader",
    telecaller: "telecaller",
    executive: "executive",
}

================
File: Client/src/routes.js
================
import { Icon } from "@chakra-ui/react";
import { HiUsers } from "react-icons/hi";
import {
  MdContacts,
  MdHome,
  MdInsertChartOutlined,
  MdLeaderboard,
  MdLock
} from "react-icons/md";
// icon
import React from "react";
import { AiFillFolderOpen, AiOutlineMail } from "react-icons/ai";
import { FaCalendarAlt, FaRupeeSign, FaTasks, FaWpforms } from "react-icons/fa";
import { LuBuilding2 } from "react-icons/lu";
import { PiPhoneCallBold } from "react-icons/pi";
import { FaCreativeCommonsBy } from "react-icons/fa";
import { SiGooglemeet } from "react-icons/si";
import { ROLE_PATH } from "./roles";
import ChangeImage from "views/admin/image";
import Validation from "views/admin/validation";
import CustomField from "views/admin/customField";
import TableField from "views/admin/tableField";
import activeDeactiveModule from "views/admin/activeDeactiveModule";
import { TbExchange, TbTableColumn } from "react-icons/tb";
import { GrValidate } from "react-icons/gr";
import { VscFileSubmodule } from "react-icons/vsc";
import { HiTemplate } from "react-icons/hi";
import { TbBulb } from "react-icons/tb";
import { BsBlockquoteRight } from "react-icons/bs";
import { RiAccountCircleFill } from "react-icons/ri";
import { TbInvoice } from "react-icons/tb";
import { TbFileInvoice } from "react-icons/tb";
// Admin Imports
const MainDashboard = React.lazy(() => import("views/admin/default"));

// My component
const Contact = React.lazy(() => import('views/admin/contact'));
const ContactView = React.lazy(() => import('views/admin/contact/View'));
const ContactImport = React.lazy(() => import("views/admin/contact/components/ContactImport"));

const Quotes = React.lazy(() => import('views/admin/quotes'));
const QuotesView = React.lazy(() => import('views/admin/quotes/View'));
const QuotesImport = React.lazy(() => import("views/admin/quotes/components/QuotesImport"));

const Invoices = React.lazy(() => import('views/admin/invoice'));
const InvoicesView = React.lazy(() => import('views/admin/invoice/View'));
const InvoicesImport = React.lazy(() => import("views/admin/invoice/components/InvoiceImport"));

const User = React.lazy(() => import("views/admin/users"));
const UserView = React.lazy(() => import("views/admin/users/View"));

const Property = React.lazy(() => import("views/admin/property"));
const PropertyView = React.lazy(() => import("views/admin/property/View"));
const PropertyImport = React.lazy(() => import("views/admin/property/components/PropertyImport"))

const Lead = React.lazy(() => import("views/admin/lead"));
const LeadView = React.lazy(() => import("views/admin/lead/View"));
const LeadImport = React.lazy(() => import("views/admin/lead/components/LeadImport"));

const Communication = React.lazy(() => import("views/admin/communication"));

const Task = React.lazy(() => import("views/admin/task"));
const TaskView = React.lazy(() => import("views/admin/task/components/taskView"));
const Calender = React.lazy(() => import("views/admin/calender"));
const Payments = React.lazy(() => import("views/admin/payments"));
const Role = React.lazy(() => import("views/admin/role"));

const Document = React.lazy(() => import("views/admin/document"));

const EmailHistory = React.lazy(() => import("views/admin/emailHistory"));
const EmailHistoryView = React.lazy(() => import("views/admin/emailHistory/View"));

const Meeting = React.lazy(() => import("views/admin/meeting"));
const MettingView = React.lazy(() => import("views/admin/meeting/View"));

const PhoneCall = React.lazy(() => import("views/admin/phoneCall"));
const PhoneCallView = React.lazy(() => import("views/admin/phoneCall/View"));

const Report = React.lazy(() => import("views/admin/reports"));
const EmailTemplate = React.lazy(() => import("views/admin/emailTemplate"));
const AddEdit = React.lazy(() => import("views/admin/emailTemplate/AddEdit"));
const templateView = React.lazy(() => import("views/admin/emailTemplate/view.js"));

// Auth Imports
const SignInCentered = React.lazy(() => import("views/auth/signIn"));
// admin setting 
const AdminSetting = React.lazy(() => import("views/admin/adminSetting"));
const validation = React.lazy(() => import("views/admin/validation"));
const module = React.lazy(() => import("views/admin/moduleName"));
const Opportunities = React.lazy(() => import("views/admin/opportunities"));
const OpportunitiesView = React.lazy(() => import("views/admin/opportunities/View"));
const OpportunitiesImport = React.lazy(() => import("views/admin/opportunities/components/OpprtunityImport"));
const Account = React.lazy(() => import("views/admin/account"));
const AccountView = React.lazy(() => import("views/admin/account/View"));
const AccountImport = React.lazy(() => import("views/admin/account/components/AccountImport"));

const routes = [
  // ========================== Dashboard ==========================
  {
    name: "Dashboard",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/default",
    icon: <Icon as={MdHome} width='20px' height='20px' color='inherit' />,
    component: MainDashboard,
  },
  // ========================== Admin Layout ==========================
  // ------------- lead Routes ------------------------
  {
    name: "Leads",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/lead",
    icon: <Icon as={MdLeaderboard} width='20px' height='20px' color='inherit' />,
    component: Lead,
  },
  {
    name: "Leads",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    under: "lead",
    parentName: "Leads",
    path: "/leadView/:id",
    component: LeadView,
  },
  {
    name: "Lead Import",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    under: "lead",
    parentName: "Leads",
    path: "/leadImport",
    component: LeadImport,
  },
  // --------------- contact Routes --------------------
  {
    name: "Contacts",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/contacts",
    icon: <Icon as={MdContacts} width='20px' height='20px' color='inherit' />,
    component: Contact,
  },
  {
    name: "Contacts",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    under: "contacts",
    parentName: "Contacts",
    path: "/contactView/:id",
    component: ContactView,
  },
  {
    name: "Contact Import",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    both: true,
    under: "contacts",
    parentName: "Contacts",
    path: "/contactImport",
    component: ContactImport,
  },
  // ------------- Property Routes ------------------------
  {
    name: "Properties",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/properties",
    icon: <Icon as={LuBuilding2} width='20px' height='20px' color='inherit' />,
    component: Property,
  },
  {
    name: "Properties",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    parentName: "Properties",
    under: "properties",
    path: "/propertyView/:id",
    component: PropertyView,
  },
  {
    name: "Property Import",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    both: true,
    under: "properties",
    parentName: "Properties",
    path: "/propertyImport",
    component: PropertyImport,
  },

  // -----------------------------Opportunities-------------------------------------
  {
    name: "Opportunities",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/opportunities",
    icon: <Icon as={TbBulb} width='20px' height='20px' color='inherit' />,
    component: Opportunities,
  },
  {
    name: "Opportunities",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/opportunitiesView/:id",
    under: "opportunities",
    parentName: "Opportunities",
    icon: <Icon as={TbBulb} width='20px' height='20px' color='inherit' />,
    component: OpportunitiesView,
  },
  {
    name: "Opportunities",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/opprotunitiesImport",
    under: "opportunities",
    parentName: "Opportunities",
    icon: <Icon as={TbBulb} width='20px' height='20px' color='inherit' />,
    component: OpportunitiesImport,
  },
  // -----------------------------Account-------------------------------------
  {
    name: "Account",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/account",
    icon: <Icon as={RiAccountCircleFill} width='20px' height='20px' color='inherit' />,
    component: Account,
  },
  {
    name: "Account",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/accountView/:id",
    under: "account",
    parentName: "Account",
    icon: <Icon as={RiAccountCircleFill} width='20px' height='20px' color='inherit' />,
    component: AccountView,
  },
  {
    name: "Account",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/accountImport",
    under: "account",
    parentName: "Account",
    icon: <Icon as={RiAccountCircleFill} width='20px' height='20px' color='inherit' />,
    component: AccountImport,
  },
  // --------------- Quotes Routes --------------------
  {
    name: "Quotes",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/quotes",
    icon: <Icon as={BsBlockquoteRight} width='20px' height='20px' color='inherit' />,
    component: Quotes,
  },
  {
    name: "Quotes",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    under: "quotes",
    parentName: "Quotes",
    path: "/quotesView/:id",
    component: QuotesView,
  },
  {
    name: "Quotes Import",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    both: true,
    under: "quotes",
    parentName: "Quotes",
    path: "/quotesImport",
    component: QuotesImport,
  },
  // --------------- Invoices Routes --------------------
  {

    name: "Invoices",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/invoices",
    icon: <Icon as={TbFileInvoice} width='20px' height='20px' color='inherit' />,
    component: Invoices,
  },
  {
    name: "Invoices",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    under: "invoices",
    parentName: "Invoices",
    path: "/invoicesView/:id",
    component: InvoicesView,
  },
  {
    name: "Invoices Import",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    both: true,
    under: "invoices",
    parentName: "Invoices",
    path: "/invoicesImport",
    component: InvoicesImport,
  },

  // // ------------- Communication Integration Routes ------------------------
  // {
  //   name: "Communication Integration",
  //   layout: [ROLE_PATH.admin, ROLE_PATH.user],

  //   path: "/communication-integration",
  //   icon: <Icon as={GiSatelliteCommunication} width='20px' height='20px' color='inherit' />,
  //   component: Communication,
  // },
  // ------------- Task Routes ------------------------
  {
    name: "Tasks",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/task",
    icon: <Icon as={FaTasks} width='20px' height='20px' color='inherit' />,
    component: Task,
  },
  {
    name: "Tasks",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    under: "task",
    parentName: "Tasks",
    path: "/view/:id",
    component: TaskView,
  },
  // ------------- Meeting Routes ------------------------
  {
    name: "Meetings",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/metting",
    icon: <Icon as={SiGooglemeet} width='20px' height='20px' color='inherit' />,
    component: Meeting,
  },
  {
    name: "Meetings ",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    under: "Meetings",
    parentName: "Meetings",
    path: "/metting/:id",
    component: MettingView,
  },
  // ------------- Phone Routes ------------------------
  {
    name: "Calls",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/phone-call",
    icon: <Icon as={PiPhoneCallBold} width='20px' height='20px' color='inherit' />,
    component: PhoneCall,
  },
  {
    name: "Calls",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    under: "phone-call",
    parentName: "Calls",
    path: "/phone-call/:id",
    component: PhoneCallView,
  },
  // ------------- Email Routes------------------------
  {
    // separator: 'History',
    name: "Emails",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/email",
    icon: <Icon as={AiOutlineMail} width='20px' height='20px' color='inherit' />,
    component: EmailHistory,
  },
  {
    name: "Emails ",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    under: "Emails",
    parentName: "Emails",
    path: "/Email/:id",
    component: EmailHistoryView,
  },
  // -----------------------------Email Template-------------------------------------
  {
    name: "Email Template",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/email-template",
    icon: <Icon as={HiTemplate} width='20px' height='20px' color='inherit' />,
    component: EmailTemplate,
  },
  {
    name: "Add Email Template",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    under: "email-template",
    parentName: "Email Template",
    path: "/email-template/email-template-addEdit",
    icon: <Icon as={HiTemplate} width='20px' height='20px' color='inherit' />,
    component: AddEdit,
  },
  {
    name: "Email Template",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    under: "email-template",
    parentName: "Email Template",
    path: "/email-template/:id",
    icon: <Icon as={HiTemplate} width='20px' height='20px' color='inherit' />,
    component: templateView,
  },
  // ------------- Calender Routes ------------------------
  {
    name: "Calender",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/calender",
    icon: <Icon as={FaCalendarAlt} width='20px' height='20px' color='inherit' />,
    component: Calender,
  },
  // ------------- Payments Routes ------------------------
  {
    name: "Payments",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/payments",
    icon: <Icon as={FaRupeeSign} width='20px' height='20px' color='inherit' />,
    component: Payments,
  },

  // -----------------------------Admin setting-------------------------------------
  {
    name: "Admin Setting",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    // parentName: "admin",
    under: "admin",
    path: "/admin-setting",
    component: AdminSetting,
  },
  {
    name: "Roles",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/role",
    under: "role",
    icon: <Icon as={FaCreativeCommonsBy} width='20px' height='20px' color='inherit' />,
    component: Role,
  },
  {
    name: "Custom Fields",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/custom-Fields",
    under: "customField",
    icon: <Icon as={FaWpforms} width='20px' height='20px' color='inherit' />,
    component: CustomField,
  },
  {
    name: "Change Images",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/change-images",
    under: "image",
    icon: <Icon as={TbExchange} width='20px' height='20px' color='inherit' />,
    component: ChangeImage,
  },
  {
    name: "Validation",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/validations",
    under: "Validation",
    icon: <Icon as={GrValidate} width='20px' height='20px' color='inherit' />,
    component: Validation,
  },
  {
    name: "Table Fields",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/table-field",
    under: "tableField",
    icon: <Icon as={TbTableColumn} width='20px' height='20px' color='inherit' />,
    component: TableField,
  },
  {
    name: "Active Deactive Module",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/active-deactive-module",
    under: "activeDeactiveModule",
    icon: <Icon as={TbTableColumn} width='20px' height='20px' color='inherit' />,
    component: activeDeactiveModule,
  },
  {
    name: "Module",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/module",
    under: "module",
    icon: <Icon as={VscFileSubmodule} width='20px' height='20px' color='inherit' />,
    component: module,
  },
  // // ------------- Text message Routes ------------------------
  // {
  //   name: "Text Msg",
  //   layout: [ROLE_PATH.admin, ROLE_PATH.user],
  //
  //   path: "/text-msg",
  //   icon: <Icon as={MdOutlineMessage} width='20px' height='20px' color='inherit' />,
  //   component: TextMsg,
  // },
  // {
  //   name: "Text Msg View",
  //   layout: [ROLE_PATH.admin, ROLE_PATH.user],
  //
  //   under: "text-msg",
  //   path:  text-msg/:id",
  //   component: TextMsgView,
  // },
  // ------------- Document Routes ------------------------
  {
    name: "Documents",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/documents",
    icon: <Icon as={AiFillFolderOpen} width='20px' height='20px' color='inherit' />,
    component: Document,
  },
  // ----------------- Reporting Layout -----------------
  {
    name: "Reporting and Analytics",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/reporting-analytics",
    icon: <Icon as={MdInsertChartOutlined} width='20px' height='20px' color='inherit' />,
    component: Report,
  },
  // ------------- user Routes ------------------------
  {
    name: "Users",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    path: "/user",
    under: "user",
    icon: <Icon as={HiUsers} width='20px' height='20px' color='inherit' />,
    component: User,
  },
  {
    name: "User View",
    layout: [ROLE_PATH.superAdmin, ROLE_PATH.user],
    parentName: "Email",
    under: "user",
    path: "/userView/:id",
    component: UserView,
  },
  // ========================== User layout ==========================

  // ========================== auth layout ==========================
  {
    name: "Sign In",
    layout: "/auth",
    path: "/sign-in",
    icon: <Icon as={MdLock} width='20px' height='20px' color='inherit' />,
    component: SignInCentered,
  },
];

export default routes;

================
File: Client/.gitattributes
================
# Auto detect text files and perform LF normalization
* text=auto

================
File: Client/jsconfig.json
================
{
  "compilerOptions": {
    "baseUrl": "src",
    "paths": {
      "*": ["src/*"]
    }
  }
}

================
File: Client/package.json
================
{
  "name": "real-estate",
  "version": "1.0.1",
  "private": true,
  "dependencies": {
    "@chakra-ui/icons": "^1.1.5",
    "@chakra-ui/react": "1.8.8",
    "@chakra-ui/system": "^1.12.1",
    "@chakra-ui/theme-tools": "^1.3.6",
    "@emotion/cache": "^11.7.1",
    "@emotion/react": "^11.4.1",
    "@emotion/styled": "^11.3.0",
    "@fullcalendar/core": "^6.1.8",
    "@fullcalendar/react": "^6.1.8",
    "@fullcalendar/resource": "^6.1.8",
    "@fullcalendar/resource-timeline": "^6.1.8",
    "@fullcalendar/scrollgrid": "^6.1.8",
    "@hypertheme-editor/chakra-ui": "^0.1.5",
    "@react-pdf/renderer": "^3.4.4",
    "@reduxjs/toolkit": "^2.0.1",
    "@stripe/react-stripe-js": "^2.3.0",
    "@stripe/stripe-js": "^2.1.6",
    "apexcharts": "^4.0.0",
    "axios": "^1.4.0",
    "chakra-ui-autocomplete": "^1.4.5",
    "dayjs": "^1.11.10",
    "exceljs": "^4.4.0",
    "formik": "^2.4.2",
    "framer-motion": "^4.1.17",
    "fullcalendar": "^6.1.8",
    "html2pdf.js": "^0.10.2",
    "jwt-decode": "^3.1.2",
    "moment": "^2.29.4",
    "papaparse": "^5.4.1",
    "react": "17.0.2",
    "react-apexcharts": "^1.4.1",
    "react-beautiful-dnd": "^13.1.1",
    "react-calendar": "^3.7.0",
    "react-custom-scrollbars-2": "^4.2.1",
    "react-datepicker": "^4.16.0",
    "react-dom": "17.0.2",
    "react-dropzone": "^12.0.4",
    "react-email-editor": "^1.7.11",
    "react-icons": "^4.3.1",
    "react-redux": "^7.2.9",
    "react-router-dom": "^6.14.1",
    "react-scripts": "^5.0.0",
    "react-signature-canvas": "^1.0.6",
    "react-table": "^7.7.0",
    "react-toastify": "^9.1.3",
    "redux": "^5.0.1",
    "redux-persist": "^6.0.0",
    "redux-thunk": "^3.1.0",
    "stylis-plugin-rtl": "2.0.2",
    "xlsx": "^0.18.5",
    "yup": "^1.2.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "predeploy": "npm run build",
    "deploy": "gh-pages -d build",
    "sitemap": "babel-node ./sitemap-builder.js"
  },
  "resolutions": {
    "react-error-overlay": "6.0.9"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
    "gh-pages": "^3.2.3"
  }
}

================
File: Server/controllers/account/_routes.js
================
const express = require('express');
const auth = require('../../middelwares/auth');
const account = require('./account')

const router = express.Router();

router.get('/', auth, account.index)
router.get('/view/:id', auth, account.view)
router.post('/add', auth, account.add)
router.post('/addMany', auth, account.addMany)
router.put('/edit/:id', auth, account.edit)
router.delete('/delete/:id', auth, account.deleteData)
router.post('/deleteMany', auth, account.deleteMany)

module.exports = router

================
File: Server/controllers/account/account.js
================
const Account = require('../../model/schema/account')
const mongoose = require('mongoose');
const User = require('../../model/schema/user');

const add = async (req, res) => {
    try {
        const result = new Account(req.body);
        await result.save();
        res.status(200).json(result);
    } catch (err) {
        console.error('Failed to create :', err);
        res.status(400).json({ err, error: 'Failed to create' });
    }
}
const addMany = async (req, res) => {
    try {
        const data = req.body;
        const insertedAccount = await Account.insertMany(data);

        res.status(200).json(insertedAccount);
    } catch (err) {
        console.error('Failed to create Account :', err);
        res.status(400).json({ error: 'Failed to create Account' });
    }
};
const index = async (req, res) => {
    try {
        const query = req.query
        query.deleted = false;

        const user = await User.findById(req.user.userId)
        if (user?.role !== "superAdmin") {
            delete query.createBy
            query.$or = [{ createBy: new mongoose.Types.ObjectId(req.user.userId) }, { assignUser: new mongoose.Types.ObjectId(req.user.userId) }];
        }

        const result = await Account.aggregate([
            { $match: query },
            {
                $lookup: {
                    from: 'User',
                    localField: 'createBy',
                    foreignField: '_id',
                    as: 'users'
                }
            },
            {
                $lookup: {
                    from: 'User',
                    localField: 'assignUser',
                    foreignField: '_id',
                    as: 'assignUsers'
                }
            },
            {
                $lookup: {
                    from: 'User',
                    localField: 'modifiedBy',
                    foreignField: '_id',
                    as: 'modifiedByUser'
                }
            },
            {
                $lookup: {
                    from: 'Accounts',
                    localField: 'memberOf',
                    foreignField: '_id',
                    as: 'memberOfList'
                }
            },
            { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$assignUsers', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$modifiedByUser', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$memberOfList', preserveNullAndEmptyArrays: true } },
            { $match: { 'users.deleted': false } },
            // { $match: { 'assignUsers.deleted': false } },
            { $match: { 'modifiedByUser.deleted': false } },
            {
                $addFields: {
                    createdByName: { $concat: ['$users.firstName', ' ', '$users.lastName'] },
                    assignUserName: {
                        $cond: {
                            if: '$assignUsers',
                            then: { $concat: ['$assignUsers.firstName', ' ', '$assignUsers.lastName'] },
                            else: { $concat: [''] }
                        }
                    },
                    modifiedUserName: { $concat: ['$modifiedByUser.firstName', ' ', '$modifiedByUser.lastName'] },
                    memberOfName: {
                        $cond: {
                            if: '$memberOfList',
                            then: '$memberOfList.name',
                            else: ''
                        }
                    },
                }
            },
            {
                $project: {
                    users: 0,
                    assignUsers: 0,
                    modifiedByUser: 0,
                    memberOfList: 0,
                }
            },
        ]);

        res.status(200).json(result);
    } catch (err) {
        console.error('Failed :', err);
        res.status(400).json({ err, error: 'Failed ' });
    }
}

const view = async (req, res) => {
    try {
        let result = await Account.findOne({ _id: req.params.id })
        if (!result) return res.status(404).json({ message: "no Data Found." })

        let response = await Account.aggregate([
            { $match: { _id: result._id } },
            {
                $lookup: {
                    from: 'User',
                    localField: 'createBy',
                    foreignField: '_id',
                    as: 'users'
                }
            },
            {
                $lookup: {
                    from: 'User',
                    localField: 'assignUser',
                    foreignField: '_id',
                    as: 'assignUsers'
                }
            },
            {
                $lookup: {
                    from: 'User',
                    localField: 'modifiedBy',
                    foreignField: '_id',
                    as: 'modifiedByUser'
                }
            },
            {
                $lookup: {
                    from: 'Accounts',
                    localField: 'memberOf',
                    foreignField: '_id',
                    as: 'memberOfList'
                }
            },
            { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$assignUsers', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$modifiedByUser', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$memberOfList', preserveNullAndEmptyArrays: true } },
            { $match: { 'users.deleted': false } },
            // { $match: { 'assignUsers.deleted': false } },
            { $match: { 'modifiedByUser.deleted': false } },
            {
                $addFields: {
                    createdByName: { $concat: ['$users.firstName', ' ', '$users.lastName'] },
                    // assignUserName: { $concat: ['$assignUsers.firstName', ' ', '$assignUsers.lastName'] },
                    assignUserName: {
                        $cond: {
                            if: '$assignUsers',
                            then: { $concat: ['$assignUsers.firstName', ' ', '$assignUsers.lastName'] },
                            else: { $concat: [''] }
                        }
                    },
                    modifiedUserName: { $concat: ['$modifiedByUser.firstName', ' ', '$modifiedByUser.lastName'] },
                    memberOfName: {
                        $cond: {
                            if: '$memberOfList',
                            then: { $concat: ['$memberOfList.name'] },
                            else: { $concat: [''] }
                        }
                    },
                }
            },
            {
                $project: {
                    users: 0,
                    assignUsers: 0,
                    modifiedByUser: 0,
                    memberOfList: 0,
                }
            },
        ])

        res.status(200).json(response[0])
    } catch (err) {
        console.error('Failed :', err);
        res.status(400).json({ err, error: 'Failed ' });
    }
}

const edit = async (req, res) => {
    try {

        let result = await Account.findOneAndUpdate(
            { _id: req.params.id },
            { $set: req.body },
            { new: true }
        );

        res.status(200).json(result);
    } catch (err) {
        console.error('Failed to create Account:', err);
        res.status(400).json({ error: 'Failed to create Account : ', err });
    }
}
const deleteData = async (req, res) => {
    try {
        const result = await Account.findByIdAndUpdate(req.params.id, { deleted: true });
        res.status(200).json({ message: "done", result: result })
    } catch (err) {
        res.status(404).json({ message: "error", err })
    }
}

const deleteMany = async (req, res) => {
    try {
        const result = await Account.updateMany({ _id: { $in: req.body } }, { $set: { deleted: true } });
        res.status(200).json({ message: "done", result })
    } catch (err) {
        res.status(404).json({ message: "error", err })
    }
}

module.exports = { add, index, view, deleteData, edit, deleteMany, addMany }

================
File: Server/controllers/calendar/_routes.js
================
const express = require('express');
const calender = require('./calendar')
const auth = require('../../middelwares/auth');

const router = express.Router();

router.get('/', auth, calender.index)


module.exports = router

================
File: Server/controllers/calendar/calendar.js
================
const Email = require('../../model/schema/email');
const PhoneCall = require('../../model/schema/phoneCall');
const Task = require('../../model/schema/task');
const MeetingHistory = require('../../model/schema/meeting');
const User = require('../../model/schema/user');

const index = async (req, res) => {
    try {
        const query = { ...req.query, deleted: false };
        const userDetails = await User.findOne({ _id: req.user.userId }).populate({ path: 'roles' });

        const callData = await PhoneCall.find(query);
        const emailData = await Email.find(query);
        const meetingData = await MeetingHistory.find(query);
        const taskData = await Task.find(query);

        let taskDetails = [];
        let callDetails = [];
        let meetingDetails = [];
        let emailDetails = [];

        const mergedRoles = userDetails?.roles?.reduce((acc, current) => {
            current?.access?.forEach(permission => {
                const existingPermissionIndex = acc.findIndex(item => item.title === permission.title);
                if (existingPermissionIndex !== -1) {
                    const updatedPermission = { ...acc[existingPermissionIndex] };
                    Object.keys(permission).forEach(key => {
                        if (permission[key] === true) {
                            updatedPermission[key] = true;
                        }
                    });
                    acc[existingPermissionIndex] = updatedPermission;
                } else {
                    acc.push(permission);
                }
            });
            return acc;
        }, []);

        if (mergedRoles && mergedRoles.length > 0) {
            for (const item of mergedRoles) {
                switch (item.title) {
                    case "Calls":
                        if (item.view) {
                            callDetails = callData.map(item => ({
                                id: item._id,
                                title: item.senderName,
                                start: item.startDate,
                                backgroundColor: "green",
                                groupId: "call"
                            }));
                        }
                        break;

                    case "Emails":
                        if (item.view) {
                            emailDetails = emailData.map(item => ({
                                id: item._id,
                                title: item.subject,
                                start: item.startDate,
                                end: item.endDate,
                                backgroundColor: "blue",
                                groupId: "email"
                            }));
                        }
                        break;

                    case "Meetings":
                        if (item.view) {
                            meetingDetails = meetingData.map(item => ({
                                id: item._id,
                                title: item.agenda,
                                start: item.dateTime,
                                backgroundColor: "red",
                                groupId: "meeting"
                            }));
                        }
                        break;

                    case "Tasks":
                        if (item.view) {
                            taskDetails = taskData.map(item => ({
                                id: item._id,
                                title: item.title,
                                start: item.start,
                                end: item.end,
                                textColor: item.textColor,
                                backgroundColor: item.backgroundColor,
                                borderColor: item.borderColor,
                                url: item.url,
                                allDay: item.allDay,
                                groupId: "task"
                            }));
                        }
                        break;

                    default:
                        break;
                }
            }
        } else {
            callDetails = callData.map(item => ({
                id: item._id,
                title: item.senderName,
                start: item.startDate,
                backgroundColor: "green",
                groupId: "call"
            }));

            emailDetails = emailData.map(item => ({
                id: item._id,
                title: item.subject,
                start: item.startDate,
                end: item.endDate,
                backgroundColor: "blue",
                groupId: "email"
            }));

            meetingDetails = meetingData.map(item => ({
                id: item._id,
                title: item.agenda,
                start: item.dateTime,
                backgroundColor: "red",
                groupId: "meeting"
            }));

            taskDetails = taskData.map(item => ({
                id: item._id,
                title: item.title,
                start: item.start,
                end: item.end,
                textColor: item.textColor,
                backgroundColor: item.backgroundColor,
                borderColor: item.borderColor,
                url: item.url,
                allDay: item.allDay,
                groupId: "task"
            }));
        }

        const result = [...taskDetails, ...callDetails, ...meetingDetails, ...emailDetails];
        res.send(result);
    } catch (error) {
        console.error(error);
        res.status(500).send({ error: 'Internal Server Error' });
    }
};

module.exports = { index };

================
File: Server/controllers/contact/_routes.js
================
const express = require('express');
const contact = require('./contact');
const auth = require('../../middelwares/auth');

const router = express.Router();

router.get('/', auth, contact.index)
router.post('/add', auth, contact.add)
router.post('/addMany', auth, contact.addMany)
router.post('/add-property-interest/:id', auth, contact.addPropertyInterest)
router.get('/view/:id', auth, contact.view)
router.put('/edit/:id', auth, contact.edit)
router.delete('/delete/:id', auth, contact.deleteData)
router.post('/deleteMany', auth, contact.deleteMany)


module.exports = router

================
File: Server/controllers/contact/contact.js
================
const { Contact } = require('../../model/schema/contact')
const email = require('../../model/schema/email')
const MeetingHistory = require('../../model/schema/meeting')
const phoneCall = require('../../model/schema/phoneCall')
const Task = require('../../model/schema/task')
const TextMsg = require('../../model/schema/textMsg')
const DocumentSchema = require('../../model/schema/document')
const Quotes = require("../../model/schema/quotes.js");
const Invoices = require("../../model/schema/invoices.js");

const index = async (req, res) => {
    const query = req.query
    query.deleted = false;

    let allData = await Contact.find(query).populate({
        path: 'createBy',
        match: { deleted: false } // Populate only if createBy.deleted is false
    }).exec()

    const result = allData.filter(item => item.createBy !== null);

    try {
        res.send(result)
    } catch (error) {
        res.send(error)
    }
}

const add = async (req, res) => {
    try {
        req.body.createdDate = new Date();
        const user = new Contact(req.body);
        await user.save();
        res.status(200).json(user);
    } catch (err) {
        console.error('Failed to create Contact:', err);
        res.status(400).json({ error: 'Failed to create Contact' });
    }
}

const addMany = async (req, res) => {
    try {
        const data = req.body;
        const insertedContact = await Contact.insertMany(data);
        res.status(200).json(insertedContact);
    } catch (err) {
        console.error('Failed to create Contact :', err);
        res.status(400).json({ error: 'Failed to create Contact' });
    }
};

const addPropertyInterest = async (req, res) => {
    try {
        const { id } = req.params
        await Contact.updateOne({ _id: id }, { $set: { interestProperty: req.body } });
        res.send(' uploaded successfully.');
    } catch (err) {
        console.error('Failed to create Contact:', err);
        res.status(400).json({ error: 'Failed to create Contact' });
    }
}

const edit = async (req, res) => {
    try {
        let result = await Contact.updateOne(
            { _id: req.params.id },
            { $set: req.body }
        );
        res.status(200).json(result);
    } catch (err) {
        console.error('Failed to Update Contact:', err);
        res.status(400).json({ error: 'Failed to Update Contact' });
    }
}

const view = async (req, res) => {
    try {
        let contact = await Contact.findOne({ _id: req.params.id });
        let interestProperty = await Contact.findOne({ _id: req.params.id }).populate("interestProperty")

        if (!contact) return res.status(404).json({ message: 'No data found.' })
        let EmailHistory = await email.aggregate([
            { $match: { createByContact: contact._id } },
            {
                $lookup: {
                    from: 'Contacts', // Assuming this is the collection name for 'contacts'
                    localField: 'createByContact',
                    foreignField: '_id',
                    as: 'createByRef'
                }
            },
            {
                $lookup: {
                    from: 'User',
                    localField: 'sender',
                    foreignField: '_id',
                    as: 'users'
                }
            },
            { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$createByRef', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$createByrefLead', preserveNullAndEmptyArrays: true } },
            { $match: { 'users.deleted': false } },
            {
                $addFields: {
                    senderName: { $concat: ['$users.firstName', ' ', '$users.lastName'] },
                    deleted: {
                        $cond: [
                            { $eq: ['$createByRef.deleted', false] },
                            '$createByRef.deleted',
                            { $ifNull: ['$createByrefLead.deleted', false] }
                        ]
                    },

                    createByName: {
                        $cond: {
                            if: '$createByRef',
                            then: { $concat: ['$createByRef.title', ' ', '$createByRef.firstName', ' ', '$createByRef.lastName'] },
                            else: { $concat: ['$createByrefLead.leadName'] }
                        }
                    },
                }
            },
            {
                $project: {
                    createByRef: 0,
                    createByrefLead: 0,
                    users: 0,
                }
            },
        ]);

        let phoneCallHistory = await phoneCall.aggregate([
            { $match: { createByContact: contact._id } },
            {
                $lookup: {
                    from: 'Contacts',
                    localField: 'createByContact',
                    foreignField: '_id',
                    as: 'contact'
                }
            },
            {
                $lookup: {
                    from: 'User',
                    localField: 'sender',
                    foreignField: '_id',
                    as: 'users'
                }
            },
            { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
            { $unwind: '$contact' },
            { $match: { 'contact.deleted': false } },
            {
                $addFields: {
                    senderName: { $concat: ['$users.firstName', ' ', '$users.lastName'] },
                    deleted: '$contact.deleted',
                    createByName: { $concat: ['$contact.title', ' ', '$contact.firstName', ' ', '$contact.lastName'] },
                }
            },
            {
                $project: { contact: 0, users: 0 }
            },
        ]);
        let meetingHistory = await MeetingHistory.aggregate([
            {
                $match: {
                    $expr: {
                        $and: [
                            { $in: [contact._id, '$attendes'] },
                        ]
                    }
                }
            },
            {
                $lookup: {
                    from: 'Contacts',
                    localField: 'attendes',
                    foreignField: '_id',
                    as: 'contact'
                }
            },
            {
                $lookup: {
                    from: 'User',
                    localField: 'createBy',
                    foreignField: '_id',
                    as: 'users'
                }
            },
            { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
            {
                $addFields: {
                    attendesArray: '$contact.email',
                    createdByName: '$users.username',
                }
            },
            {
                $project: {
                    contact: 0,
                    users: 0
                }
            }
        ]);
        let textMsg = await TextMsg.aggregate([
            { $match: { createFor: contact._id } },
            {
                $lookup: {
                    from: 'Contacts',
                    localField: 'createFor',
                    foreignField: '_id',
                    as: 'contact'
                }
            },
            {
                $lookup: {
                    from: 'User',
                    localField: 'sender',
                    foreignField: '_id',
                    as: 'users'
                }
            },
            { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
            { $unwind: '$contact' },
            { $match: { 'contact.deleted': false } },
            {
                $addFields: {
                    sender: '$users.username',
                    deleted: '$contact.deleted',
                    createByName: { $concat: ['$contact.title', ' ', '$contact.firstName', ' ', '$contact.lastName'] },
                }
            },
            {
                $project: { contact: 0, users: 0 }
            },
        ]);

        let task = await Task.aggregate([
            { $match: { assignTo: contact._id } },
            {
                $lookup: {
                    from: 'Contacts',
                    localField: 'assignTo',
                    foreignField: '_id',
                    as: 'contact'
                }
            },
            {
                $lookup: {
                    from: 'User',
                    localField: 'createBy',
                    foreignField: '_id',
                    as: 'users'
                }
            },
            { $unwind: { path: '$contact', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
            {
                $addFields: {
                    assignToName: '$contact.email',
                    createByName: '$users.username',
                }
            },
            { $project: { contact: 0, users: 0 } },
        ])
        let quotes = await Quotes.aggregate([
            { $match: { contact: contact._id, deleted: false } },
            {
                $lookup: {
                    from: 'Contacts',
                    localField: 'contact',
                    foreignField: '_id',
                    as: 'contactData'
                }
            },
            {
                $lookup: {
                    from: 'Accounts',
                    localField: 'account',
                    foreignField: '_id',
                    as: 'accountData'
                }
            },

            { $unwind: { path: '$contactData', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$accountData', preserveNullAndEmptyArrays: true } },
            {
                $addFields: {
                    contactName: { $concat: ['$contactData.title', ' ', '$contactData.firstName', ' ', '$contactData.lastName'] },
                    accountName: { $concat: ['$accountData.name'] },
                }
            },
            { $project: { contactData: 0, accountData: 0 } },
        ])
        let invoice = await Invoices.aggregate([
            { $match: { contact: contact._id, deleted: false } },
            {
                $lookup: {
                    from: 'Contacts',
                    localField: 'contact',
                    foreignField: '_id',
                    as: 'contactData'
                }
            },
            {
                $lookup: {
                    from: 'Accounts',
                    localField: 'account',
                    foreignField: '_id',
                    as: 'accountData'
                }
            },

            { $unwind: { path: '$contactData', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$accountData', preserveNullAndEmptyArrays: true } },
            {
                $addFields: {
                    contactName: { $concat: ['$contactData.title', ' ', '$contactData.firstName', ' ', '$contactData.lastName'] },
                    accountName: { $concat: ['$accountData.name'] },
                }
            },
            { $project: { contactData: 0, accountData: 0 } },
        ])

        const Document = await DocumentSchema.aggregate([
            { $unwind: '$file' },
            { $match: { 'file.deleted': false, 'file.linkContact': contact._id } },
            {
                $lookup: {
                    from: 'User', // Replace 'users' with the actual name of your users collection
                    localField: 'createBy',
                    foreignField: '_id', // Assuming the 'createBy' field in DocumentSchema corresponds to '_id' in the 'users' collection
                    as: 'creatorInfo'
                }
            },
            { $unwind: { path: '$creatorInfo', preserveNullAndEmptyArrays: true } },
            { $match: { 'creatorInfo.deleted': false } },
            {
                $group: {
                    _id: '$_id',  // Group by the document _id (folder's _id)
                    folderName: { $first: '$folderName' }, // Get the folderName (assuming it's the same for all files in the folder)
                    createByName: { $first: { $concat: ['$creatorInfo.firstName', ' ', '$creatorInfo.lastName'] } },
                    files: { $push: '$file' }, // Push the matching files back into an array
                }
            },
            { $project: { creatorInfo: 0 } },
        ]);

        res.status(200).json({ interestProperty, contact, EmailHistory, phoneCallHistory, meetingHistory, textMsg, task, Document, quotes, invoice });
    }
    catch (error) {
        console.error(error);
        res.status(500).json({ error, err: 'An error occurred.' });
    }
}

const deleteData = async (req, res) => {
    try {
        const contact = await Contact.findByIdAndUpdate(req.params.id, { deleted: true });
        res.status(200).json({ message: "done", contact })
    } catch (err) {
        res.status(404).json({ message: "error", err })
    }
}

const deleteMany = async (req, res) => {
    try {
        const contact = await Contact.updateMany({ _id: { $in: req.body } }, { $set: { deleted: true } });
        res.status(200).json({ message: "done", contact })
    } catch (err) {
        res.status(404).json({ message: "error", err })
    }
}

module.exports = { index, add, addPropertyInterest, view, edit, deleteData, deleteMany, addMany }

================
File: Server/controllers/customField/_routes.js
================
const express = require("express");
const auth = require("../../middelwares/auth");
const customField = require("./customField");
const img = require('../../controllers/images/imagesController');

const router = express.Router();

router.get('/', auth, customField.index);
router.post("/add-module", auth, img.upload.single('icon'), customField.createNewModule);
router.put("/change-icon/:id", auth, img.upload.single('icon'), customField.changeIcon);
router.put("/change-module-name/:id", auth, customField.changeModuleName);
router.delete("/module/:id", auth, customField.deletmodule);
router.post("/deleteMany-Module", auth, customField.deleteManyModule);

router.post('/add', auth, customField.add);
router.get('/view/:id', auth, customField.view);
router.put('/change-fields/:id', auth, customField.editWholeFieldsArray);
router.put('/change-single-field/:id', auth, customField.editSingleField);
router.delete('/delete/:id', auth, customField.deleteField);
router.post('/deleteMany', auth, customField.deleteManyFields);

router.post("/add-heading", auth, customField.addHeading);
router.put('/change-single-heading/:id', auth, customField.editSingleHeading);
router.put('/change-headings/:id', auth, customField.editWholeHeadingsArray);
router.delete('/delete-heading/:id', auth, customField.deleteHeading);
router.post('/deleteMany-headings', auth, customField.deleteManyHeadings);

router.put('/change-belongsTo/:id', auth, customField.changeFieldsBelongsTo);

router.put('/change-table-field/:id', auth, customField.changeIsTableField);
router.put('/change-table-fields', auth, customField.changeIsTableFields);
router.put('/change-view-fields', auth, customField.changeIsViewFields);

router.use("/icon", express.static('uploads/images'));

module.exports = router;

================
File: Server/controllers/customField/customField.js
================
const mongoose = require("mongoose");
const CustomField = require("../../model/schema/customField");
const RoleAccess = require('../../model/schema/roleAccess');

const index = async (req, res) => {
    try {
        const query = req.query
        query.deleted = false;
        let result = await CustomField.find(query);
        let filteredResult = result.map(item => ({
            ...item.toObject(), // Convert Mongoose document to plain object
            fields: item?.fields?.filter(field => !field.isDefault && !field.delete)
        }));
        filteredResult.sort((a, b) => {
            return a.no - b.no;
        });
        return res.send(filteredResult);
    } catch (err) {
        console.error('Failed', err);
        return res.status(400).json({ success: false, message: 'Failed', error: err.toString() });
    }
};

const add = async (req, res) => {
    try {
        if (!mongoose.connection.db) {
            throw new Error('MongoDB connection not established');
        }

        if (!req.body?.moduleId) {
            return res.status(400).send({ success: false, message: "moduleId is required" });
        }

        const customField = await CustomField.findOne({ _id: req.body?.moduleId });
        const collectionName = customField?.moduleName;

        const collectionExists = await mongoose.connection.db.listCollections({ name: collectionName }).hasNext();

        if (collectionExists) {
            const ExistingModel = mongoose.models[collectionName];
            const existingSchema = ExistingModel?.schema;

            if (existingSchema) {
                const fieldName = req.body.fields?.[0]?.name;
                const labelName = req.body.fields?.[0]?.label;
                const fieldType = req.body.fields?.[0]?.backendType || "Mixed";


                // Check if the field name already exists in the schema (case-insensitive)
                const caseInsensitiveMatch = Object.keys(existingSchema.paths)?.find(path => {
                    return path.toLowerCase() === fieldName.toLowerCase() || path.toLowerCase() === labelName.toLowerCase();
                });
                const caseInsensitiveMatchlabel = Object.keys(existingSchema.paths)?.find(path => {
                    return path.toLowerCase() === labelName.toLowerCase();
                });

                // Check for duplicate name in dynamic fields (case-insensitive)
                const existingField = await CustomField.findOne({
                    _id: req.body.moduleId,
                    'fields.name': { $regex: new RegExp(`^${req.body?.fields[0]?.name}$`, 'i') },
                });

                const existingLabel = await CustomField.findOne({
                    _id: req.body.moduleId,
                    'fields.label': { $regex: new RegExp(`^${req.body?.fields[0]?.label}$`, 'i') },
                });

                if (caseInsensitiveMatch || existingField) {
                    return res.status(409).json({ success: false, message: `Field with Name '${fieldName}' already exists` });
                } else if (caseInsensitiveMatchlabel || existingLabel) {
                    return res.status(409).json({ success: false, message: `Label Name ${labelName} already exists` });
                }

                // Add fields in CustomField collection
                const updateResult = await CustomField.updateOne(
                    { _id: req.body?.moduleId },
                    {
                        $push: {
                            fields: { ...req.body.fields[0], backendType: fieldType }
                        }
                    }
                );

                if (updateResult?.modifiedCount > 0) {
                    existingSchema?.add({ [fieldName]: fieldType || 'Mixed' });     // Add fields in existingSchema
                    return res.status(200).json({ message: 'Fields added successfully' });
                } else {
                    return res.status(404).json({ success: false, message: 'Failed to add fields' });
                }
            } else {
                return res.status(404).json({ success: false, message: 'Model/schema not found for collection' });
            }
        } else {
            return res.status(404).send({ success: false, message: "Collection not exists" });
        }

    } catch (err) {
        console.error('Failed to create Custom Field:', err);
        return res.status(400).json({ success: false, message: 'Failed to Create Field', error: err.toString() });
    }
};

const editWholeFieldsArray = async (req, res) => {
    try {
        let result = await CustomField.updateOne({ _id: req.params.id }, { $set: { fields: req.body } });

        if (result?.modifiedCount > 0) {
            return res.status(200).json({ message: "Fields updated successfully", result });
        } else {
            return res.status(404).json({ success: false, message: 'Failed to update fields', result });
        }

    } catch (err) {
        console.error('Failed to Update Custom Field:', err);
        return res.status(400).json({ success: false, message: 'Failed to Update Custom fields', error: err.toString() });
    }
};

const editSingleField = async (req, res) => {
    try {
        const moduleId = req.body?.moduleId;
        const fieldId = req.params?.id;

        if (!req.body?.moduleId) {
            return res.status(400).send({ success: false, message: "moduleId is required" });
        }

        const customFieldBeforeUpdate = await CustomField.findOne({ _id: moduleId }).select("moduleName fields");
        const collectionName = customFieldBeforeUpdate?.moduleName;

        const collectionExists = await mongoose.connection.db.listCollections({ name: collectionName }).hasNext();

        if (collectionExists) {
            const ExistingModel = mongoose.models[collectionName];
            const existingSchema = ExistingModel?.schema;
            let nameAlreadyExists = false;

            if (existingSchema) {
                const existingField = customFieldBeforeUpdate.fields.find(field => field._id.toString() === fieldId);

                if (!existingField) {
                    return res.status(404).json({ success: false, message: 'Field not found' });
                }

                const updatedFieldName = req.body?.updatedField?.name;
                const updatedFieldBcType = req.body?.updatedField?.backendType || "Mixed";
                const isFieldNameChanged = updatedFieldName && updatedFieldName !== existingField.name;

                // if (isFieldNameChanged) {
                //     // Check if the updatedFieldName exists in the dynamic fields
                //     customFieldBeforeUpdate?.fields?.forEach((field) => {
                //         if (field._id !== fieldId) {
                //             nameAlreadyExists = field?.name?.toLowerCase() === updatedFieldName?.toLowerCase();
                //         }
                //     });
                //     console.log("nameAlreadyExists ", nameAlreadyExists);

                //     // Check if the updatedFieldName exists in the schema
                //     const existingFieldInSchema = Object.keys(existingSchema.paths).find(pathName => pathName.toLowerCase() === updatedFieldName?.toLowerCase());

                //     if (nameAlreadyExists || (existingFieldInSchema && updatedFieldName.toLowerCase() !== existingField.name.toLowerCase())) {
                //         return res.status(409).json({ success: false, message: 'Duplicate name found in schema' });
                //     }
                // }

                function isDuplicateName(name, existingNames) {
                    const lowerCaseName = name.toLowerCase();
                    return existingNames.some(existingName => existingName.toLowerCase() === lowerCaseName);
                }

                if (isFieldNameChanged) {
                    // Check if the updatedFieldName exists in the dynamic fields
                    nameAlreadyExists = isDuplicateName(updatedFieldName, customFieldBeforeUpdate?.fields?.map(field => field.name));

                    // Check if the updatedFieldName exists in the schema
                    const existingFieldInSchema = Object.keys(existingSchema.paths);
                    if (isDuplicateName(updatedFieldName, existingFieldInSchema) && updatedFieldName.toLowerCase() !== existingField.name.toLowerCase()) {
                        return res.status(409).json({ success: false, message: 'Duplicate name found in schema' });
                    }
                }

                // Update field in CustomField collection
                const updateResult = await CustomField.updateOne(
                    { _id: moduleId, 'fields._id': fieldId },
                    { $set: { 'fields.$': req.body?.updatedField } }
                );

                if (updateResult?.matchedCount > 0 && updateResult?.modifiedCount > 0) {
                    const selectedField = customFieldBeforeUpdate.fields.find(field => field._id.toString() === fieldId);

                    if (isFieldNameChanged) {
                        existingSchema.remove(selectedField?.name);
                        existingSchema.add({ [updatedFieldName]: updatedFieldBcType });
                    }

                    return res.status(200).json({ success: true, message: 'Field updated successfully', updateResult });

                } else if (updateResult?.matchedCount > 0 && updateResult?.modifiedCount === 0) {
                    return res.status(200).json({ success: true, message: "No changes made, document already up-to-date" });
                } else {
                    return res.status(404).json({ success: false, message: 'Failed to update field' });
                }
            } else {
                return res.status(404).json({ success: false, message: 'Model/schema not found for collection' });
            }
        } else {
            return res.status(404).send({ success: false, message: "Collection not exists" });
        }
    } catch (err) {
        console.error('Failed to Update Custom Field:', err);
        return res.status(400).json({ success: false, message: 'Failed to Update Custom Field', error: err.toString() });
    }
};

const view = async (req, res) => {
    try {
        const customFieldDoc = await CustomField.findOne({ _id: req.params.id });
        if (!customFieldDoc) return res.status(404).json({ success: false, message: "No Data Found." });
        return res.send(customFieldDoc);
    } catch (err) {

        console.error('Failed to display:', err);
        return res.status(400).json({ success: false, message: 'Failed to display', error: err.toString() });
    }
};

const deleteField = async (req, res) => {
    try {
        const moduleId = req.query?.moduleId;
        const fieldId = req.params?.id;

        if (!req.query?.moduleId) {
            return res.status(400).send({ success: false, message: "moduleId is required" });
        }

        const customFieldBeforePull = await CustomField.findOne({ _id: moduleId });

        if (customFieldBeforePull) {
            const collectionName = customFieldBeforePull?.moduleName;
            const collectionExists = await mongoose.connection.db.listCollections({ name: collectionName }).hasNext();

            if (collectionExists) {
                const ExistingModel = mongoose.models[collectionName];
                const existingSchema = ExistingModel?.schema;

                if (existingSchema) {
                    const fieldsArray = customFieldBeforePull?.fields;
                    const selectedField = fieldsArray.find(field => field._id.toString() === fieldId);

                    // Remove the field from CustomField
                    const updatedCustomField = await CustomField.findOneAndUpdate(
                        { _id: moduleId },
                        {
                            $pull: {
                                fields: {
                                    _id: fieldId
                                }
                            }
                        },
                        { new: true }
                    );

                    if (updatedCustomField) {
                        // Remove the field from the schema
                        existingSchema?.remove(selectedField?.name);
                        return res.status(200).json({ message: "Field removed successfully" });
                    } else {
                        return res.status(400).json({ success: false, message: "Failed to remove field" })
                    }

                } else {
                    return res.status(404).json({ success: false, message: 'Model/schema not found for collection' });
                }
            } else {
                return res.status(404).json({ success: false, message: "Collection not exists" });
            }
        } else {
            return res.status(404).json({ success: false, message: 'Field not found' });
        }
    } catch (err) {
        console.error("Failed to delete field ", err);
        return res.status(404).json({ success: false, message: "Failed to remove field", error: err.toString() });
    }
};

const deleteManyFields = async (req, res) => {
    try {
        const moduleId = req.body?.moduleId;
        const fieldsIds = req.body?.fieldsIds;

        if (!req.body?.moduleId) {
            return res.status(400).send({ success: false, message: "moduleId is required" });
        }

        const customFieldBeforeUpdate = await CustomField.findOne({ _id: moduleId }).select("moduleName fields");

        if (customFieldBeforeUpdate) {
            const collectionName = customFieldBeforeUpdate?.moduleName;
            const collectionExists = await mongoose.connection.db.listCollections({ name: collectionName }).hasNext();

            if (collectionExists) {
                const ExistingModel = mongoose.models[collectionName];
                const existingSchema = ExistingModel?.schema;

                if (existingSchema) {
                    const updateResult = await CustomField.updateOne(
                        { _id: moduleId },
                        {
                            $pull: {
                                fields: { _id: { $in: fieldsIds } }
                            }
                        }
                    );

                    if (updateResult?.modifiedCount > 0) {
                        const fieldsArray = customFieldBeforeUpdate?.fields;

                        fieldsArray?.forEach(field => {
                            if (fieldsIds?.includes(field?._id.toString())) {
                                existingSchema?.remove(field?.name);
                            }
                        });

                        return res.status(200).json({ message: "Fields removed successfully" });

                    } else {
                        return res.status(404).json({ success: false, message: 'Failed to remove fields' });
                    }
                } else {
                    return res.status(404).json({ success: false, message: 'Model/schema not found for collection' });
                }
            } else {
                return res.status(404).json({ success: false, message: "Collection not exists" });
            }

        } else {
            return res.status(404).json({ success: false, message: 'Field not found' });
        }
    } catch (err) {
        console.error("Failed to delete fields ", err);
        return res.status(404).json({ success: false, message: "Failed to remove fields", error: err.toString() });
    }
};

async function getNextAutoIncrementValue() {
    const no = await CustomField.countDocuments({});
    return no + 1;
}

const createNewModule = async (req, res) => {
    try {
        const moduleName = req.body.moduleName;
        const url = req?.body?.isDefault ? "" : req.protocol + '://' + req?.get('host');
        const file = `${url}/api/custom-field/icon/${req?.file?.filename}`;

        const existingModule = await CustomField.findOne({ moduleName: { $regex: new RegExp(`^${moduleName}$`, 'i') } }).exec();

        if (existingModule) {
            return res.status(400).json({ success: false, message: `Module name not available !` });
        }
        const nextAutoIncrementValue = await getNextAutoIncrementValue();

        const fields = [
            {
                "name": "createBy",
                "label": "createBy",
                "type": "text",
                "fixed": false,
                "delete": false,
                "isDefault": true,
                "belongsTo": null,
                "backendType": "Mixed",
                "isTableField": true,
                "options": [],
                "validation": [
                    {
                        "require": true,
                        "message": "",
                    },
                ],
            },
            {
                "name": "updatedDate",
                "label": "updatedDate",
                "type": "text",
                "fixed": false,
                "delete": false,
                "isDefault": true,
                "belongsTo": null,
                "backendType": "Mixed",
                "isTableField": true,
                "options": [],
                "validation": [
                    {
                        "require": true,
                        "message": "",
                    },
                ],
            },
            {
                "name": "createdDate",
                "label": "createdDate",
                "type": "text",
                "fixed": false,
                "delete": false,
                "isDefault": true,
                "belongsTo": null,
                "backendType": "Mixed",
                "isTableField": true,
                "options": [],
                "validation": [
                    {
                        "require": true,
                        "message": "",
                    },
                ],
            },
            {
                "name": "deleted",
                "label": "deleted",
                "type": "text",
                "fixed": false,
                "delete": false,
                "isDefault": true,
                "belongsTo": null,
                "backendType": "Mixed",
                "isTableField": true,
                "options": [],
                "validation": [
                    {
                        "require": true,
                        "message": "",
                    },
                ],
            },
        ]
        if (req.body.fields && req.body.fields.length > 0) {
            fields.push(...req.body.fields);
        }

        const newModule = new CustomField({ moduleName, icon: req?.file?.filename ? file : "", fields: fields, headings: req.body.headings || [], no: nextAutoIncrementValue, createdDate: new Date() });

        const schemaFields = {
            createBy: {
                type: mongoose.Schema.Types.ObjectId,
                ref: 'User',
                required: true
            },
            updatedDate: {
                type: Date,
                default: Date.now
            },
            createdDate: {
                type: Date,
            },
            deleted: {
                type: Boolean,
                default: false,
            },
        };

        const moduleSchema = new mongoose.Schema(schemaFields);
        if (!mongoose.models[moduleName]) {
            mongoose.model(moduleName, moduleSchema, moduleName);
        } else if (mongoose.models[moduleName] && !req?.body?.isDefault) {
            return res.status(400).json({ success: false, message: `Module name already exist` });
        }

        const access = await RoleAccess.find()
        if (!access[0]?.access[moduleName]) {
            await RoleAccess.updateMany({},
                {
                    $push: {
                        access: {
                            "title": moduleName,
                            "create": false,
                            "update": false,
                            "delete": false,
                            "view": false
                        }
                    }
                }
            )
        }

        await newModule.save();
        return res.status(200).json({ message: "Module added successfully", data: newModule });

    } catch (err) {
        console.error('Failed to create module:', err);
        return res.status(400).json({ success: false, message: 'Failed to Create module', error: err.toString() });
    }
};

const changeIcon = async (req, res) => {
    try {
        const { id } = req.params;

        if (!req?.file) {
            return res.status(400).send({ success: false, message: 'No icon uploaded.' });
        }

        const existingDocument = await CustomField.findOne({ _id: id });

        if (existingDocument) {
            const url = req.protocol + '://' + req.get('host');
            const file = `${url}/api/custom-field/icon/${req?.file?.filename}`;

            let result = await CustomField.findByIdAndUpdate({ _id: id }, { $set: { icon: file } }, { new: true });
            return res.send({ data: result, message: 'Icon updated successfully.' })
        }


    } catch (err) {
        console.error('Failed to update icon :', err);
        return res.status(400).json({ success: false, message: 'Failed to update icon' });
    }
};


const changeModuleName = async (req, res) => {
    try {
        const moduleName = req.body.moduleName;
        const oldModule = await CustomField.findOne({ _id: req.params.id });
        let result = await CustomField.findOneAndUpdate(
            { _id: req.params.id },
            { $set: { moduleName: moduleName } },
            { new: true }
        );

        if (!result) {
            return res.status(404).json({ success: false, message: 'Module not found' });
        }

        await RoleAccess.updateMany(
            { "access.title": oldModule.moduleName }, // Filter criteria to find the documents
            { $set: { "access.$.title": moduleName } } // Update operation
        );

        // Function to change module name without losing data
        const changeModuleName = async (oldModuleName, newModuleName) => {

            // Check if the old module schema exists
            if (await mongoose.models[oldModuleName]) {

                // Get the old module model
                const OldModule = await mongoose.model(oldModuleName);

                // Define the new schema with the same fields
                const newModuleSchema = await new mongoose.Schema(OldModule.schema.obj);

                // Change the collection name in MongoDB
                await OldModule.collection.rename(`${newModuleName}`);

                // Change the model name to the new module name
                await mongoose.model(newModuleName, newModuleSchema, newModuleName);
                delete mongoose.models[oldModuleName];

                async function checkModuleExistence(moduleName) {
                    let exists = false;
                    while (!exists) {
                        if (mongoose.models[moduleName]) {
                            exists = true;
                        } else {
                            console.log(`Module ${moduleName} does not exist, waiting...`);
                            await new Promise(resolve => setTimeout(resolve, 1000)); // Wait for 1 second
                        }
                    }
                }
                await checkModuleExistence(newModuleName);

            } else {
                console.log(`Module ${oldModuleName} does not exist`)
            }
        };

        await changeModuleName(oldModule?.moduleName, moduleName);

        return res.status(200).json({ message: `Module name changed from ${oldModule?.moduleName} to ${moduleName}`, result });

    } catch (err) {
        console.error('Failed to create module:', err);
        return res.status(400).json({ success: false, message: 'Failed to Create module', error: err.toString() });
    }
};

const addHeading = async (req, res) => {
    try {
        const existingField = await CustomField.findOne({ _id: req.body.moduleId });

        if (existingField) {
            const headingExists = existingField.headings.some(heading => req.body.headings[0].heading.includes(heading.heading));

            if (!headingExists) {
                // If the heading doesn't exist, perform the update
                await CustomField.updateOne(
                    { _id: req.body.moduleId },
                    { $push: { headings: { $each: req.body.headings } } }
                );
                res.status(200).send('Headings added successfully');
            } else {
                // Handle the case where the heading already exists
                res.status(400).send('Heading already exists');
            }
        } else {
            res.status(404).send('Field not found');
        }

    } catch (err) {
        console.error('Failed to create Custom Heading:', err);
        return res.status(400).json({ success: false, message: 'Failed to Create Heading', error: err.toString() });
    }
};

const editSingleHeading = async (req, res) => {
    try {
        const moduleId = req.body.moduleId;
        const headingId = req.params.id;

        let result = await CustomField.updateOne(
            { _id: moduleId, 'headings._id': headingId },
            { $set: { 'headings.$': req.body.updatedHeading } }
        );

        if (result?.modifiedCount > 0) {
            return res.status(200).json({ message: "Heading updated successfully", result });
        } else {
            return res.status(404).json({ success: false, message: 'Failed to update heading', result });
        }

    } catch (err) {
        console.error('Failed to Update Custom Heading:', err);
        return res.status(400).json({ success: false, message: 'Failed to Update Custom Heading', error: err.toString() });
    }
};

const editWholeHeadingsArray = async (req, res) => {
    try {
        let result = await CustomField.updateOne({ _id: req.params.id }, { $set: { headings: req.body } });

        if (result?.modifiedCount > 0) {
            return res.status(200).json({ message: "Headings updated successfully", result });
        } else {
            return res.status(404).json({ success: false, message: 'Failed to update headings', result });
        }

    } catch (err) {
        console.error('Failed to Update Custom Headings:', err);
        return res.status(400).json({ success: false, message: 'Failed to Update Custom Headings', error: err.toString() });
    }
};

const deleteHeading = async (req, res) => {
    try {
        const moduleId = req.query.moduleId;
        const headingId = req.params.id;

        const result = await CustomField.updateOne(
            { _id: moduleId },
            {
                $pull: {
                    headings: {
                        _id: headingId
                    }
                },
                $set: {
                    'fields.$[elem].belongsTo': null
                }
            },
            {
                arrayFilters: [
                    { 'elem.belongsTo': headingId }
                ]
            }
        );

        if (result?.modifiedCount > 0) {
            return res.status(200).json({ message: "Heading removed successfully", result });
        } else {
            return res.status(404).json({ success: false, message: 'Failed to remove heading', result });
        }

    } catch (err) {
        console.error("Failed to delete heading ", err);
        return res.status(404).json({ success: false, message: "Failed to remove heading", error: err.toString() });
    }
};

const deleteManyHeadings = async (req, res) => {
    try {
        const moduleId = req.body.moduleId;
        const headingsIds = req.body.headingsIds;

        const result = await CustomField.updateOne(
            { _id: moduleId },
            {
                $pull: {
                    headings: { _id: { $in: headingsIds } }
                },
                $set: {
                    'fields.$[elem].belongsTo': null
                }
            },
            {
                arrayFilters: [
                    { 'elem.belongsTo': { $in: headingsIds } }
                ]
            }
        );

        if (result?.modifiedCount > 0) {
            return res.status(200).json({ message: "Headings removed successfully", result });
        } else {
            return res.status(404).json({ success: false, message: 'Failed to remove headings', result });
        }

    } catch (err) {
        console.error("Failed to delete headings ", err);
        return res.status(404).json({ success: false, message: "Failed to remove headings", error: err.toString() });
    }
};

const changeIsTableField = async (req, res) => {
    try {
        const moduleId = new mongoose.Types.ObjectId(req.body?.moduleId);
        const fieldId = new mongoose.Types.ObjectId(req.params?.id);

        const { isTableField } = req.body;

        let result = await CustomField.findOneAndUpdate(
            { _id: moduleId, 'fields._id': fieldId },
            { $set: { 'fields.$.isTableField': isTableField } },
            { new: true }
        );

        if (!result) {
            return res.status(404).json({ success: false, message: 'Field not found' });
        }

        const successMessage = isTableField
            ? 'Field will now be included in the table.'
            : 'Field will no longer be included in the table.';

        return res.status(200).json({ success: true, message: successMessage, result });

    } catch (err) {
        console.error('Failed to change table field status:', err);
        return res.status(400).json({ message: 'Failed to change table field status : ', error: err.toString() });
    }
};

const changeIsTableFields = async (req, res) => {
    try {
        const moduleId = new mongoose.Types.ObjectId(req.body?.moduleId);
        const updates = req.body?.updates;

        if (!updates || !Array.isArray(updates)) {
            return res.status(400).json({ success: false, message: `Invalid 'updates' format` });
        }

        // Create an array of update operations for each field
        const updateOperations = updates.map(({ fieldId, isTableField }) => ({
            updateOne: {
                filter: { _id: moduleId, 'fields._id': new mongoose.Types.ObjectId(fieldId) },
                update: { $set: { 'fields.$[field].isTableField': isTableField } },
                arrayFilters: [{ 'field._id': new mongoose.Types.ObjectId(fieldId) }],
            },
        }));

        // Update all fields in a single bulk operation
        let updateResult = await CustomField.bulkWrite(updateOperations);

        if (!updateResult) {
            return res.status(404).json({ success: false, message: 'Fields not found' });
        }

        if (updateResult.matchedCount > 0 && updateResult.modifiedCount > 0) {
            return res.status(200).json({ success: true, message: 'Updated successfully', updateResult });
        }
        else if (updateResult?.matchedCount > 0 && updateResult?.modifiedCount === 0) {
            return res.status(200).json({ success: true, message: "No changes made, already up-to-date" });
        } else {
            return res.status(400).json({ success: true, message: 'Failed to update', updateResult });
        }

    } catch (err) {
        console.error('Failed to change table fields :', err);
        return res.status(400).json({ success: false, message: 'Failed to change ', error: err.toString() });
    }
};

/* For future refrence */
// const changeIsViewFields = async (req, res) => {
//     try {
//         const moduleId = new mongoose.Types.ObjectId(req.body?.moduleId);
//         const update = req.body?.values;

//         if (!update || typeof update !== 'object') {
//             return res.status(400).json({ success: false, message: `Invalid 'update' format` });
//         }

//         const fieldIdToUpdate = new mongoose.Types.ObjectId(update.fieldId);
//         const isChecked = update.isChecked;

//         // Set isView: false for all fields in the module
//         const setFalseOperation = {
//             updateMany: {
//                 filter: { _id: moduleId },
//                 update: { $set: { 'fields.$[].isView': false } },
//             },
//         };

//         // If isChecked is true, set isView: true for the specified field
//         const setTrueOperation = isChecked ? {
//             updateOne: {
//                 filter: { _id: moduleId, 'fields._id': fieldIdToUpdate },
//                 update: { $set: { 'fields.$[field].isView': true } },
//                 arrayFilters: [{ 'field._id': fieldIdToUpdate }],
//             },
//         } : null;

//         // Combine operations
//         const bulkOperations = [setFalseOperation];
//         if (setTrueOperation) {
//             bulkOperations.push(setTrueOperation);
//         }

//         // Execute bulkWrite
//         let updateResult = await CustomField.bulkWrite(bulkOperations);

//         if (!updateResult) {
//             return res.status(404).json({ success: false, message: 'Fields not found' });
//         }

//         if (updateResult.matchedCount > 0 && updateResult.modifiedCount > 0) {
//             return res.status(200).json({ success: true, message: 'Updated successfully', updateResult });
//         } else if (updateResult?.matchedCount > 0 && updateResult?.modifiedCount === 0) {
//             return res.status(200).json({ success: true, message: "No changes made, already up-to-date" });
//         } else {
//             return res.status(400).json({ success: true, message: 'Failed to update', updateResult });
//         }

//     } catch (err) {
//         console.error('Failed to change table fields :', err);
//         return res.status(400).json({ success: false, message: 'Failed to change ', error: err.toString() });
//     }
// };
const changeIsViewFields = async (req, res) => {
    try {
        const moduleId = new mongoose.Types.ObjectId(req.body?.moduleId);
        const update = req.body?.values;

        if (!update || typeof update !== 'object') {
            return res.status(400).json({ success: false, message: `Invalid 'update' format` });
        }

        const fieldIdToUpdate = new mongoose.Types.ObjectId(update.fieldId);
        const isChecked = update.isChecked;

        // Set isView: false for all fields and isView: true for the specified field if isChecked is true
        const bulkOperations = [
            {
                updateMany: {
                    filter: { _id: moduleId },
                    update: { $set: { 'fields.$[].isView': false } }
                }
            },
            isChecked && {
                updateOne: {
                    filter: { _id: moduleId, 'fields._id': fieldIdToUpdate },
                    update: { $set: { 'fields.$[field].isView': true } },
                    arrayFilters: [{ 'field._id': fieldIdToUpdate }]
                }
            }
        ].filter(Boolean);  // Filter out null values if isChecked is false

        // Execute bulkWrite
        const updateResult = await CustomField.bulkWrite(bulkOperations);

        if (updateResult.matchedCount > 0 && updateResult.modifiedCount > 0) {
            return res.status(200).json({ success: true, message: 'Updated successfully', updateResult });
        } else if (updateResult.matchedCount > 0 && updateResult.modifiedCount === 0) {
            return res.status(200).json({ success: true, message: "No changes made, already up-to-date" });
        } else {
            return res.status(400).json({ success: false, message: 'Failed to update', updateResult });
        }

    } catch (err) {
        console.error('Failed to change table fields :', err);
        return res.status(400).json({ success: false, message: 'Failed to change ', error: err.toString() });
    }
};

const deletmodule = async (req, res) => {
    try {
        const module = await CustomField.findByIdAndUpdate(req.params.id, { deleted: true });
        const accessName = await CustomField.findById(req.params.id);
        await RoleAccess.updateMany({}, {
            $pull: {
                access: { "title": accessName.moduleName } // remove the access object with matching title
            }
        });
        res.status(200).json({ message: "Module delete successfully", module })
    } catch (err) {
        res.status(404).json({ message: "error", err })
    }
}
const deleteManyModule = async (req, res) => {
    try {
        const module = await CustomField.updateMany({ _id: { $in: req.body } }, { $set: { deleted: true } });
        res.status(200).json({ message: "Many module delete successfully", module })
    } catch (err) {
        res.status(404).json({ message: "error", err })
    }
}

const changeFieldsBelongsTo = async (req, res) => {
    try {
        const headingId = req.params.id;
        const moduleId = req.body?.moduleId;
        const updates = req.body?.updates;

        const headingExists = await CustomField.findOne({ _id: moduleId, 'headings._id': headingId });

        if (!headingExists) {
            return res.status(404).json({ success: false, message: "Module or Heading not found" });
        }

        const updateOperations = updates?.map(update => ({
            updateOne: {
                filter: { _id: moduleId, 'fields._id': new mongoose.Types.ObjectId(update.fieldId) },
                update: { $set: { 'fields.$[field].belongsTo': update.belongsTo } },
                arrayFilters: [{ 'field._id': new mongoose.Types.ObjectId(update.fieldId) }]
            }
        }));

        const result = await CustomField.bulkWrite(updateOperations);

        if (!result) {
            return res.status(404).json({ success: false, message: 'Fields not found' });
        }

        return res.status(200).json({ message: 'Updated successfully', result });

    } catch (err) {
        console.error('Failed to change belongs fields :', err);
        return res.status(400).json({ success: false, message: 'Failed to change', error: err.toString() });
    }
};


module.exports = {
    index,
    add,
    editWholeFieldsArray,
    editSingleField,
    view,
    changeModuleName,
    deleteField,
    deleteManyFields,
    deletmodule,
    deleteManyModule,
    createNewModule,
    changeIcon,
    addHeading,
    editSingleHeading,
    editWholeHeadingsArray,
    deleteHeading,
    deleteManyHeadings,
    changeIsTableField,
    changeIsTableFields,
    changeIsViewFields,
    changeFieldsBelongsTo,
};

================
File: Server/controllers/document/_routes.js
================
const express = require('express');
const document = require('./document');
const auth = require('../../middelwares/auth');

const router = express.Router();

router.get('/', auth, document.index)
router.post('/add', auth, document.upload.array('files'), document.file)
router.post('/addDocumentContact', auth, document.upload.array('files'), document.addDocumentContact)
router.post('/addDocumentLead', auth, document.upload.array('files'), document.addDocumentLead)

router.get('/download/:id', document.downloadFile)
router.post('/link-document/:id', document.LinkDocument)
router.delete('/delete/:id', document.deleteFile)
router.use('/images', express.static('uploads/document'));


module.exports = router

================
File: Server/controllers/document/document.js
================
const multer = require('multer');
const DocumentSchema = require('../../model/schema/document')
const fs = require('fs');
const mongoose = require('mongoose');


const index = async (req, res) => {
    try {
        const query = req.query
        if (query.createBy) {
            query.createBy = new mongoose.Types.ObjectId(query.createBy);
        }


        const result = await DocumentSchema.aggregate([
            { $unwind: '$file' },
            { $match: { 'file.deleted': false } },
            { $match: query },
            {
                $lookup: {
                    from: 'User', // Replace 'users' with the actual name of your users collection
                    localField: 'createBy',
                    foreignField: '_id', // Assuming the 'createBy' field in DocumentSchema corresponds to '_id' in the 'users' collection
                    as: 'creatorInfo'
                }
            },
            { $unwind: { path: '$creatorInfo', preserveNullAndEmptyArrays: true } },
            { $match: { 'creatorInfo.deleted': false } },
            {
                $group: {
                    _id: '$_id',  // Group by the document _id (folder's _id)
                    folderName: { $first: '$folderName' }, // Get the folderName (assuming it's the same for all files in the folder)
                    createByName: { $first: { $concat: ['$creatorInfo.firstName', ' ', '$creatorInfo.lastName'] } },
                    files: { $push: '$file' }, // Push the matching files back into an array
                }
            },
            { $project: { creatorInfo: 0 } },
        ]);

        res.send(result);
    }
    catch (err) {
        console.error(err);
    }
}


const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        const folderPath = 'uploads/document/';
        fs.mkdirSync(folderPath, { recursive: true }); // Create the directory if it doesn't exist
        cb(null, folderPath);
    },
    filename: function (req, file, cb) {
        const uploadDir = 'uploads/document/';
        const filePath = uploadDir + file.originalname;

        if (fs.existsSync(filePath)) {
            // File with the same name already exists, generate a new filename
            const timestamp = Date.now() + Math.floor(Math.random() * 90);
            cb(null, file.originalname.split('.')[0] + '-' + timestamp + '.' + file.originalname.split('.')[1]);
        } else {
            // File doesn't exist, use the original filename
            cb(null, file.originalname);
        }
        // cb(null, file.originalname);
    },
});



const upload = multer({ storage: storage });

const file = async (req, res) => {
    try {
        const { filename, folderName, createBy } = req.body;

        const url = req.protocol + '://' + req.get('host');

        const files = req.files.map((file) => ({
            fileName: filename || file.filename,
            path: file.path,
            img: `${url}/api/document/images/${file.filename}`,
            createOn: new Date(),
        }));

        // Check if the folder exists in the database
        let folder = await DocumentSchema.findOne({ folderName });

        if (!folder) {
            // DocumentSchema does not exist, create a new folder and add the file
            folder = new DocumentSchema({
                folderName,
                file: files, // Directly assign the files array
                createBy
            });
        } else {
            folder.file.push(...files); // Use spread operator to add elements of the files array
        }

        // Save the folder in the database
        await folder.save();

        res.json({ message: 'Folder and files added successfully' });
    } catch (err) {
        console.error(err);
        res.status(500).json({ err, error: req });
    }
}

const addDocumentContact = async (req, res) => {
    try {
        const { filename, folderName, linkContact, createBy } = req.body;

        if (!linkContact) {
            return res.status(404).json({ message: 'Select valid contact ' });
        }

        const url = req.protocol + '://' + req.get('host');

        const files = req.files.map((file) => ({
            fileName: filename || file.filename,
            path: file.path,
            linkContact: linkContact,
            linkLead: null,
            img: `${url}/api/document/images/${file.filename}`,
            createOn: new Date(),
        }));

        // Check if the folder exists in the database
        let folder = await DocumentSchema.findOne({ folderName });

        if (!folder) {
            // DocumentSchema does not exist, create a new folder and add the file
            folder = new DocumentSchema({
                folderName,
                file: files, // Directly assign the files array
                createBy
            });
        } else {
            folder.file.push(...files); // Use spread operator to add elements of the files array
        }

        // Save the folder in the database
        await folder.save();

        res.json({ message: 'Folder and files added successfully' });
    } catch (err) {
        console.error(err);
        res.status(500).json({ err, error: req });
    }
}

const addDocumentLead = async (req, res) => {
    try {
        const { filename, folderName, linkLead, createBy } = req.body;

        if (!linkLead) {
            return res.status(404).json({ message: 'Select valid contact ' });
        }

        const url = req.protocol + '://' + req.get('host');

        const files = req.files.map((file) => ({
            fileName: filename || file.filename,
            path: file.path,
            linkContact: null,
            linkLead: linkLead,
            img: `${url}/api/document/images/${file.filename}`,
            createOn: new Date(),
        }));

        // Check if the folder exists in the database
        let folder = await DocumentSchema.findOne({ folderName });

        if (!folder) {
            // DocumentSchema does not exist, create a new folder and add the file
            folder = new DocumentSchema({
                folderName,
                file: files, // Directly assign the files array
                createBy
            });
        } else {
            folder.file.push(...files); // Use spread operator to add elements of the files array
        }

        // Save the folder in the database
        await folder.save();

        res.json({ message: 'Folder and files added successfully' });
    } catch (err) {
        console.error(err);
        res.status(500).json({ err, error: req });
    }
}

const downloadFile = async (req, res) => {
    try {
        const { id } = req.params;

        // Check if the folder exists in the database
        const folder = await DocumentSchema.findOne({ 'file._id': id });

        if (!folder) {
            return res.status(404).json({ message: 'File not found' });
        }

        // Find the file with the specified fileName within the folder
        const file = folder.file.find((f) => f._id.toString() === id);


        if (!file) {
            return res.status(404).json({ message: 'File not found' });
        }

        res.download(file.path, file.name);

    } catch (error) {
        console.error(error.message);
        res.status(500).json({ msg: error.message });
    }
}

const deleteFile = async (req, res) => {
    try {
        const { id } = req.params;

        // Check if the folder exists in the database
        const folder = await DocumentSchema.findOne({ 'file._id': id });
        if (!folder) {
            return res.status(404).json({ message: 'File not found' });
        }
        // Find the file with the specified fileName within the folder
        const file = folder.file.find((f) => f._id.toString() === id);
        if (!file) {
            return res.status(404).json({ message: 'File not found' });
        }

        // Set the 'deleted' flag to true for the file to soft delete it
        file.deleted = true;

        // Save the updated document
        await folder.save();
        res.status(200).json({ message: "File deleted successfully.", document: folder });

    } catch (err) {
        res.status(500).json({ message: "Error deleting file.", error: err });
    }
};

const LinkDocument = async (req, res) => {
    try {
        const { id } = req.params;
        let { linkContact, linkLead } = req.body

        if (!linkContact && !linkLead) {
            return res.status(404).json({ message: 'Select valid contact or lead ' });
        }

        // Check if the folder exists in the database
        const folder = await DocumentSchema.findOne({ 'file._id': id });
        if (!folder) {
            return res.status(404).json({ message: 'File not found' });
        }

        const file = folder.file.find((f) => f._id.toString() === id);
        if (!file) {
            return res.status(404).json({ message: 'File not found' });
        }

        if (linkContact) {
            file.linkContact = linkContact;
            file.linkLead = null;
        }
        if (linkLead) {
            file.linkLead = linkLead;
            file.linkContact = null;
        }

        // Save the updated document
        const savedFolder = await folder.save();

        res.status(200).json({ message: "File link successfully.", document: savedFolder });
    } catch (err) {
        res.status(500).json({ message: "Error Link file.", error: err });
    }
};

module.exports = { file, upload, index, downloadFile, addDocumentContact, addDocumentLead, deleteFile, LinkDocument }

================
File: Server/controllers/emailHistory/_routes.js
================
const express = require('express');
const auth = require('../../middelwares/auth');
const email = require('./email')

const router = express.Router();

router.get('/', auth, email.index)
router.get('/view/:id', auth, email.view)
router.post('/add', auth, email.add)

module.exports = router

================
File: Server/controllers/emailHistory/email.js
================
const { sendEmail } = require('../../middelwares/mail');
const Email = require('../../model/schema/email');
const User = require('../../model/schema/user');
const mongoose = require('mongoose');

const add = async (req, res) => {
    try {
        const { sender, recipient, subject, message, startDate, createByContact, createBy, createByLead, html, type } = req.body;

        if (createByContact && !mongoose.Types.ObjectId.isValid(createByContact)) {
            res.status(400).json({ error: 'Invalid createByContact value' });
        }
        if (createByLead && !mongoose.Types.ObjectId.isValid(createByLead)) {
            res.status(400).json({ error: 'Invalid createByLead value' });
        }

        const email = { sender, recipient, subject, message, startDate, createBy, html, type }

        if (createByContact) {
            email.createByContact = createByContact;
        }
        if (createByLead) {
            email.createByLead = createByLead;
        }

        const user = await User.findById({ _id: email.sender });
        user.emailsent = user.emailsent + 1;
        await user.save();

        const result = new Email(email);
        await result.save();
        // sendEmail(email.recipient, email.subject, email.message, email.html)
        res.status(200).json({ result });
    } catch (err) {
        console.error('Failed to create :', err);
        res.status(400).json({ err, error: 'Failed to create' });
    }
}

const index = async (req, res) => {
    try {
        const query = req.query
        if (query.sender) {
            query.sender = new mongoose.Types.ObjectId(query.sender);
        }

        let result = await Email.aggregate([
            { $match: query },
            {
                $lookup: {
                    from: 'Leads', // Assuming this is the collection name for 'leads'
                    localField: 'createByLead',
                    foreignField: '_id',
                    as: 'createByrefLead'
                }
            },
            {
                $lookup: {
                    from: 'Contacts', // Assuming this is the collection name for 'contacts'
                    localField: 'createByContact',
                    foreignField: '_id',
                    as: 'createByRef'
                }
            },
            {
                $lookup: {
                    from: 'User',
                    localField: 'sender',
                    foreignField: '_id',
                    as: 'users'
                }
            },
            { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$createByRef', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$createByrefLead', preserveNullAndEmptyArrays: true } },
            { $match: { 'users.deleted': false } },
            {
                $addFields: {
                    senderName: { $concat: ['$users.firstName', ' ', '$users.lastName'] },
                    deleted: {
                        $cond: [
                            { $eq: ['$createByRef.deleted', false] },
                            '$createByRef.deleted',
                            { $ifNull: ['$createByrefLead.deleted', false] }
                        ]
                    },
                    createByName: {
                        $cond: {
                            if: '$createByRef',
                            then: { $concat: ['$createByRef.title', ' ', '$createByRef.firstName', ' ', '$createByRef.lastName'] },
                            else: { $concat: ['$createByrefLead.leadName'] }
                        }
                    },
                }
            },
            {
                $project: {
                    createByRef: 0,
                    createByrefLead: 0,
                    users: 0
                }
            },
        ])


        res.status(200).json(result);
    } catch (err) {
        console.error('Failed :', err);
        res.status(400).json({ err, error: 'Failed ' });
    }
}

const view = async (req, res) => {
    try {
        let result = await Email.findOne({ _id: req.params.id })

        if (!result) return res.status(404).json({ message: "no Data Found." })

        let response = await Email.aggregate([
            { $match: { _id: result._id } },
            {
                $lookup: {
                    from: 'Leads', // Assuming this is the collection name for 'leads'
                    localField: 'createByLead',
                    foreignField: '_id',
                    as: 'createByrefLead'
                }
            },
            {
                $lookup: {
                    from: 'Contacts', // Assuming this is the collection name for 'contacts'
                    localField: 'createByContact',
                    foreignField: '_id',
                    as: 'createByRef'
                }
            },
            {
                $lookup: {
                    from: 'User',
                    localField: 'sender',
                    foreignField: '_id',
                    as: 'users'
                }
            },
            { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$createByRef', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$createByrefLead', preserveNullAndEmptyArrays: true } },
            { $match: { 'users.deleted': false } },
            {
                $addFields: {
                    senderEmail: '$users.username',
                    deleted: {
                        $cond: [
                            { $eq: ['$createByRef.deleted', false] },
                            '$createByRef.deleted',
                            { $ifNull: ['$createByrefLead.deleted', false] }
                        ]
                    },
                    createByName: {
                        $cond: {
                            if: '$createByRef',
                            then: { $concat: ['$createByRef.title', ' ', '$createByRef.firstName', ' ', '$createByRef.lastName'] },
                            else: { $concat: ['$createByrefLead.leadName'] }
                        }
                    },
                }
            },
            {
                $project: {
                    createByRef: 0,
                    createByrefLead: 0,
                    users: 0
                }
            },
        ])

        res.status(200).json(response[0])
    } catch (err) {
        console.error('Failed :', err);
        res.status(400).json({ err, error: 'Failed ' });
    }
}

module.exports = { add, index, view }

================
File: Server/controllers/emailTemplate/_routes.js
================
const express = require('express');
const emailTemp = require('./emailTemplate');
const auth = require('../../middelwares/auth');

const router = express.Router();

router.get('/', auth, emailTemp.index)
router.post('/add', auth, emailTemp.add)
router.get('/view/:id', auth, emailTemp.view)
router.put('/edit/:id', auth, emailTemp.edit)
router.delete('/delete/:id', auth, emailTemp.deleteData)
router.post('/deleteMany', auth, emailTemp.deleteMany)

module.exports = router

================
File: Server/controllers/emailTemplate/emailTemplate.js
================
const EmailTemp = require('../../model/schema/emailTemplate')
const mongoose = require('mongoose');

const index = async (req, res) => {
    try {
        const query = req.query
        query.deleted = false;

        if (query.createBy) {
            query.createBy = new mongoose.Types.ObjectId(query.createBy);
        }

        const result = await EmailTemp.aggregate([
            { $match: query },
            {
                $lookup: {
                    from: 'User',
                    localField: 'createBy',
                    foreignField: '_id',
                    as: 'users'
                }
            },
            { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
            { $match: { 'users.deleted': false } },
            {
                $addFields: {
                    createdByName: '$users.username',
                }
            },
            {
                $project: {
                    users: 0
                }
            },
        ]);

        res.status(200).json(result);
    } catch (err) {
        console.error('Failed :', err);
        res.status(400).json({ err, error: 'Failed ' });
    }
}

const add = async (req, res) => {
    try {
        const result = new EmailTemp(req.body);
        await result.save();
        res.status(200).json(result);
    } catch (err) {
        console.error('Failed to create EmailTemp:', err);
        res.status(400).json({ error: 'Failed to create EmailTemp' });
    }
}
const view = async (req, res) => {
    try {
        let result = await EmailTemp.findOne({ _id: req.params.id })
        if (!result) return res.status(404).json({ message: "no Data Found." })
        res.status(200).json(result)
    } catch (err) {
        console.error('Failed :', err);
        res.status(400).json({ err, error: 'Failed ' });
    }
}
const edit = async (req, res) => {
    try {
        let result = await EmailTemp.updateOne(
            { _id: req.params.id },
            { $set: req.body }
        );
        res.status(200).json(result);
    } catch (err) {
        console.error('Failed to Update EmailTemp:', err);
        res.status(400).json({ error: 'Failed to Update EmailTemp' });
    }
}


const deleteData = async (req, res) => {
    try {
        const result = await EmailTemp.findByIdAndUpdate(req.params.id, { deleted: true });
        res.status(200).json({ message: "done", result })
    } catch (err) {
        res.status(404).json({ message: "error", err })
    }
}

const deleteMany = async (req, res) => {
    try {
        const result = await EmailTemp.updateMany({ _id: { $in: req.body } }, { $set: { deleted: true } });
        res.status(200).json({ message: "done", result })
    } catch (err) {
        res.status(404).json({ message: "error", err })
    }
}


module.exports = { index, add, view, edit, deleteData, deleteMany }

================
File: Server/controllers/form/_routes.js
================
const express = require('express');
const form = require('./form');
const auth = require('../../middelwares/auth');

const router = express.Router();

router.get('/', auth, form.index);
router.get('/view/:id', auth, form.view);
router.post('/add', auth, form.add);
router.put('/edit/:id', auth, form.edit);
router.delete('/delete/:id', auth, form.deleteField);
router.post('/deleteMany', auth, form.deleteManyField);

module.exports = router

================
File: Server/controllers/form/form.js
================
const mongoose = require("mongoose");
const CustomField = require("../../model/schema/customField");

const index = async (req, res) => {
    try {
        if (!req?.query?.moduleId) {
            return res.status(400).send({ success: false, message: "moduleId is required" });
        }

        const customField = await CustomField.findById(req.query?.moduleId).select("moduleName");

        if (!customField) {
            return res.status(404).send({ success: false, message: "Module not found" });
        }

        const collectionName = customField.moduleName;
        const collectionExists = await mongoose.connection.db.listCollections({ name: collectionName }).hasNext();

        if (!collectionExists) {
            return res.status(404).send({ success: false, message: "Collection does not exist" });
        }

        const ExistingModel = mongoose.model(collectionName);

        if (!ExistingModel) {
            return res.status(500).send({ success: false, message: 'Model not found' });
        }

        const allData = await ExistingModel.find({ deleted: false });

        return res.status(200).json({ data: allData });

    } catch (err) {
        console.error(`Failed to display Record`, err);
        return res.status(400).json({ success: false, message: `no data found`, error: err.toString() });
    }
};

const view = async (req, res) => {
    try {
        if (!req?.query?.moduleId) {
            return res.status(400).send({ success: false, message: "moduleId is required" });
        }

        const customField = await CustomField.findById(req.query?.moduleId).select("moduleName");

        if (!customField) {
            return res.status(404).send({ success: false, message: "Module not found" });
        }

        const collectionName = customField.moduleName;
        const collectionExists = await mongoose.connection.db.listCollections({ name: collectionName }).hasNext();

        if (!collectionExists) {
            return res.status(404).send({ success: false, message: "Collection does not exist" });
        }

        const ExistingModel = mongoose.model(collectionName);

        if (!ExistingModel) {
            return res.status(500).send({ success: false, message: 'Model not found' });
        }

        let allData = await ExistingModel.findOne({ _id: req.params.id });

        return res.status(200).json({ data: allData });

    } catch (err) {
        console.error(`Failed to display Record`, err);
        return res.status(400).json({ success: false, message: `no data found`, error: err.toString() });
    }
};

const add = async (req, res) => {
    try {
        if (!req?.body?.moduleId) {
            return res.status(400).send({ success: false, message: "moduleId is required" });
        }

        const customField = await CustomField.findById(req.body?.moduleId).select("moduleName");

        if (!customField) {
            return res.status(404).send({ success: false, message: "Module not found" });
        }

        const collectionName = customField.moduleName;
        const collectionExists = await mongoose.connection.db.listCollections({ name: collectionName }).hasNext();

        if (!collectionExists) {
            return res.status(404).send({ success: false, message: "Collection does not exist" });
        }

        const ExistingModel = mongoose.model(collectionName);

        if (!ExistingModel) {
            return res.status(500).send({ success: false, message: 'Model not found' });
        }
        req.body.updatedDate = new Date();
        req.body.deleted = false;

        const newDocument = new ExistingModel(req.body);
        newDocument.createdDate = new Date();

        await newDocument.save();

        return res.status(200).json({ message: 'Record added successfully', data: newDocument });

    } catch (err) {
        console.error(`Failed to create Record`, err);
        return res.status(400).json({ success: false, message: `Failed to Add Record`, error: err.toString() });
    }
};

const deleteField = async (req, res) => {
    try {
        if (!req.query?.moduleId) {
            return res.status(400).send({ success: false, message: "moduleId is required" })
        }

        const customField = await CustomField.findOne({ _id: req.query?.moduleId }).select("moduleName");

        if (!customField) {
            return res.status(404).send({ success: false, message: "Module not found" });
        }

        const collectionExists = await mongoose.connection.db.listCollections({ name: (`${customField?.moduleName}`) }).hasNext();


        if (!collectionExists) {
            return res.status(404).send({ success: false, message: "Collection not exists" })
        }

        const ExistingModel = mongoose.model(`${customField?.moduleName}`);

        if (typeof ExistingModel !== 'function') {
            return res.status(500).send({ success: false, message: 'Invalid model' });
        }

        const result = await ExistingModel.findByIdAndUpdate(req.params.id, { deleted: true });

        return res.status(200).json({ message: 'Record deleted successfully', data: result });

    } catch (err) {
        console.error(`Failed to delete Record`, err);
        return res.status(400).json({ success: false, message: `Failed to delete Record`, error: err.toString() });
    }
};

const deleteManyField = async (req, res) => {
    try {
        if (!req.body?.moduleId) {
            return res.status(400).send({ success: false, message: "moduleId is required" })
        }

        const customField = await CustomField.findOne({ _id: req.body?.moduleId }).select("moduleName");

        if (!customField) {
            return res.status(404).send({ success: false, message: "Module not found" });
        }

        const collectionExists = await mongoose.connection.db.listCollections({ name: (`${customField?.moduleName}`) }).hasNext();


        if (!collectionExists) {
            return res.status(404).send({ success: false, message: "Collection not exists" })
        }

        const ExistingModel = mongoose.model(`${customField?.moduleName}`);

        if (typeof ExistingModel !== 'function') {
            return res.status(500).send({ success: false, message: 'Invalid model' });
        }

        const result = await ExistingModel.updateMany({ _id: { $in: req.body.ids } }, { $set: { deleted: true } });

        return res.status(200).json({ message: 'Record deleted successfully', data: result });

    } catch (err) {
        console.error(`Failed to delete Record`, err);
        return res.status(400).json({ success: false, message: `Failed to delete Record`, error: err.toString() });
    }
};

const edit = async (req, res) => {
    try {
        if (!req?.body?.moduleId) {
            return res.status(400).send({ success: false, message: "moduleId is required" });
        }

        const customField = await CustomField.findOne({ _id: req.body?.moduleId }).select("moduleName");

        if (!customField) {
            return res.status(404).send({ success: false, message: "Module not found" });
        }

        const collectionName = customField?.moduleName;

        const collectionExists = await mongoose.connection.db.listCollections({ name: collectionName }).hasNext();

        if (!collectionExists) {
            return res.status(404).send({ success: false, message: `Collection '${collectionName}' not exists` });
        }

        const ExistingModel = mongoose.model(collectionName);

        if (typeof ExistingModel !== 'function') {
            return res.status(500).send({ success: false, message: 'Invalid model' });
        }

        const result = await ExistingModel.findOneAndUpdate(
            { _id: req.params.id },
            { $set: req.body },
            { new: true }
        );

        if (result) {
            return res.status(200).json({ success: true, message: 'Record updated successfully', data: result });
        } else {
            return res.status(404).json({ success: false, message: 'Record not found for the given id' });
        }
    } catch (err) {
        console.error(`Failed to Update Record`, err);
        return res.status(400).json({ success: false, message: `Failed to Update Record`, error: err.toString() });
    }
};

module.exports = { index, view, add, edit, deleteField, deleteManyField };

================
File: Server/controllers/images/_routes.js
================
const express = require('express');
const img = require('./imagesController.js');
const auth = require('../../middelwares/auth');

const router = express.Router();

router.get("/", img.index);
router.get("/view/:id", auth, img.view);
router.post("/change-authImg", auth, img.upload.single('authImg'), img.addAuthImg);
router.put("/change-authImg/:id", auth, img.upload.single('authImg'), img.UpdateAuthImg);
router.put("/change-logoImg/:id", auth, img.upload.fields([{ name: 'logoSmImg', maxCount: 1 }, { name: 'logoLgImg', maxCount: 1 }]), img.changeLogoImg);
router.delete('/delete/:id', auth, img.deleteData);
router.put('/isActive/:id', auth, img.setActiveImg);
router.post("/add-auth-logo-img", auth, img.upload.fields([{ name: 'authImg', maxCount: 1 }, { name: 'logoSmImg', maxCount: 1 }, { name: 'logoLgImg', maxCount: 1 }]), img.addAuthAndLogoImg);
router.put("/change-auth-logo-img/:id", auth, img.upload.fields([{ name: 'authImg', maxCount: 1 }, { name: 'logoSmImg', maxCount: 1 }, { name: 'logoLgImg', maxCount: 1 }]), img.updateAuthAndLogoImg);

router.use("/authImg", express.static('uploads/images'));
router.use("/logoImg", express.static('uploads/images'));

module.exports = router;

================
File: Server/controllers/images/imagesController.js
================
const Img = require('../../model/schema/imagesSchema');
const multer = require('multer');
const fs = require('fs');
const path = require('path');

const index = async (req, res) => {
    const query = req.query;
    query.deleted = false;
    let result = await Img.find(query);
    return res.send(result);
};

const view = async (req, res) => {
    try {
        let result = await Img.findOne({ _id: req.params.id, deleted: false });

        if (!result) return res.status(404).json({ message: "No Data Found." });

        return res.status(200).json(result);

    } catch (error) {
        console.error('Failed :', error);
        res.status(400).json({ success: false, message: 'Failed to display ', err: error });
    }
};

const addAuthImg = async (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).send({ success: false, message: 'No file uploaded.' });
        }

        const url = req.protocol + '://' + req.get('host');
        const file = `${url}/api/images/authImg/${req?.file?.filename}`;
        const createdDate = new Date();

        const newImgDocument = new Img({ authImg: file, createdDate });
        await newImgDocument.save();
        return res.send({ data: newImgDocument, message: 'Auth image uploaded successfully' });

    } catch (err) {
        console.error('Failed to add auth Image:', err);
        fs.unlinkSync(path.join(__dirname, '../../uploads/images/', req?.file?.filename));
        return res.status(400).json({ success: false, message: 'Failed to add auth image' });
    }
};

const addAuthAndLogoImg = async (req, res) => {
    try {
        if (!req.files?.authImg && !req?.files?.logoLgImg && !req?.files?.logoSmImg) {
            return res.status(400).send({ success: false, message: 'No files uploaded.' });

        } else if (!req.files?.authImg) {
            req?.files && Object.values(req?.files).forEach((fileArray) => {
                if (fileArray?.[0]?.filename) {
                    const filePath = path.join(__dirname, '../../uploads/images/', fileArray?.[0]?.filename);
                    fs.unlinkSync(filePath);
                }
            });

            return res.status(400).send({ success: false, message: 'No auth file uploaded' });

        } else if (!req?.files?.logoLgImg && !req?.files?.logoSmImg) {
            req?.files && Object.values(req?.files).forEach((fileArray) => {
                if (fileArray?.[0]?.filename) {
                    const filePath = path.join(__dirname, '../../uploads/images/', fileArray?.[0]?.filename);
                    fs.unlinkSync(filePath);
                }
            });

            return res.status(400).send({ success: false, message: 'No logo files uploaded' });
        }

        const { logoLgImg, logoSmImg, authImg } = req.files;

        const createdDate = new Date();
        const url = req.protocol + '://' + req.get('host');

        const authFile = `${url}/api/images/authImg/${authImg?.[0]?.filename}`;
        let smFile = '';
        let lgFile = '';

        if (logoLgImg && logoSmImg) {
            smFile = `${url}/api/images/logoImg/${logoSmImg?.[0]?.filename}`;
            lgFile = `${url}/api/images/logoImg/${logoLgImg?.[0]?.filename}`;
        } else {
            smFile = `${url}/api/images/logoImg/${logoSmImg ? logoSmImg?.[0]?.filename : logoLgImg?.[0]?.filename}`;
            lgFile = `${url}/api/images/logoImg/${logoSmImg ? logoSmImg?.[0]?.filename : logoLgImg?.[0]?.filename}`;
        }

        const newImgDocument = new Img({ authImg: authFile, logoSmImg: smFile, logoLgImg: lgFile, createdDate, isActive: true });
        await newImgDocument.save();
        await Img.updateMany({ _id: { $ne: newImgDocument._id } }, { $set: { isActive: false } });
        return res.send({ data: newImgDocument, message: 'Files uploaded successfully' });

    } catch (err) {
        console.error('Failed to add auth Image:', err);

        req?.files && Object.values(req?.files).forEach((fileArray) => {
            if (fileArray?.[0]?.filename) {
                const filePath = path.join(__dirname, '../../uploads/images/', fileArray?.[0]?.filename);
                fs.unlinkSync(filePath);
            }
        });

        return res.status(400).json({ success: false, message: 'Failed to add auth image' });
    }
};

const UpdateAuthImg = async (req, res) => {
    try {
        const { id } = req.params;

        if (!req.file) {
            return res.status(400).send({ success: false, message: 'No files uploaded.' });
        }

        const existingDocument = await Img.findOne({ _id: id });

        if (existingDocument) {
            const url = req.protocol + '://' + req.get('host');

            const file = `${url}/api/images/authImg/${req?.file?.filename}`;

            await Img.updateOne({ _id: id }, { $set: { authImg: file } });
            return res.send({ path: file, message: 'File uploaded successfully.' });

        } else {
            fs.unlinkSync(path.join(__dirname, '../../uploads/images/', req?.file?.filename));
            return res.status(404).send({ success: false, message: 'No Data Found.' });
        }

    } catch (err) {
        console.error('Failed to create AuthImg:', err);
        fs.unlinkSync(path.join(__dirname, '../../uploads/images/', req?.file?.filename));
        return res.status(400).json({ success: false, message: 'Failed to update auth Image' });
    }
};

const changeLogoImg = async (req, res) => {  // add, edit
    try {
        const { id } = req.params;

        if (!req?.files?.logoLgImg && !req?.files?.logoSmImg) {
            return res.status(400).send({ success: false, message: 'No logo files uploaded.' });
        }

        const { logoLgImg, logoSmImg } = req?.files;

        const existingDocument = await Img.findOne({ _id: id });

        if (existingDocument) {
            const url = req.protocol + '://' + req.get('host');
            let smFile = '';
            let lgFile = '';

            if (logoLgImg && logoSmImg) {
                smFile = `${url}/api/images/logoImg/${logoSmImg?.[0]?.filename}`;
                lgFile = `${url}/api/images/logoImg/${logoLgImg?.[0]?.filename}`;
            } else {
                smFile = `${url}/api/images/logoImg/${logoSmImg ? logoSmImg?.[0]?.filename : logoLgImg?.[0]?.filename}`;
                lgFile = `${url}/api/images/logoImg/${logoSmImg ? logoSmImg?.[0]?.filename : logoLgImg?.[0]?.filename}`;
            }

            await Img.updateOne({ _id: id }, { $set: { logoSmImg: smFile, logoLgImg: lgFile } });
            return res.send({ smLogoPath: smFile, lgLogoPath: lgFile, message: 'File uploaded successfully.' });
        }
        else {
            req?.files && Object.values(req?.files).forEach((fileArray) => {
                if (fileArray?.[0]?.filename) {
                    const filePath = path.join(__dirname, '../../uploads/images/', fileArray?.[0]?.filename);
                    fs.unlinkSync(filePath);
                }
            });

            return res.status(404).send({ success: false, message: 'No Data Found.' });
        }

    } catch (err) {
        console.error('Failed to set logo images :', err);

        req?.files && Object.values(req?.files).forEach((fileArray) => {
            if (fileArray?.[0]?.filename) {
                const filePath = path.join(__dirname, '../../uploads/images/', fileArray?.[0]?.filename);
                fs.unlinkSync(filePath);
            }
        });

        return res.status(400).json({ success: false, message: 'Failed to set logo imges' });
    }
};

const updateAuthAndLogoImg = async (req, res) => {
    try {
        const { id } = req.params;
        let updateData = {};

        if (!req?.files?.logoLgImg && !req?.files?.logoSmImg && !req.files?.authImg) {
            return res.status(400).send({ success: false, message: 'No files uploaded.' });
        }

        const existingDocument = await Img.findOne({ _id: id });

        if (existingDocument) {
            const { logoLgImg, logoSmImg, authImg } = req?.files;

            const url = req.protocol + '://' + req.get('host');

            if (authImg) {
                updateData.authImg = `${url}/api/images/authImg/${authImg?.[0]?.filename}`;
            }

            if (logoLgImg) {
                updateData.logoLgImg = `${url}/api/images/logoImg/${logoLgImg?.[0]?.filename}`;
            }

            if (logoSmImg) {
                updateData.logoSmImg = `${url}/api/images/logoImg/${logoSmImg?.[0]?.filename}`;
            }

            let result = await Img.findByIdAndUpdate({ _id: id }, { $set: { ...updateData } }, { new: true });
            return res.send({ data: result, message: 'Files updated successfully.' });

        }
        else {
            req?.files && Object.values(req?.files).forEach((fileArray) => {
                if (fileArray?.[0]?.filename) {
                    const filePath = path.join(__dirname, '../../uploads/images/', fileArray?.[0]?.filename);
                    fs.unlinkSync(filePath);
                }
            });

            return res.status(404).send({ success: false, message: 'No Data Found.' });
        }

    } catch (err) {
        console.error('Failed to update images :', err);

        req?.files && Object.values(req?.files).forEach((fileArray) => {
            if (fileArray?.[0]?.filename) {
                const filePath = path.join(__dirname, '../../uploads/images/', fileArray?.[0]?.filename);
                fs.unlinkSync(filePath);
            }
        });

        return res.status(400).json({ success: false, message: 'Failed to update images' });
    }
};

const setActiveImg = async (req, res) => {
    try {
        const { isActive } = req.body;
        const imageData = await Img.findByIdAndUpdate(req.params.id, { isActive: isActive }, { new: true });

        if (!imageData) {
            return res.status(404).send({ success: false, message: "No Data Found" })
        }

        await Img.updateMany({ _id: { $ne: req.params.id } }, { $set: { isActive: false } });

        return res.status(200).json({ message: "done", data: imageData });

    } catch (err) {

    }
};

const deleteData = async (req, res) => {
    try {
        const imageData = await Img.findByIdAndUpdate(req.params.id, { deleted: true }, { new: true });

        if (!imageData) {
            return res.status(404).send({ success: false, message: "No Data Found" })
        }

        return res.status(200).json({ message: "done", data: imageData });

    } catch (err) {
        return res.status(404).json({ success: false, message: "error", err });
    }
};

const upload = multer({
    storage: multer.diskStorage({
        destination: function (req, file, cb) {
            const uploadDir = 'uploads/images/';
            fs.mkdirSync(uploadDir, { recursive: true });
            cb(null, uploadDir);
        },
        filename: function (req, file, cb) {
            const uploadDir = 'uploads/images';
            const filePath = path.join(uploadDir, file.originalname);

            // Check if the file already exists in the destination directory
            if (fs.existsSync(filePath)) {
                // For example, you can append a timestamp to the filename to make it unique
                const timestamp = Date.now() + Math.floor(Math.random() * 90);
                cb(null, file.originalname.split('.')[0] + '-' + timestamp + '.' + file.originalname.split('.')[1]);
            } else {
                cb(null, file.originalname);
            }
        },
    })
});


module.exports = { index, view, upload, addAuthImg, addAuthAndLogoImg, UpdateAuthImg, updateAuthAndLogoImg, changeLogoImg, deleteData, setActiveImg };

================
File: Server/controllers/invoices/_routes.js
================
const express = require('express');
const invoices = require('./invoices');
const auth = require('../../middelwares/auth');

const router = express.Router();

router.get('/', auth, invoices.index)
router.post('/add', auth, invoices.add)
router.post('/addMany', auth, invoices.addMany)
router.get('/view/:id', auth, invoices.view)
router.put('/edit/:id', auth, invoices.edit)
router.delete('/delete/:id', auth, invoices.deleteData)
router.post('/deleteMany', auth, invoices.deleteMany)

module.exports = router

================
File: Server/controllers/invoices/invoices.js
================
const Invoices = require("../../model/schema/invoices.js");
const mongoose = require("mongoose");
const User = require('../../model/schema/user')
const Quotes = require("../../model/schema/quotes.js");



async function getNextAutoIncrementValue() {
    const num = await Invoices.countDocuments({});
    return num + 1;
}

const index = async (req, res) => {
    query = req.query;
    query.deleted = false;
    const user = await User.findById(req.user.userId)
    if (user?.role !== "superAdmin") {
        delete query.createBy
        query.$or = [{ createBy: new mongoose.Types.ObjectId(req.user.userId) }, { assignUser: new mongoose.Types.ObjectId(req.user.userId) }];
    }
    try {
        let result = await Invoices.aggregate([
            { $match: query },
            {
                $lookup: {
                    from: "Contacts",
                    localField: "contact",
                    foreignField: "_id",
                    as: "contactData",
                },
            },
            {
                $lookup: {
                    from: "Accounts",
                    localField: "account",
                    foreignField: "_id",
                    as: "accountData",
                },
            },
            {
                $lookup: {
                    from: "User",
                    localField: "createBy",
                    foreignField: "_id",
                    as: "users",
                },
            },
            {
                $lookup: {
                    from: "User",
                    localField: "modifiedBy",
                    foreignField: "_id",
                    as: "modifiedByUser",
                },
            },
            {
                $lookup: {
                    from: "User",
                    localField: "assignedTo",
                    foreignField: "_id",
                    as: "assignedToData",
                },
            },
            { $unwind: { path: "$users", preserveNullAndEmptyArrays: true } },
            { $unwind: { path: "$contactData", preserveNullAndEmptyArrays: true } },
            { $unwind: { path: "$accountData", preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$modifiedByUser', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: "$assignedToData", preserveNullAndEmptyArrays: true } },
            { $match: { "users.deleted": false } },
            {
                $addFields: {
                    assignUserName: {
                        $cond: {
                            if: '$assignUsers',
                            then: { $concat: ['$assignUsers.firstName', ' ', '$assignUsers.lastName'] },
                            else: { $concat: [''] }
                        }
                    },
                    createdByName: { $concat: ['$users.firstName', ' ', '$users.lastName'] },
                    modifiedUserName: { $concat: ['$modifiedByUser.firstName', ' ', '$modifiedByUser.lastName'] },
                    contactName: { $concat: ['$contactData.firstName', ' ', '$contactData.lastName'] },
                    accountName: '$accountData.name'
                }
            },
            { $project: { users: 0, contactData: 0, accountData: 0, modifiedByUser: 0, assignedToData: 0 } },
        ]);
        res.send(result);
    } catch (error) {
        console.error("Error:", error);
        res.status(500).send("Internal Server Error");
    }
};

const add = async (req, res) => {
    try {
        const nextAutoIncrementValue = await getNextAutoIncrementValue();
        const result = new Invoices({ ...req.body, invoiceNumber: nextAutoIncrementValue });
        await result.save();
        res.status(200).json(result);
    } catch (err) {
        console.error("Failed to create Invoices:", err);
        res.status(400).json({ error: "Failed to create Invoices : ", err });
    }
};

const edit = async (req, res) => {
    try {

        let result = await Invoices.findOneAndUpdate(
            { _id: req.params.id },
            { $set: req.body },
            { new: true }
        );

        res.status(200).json(result);
    } catch (err) {
        console.error("Failed to create Invoices:", err);
        res.status(400).json({ error: "Failed to create Invoices : ", err });
    }
};
const addMany = async (req, res) => {
    try {
        const data = req.body.map((item) => ({
            ...item,
            account: item.account ? item.account : null,
            contact: item.contact ? item.contact : null,
        }))
        const inserted = await Invoices.insertMany(data);

        res.status(200).json(inserted);
    } catch (err) {
        console.error('Failed to create Invoices :', err);
        res.status(400).json({ error: 'Failed to create Invoices' });
    }
};
const view = async (req, res) => {
    try {
        let response = await Invoices.findOne({ _id: req.params.id });
        if (!response) return res.status(404).json({ message: "no Data Found." });
        let result = await Invoices.aggregate([
            { $match: { _id: response._id } },
            {
                $lookup: {
                    from: "Opportunities",
                    localField: "oppotunity",
                    foreignField: "_id",
                    as: "oppotunityData",
                },
            },
            {
                $lookup: {
                    from: "Contacts",
                    localField: "contact",
                    foreignField: "_id",
                    as: "contactData",
                },
            },
            {
                $lookup: {
                    from: "Accounts",
                    localField: "account",
                    foreignField: "_id",
                    as: "accountData",
                },
            },
            {
                $lookup: {
                    from: "User",
                    localField: "createBy",
                    foreignField: "_id",
                    as: "users",
                },
            },
            {
                $lookup: {
                    from: "User",
                    localField: "modifiedBy",
                    foreignField: "_id",
                    as: "modifiedByUser",
                },
            },
            {
                $lookup: {
                    from: "User",
                    localField: "assignedTo",
                    foreignField: "_id",
                    as: "assignedToData",
                },
            },
            { $unwind: { path: "$users", preserveNullAndEmptyArrays: true } },
            { $unwind: { path: "$contactData", preserveNullAndEmptyArrays: true } },
            { $unwind: { path: "$accountData", preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$modifiedByUser', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: "$assignedToData", preserveNullAndEmptyArrays: true } },
            { $unwind: { path: "$oppotunityData", preserveNullAndEmptyArrays: true } },
            { $match: { "users.deleted": false } },
            {
                $addFields: {
                    assignUserName: {
                        $cond: {
                            if: '$assignedToData',
                            then: { $concat: ['$assignedToData.firstName', ' ', '$assignedToData.lastName'] },
                            else: { $concat: [''] }
                        }
                    },
                    oppotunityName: '$oppotunityData.opportunityName',
                    createdByName: { $concat: ['$users.firstName', ' ', '$users.lastName'] },
                    modifiedUserName: { $concat: ['$modifiedByUser.firstName', ' ', '$modifiedByUser.lastName'] },
                    contactName: { $concat: ['$contactData.firstName', ' ', '$contactData.lastName'] },
                    accountName: '$accountData.name'
                }
            },
            { $project: { users: 0, contactData: 0, accountData: 0, modifiedByUser: 0, oppotunityData: 0, assignedToData: 0 } },
        ]);
        let quotesDetails = await Quotes.aggregate([
            { $match: { _id: response.quotesId, deleted: false } },
            {
                $lookup: {
                    from: "Contacts",
                    localField: "contact",
                    foreignField: "_id",
                    as: "contactData",
                },
            },
            {
                $lookup: {
                    from: "Accounts",
                    localField: "account",
                    foreignField: "_id",
                    as: "accountData",
                },
            },
            { $unwind: { path: "$contactData", preserveNullAndEmptyArrays: true } },
            { $unwind: { path: "$accountData", preserveNullAndEmptyArrays: true } },
            {
                $addFields: {
                    contactName: { $concat: ['$contactData.firstName', ' ', '$contactData.lastName'] },
                    accountName: '$accountData.name'
                }
            },
            { $project: { contactData: 0, accountData: 0 } },

        ]);

        res.status(200).json({ result: result[0], quotesDetails });
    } catch (err) {
        console.log("Error:", err);
        res.status(400).json({ Error: err });
    }
};

const deleteData = async (req, res) => {
    try {
        const result = await Invoices.findByIdAndUpdate(req.params.id, {
            deleted: true,
        });
        res.status(200).json({ message: "done", result });
    } catch (err) {
        res.status(404).json({ message: "error", err });
    }
};

const deleteMany = async (req, res) => {
    try {
        const result = await Invoices.updateMany(
            { _id: { $in: req.body } },
            { $set: { deleted: true } }
        );

        if (result?.matchedCount > 0 && result?.modifiedCount > 0) {
            return res
                .status(200)
                .json({ message: "Invoices Removed successfully", result });
        } else {
            return res
                .status(404)
                .json({ success: false, message: "Failed to remove Invoices" });
        }
    } catch (err) {
        return res.status(404).json({ success: false, message: "error", err });
    }
};

module.exports = { index, add, edit, addMany, view, deleteData, deleteMany };

================
File: Server/controllers/lead/_routes.js
================
const express = require('express');
const lead = require('./lead');
const auth = require('../../middelwares/auth');

const router = express.Router();

router.get('/', auth, lead.index)
router.post('/add', auth, lead.add)
router.post('/addMany', auth, lead.addMany)
router.get('/view/:id', auth, lead.view)
router.put('/edit/:id', auth, lead.edit)
router.put('/changeStatus/:id', auth, lead.changeStatus)
router.delete('/delete/:id', auth, lead.deleteData)
router.post('/deleteMany', auth, lead.deleteMany)

module.exports = router

================
File: Server/controllers/lead/lead.js
================
const { Lead } = require('../../model/schema/lead')
const email = require('../../model/schema/email');
const PhoneCall = require('../../model/schema/phoneCall');
const Task = require('../../model/schema/task')
const MeetingHistory = require('../../model/schema/meeting')
const DocumentSchema = require('../../model/schema/document')

const index = async (req, res) => {
    const query = req.query
    query.deleted = false;

    // let result = await Lead.find(query)

    let allData = await Lead.find(query).populate({
        path: 'createBy',
        match: { deleted: false } // Populate only if createBy.deleted is false
    }).exec()

    const result = allData.filter(item => item.createBy !== null);
    res.send(result)
}

const addMany = async (req, res) => {
    try {
        const data = req.body;
        const insertedLead = await Lead.insertMany(data);

        res.status(200).json(insertedLead);
    } catch (err) {
        console.error('Failed to create Lead :', err);
        res.status(400).json({ error: 'Failed to create Lead' });
    }
};

const changeStatus = async (req, res) => {
    try {
        const { leadStatus } = req.body;
        let result = await Lead.findOneAndUpdate(
            { _id: req.params.id },
            { $set: { leadStatus: leadStatus } },
            { new: true }
        );

        if (!result) {
            return res.status(404).json({ success: false, message: 'Lead not found' });
        }

        return res.status(200).json({ message: "Status Change Successfully", result });
    } catch (err) {
        console.error('Failed to change status:', err);
        return res.status(400).json({ error: 'Failed to change status : ', err });
    }
}

const add = async (req, res) => {
    try {
        req.body.createdDate = new Date();
        const user = new Lead(req.body);
        await user.save();
        res.status(200).json(user);
    } catch (err) {
        console.error('Failed to create Lead:', err);
        res.status(400).json({ error: 'Failed to create Lead' });
    }
}

const edit = async (req, res) => {
    try {
        let result = await Lead.updateOne(
            { _id: req.params.id },
            { $set: req.body }
        );
        res.status(200).json(result);
    } catch (err) {
        console.error('Failed to Update Lead:', err);
        res.status(400).json({ error: 'Failed to Update Lead' });
    }
}

const view = async (req, res) => {
    let lead = await Lead.findOne({ _id: req.params.id })
    if (!lead) return res.status(404).json({ message: "no Data Found." })

    let query = req.query
    if (query.sender) {
        query.sender = new mongoose.Types.ObjectId(query.sender);
    }
    query.createByLead = req.params.id

    let Email = await email.aggregate([
        { $match: { createByLead: lead._id } },
        {
            $lookup: {
                from: 'Leads', // Assuming this is the collection name for 'leads'
                localField: 'createByLead',
                foreignField: '_id',
                as: 'createByrefLead'
            }
        },
        {
            $lookup: {
                from: 'User',
                localField: 'sender',
                foreignField: '_id',
                as: 'users'
            }
        },
        { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
        { $unwind: { path: '$createByRef', preserveNullAndEmptyArrays: true } },
        { $unwind: { path: '$createByrefLead', preserveNullAndEmptyArrays: true } },
        { $match: { 'users.deleted': false } },
        {
            $addFields: {
                senderName: { $concat: ['$users.firstName', ' ', '$users.lastName'] },
                deleted: {
                    $cond: [
                        { $eq: ['$createByRef.deleted', false] },
                        '$createByRef.deleted',
                        { $ifNull: ['$createByrefLead.deleted', false] }
                    ]
                },
                createByName: {
                    $cond: {
                        if: '$createByRef',
                        then: { $concat: ['$createByRef.title', ' ', '$createByRef.firstName', ' ', '$createByRef.lastName'] },
                        else: { $concat: ['$createByrefLead.leadName'] }
                    }
                },
            }
        },
        {
            $project: {
                createByRef: 0,
                createByrefLead: 0,
                users: 0
            }
        },
    ])

    let phoneCall = await PhoneCall.aggregate([
        { $match: { createByLead: lead._id } },
        {
            $lookup: {
                from: 'Leads', // Assuming this is the collection name for 'leads'
                localField: 'createByLead',
                foreignField: '_id',
                as: 'createByrefLead'
            }
        },

        {
            $lookup: {
                from: 'User',
                localField: 'sender',
                foreignField: '_id',
                as: 'users'
            }
        },
        { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
        { $unwind: { path: '$createByrefLead', preserveNullAndEmptyArrays: true } },
        { $match: { 'users.deleted': false } },
        {
            $addFields: {
                senderName: { $concat: ['$users.firstName', ' ', '$users.lastName'] },
                deleted: '$createByrefLead.deleted',
                createByName: '$createByrefLead.leadName',
            }
        },
        { $project: { createByrefLead: 0, users: 0 } },
    ])

    let task = await Task.aggregate([
        { $match: { assignToLead: lead._id } },
        {
            $lookup: {
                from: 'Leads',
                localField: 'assignToLead',
                foreignField: '_id',
                as: 'lead'
            }
        },
        {
            $lookup: {
                from: 'User',
                localField: 'createBy',
                foreignField: '_id',
                as: 'users'
            }
        },
        { $unwind: { path: '$lead', preserveNullAndEmptyArrays: true } },
        { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
        {
            $addFields: {
                // assignToName: lead.leadName, 
                assignToName: '$lead.leadName',
                createByName: '$users.username',
            }
        },
        { $project: { lead: 0, users: 0 } },
    ])

    let meeting = await MeetingHistory.aggregate([
        {
            $match: {
                $expr: {
                    $and: [
                        { $in: [lead._id, '$attendesLead'] },
                    ]
                }
            }
        },
        {
            $lookup: {
                from: 'Leads',
                localField: 'assignToLead',
                foreignField: '_id',
                as: 'lead'
            }
        },
        {
            $lookup: {
                from: 'User',
                localField: 'createBy',
                foreignField: '_id',
                as: 'users'
            }
        },
        { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
        {
            $addFields: {
                attendesArray: '$lead.leadEmail',
                createdByName: '$users.username',
            }
        },
        {
            $project: {
                users: 0
            }
        }
    ]);
    const Document = await DocumentSchema.aggregate([
        { $unwind: '$file' },
        { $match: { 'file.deleted': false, 'file.linkLead': lead._id } },
        {
            $lookup: {
                from: 'User', // Replace 'users' with the actual name of your users collection
                localField: 'createBy',
                foreignField: '_id', // Assuming the 'createBy' field in DocumentSchema corresponds to '_id' in the 'users' collection
                as: 'creatorInfo'
            }
        },
        { $unwind: { path: '$creatorInfo', preserveNullAndEmptyArrays: true } },
        { $match: { 'creatorInfo.deleted': false } },
        {
            $group: {
                _id: '$_id',  // Group by the document _id (folder's _id)
                folderName: { $first: '$folderName' }, // Get the folderName (assuming it's the same for all files in the folder)
                createByName: { $first: { $concat: ['$creatorInfo.firstName', ' ', '$creatorInfo.lastName'] } },
                files: { $push: '$file' }, // Push the matching files back into an array
            }
        },
        { $project: { creatorInfo: 0 } },
    ]);

    res.status(200).json({ lead, Email, phoneCall, task, meeting, Document })
}

const deleteData = async (req, res) => {
    try {
        const lead = await Lead.findByIdAndUpdate(req.params.id, { deleted: true });
        res.status(200).json({ message: "done", lead })
    } catch (err) {
        res.status(404).json({ message: "error", err })
    }
}

const deleteMany = async (req, res) => {
    try {
        const lead = await Lead.updateMany({ _id: { $in: req.body } }, { $set: { deleted: true } });
        res.status(200).json({ message: "done", lead })
    } catch (err) {
        res.status(404).json({ message: "error", err })
    }
}


module.exports = { index, add, addMany, view, edit, deleteData, deleteMany, changeStatus }

================
File: Server/controllers/meeting/_routes.js
================
const express = require('express');

const router = express.Router();

module.exports = router

================
File: Server/controllers/meeting/meeting.js
================
const MeetingHistory = require('../../model/schema/meeting')
const mongoose = require('mongoose');

const add = async (req, res) => {
   
}

const index = async (req, res) => {
    
}

const view = async (req, res) => {
    
}

const deleteData = async (req, res) => {
  
}

const deleteMany = async (req, res) => {
    
}

module.exports = { add, index, view, deleteData, deleteMany }

================
File: Server/controllers/moduleActiveDeactive/_routes.js
================
const express = require('express');
const moduleActiveDeactive = require('./moduleActiveDeactive');
const auth = require('../../middelwares/auth');

const router = express.Router();

router.get('/', auth, moduleActiveDeactive.index)
router.put('/edit', auth, moduleActiveDeactive.Edit)

module.exports = router

================
File: Server/controllers/moduleActiveDeactive/moduleActiveDeactive.js
================
const CustomField = require("../../model/schema/customField");
const ModuleActiveDeactive = require("../../model/schema/moduleActiveDeactive");

const index = async (req, res) => {
    try {
        const query = req?.query;

        // Fetch custom fields data and filter non-default and non-deleted fields
        const customFieldsData = await CustomField?.find({ deleted: false });
        const customFieldsDeletedData = await CustomField?.find({ deleted: true });

        const filteredCustomFields = customFieldsData?.map((item) => ({
            ...item?.toObject(),
            fields: item?.fields?.filter(field => !field?.isDefault && !field?.delete),
        }));
        filteredCustomFields?.sort((a, b) => a?.no - b?.no);

        // Fetch active/inactive modules based on query
        let data = await ModuleActiveDeactive?.find(query);

        let routes = [
            "Dashboard",
            "Leads",
            "Contacts",
            "Properties",
            "Opportunities",
            "Account",
            "Quotes",
            "Invoices",
            "Tasks",
            "Meetings",
            "Calls",
            "Emails",
            "Email Template",
            "Calender",
            "Payments",
            "Reporting and Analytics",
            "Documents",
        ];

        filteredCustomFields?.map(item => item?.moduleName)?.forEach((item) => {
            !routes?.includes(item) && routes?.push(item)
        })

        const existingModuleNames = data?.map(record => record?.moduleName);
        const missingRoutes = routes?.filter(route => !existingModuleNames?.includes(route));

        // Assign order numbers to missing routes
        let orderNumber = 1; // Start with 1 or any other base number as needed

        if (missingRoutes?.length) {
            await ModuleActiveDeactive?.insertMany(
                missingRoutes?.map(route => ({
                    moduleName: route,
                    order: orderNumber++
                }))
            );
        }

        customFieldsDeletedData?.forEach(async (item) => {
            await ModuleActiveDeactive.deleteOne({ moduleName: item?.moduleName })
        })

        // Fetch updated modules
        data = await ModuleActiveDeactive?.find(query);
        data = data.sort((a, b) => a?.order - b?.order);

        return res.status(200).json(data);
    } catch (err) {
        console.error("Error :", err);
        return res.status(400).json({ err, error: "Something wents wrong" });
    }
};

const Edit = async (req, res) => {
    try {
        const updates = req.body;

        const updatePromises = updates.map(update => {
            return ModuleActiveDeactive.updateOne(
                { _id: update._id },
                { $set: { isActive: update.isActive, order: update.order } }
            );
        });

        await Promise.all(updatePromises);

        res.status(200).send('update successful');
    } catch (err) {
        console.error("Error :", err);
        return res.status(400).json({ err, error: "Something wents wrong" });
    }
};

module.exports = { index, Edit };

================
File: Server/controllers/opportunities/_routes.js
================
const express = require('express');
const auth = require('../../middelwares/auth');
const opportunities = require('./opportunities')

const router = express.Router();

router.get('/', auth, opportunities.index)
router.get('/view/:id', auth, opportunities.view)
router.post('/add', auth, opportunities.add)
router.post('/addMany', auth, opportunities.addMany)
router.put('/edit/:id', auth, opportunities.edit)
router.delete('/delete/:id', auth, opportunities.deleteData)
router.post('/deleteMany', auth, opportunities.deleteMany)

module.exports = router

================
File: Server/controllers/opportunities/opportunities.js
================
const Opprtunities = require('../../model/schema/opprtunity')
const User = require('../../model/schema/user')
const mongoose = require('mongoose');

const add = async (req, res) => {
    try {
        const result = new Opprtunities(req.body);
        await result.save();
        res.status(200).json(result);
    } catch (err) {
        console.error('Failed to create :', err);
        res.status(400).json({ err, error: 'Failed to create' });
    }
}
const addMany = async (req, res) => {
    try {
        const data = req.body.map((item) => ({
            ...item,
            account: item.account ? item.account : null
        }))
        const insertedOppotunity = await Opprtunities.insertMany(data);

        res.status(200).json(insertedOppotunity);
    } catch (err) {
        console.error('Failed to create Opprtunities :', err);
        res.status(400).json({ error: 'Failed to create Opprtunities' });
    }
};
const index = async (req, res) => {
    try {
        const query = req.query
        query.deleted = false;

        const user = await User.findById(req.user.userId)
        if (user?.role !== "superAdmin") {
            delete query.createBy
            query.$or = [{ createBy: new mongoose.Types.ObjectId(req.user.userId) }, { assignUser: new mongoose.Types.ObjectId(req.user.userId) }];
        }

        const result = await Opprtunities.aggregate([
            { $match: query },
            {
                $lookup: {
                    from: 'User',
                    localField: 'createBy',
                    foreignField: '_id',
                    as: 'users'
                }
            },
            {
                $lookup: {
                    from: 'User',
                    localField: 'assignUser',
                    foreignField: '_id',
                    as: 'assignUsers'
                }
            },
            {
                $lookup: {
                    from: 'User',
                    localField: 'modifiedBy',
                    foreignField: '_id',
                    as: 'modifiedByUser'
                }
            },
            {
                $lookup: {
                    from: 'Accounts',
                    localField: 'accountName',
                    foreignField: '_id',
                    as: 'accountData'
                }
            },
            { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$assignUsers', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$modifiedByUser', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$accountData', preserveNullAndEmptyArrays: true } },
            { $match: { 'users.deleted': false } },
            // { $match: { 'assignUsers.deleted': false } },
            { $match: { 'modifiedByUser.deleted': false } },
            {
                $addFields: {
                    createdByName: { $concat: ['$users.firstName', ' ', '$users.lastName'] },
                    // assignUserName: { $concat: ['$assignUsers.firstName', ' ', '$assignUsers.lastName'] },
                    assignUserName: {
                        $cond: {
                            if: '$assignUsers',
                            then: { $concat: ['$assignUsers.firstName', ' ', '$assignUsers.lastName'] },
                            else: { $concat: [''] }
                        }
                    },
                    modifiedUserName: { $concat: ['$modifiedByUser.firstName', ' ', '$modifiedByUser.lastName'] },
                    accountName2: '$accountData.name'
                }
            },
            {
                $project: {
                    users: 0,
                    assignUsers: 0,
                    modifiedByUser: 0,
                    accountData: 0,
                }
            },
        ]);

        res.status(200).json(result);
    } catch (err) {
        console.error('Failed :', err);
        res.status(400).json({ err, error: 'Failed ' });
    }
}

const view = async (req, res) => {
    try {
        let result = await Opprtunities.findOne({ _id: req.params.id })
        if (!result) return res.status(404).json({ message: "no Data Found." })

        let response = await Opprtunities.aggregate([
            { $match: { _id: result._id } },
            {
                $lookup: {
                    from: 'User',
                    localField: 'createBy',
                    foreignField: '_id',
                    as: 'users'
                }
            },
            {
                $lookup: {
                    from: 'User',
                    localField: 'assignUser',
                    foreignField: '_id',
                    as: 'assignUsers'
                }
            },
            {
                $lookup: {
                    from: 'User',
                    localField: 'modifiedBy',
                    foreignField: '_id',
                    as: 'modifiedByUser'
                }
            },
            {
                $lookup: {
                    from: 'Accounts',
                    localField: 'accountName',
                    foreignField: '_id',
                    as: 'accountData'
                }
            },
            { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$assignUsers', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$modifiedByUser', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$accountData', preserveNullAndEmptyArrays: true } },

            { $match: { 'users.deleted': false } },
            // { $match: { 'assignUsers.deleted': false } },
            { $match: { 'modifiedByUser.deleted': false } },
            {
                $addFields: {
                    createdByName: { $concat: ['$users.firstName', ' ', '$users.lastName'] },
                    // assignUserName: { $concat: ['$assignUsers.firstName', ' ', '$assignUsers.lastName'] },
                    assignUserName: {
                        $cond: {
                            if: '$assignUsers',
                            then: { $concat: ['$assignUsers.firstName', ' ', '$assignUsers.lastName'] },
                            else: { $concat: [''] }
                        }
                    },
                    modifiedUserName: { $concat: ['$modifiedByUser.firstName', ' ', '$modifiedByUser.lastName'] },
                    accountName2: '$accountData.name'
                }
            },
            {
                $project: {
                    users: 0,
                    assignUsers: 0,
                    modifiedByUser: 0,
                    accountData: 0,
                }
            },
        ])

        res.status(200).json(response[0])
    } catch (err) {
        console.error('Failed :', err);
        res.status(400).json({ err, error: 'Failed ' });
    }
}
const edit = async (req, res) => {
    try {

        let result = await Opprtunities.findOneAndUpdate(
            { _id: req.params.id },
            { $set: req.body },
            { new: true }
        );

        res.status(200).json(result);
    } catch (err) {
        console.error('Failed to create Opprtunities:', err);
        res.status(400).json({ error: 'Failed to create Opprtunities : ', err });
    }
}
const deleteData = async (req, res) => {
    try {
        const result = await Opprtunities.findByIdAndUpdate(req.params.id, { deleted: true });
        res.status(200).json({ message: "done", result: result })
    } catch (err) {
        res.status(404).json({ message: "error", err })
    }
}

const deleteMany = async (req, res) => {
    try {
        const result = await Opprtunities.updateMany({ _id: { $in: req.body } }, { $set: { deleted: true } });
        res.status(200).json({ message: "done", result })
    } catch (err) {
        res.status(404).json({ message: "error", err })
    }
}

module.exports = { add, index, view, deleteData, edit, deleteMany, addMany }

================
File: Server/controllers/payment/_routes.js
================
const express = require('express');
const payment = require('./payment')

const router = express.Router();


router.post('/add', payment.add)
router.get('/', payment.index)

module.exports = router

================
File: Server/controllers/payment/payment.js
================
const stripeModule = require('stripe')


const index = async (req, res) => {
    const stripe = stripeModule(process.env.STRIPE_PRIVATE_KEY);
    try {
        const session = await stripe.paymentIntents.list({ limit: 100 });

        const paymentIntents = session.data;

        const paymentInfo = [];

        for (const paymentIntent of paymentIntents) {
            const paymentMethodId = paymentIntent.payment_method;
            const paymentMethod = await stripe.paymentMethods.retrieve(paymentMethodId);

            // Extract card details
            const cardDetails = paymentMethod.card;
            const billingDetails = paymentMethod.billing_details;
            const expMonth = cardDetails.exp_month < 10 ? `0${cardDetails.exp_month}` : cardDetails.exp_month;
            const expYear = cardDetails.exp_year.toString().slice(-2); // Get the last two digits of the year

            const paymentData = {
                id: paymentIntent.id,
                amount: paymentIntent.amount,
                cardholderName: billingDetails.name,
                cardholderEmail: billingDetails.email,
                cardExp: `${expMonth}/${expYear}`,
                cardBrand: cardDetails.brand,
                cardNumber: `**** **** **** ${cardDetails.last4}`,
            };

            paymentInfo.push(paymentData);
        }

        res.status(200).json(paymentInfo);
    } catch (e) {
        console.log(e)
        res.status(500).json({ error: e.message });
    }
}

const add = async (req, res) => {
    const stripe = stripeModule(process.env.STRIPE_PRIVATE_KEY);
    try {
        const session = await stripe.checkout.sessions.create({
            payment_method_types: ["card"],
            mode: "payment",
            customer_email: req.body.customer_email,
            line_items: req.body.items.map((item) => {
                return {
                    price_data: {
                        currency: "inr",
                        product_data: {
                            name: item.name,
                            description: item.description,
                        },
                        unit_amount: item.price * 100,
                    },
                    quantity: item.quantity,
                };
            }),
            success_url: "https://real-estate-crm-jet.vercel.app/payments",
            cancel_url: "https://real-estate-crm-jet.vercel.app/payments",
        });
        res.json({ url: session.url });
    } catch (e) {
        console.log("error: ", e);
        res.status(500).json({ error: e.message });
    }
}

module.exports = { add, index }

================
File: Server/controllers/phoneCall/_routes.js
================
const express = require('express');
const auth = require('../../middelwares/auth');
const phoneCall = require('./phonCall')

const router = express.Router();

router.get('/', auth, phoneCall.index)
router.get('/view/:id', auth, phoneCall.view)
router.post('/add', auth, phoneCall.add)

module.exports = router

================
File: Server/controllers/phoneCall/phonCall.js
================
const PhoneCall = require('../../model/schema/phoneCall');
const User = require('../../model/schema/user');
const mongoose = require('mongoose');

const add = async (req, res) => {
    try {
        const { sender, recipient, callDuration, startDate, callNotes, createByContact, createBy, createByLead } = req.body;

        if (createByContact && !mongoose.Types.ObjectId.isValid(createByContact)) {
            res.status(400).json({ error: 'Invalid createByContact value' });
        }
        if (createByLead && !mongoose.Types.ObjectId.isValid(createByLead)) {
            res.status(400).json({ error: 'Invalid createByLead value' });
        }
        const phoneCall = { sender, recipient, callDuration, startDate, callNotes, createBy }

        if (createByContact) {
            phoneCall.createByContact = createByContact;
        }

        if (createByLead) {
            phoneCall.createByLead = createByLead;
        }

        const user = await User.findById({ _id: phoneCall.sender });
        user.outboundcall = user.outboundcall + 1;
        await user.save();

        const result = new PhoneCall(phoneCall);
        await result.save();
        res.status(200).json({ result });
    } catch (err) {
        console.error('Failed to create :', err);
        res.status(400).json({ err, error: 'Failed to create' });
    }
}

const index = async (req, res) => {
    try {

        const query = req.query
        if (query.sender) {
            query.sender = new mongoose.Types.ObjectId(query.sender);
        }
        let result = await PhoneCall.aggregate([
            { $match: query },
            {
                $lookup: {
                    from: 'Leads', // Assuming this is the collection name for 'leads'
                    localField: 'createByLead',
                    foreignField: '_id',
                    as: 'createByrefLead'
                }
            },
            {
                $lookup: {
                    from: 'Contacts',
                    localField: 'createByContact',
                    foreignField: '_id',
                    as: 'contact'
                }
            },
            {
                $lookup: {
                    from: 'User',
                    localField: 'sender',
                    foreignField: '_id',
                    as: 'users'
                }
            },
            { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$contact', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$createByrefLead', preserveNullAndEmptyArrays: true } },
            { $match: { 'users.deleted': false } },
            {
                $addFields: {
                    senderName: { $concat: ['$users.firstName', ' ', '$users.lastName'] },
                    deleted: {
                        $cond: [
                            { $eq: ['$contact.deleted', false] },
                            '$contact.deleted',
                            { $ifNull: ['$createByrefLead.deleted', false] }
                        ]
                    },
                    createByName: {
                        $cond: {
                            if: '$contact',
                            then: { $concat: ['$contact.title', ' ', '$contact.firstName', ' ', '$contact.lastName'] },
                            else: { $concat: ['$createByrefLead.leadName'] }
                        }
                    },
                }
            },
            { $project: { contact: 0, createByrefLead: 0, users: 0 } },
        ])

        res.status(200).json(result);
    } catch (err) {
        console.error('Failed :', err);
        res.status(400).json({ err, error: 'Failed ' });
    }
}

const view = async (req, res) => {
    try {
        let result = await PhoneCall.findOne({ _id: req.params.id })

        if (!result) return res.status(404).json({ message: "no Data Found." })

        let response = await PhoneCall.aggregate([
            { $match: { _id: result._id } },
            {
                $lookup: {
                    from: 'Contacts',
                    localField: 'createByContact',
                    foreignField: '_id',
                    as: 'contact'
                }
            },
            {
                $lookup: {
                    from: 'Leads', // Assuming this is the collection name for 'leads'
                    localField: 'createByLead',
                    foreignField: '_id',
                    as: 'createByrefLead'
                }
            },
            {
                $lookup: {
                    from: 'User',
                    localField: 'sender',
                    foreignField: '_id',
                    as: 'users'
                }
            },
            { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$contact', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$createByrefLead', preserveNullAndEmptyArrays: true } },
            { $match: { 'users.deleted': false } },
            {
                $addFields: {
                    senderName: { $concat: ['$users.firstName', ' ', '$users.lastName'] },
                    deleted: {
                        $cond: [
                            { $eq: ['$contact.deleted', false] },
                            '$contact.deleted',
                            { $ifNull: ['$createByrefLead.deleted', false] }
                        ]
                    },
                    createByName: {
                        $cond: {
                            if: '$contact',
                            then: { $concat: ['$contact.title', ' ', '$contact.firstName', ' ', '$contact.lastName'] },
                            else: { $concat: ['$createByrefLead.leadName'] }
                        }
                    },
                }
            },
            { $project: { contact: 0, createByrefLead: 0, users: 0 } },
        ])

        res.status(200).json(response[0])
    } catch (err) {
        console.error('Failed :', err);
        res.status(400).json({ err, error: 'Failed ' });
    }
}

module.exports = { add, index, view }

================
File: Server/controllers/property/_routes.js
================
const express = require('express');
const property = require('./property');
const auth = require('../../middelwares/auth');

const router = express.Router();

router.get('/', auth, property.index)
router.post('/add', auth, property.add)
router.post('/addMany', auth, property.addMany)
router.get('/view/:id', auth, property.view)
router.put('/edit/:id', auth, property.edit)
router.delete('/delete/:id', auth, property.deleteData)
router.post('/deleteMany', auth, property.deleteMany)
router.post('/add-property-photos/:id', property.upload.array('property', 10), property.propertyPhoto)
router.post('/add-virtual-tours-or-videos/:id', property.virtualTours.array('property', 10), property.VirtualToursorVideos)
router.post('/add-floor-plans/:id', property.FloorPlansStorage.array('property', 10), property.FloorPlans)
router.post('/add-property-documents/:id', property.PropertyDocumentsStorage.array('property', 10), property.PropertyDocuments)

router.use('/property-documents', express.static('uploads/Property/property-documents'));
router.use('/floor-plans', express.static('uploads/Property/floor-plans'));
router.use('/virtual-tours-or-videos', express.static('uploads/Property/virtual-tours-or-videos'));
router.use('/property-photos', express.static('uploads/Property/PropertyPhotos'));
// router.post('/file', property.upload.array('file', 10), property.file)
// router.post('/file', property.upload.single('file'), property.file)

module.exports = router

================
File: Server/controllers/property/property.js
================
const { Property } = require('../../model/schema/property')
const multer = require('multer')
const fs = require('fs');
const path = require('path');
const { Contact } = require('../../model/schema/contact');


const index = async (req, res) => {
    const query = req.query
    query.deleted = false;
    // let result = await Property.find(query)
    let allData = await Property.find(query).populate({
        path: 'createBy',
        match: { deleted: false } // Populate only if createBy.deleted is false
    }).exec()

    const result = allData.filter(item => item.createBy !== null);
    res.send(result)
}

const add = async (req, res) => {
    try {
        req.body.createdDate = new Date();
        const user = new Property(req.body);
        await user.save();
        res.status(200).json(user);
    } catch (err) {
        console.error('Failed to create Property:', err);
        res.status(400).json({ error: 'Failed to create Property' });
    }
}

const addMany = async (req, res) => {
    try {
        const data = req.body;
        const insertedProperty = await Property.insertMany(data);
        res.status(200).json(insertedProperty);
    } catch (err) {
        console.error('Failed to create Property :', err);
        res.status(400).json({ error: 'Failed to create Property' });
    }
};

const edit = async (req, res) => {
    try {
        let result = await Property.updateOne(
            { _id: req.params.id },
            { $set: req.body }
        );
        res.status(200).json(result);
    } catch (err) {
        console.error('Failed to Update Property:', err);
        res.status(400).json({ error: 'Failed to Update Property' });
    }
}

const view = async (req, res) => {
    const { id } = req.params
    let property = await Property.findOne({ _id: id })
    let result = await Contact.find({ deleted: false })

    let filteredContacts = result.filter((contact) => contact.interestProperty.includes(id));

    if (!property) return res.status(404).json({ message: "no Data Found." })
    res.status(200).json({ property, filteredContacts })
}

const deleteData = async (req, res) => {
    try {
        const property = await Property.findByIdAndUpdate(req.params.id, { deleted: true });
        res.status(200).json({ message: "done", property })
    } catch (err) {
        res.status(404).json({ message: "error", err })
    }
}

const deleteMany = async (req, res) => {
    try {
        const property = await Property.updateMany({ _id: { $in: req.body } }, { $set: { deleted: true } });
        res.status(200).json({ message: "done", property })
    } catch (err) {
        res.status(404).json({ message: "error", err })
    }
}

// const storage = multer.diskStorage({
// destination: function (req, file, cb) {
//     const uploadDir = 'uploads/Property/PropertyPhotos';
//     fs.mkdirSync(uploadDir, { recursive: true });
//     cb(null, uploadDir);
// },
// filename: function (req, file, cb) {
//     const uploadDir = 'uploads/Property';
//     const filePath = path.join(uploadDir, file.originalname);

//     // Check if the file already exists in the destination directory
//     if (fs.existsSync(filePath)) {
//         // For example, you can append a timestamp to the filename to make it unique
//         const timestamp = Date.now() + Math.floor(Math.random() * 90);
//         cb(null, file.originalname.split('.')[0] + '-' + timestamp + '.' + file.originalname.split('.')[1]);
//     } else {
//         cb(null, file.originalname);
//     }
// },
// });

const upload = multer({
    storage: multer.diskStorage({
        destination: function (req, file, cb) {
            const uploadDir = 'uploads/Property/PropertyPhotos';
            fs.mkdirSync(uploadDir, { recursive: true });
            cb(null, uploadDir);
        },
        filename: function (req, file, cb) {
            const uploadDir = 'uploads/Property/PropertyPhotos';
            const filePath = path.join(uploadDir, file.originalname);

            // Check if the file already exists in the destination directory
            if (fs.existsSync(filePath)) {
                // For example, you can append a timestamp to the filename to make it unique
                const timestamp = Date.now() + Math.floor(Math.random() * 90);
                cb(null, file.originalname.split('.')[0] + '-' + timestamp + '.' + file.originalname.split('.')[1]);
            } else {
                cb(null, file.originalname);
            }
        },
    })
});

const propertyPhoto = async (req, res) => {
    try {
        const { id } = req.params

        if (!req.files || req.files.length === 0) {
            res.status(400).send('No files uploaded.');
            return;
        }
        const url = req.protocol + '://' + req.get('host');

        const file = req?.files.map((file) => ({
            img: `${url}/api/property/property-photos/${file.filename}`,
            createOn: new Date(),
        }));
        // Update the "photos" field for the existing document
        // await Property.updateOne({ _id: id }, { $set: { propertyPhotos: file } });
        await Property.updateOne({ _id: id }, { $push: { propertyPhotos: { $each: file } } });
        res.send('File uploaded successfully.');
    } catch (err) {
        console.error('Failed to create Property:', err);
        res.status(400).json({ error: 'Failed to create Property' });
    }
}
// --
const virtualTours = multer({
    storage: multer.diskStorage({
        destination: function (req, file, cb) {
            const uploadDir = 'uploads/Property/virtual-tours-or-videos';
            fs.mkdirSync(uploadDir, { recursive: true });
            cb(null, uploadDir);
        },
        filename: function (req, file, cb) {
            const uploadDir = 'uploads/Property/virtual-tours-or-videos';
            const filePath = path.join(uploadDir, file.originalname);

            // Check if the file already exists in the destination directory
            if (fs.existsSync(filePath)) {
                // For example, you can append a timestamp to the filename to make it unique
                const timestamp = Date.now() + Math.floor(Math.random() * 90);
                cb(null, file.originalname.split('.')[0] + '-' + timestamp + '.' + file.originalname.split('.')[1]);
            } else {
                cb(null, file.originalname);
            }
        },
    })
});

const VirtualToursorVideos = async (req, res) => {
    try {
        const { id } = req.params

        if (!req.files || req.files.length === 0) {
            res.status(400).send('No files uploaded.');
            return;
        }
        const url = req.protocol + '://' + req.get('host');

        const file = req?.files.map((file) => ({
            img: `${url}/api/property/virtual-tours-or-videos/${file.filename}`,
            createOn: new Date(),
        }));

        await Property.updateOne({ _id: id }, { $push: { virtualToursOrVideos: { $each: file } } });
        res.send('File uploaded successfully.');
    } catch (err) {
        console.error('Failed to create Property:', err);
        res.status(400).json({ error: 'Failed to create Property' });
    }
}

const FloorPlansStorage = multer({
    storage: multer.diskStorage({
        destination: function (req, file, cb) {
            const uploadDir = 'uploads/Property/floor-plans';
            fs.mkdirSync(uploadDir, { recursive: true });
            cb(null, uploadDir);
        },
        filename: function (req, file, cb) {
            const uploadDir = 'uploads/Property/floor-plans';
            const filePath = path.join(uploadDir, file.originalname);

            // Check if the file already exists in the destination directory
            if (fs.existsSync(filePath)) {
                // For example, you can append a timestamp to the filename to make it unique
                const timestamp = Date.now() + Math.floor(Math.random() * 90);
                cb(null, file.originalname.split('.')[0] + '-' + timestamp + '.' + file.originalname.split('.')[1]);
            } else {
                cb(null, file.originalname);
            }
        },
    })
});

const FloorPlans = async (req, res) => {
    try {
        const { id } = req.params

        if (!req.files || req.files.length === 0) {
            res.status(400).send('No files uploaded.');
            return;
        }
        const url = req.protocol + '://' + req.get('host');

        const file = req?.files.map((file) => ({
            img: `${url}/api/property/floor-plans/${file.filename}`,
            createOn: new Date(),
        }));

        await Property.updateOne({ _id: id }, { $push: { floorPlans: { $each: file } } });
        res.send('File uploaded successfully.');
    } catch (err) {
        console.error('Failed to create Property:', err);
        res.status(400).json({ error: 'Failed to create Property' });
    }
}
// --
const PropertyDocumentsStorage = multer({
    storage: multer.diskStorage({
        destination: function (req, file, cb) {
            const uploadDir = 'uploads/Property/property-documents';
            fs.mkdirSync(uploadDir, { recursive: true });
            cb(null, uploadDir);
        },
        filename: function (req, file, cb) {
            const uploadDir = 'uploads/Property/property-documents';
            const filePath = path.join(uploadDir, file.originalname);

            // Check if the file already exists in the destination directory
            if (fs.existsSync(filePath)) {
                // For example, you can append a timestamp to the filename to make it unique
                const timestamp = Date.now() + Math.floor(Math.random() * 90);
                cb(null, file.originalname.split('.')[0] + '-' + timestamp + '.' + file.originalname.split('.')[1]);
            } else {
                cb(null, file.originalname);
            }
        },
    })
});

const PropertyDocuments = async (req, res) => {
    try {
        const { id } = req.params

        if (!req.files || req.files.length === 0) {
            res.status(400).send('No files uploaded.');
            return;
        }
        const url = req.protocol + '://' + req.get('host');

        const file = req?.files.map((file) => ({
            filename: file.filename,
            img: `${url}/api/property/property-documents/${file.filename}`,
            createOn: new Date(),
        }));

        await Property.updateOne({ _id: id }, { $push: { propertyDocuments: { $each: file } } });
        res.send('File uploaded successfully.');
    } catch (err) {
        console.error('Failed to create Property:', err);
        res.status(400).json({ error: 'Failed to create Property' });
    }
}



module.exports = { index, add, addMany, view, edit, deleteData, deleteMany, upload, propertyPhoto, virtualTours, VirtualToursorVideos, FloorPlansStorage, FloorPlans, PropertyDocumentsStorage, PropertyDocuments }

================
File: Server/controllers/quotes/_routes.js
================
const express = require('express');
const quotes = require('./quotes');
const auth = require('../../middelwares/auth');

const router = express.Router();

router.get('/', auth, quotes.index)
router.post('/add', auth, quotes.add)
router.post('/addMany', auth, quotes.addMany)
router.get('/view/:id', auth, quotes.view)
router.put('/edit/:id', auth, quotes.edit)
router.post('/convertToInvoice', auth, quotes.convertToInvoice)
router.delete('/delete/:id', auth, quotes.deleteData)
router.post('/deleteMany', auth, quotes.deleteMany)

module.exports = router

================
File: Server/controllers/quotes/quotes.js
================
const mongoose = require('mongoose');
const jsonUtils = require("jsontostr");
const Quotes = require("../../model/schema/quotes.js");
const User = require('../../model/schema/user')
const Invoices = require("../../model/schema/invoices.js");

async function getNextAutoIncrementValue() {
    const num = await Quotes.countDocuments({});
    return num + 1;
}
async function getNextAutoIncrementInvoiceValue() {
    const num = await Invoices.countDocuments({});
    return num + 1;
}

const index = async (req, res) => {
    query = req.query;
    query.deleted = false;
    const user = await User.findById(req.user.userId)
    if (user?.role !== "superAdmin") {
        delete query.createBy
        query.$or = [{ createBy: new mongoose.Types.ObjectId(req.user.userId) }, { assignUser: new mongoose.Types.ObjectId(req.user.userId) }];
    }

    try {
        let result = await Quotes.aggregate([
            { $match: query },
            {
                $lookup: {
                    from: "Contacts",
                    localField: "contact",
                    foreignField: "_id",
                    as: "contactData",
                },
            },
            {
                $lookup: {
                    from: "Accounts",
                    localField: "account",
                    foreignField: "_id",
                    as: "accountData",
                },
            },
            {
                $lookup: {
                    from: "User",
                    localField: "createBy",
                    foreignField: "_id",
                    as: "users",
                },
            },
            {
                $lookup: {
                    from: "User",
                    localField: "modifiedBy",
                    foreignField: "_id",
                    as: "modifiedByUser",
                },
            },
            {
                $lookup: {
                    from: "User",
                    localField: "assignedTo",
                    foreignField: "_id",
                    as: "assignedToData",
                },
            },
            { $unwind: { path: "$users", preserveNullAndEmptyArrays: true } },
            { $unwind: { path: "$contactData", preserveNullAndEmptyArrays: true } },
            { $unwind: { path: "$accountData", preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$modifiedByUser', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: "$assignedToData", preserveNullAndEmptyArrays: true } },
            { $match: { "users.deleted": false } },
            {
                $addFields: {
                    assignUserName: {
                        $cond: {
                            if: '$assignUsers',
                            then: { $concat: ['$assignUsers.firstName', ' ', '$assignUsers.lastName'] },
                            else: { $concat: [''] }
                        }
                    },
                    createdByName: { $concat: ['$users.firstName', ' ', '$users.lastName'] },
                    modifiedUserName: { $concat: ['$modifiedByUser.firstName', ' ', '$modifiedByUser.lastName'] },
                    contactName: { $concat: ['$contactData.firstName', ' ', '$contactData.lastName'] },
                    accountName: '$accountData.name'
                }
            },
            { $project: { users: 0, contactData: 0, accountData: 0, modifiedByUser: 0, assignedToData: 0 } },
        ]);
        res.send(result);
    } catch (error) {
        console.error("Error:", error);
        res.status(500).send("Internal Server Error");
    }
};

const add = async (req, res) => {
    try {
        const nextAutoIncrementValue = await getNextAutoIncrementValue();
        const result = new Quotes({ ...req.body, quoteNumber: nextAutoIncrementValue });
        await result.save();
        res.status(200).json(result);
    } catch (err) {
        console.error("Failed to create Quotes:", err);
        res.status(400).json({ error: "Failed to create Quotes : ", err });
    }
};

const edit = async (req, res) => {
    try {

        let result = await Quotes.findOneAndUpdate(
            { _id: req.params.id },
            { $set: req.body },
            { new: true }
        );

        res.status(200).json(result);
    } catch (err) {
        console.error("Failed to create Quotes:", err);
        res.status(400).json({ error: "Failed to create Quotes : ", err });
    }
};
const addMany = async (req, res) => {
    try {
        const data = req.body.map((item) => ({
            ...item,
            account: item.account ? item.account : null,
            contact: item.contact ? item.contact : null,
        }))
        const inserted = await Quotes.insertMany(data);

        res.status(200).json(inserted);
    } catch (err) {
        console.error('Failed to create Quotes :', err);
        res.status(400).json({ error: 'Failed to create Quotes' });
    }
};

const view = async (req, res) => {
    try {
        let response = await Quotes.findOne({ _id: req.params.id });
        if (!response) return res.status(404).json({ message: "no Data Found." });
        let result = await Quotes.aggregate([
            { $match: { _id: response._id } },
            {
                $lookup: {
                    from: "Opportunities",
                    localField: "oppotunity",
                    foreignField: "_id",
                    as: "oppotunityData",
                },
            },
            {
                $lookup: {
                    from: "Contacts",
                    localField: "contact",
                    foreignField: "_id",
                    as: "contactData",
                },
            },
            {
                $lookup: {
                    from: "Accounts",
                    localField: "account",
                    foreignField: "_id",
                    as: "accountData",
                },
            },
            {
                $lookup: {
                    from: "User",
                    localField: "createBy",
                    foreignField: "_id",
                    as: "users",
                },
            },
            {
                $lookup: {
                    from: "User",
                    localField: "modifiedBy",
                    foreignField: "_id",
                    as: "modifiedByUser",
                },
            },
            {
                $lookup: {
                    from: "User",
                    localField: "assignedTo",
                    foreignField: "_id",
                    as: "assignedToData",
                },
            },
            { $unwind: { path: "$users", preserveNullAndEmptyArrays: true } },
            { $unwind: { path: "$contactData", preserveNullAndEmptyArrays: true } },
            { $unwind: { path: "$accountData", preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$modifiedByUser', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: "$assignedToData", preserveNullAndEmptyArrays: true } },
            { $unwind: { path: "$oppotunityData", preserveNullAndEmptyArrays: true } },
            { $match: { "users.deleted": false } },
            {
                $addFields: {
                    assignUserName: {
                        $cond: {
                            if: '$assignedToData',
                            then: { $concat: ['$assignedToData.firstName', ' ', '$assignedToData.lastName'] },
                            else: { $concat: [''] }
                        }
                    },
                    oppotunityName: '$oppotunityData.opportunityName',
                    createdByName: { $concat: ['$users.firstName', ' ', '$users.lastName'] },
                    modifiedUserName: { $concat: ['$modifiedByUser.firstName', ' ', '$modifiedByUser.lastName'] },
                    contactName: { $concat: ['$contactData.firstName', ' ', '$contactData.lastName'] },
                    accountName: '$accountData.name'
                }
            },
            { $project: { users: 0, contactData: 0, accountData: 0, modifiedByUser: 0, oppotunityData: 0, assignedToData: 0 } },
        ]);
        let invoiceDetails = await Invoices.aggregate([
            { $match: { quotesId: response._id, deleted: false } },
            {
                $lookup: {
                    from: "Contacts",
                    localField: "contact",
                    foreignField: "_id",
                    as: "contactData",
                },
            },
            {
                $lookup: {
                    from: "Accounts",
                    localField: "account",
                    foreignField: "_id",
                    as: "accountData",
                },
            },
            { $unwind: { path: "$contactData", preserveNullAndEmptyArrays: true } },
            { $unwind: { path: "$accountData", preserveNullAndEmptyArrays: true } },
            {
                $addFields: {
                    contactName: { $concat: ['$contactData.firstName', ' ', '$contactData.lastName'] },
                    accountName: '$accountData.name'
                }
            },
            { $project: { contactData: 0, accountData: 0 } },

        ]);
        res.status(200).json({ result: result[0], invoiceDetails });
    } catch (err) {
        console.log("Error:", err);
        res.status(400).json({ Error: err });
    }
};

const jsonConfig = jsonUtils();
const convertToInvoice = async (req, res) => {
    try {
        let quotesData = await Quotes.findOne({ _id: req.body._id });
        if (!quotesData) {
            return res.status(404).json({ message: "Quotes not found" })
        }
        const nextAutoIncrementValue = await getNextAutoIncrementInvoiceValue();

        const invoiceDetails = {
            invoiceNumber: nextAutoIncrementValue,
            jsonConfig: jsonConfig,
            quotesId: quotesData?._id,
            title: quotesData?.title,
            quoteNumber: quotesData?.quoteNumber,
            quoteDate: quotesData?.createdDate,
            dueDate: quotesData?.dueDate,
            invoiceDate: new Date(),
            status: "Paid",
            assignedTo: quotesData?.assignedTo,
            description: quotesData?.description,
            account: quotesData?.account,
            contact: quotesData?.contact,
            billingStreet: quotesData?.billingStreet,
            shippingStreet: quotesData?.shippingStreet,
            billingCity: quotesData?.billingCity,
            shippingCity: quotesData?.shippingCity,
            billingState: quotesData?.billingState,
            shippingState: quotesData?.shippingState,
            billingPostalCode: quotesData?.billingPostalCode,
            shippingPostalCode: quotesData?.shippingPostalCode,
            billingCountry: quotesData?.billingCountry,
            shippingCountry: quotesData?.shippingCountry,
            isCheck: quotesData?.isCheck,
            currency: quotesData?.currency,
            total: quotesData?.total,
            discount: quotesData?.discount,
            subtotal: quotesData?.subtotal,
            shipping: quotesData?.shipping,
            shippingTax: quotesData?.shippingTax,
            ptax: quotesData?.ptax,
            tax: quotesData?.tax,
            grandTotal: quotesData?.grandTotal,
            discountType: quotesData?.discountType,
            items: quotesData?.items,
            invoiceConvertDate: new Date(),
            createBy: quotesData?.createBy,
            modifiedBy: quotesData?.modifiedBy,
        }

        const invoiceData = new Invoices(invoiceDetails);
        await invoiceData.save();

        let result = await Quotes.findOneAndUpdate(
            { _id: req.body._id },
            { $set: { invoiceStatus: "Invoiced" } },
            { new: true }
        );

        res.status(200).json({ message: "Invoiced Convert successfully", result });
    } catch (err) {
        res.status(404).json({ message: "error", err });
    }
}

const deleteData = async (req, res) => {
    try {
        const result = await Quotes.findByIdAndUpdate(req.params.id, {
            deleted: true,
        });
        res.status(200).json({ message: "done", result });
    } catch (err) {
        res.status(404).json({ message: "error", err });
    }
};

const deleteMany = async (req, res) => {
    try {
        const result = await Quotes.updateMany(
            { _id: { $in: req.body } },
            { $set: { deleted: true } }
        );

        if (result?.matchedCount > 0 && result?.modifiedCount > 0) {
            return res
                .status(200)
                .json({ message: "Quotes Removed successfully", result });
        } else {
            return res
                .status(404)
                .json({ success: false, message: "Failed to remove Quotes" });
        }
    } catch (err) {
        return res.status(404).json({ success: false, message: "error", err });
    }
};

module.exports = { index, add, edit, addMany, view, deleteData, deleteMany, convertToInvoice };

================
File: Server/controllers/reporting/_routes.js
================
const express = require('express');
const reporting = require('./reporting');
const auth = require('../../middelwares/auth');

const router = express.Router();

router.get('/', auth, reporting.index)
router.get('/line-chart', auth, reporting.lineChart)
router.post('/index', auth, reporting.data)


module.exports = router

================
File: Server/controllers/reporting/reporting.js
================
const mongoose = require('mongoose');
const { Lead } = require('../../model/schema/lead')
const { Contact } = require('../../model/schema/contact')
const email = require('../../model/schema/email');
const User = require('../../model/schema/user')
const PhoneCall = require('../../model/schema/phoneCall');
const { Property } = require('../../model/schema/property')
const TextMsg = require('../../model/schema/textMsg');
const Task = require('../../model/schema/task')
const MeetingHistory = require('../../model/schema/meeting');
// const user = require('../../model/schema/user');
const customField = require('../../model/schema/customField');
const Account = require('../../model/schema/account');
const EmailTemp = require('../../model/schema/emailTemplate')
const Opprtunities = require('../../model/schema/opprtunity')
const Invoices = require("../../model/schema/invoices.js");
const Quotes = require("../../model/schema/quotes.js");
const ModuleActiveDeactive = require('../../model/schema/moduleActiveDeactive.js');

const index = async (req, res) => {
    const query = req.query
    query.deleted = false;
    let result = await User.find(query)
    res.send(result);
}

const lineChart = async (req, res) => {
    const query = req.query
    query.deleted = false;
    const senderQuery = query
    if (query.createdBy) {
        query.createdBy = new mongoose.Types.ObjectId(query.createdBy);
    }
    if (query.createdBy) {
        senderQuery.sender = new mongoose.Types.ObjectId(query.createdBy);
    }

    let lead = await Lead.find(query).populate({
        path: 'createBy',
        match: { deleted: false }
    }).exec()
    const leadData = lead.filter(item => item?.createBy !== null);

    let contact = await Contact.find(query).populate({
        path: 'createBy',
        match: { deleted: false }
    }).exec()
    const contactData = contact.filter(item => item?.createBy !== null);

    let property = await Property.find(query).populate({
        path: 'createBy',
        match: { deleted: false }
    }).exec()
    const propertyData = property.filter(item => item?.createBy !== null);

    let task = await Task.find(query).populate({
        path: 'createBy',
        match: { deleted: false }
    }).exec()
    const taskData = task.filter(item => item?.createBy !== null);

    let meetingHistory = await MeetingHistory.find(query).populate({
        path: 'createBy',
        match: { deleted: false }
    }).exec()
    const meetingHistoryData = meetingHistory.filter(item => item?.createdBy !== null);

    let emails = await email.find(senderQuery).populate({
        path: 'sender',
        match: { deleted: false }
    }).exec()
    const emailData = emails.filter(item => item?.sender !== null);

    let phoneCall = await PhoneCall.find(senderQuery).populate({
        path: 'sender',
        match: { deleted: false }
    }).exec()
    const phoneCallData = phoneCall.filter(item => item?.sender !== null);

    let account = await Account.find(senderQuery).populate({
        path: 'createBy',
        match: { deleted: false }
    }).exec()
    const AccountData = account.filter(item => item?.createBy !== null);

    let emailTemp = await EmailTemp.find(senderQuery).populate({
        path: 'createBy',
        match: { deleted: false }
    }).exec()
    const EmailTempData = emailTemp.filter(item => item?.createBy !== null);

    let opprtunities = await Opprtunities.find(senderQuery).populate({
        path: 'createBy',
        match: { deleted: false }
    }).exec()
    const OpprtunitiesData = opprtunities.filter(item => item?.createBy !== null);

    let invoices = await Invoices.find(senderQuery).populate({
        path: 'createBy',
        match: { deleted: false }
    }).exec()
    const InvoicesData = invoices.filter(item => item?.createBy !== null);

    let quotes = await Quotes.find(senderQuery).populate({
        path: 'createBy',
        match: { deleted: false }
    }).exec()
    const QuotesData = quotes.filter(item => item?.createBy !== null);


    const userDetails = await User.findOne({ _id: req.user.userId }).populate({
        path: 'roles'
    })
    const fields = await customField.find({ deleted: false })

    const mergedRoles = userDetails?.roles?.reduce((acc, current) => {
        current?.access?.forEach(permission => {
            const existingPermissionIndex = acc.findIndex(item => item.title === permission.title);
            if (existingPermissionIndex !== -1) {
                const updatedPermission = { ...acc[existingPermissionIndex] };
                Object.keys(permission).forEach(key => {
                    if (permission[key] === true) {
                        updatedPermission[key] = true;
                    }
                });
                acc[existingPermissionIndex] = updatedPermission;
            } else {
                acc.push(permission);
            }
        });
        return acc;
    }, []);

    let result = [
        { name: "Leads", length: leadData?.length, color: "red" },
        { name: "Contacts", length: contactData?.length, color: "blue" },
        { name: "Properties", length: propertyData?.length, color: "green" },
        { name: "Opportunities", length: OpprtunitiesData?.length, color: "linkedin" },
        { name: "Account", length: AccountData?.length, color: "teal" },
        { name: "Quotes", length: QuotesData?.length, color: "blackAlpha" },
        { name: "Invoices", length: InvoicesData?.length, color: "linkedin" },
        { name: "Tasks", length: taskData?.length, color: "pink" },
        { name: "Meetings", length: meetingHistoryData?.length, color: "purple" },
        { name: "Calls", length: phoneCallData?.length, color: "cyan" },
        { name: "Emails", length: emailData?.length, color: "yellow" },
        { name: "Email Template", length: EmailTempData?.length, color: "orange" },
    ]

    const colors = ["whiteAlpha", "blackAlpha", "gray", "red", "orange", "yellow", "green", "teal", "blue", "cyan", "purple", "pink", "linkedin", "facebook", "messenger", "whatsapp", "twitter", "telegram"];

    if (mergedRoles && mergedRoles.length > 0) {
        for (const item of mergedRoles) {
            if (item.title === "Leads" && item.view === false) {
                const data = result.filter((val) => val.name !== "Leads")
                result = data
            }
            if (item.title === "Contacts" && item.view === false) {
                const data = result.filter((val) => val.name !== "Contacts")
                result = data
            }
            if (item.title === "Properties" && item.view === false) {
                const data = result.filter((val) => val.name !== "Properties")
                result = data
            }
            if (item.title === "Opportunities" && item.view === false) {
                const data = result.filter((val) => val.name !== "Opportunities")
                result = data
            }
            if (item.title === "Account" && item.view === false) {
                const data = result.filter((val) => val.name !== "Account")
                result = data
            }
            if (item.title === "Quotes" && item.view === false) {
                const data = result.filter((val) => val.name !== "Quotes")
                result = data
            }
            if (item.title === "Invoices" && item.view === false) {
                const data = result.filter((val) => val.name !== "Invoices")
                result = data
            }
            if (item.title === "Tasks" && item.view === false) {
                const data = result.filter((val) => val.name !== "Tasks")
                result = data
            }
            if (item.title === "Meetings" && item.view === false) {
                const data = result.filter((val) => val.name !== "Meetings")
                result = data
            }
            if (item.title === "Calls" && item.view === false) {
                const data = result.filter((val) => val.name !== "Calls")
                result = data
            }
            if (item.title === "Emails" && item.view === false) {
                const data = result.filter((val) => val.name !== "Emails")
                result = data
            }
            if (item.title === "Email Template" && item.view === false) {
                const data = result.filter((val) => val.name !== "Email Template")
                result = data
            }

            if (item.view === true) {
                if (!result.find((i) => i.name === item.title)) {
                    const ExistingModel = mongoose.model(item.title);
                    const allData = await ExistingModel.find({ deleted: false });
                    const colorIndex = result.length % colors.length;
                    const color = colors[colorIndex];

                    const newObj = {
                        name: item.title,
                        length: allData.length,
                        color: color
                    };

                    result.push(newObj);
                }

            }
        }
    } else if (userDetails?.role === "superAdmin") {
        for (const item of fields) {
            if (!result.find((i) => i.name === item.moduleName)) {
                const ExistingModel = mongoose.model(item.moduleName);
                const allData = await ExistingModel.find({ deleted: false });
                const colorIndex = result.length % colors.length;
                const color = colors[colorIndex];

                const newObj = {
                    name: item.moduleName,
                    length: allData.length,
                    color: color
                };

                result.push(newObj);
            }
        }
    } else {
        result = [];
    }

    let moduleData = await ModuleActiveDeactive?.find({ isActive: true });
    const activeModules = moduleData?.map(item => item?.moduleName)
    let activeModulesReport = result?.filter(item => activeModules?.includes(item?.name))

    res.send(activeModulesReport)
}

const data = async (req, res) => {
    try {
        // Set the start date and end date
        const startDateString = req.body.startDate;
        const endDateString = req.body.endDate;

        // Convert the startDateString and endDateString to Date objects
        const startDate = new Date(startDateString);
        const endDate = new Date(endDateString);

        // Ensure the dates are valid
        if (isNaN(startDate) || isNaN(endDate)) {
            return res.status(400).json({ error: 'Invalid date format. Please use YYYY-MM-DD.' });
        }

        endDate.setHours(23, 59, 59, 999);

        let filter = req.body.filter;

        let matchFilter = {
            timestamp: { $gte: startDate, $lte: endDate }, // Filter documents with timestamp between startDate and endDate
        };
        // matchFilter.deleted = false;
        const query = req.query;
        // Convert sender to ObjectId if provided
        if (query.sender) {
            matchFilter.sender = new mongoose.Types.ObjectId(query.sender);
        }

        let groupFields = {
            year: { $year: "$timestamp" },
            month: { $month: "$timestamp" },
        };
        if (filter === "day") {
            groupFields.day = { $dayOfMonth: "$timestamp" };
        } else if (filter === "week") {
            groupFields.week = { $week: "$timestamp" };
        }


        // let EmailDetails = await email.aggregate([
        //     { $match: matchFilter },
        //     {
        //         $lookup: {
        //             from: 'Contacts',
        //             localField: 'createBy',
        //             foreignField: '_id',
        //             as: 'contact'
        //         }
        //     },
        //     {
        //         $lookup: {
        //             from: 'Leads',
        //             localField: 'createByLead',
        //             foreignField: '_id',
        //             as: 'lead'
        //         }
        //     },
        //     {
        //         $lookup: {
        //             from: 'User',
        //             localField: 'sender',
        //             foreignField: '_id',
        //             as: 'users'
        //         }
        //     },
        //     { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
        //     { $unwind: '$contact' },
        //     { $unwind: '$lead' },
        //     { $match: { 'contact.deleted': false, 'users.deleted': false } },
        //     { $match: { 'lead.deleted': false, 'users.deleted': false } },
        //     { $group: { _id: groupFields, Emailcount: { $sum: 1 }, id: { $first: "$_id" } } },
        //     { $sort: { "_id.year": -1, "_id.month": 1, "_id.day": -1 } },
        //     { $group: { _id: "$_id.week", emails: { $push: "$$ROOT" }, totalEmails: { $sum: "$Emailcount" } } },
        //     {
        //         $project: {
        //             _id: 0,
        //             startDate: { $dateToString: { format: "%Y-%m-%d", date: startDate } },
        //             endDate: { $dateToString: { format: "%Y-%m-%d", date: endDate } },
        //             totalEmails: 1,
        //             Emails2: {
        //                 $map: {
        //                     input: "$emails",
        //                     as: "email",
        //                     in: {
        //                         _id: "$$email.id",
        //                         date: {
        //                             $dateToString: { date: { $dateFromParts: { year: { $ifNull: ["$$email._id.year", "$_id.year"] }, month: { $ifNull: ["$$email._id.month", 1] }, day: { $ifNull: ["$$email._id.day", 1] } } } },
        //                         },
        //                         Emailcount: "$$email.Emailcount",
        //                     },
        //                 },
        //             },
        //         },
        //     },
        //     { $unwind: "$Emails2" },
        //     {
        //         $group: {
        //             _id: { startDate: "$startDate", endDate: "$endDate", _id: "$Emails2._id" },
        //             date: { $first: "$Emails2.date" },
        //             Emailcount: { $first: "$Emails2.Emailcount" },
        //         },
        //     },
        //     {
        //         $project: {
        //             _id: 0,
        //             startDate: "$_id.startDate",
        //             endDate: "$_id.endDate",
        //             Emails: {
        //                 _id: "$_id._id",
        //                 date: "$date",
        //                 Emailcount: "$Emailcount",
        //             },
        //         },
        //     },
        //     { $group: { _id: null, startDate: { $first: "$startDate" }, endDate: { $first: "$endDate" }, totalEmails: { $sum: "$Emails.Emailcount" }, Emails: { $push: "$Emails" } } },
        //     { $unwind: "$Emails" }, // Unwind the "Emails" array to work on each element separately
        //     { $sort: { "Emails.date": 1 } }, // Sort the Emails array by the "date" field in ascending order
        //     { $group: { _id: "$_id", startDate: { $first: "$startDate" }, endDate: { $first: "$endDate" }, totalEmails: { $first: "$totalEmails" }, Emails: { $push: "$Emails" }, }, },
        //     { $project: { _id: 0, startDate: 1, endDate: 1, totalEmails: 1, Emails: 1, }, },
        // ]);

        // let EmailDetails = await email.aggregate([
        //     { $match: matchFilter },
        //     { $lookup: { from: 'Contacts', localField: 'createBy', foreignField: '_id', as: 'contact' } },
        //     { $unwind: { path: '$contact', preserveNullAndEmptyArrays: true } },
        //     { $lookup: { from: 'Leads', localField: 'createByLead', foreignField: '_id', as: 'lead' } },
        //     { $unwind: { path: '$lead', preserveNullAndEmptyArrays: true } },
        //     { $lookup: { from: 'User', localField: 'sender', foreignField: '_id', as: 'users' } },
        //     { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
        //     {
        //         // $match: {
        //         //     'contact.deleted': false,
        //         //     'users.deleted': false,
        //         //     'lead.deleted': false
        //         // }
        //         $match: {
        //             'contact.deleted': { $ne: true },
        //             'users.deleted': { $ne: true },
        //             'lead.deleted': { $ne: true }
        //         }
        //     },
        //     {
        //         $group: {
        //             _id: groupFields,
        //             Emailcount: { $sum: 1 },
        //             id: { $first: '$_id' }
        //         }
        //         // {
        //         //     $group: {
        //         //         _id: {
        //         //             year: { $year: '$date' },
        //         //             month: { $month: '$date' },
        //         //             day: { $dayOfMonth: '$date' }
        //         //         },
        //         //         Emailcount: { $sum: 1 },
        //         //         id: { $first: '$_id' }
        //         //     }
        //     },
        //     {
        //         $sort: {
        //             '_id.year': -1,
        //             '_id.month': 1,
        //             '_id.day': -1
        //         }
        //     },
        //     // {
        //     //     $group: {
        //     //         _id: { week: { $week: '$date' } },
        //     //         emails: { $push: '$$ROOT' },
        //     //         totalEmails: { $sum: '$Emailcount' }
        //     //     }
        //     // },
        //     { $group: { _id: "$_id.week", calls: { $push: "$$ROOT" }, totalEmails: { $sum: "$Emailcount" } } },

        //     {
        //         $project: {
        //             _id: 0,
        //             startDate: { $dateToString: { format: '%Y-%m-%d', date: startDate } },
        //             endDate: { $dateToString: { format: '%Y-%m-%d', date: endDate } },
        //             totalEmails: 1,
        //             Emails: {
        //                 $map: {
        //                     input: '$emails',
        //                     as: 'email',
        //                     in: {
        //                         _id: '$$email.id',
        //                         date: {
        //                             $dateToString: {
        //                                 date: {
        //                                     $dateFromParts: {
        //                                         year: { $ifNull: ['$$email._id.year', '$_id.year'] },
        //                                         month: { $ifNull: ['$$email._id.month', 1] },
        //                                         day: { $ifNull: ['$$email._id.day', 1] }
        //                                     }
        //                                 }
        //                             }
        //                         },
        //                         Emailcount: '$$email.Emailcount'
        //                     }
        //                 }
        //             }
        //         }
        //     },
        //     { $unwind: '$Emails' },
        //     {
        //         $group: {
        //             _id: { startDate: '$startDate', endDate: '$endDate', _id: '$Emails._id' },
        //             date: { $first: '$Emails.date' },
        //             Emailcount: { $first: '$Emails.Emailcount' }
        //         }
        //     },
        //     {
        //         $project: {
        //             _id: 0,
        //             startDate: '$_id.startDate',
        //             endDate: '$_id.endDate',
        //             Emails: {
        //                 _id: '$_id._id',
        //                 date: '$date',
        //                 Emailcount: '$Emailcount'
        //             }
        //         }
        //     },
        //     {
        //         $group: {
        //             _id: null,
        //             startDate: { $first: '$startDate' },
        //             endDate: { $first: '$endDate' },
        //             totalEmails: { $sum: '$Emails.Emailcount' },
        //             Emails: { $push: '$Emails' }
        //         }
        //     },
        //     { $unwind: '$Emails' },
        //     { $sort: { 'Emails.date': 1 } },
        //     {
        //         $group: {
        //             _id: '$_id',
        //             startDate: { $first: '$startDate' },
        //             endDate: { $first: '$endDate' },
        //             totalEmails: { $first: '$totalEmails' },
        //             Emails: { $push: '$Emails' }
        //         }
        //     },
        //     { $project: { _id: 0, startDate: 1, endDate: 1, totalEmails: 1, Emails: 1 } }
        // ]);
        let Email = await email.aggregate([
            { $match: matchFilter },
            { $lookup: { from: 'Contacts', localField: 'createBy', foreignField: '_id', as: 'contact' } },
            { $unwind: { path: '$contact', preserveNullAndEmptyArrays: true } },
            { $lookup: { from: 'Leads', localField: 'createByLead', foreignField: '_id', as: 'lead' } },
            { $unwind: { path: '$lead', preserveNullAndEmptyArrays: true } },
            { $lookup: { from: 'User', localField: 'sender', foreignField: '_id', as: 'users' } },
            { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
            {
                $match: {
                    'contact.deleted': { $ne: true },
                    'users.deleted': { $ne: true },
                    'lead.deleted': { $ne: true }
                }
            },
            {
                $group: {
                    _id: groupFields,
                    Emailcount: { $sum: 1 },
                    id: { $first: '$_id' }
                }
            },
            {
                $sort: {
                    '_id.year': -1,
                    '_id.month': 1,
                    '_id.day': -1
                }
            },

            { $group: { _id: "$_id.week", emails: { $push: "$$ROOT" }, totalEmails: { $sum: "$Emailcount" } } },

            {
                $project: {
                    _id: 0,
                    startDate: { $dateToString: { format: '%Y-%m-%d', date: startDate } },
                    endDate: { $dateToString: { format: '%Y-%m-%d', date: endDate } },
                    totalEmails: 1,
                    Emails: {
                        $map: {
                            input: '$emails',
                            as: 'email',
                            in: {
                                _id: '$$email.id',
                                date: {
                                    $dateToString: { date: { $dateFromParts: { year: { $ifNull: ['$$email._id.year', '$_id.year'] }, month: { $ifNull: ['$$email._id.month', 1] }, day: { $ifNull: ['$$email._id.day', 1] } } } }
                                },
                                Emailcount: '$$email.Emailcount'
                            }
                        }
                    }
                }
            },
            { $unwind: '$Emails' },
            {
                $group: {
                    _id: { startDate: '$startDate', endDate: '$endDate', _id: '$Emails._id' },
                    date: { $first: '$Emails.date' },
                    Emailcount: { $first: '$Emails.Emailcount' }
                }
            },
            {
                $project: {
                    _id: 0,
                    startDate: '$_id.startDate',
                    endDate: '$_id.endDate',
                    Emails: {
                        _id: '$_id._id',
                        date: '$date',
                        Emailcount: '$Emailcount'
                    }
                }
            },
            {
                $group: {
                    _id: null,
                    startDate: { $first: '$startDate' },
                    endDate: { $first: '$endDate' },
                    totalEmails: { $sum: '$Emails.Emailcount' },
                    Emails: { $push: '$Emails' }
                }
            },
            { $unwind: '$Emails' },
            { $sort: { 'Emails.date': 1 } },
            {
                $group: {
                    _id: '$_id',
                    startDate: { $first: '$startDate' },
                    endDate: { $first: '$endDate' },
                    totalEmails: { $first: '$totalEmails' },
                    Emails: { $push: '$Emails' }
                }
            },
            { $project: { _id: 0, startDate: 1, endDate: 1, totalEmails: 1, Emails: 1 } }
        ]);



        let Call = await PhoneCall.aggregate([
            { $match: matchFilter },
            { $lookup: { from: 'Contacts', localField: 'createBy', foreignField: '_id', as: 'contact' } },
            { $unwind: { path: '$contact', preserveNullAndEmptyArrays: true } },
            { $lookup: { from: 'Leads', localField: 'createByLead', foreignField: '_id', as: 'lead' } },
            { $unwind: { path: '$lead', preserveNullAndEmptyArrays: true } },
            { $lookup: { from: 'User', localField: 'sender', foreignField: '_id', as: 'users' } },
            { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
            {
                $match: {
                    'contact.deleted': { $ne: true },
                    'users.deleted': { $ne: true },
                    'lead.deleted': { $ne: true }
                }
            },
            { $group: { _id: groupFields, Callcount: { $sum: 1 }, id: { $first: "$_id" } } },
            { $sort: { "_id.year": -1, "_id.month": 1, "_id.day": -1 } },
            { $group: { _id: "$_id.week", calls: { $push: "$$ROOT" }, totalCall: { $sum: "$Callcount" } } },
            {
                $project: {
                    _id: 0,
                    startDate: { $dateToString: { format: "%Y-%m-%d", date: startDate } },
                    endDate: { $dateToString: { format: "%Y-%m-%d", date: endDate } },
                    totalCall: 1,
                    result: {
                        $map: {
                            input: "$calls",
                            as: "call",
                            in: {
                                _id: "$$call.id",
                                date: {
                                    $dateToString: { date: { $dateFromParts: { year: { $ifNull: ["$$call._id.year", "$_id.year"] }, month: { $ifNull: ["$$call._id.month", 1] }, day: { $ifNull: ["$$call._id.day", 1] } } } },
                                },
                                Callcount: "$$call.Callcount",
                            },
                        },
                    },
                },
            },
            { $unwind: "$result" },
            {
                $group: {
                    _id: { startDate: "$startDate", endDate: "$endDate", _id: "$result._id" },
                    date: { $first: "$result.date" },
                    Callcount: { $first: "$result.Callcount" },
                },
            },
            {
                $project: {
                    _id: 0,
                    startDate: "$_id.startDate",
                    endDate: "$_id.endDate",
                    Calls: {
                        _id: "$_id._id",
                        date: "$date",
                        Callcount: "$Callcount",
                    },
                },
            },
            { $group: { _id: null, startDate: { $first: "$startDate" }, endDate: { $first: "$endDate" }, totalCall: { $sum: "$Calls.Callcount" }, Calls: { $push: "$Calls" } } },
            { $unwind: "$Calls" }, // Unwind the "Calls" array to work on each element separately
            { $sort: { "Calls.date": 1 } }, // Sort the Calls array by the "date" field in ascending order
            { $group: { _id: "$_id", startDate: { $first: "$startDate" }, endDate: { $first: "$endDate" }, totalCall: { $first: "$totalCall" }, Calls: { $push: "$Calls" }, }, },
            { $project: { _id: 0, startDate: 1, endDate: 1, totalCall: 1, Calls: 1, }, },
        ]);


        let TextSent = await TextMsg.aggregate([
            { $match: matchFilter },
            {
                $lookup: {
                    from: 'Contact',
                    localField: 'createFor',
                    foreignField: '_id',
                    as: 'contact'
                }
            },
            {
                $lookup: {
                    from: 'User',
                    localField: 'sender',
                    foreignField: '_id',
                    as: 'users'
                }
            },
            { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
            { $unwind: '$contact' },
            { $match: { 'contact.deleted': false, 'users.deleted': false } },
            { $group: { _id: groupFields, TextSentCount: { $sum: 1 }, id: { $first: "$_id" } } },
            { $sort: { "_id.year": -1, "_id.month": 1, "_id.day": -1 } },
            { $group: { _id: "$_id.week", textMsgs: { $push: "$$ROOT" }, totalTextSent: { $sum: "$TextSentCount" } } },
            {
                $project: {
                    _id: 0,
                    startDate: { $dateToString: { format: "%Y-%m-%d", date: startDate } },
                    endDate: { $dateToString: { format: "%Y-%m-%d", date: endDate } },
                    totalTextSent: 1,
                    result: {
                        $map: {
                            input: "$textMsgs",
                            as: "msg",
                            in: {
                                _id: "$$msg.id",
                                date: {
                                    $dateToString: { date: { $dateFromParts: { year: { $ifNull: ["$$msg._id.year", "$_id.year"] }, month: { $ifNull: ["$$msg._id.month", 1] }, day: { $ifNull: ["$$msg._id.day", 1] } } } },
                                },
                                TextSentCount: "$$msg.TextSentCount",
                            },
                        },
                    },
                },
            },
            { $unwind: "$result" },
            {
                $group: {
                    _id: { startDate: "$startDate", endDate: "$endDate", _id: "$result._id" },
                    date: { $first: "$result.date" },
                    TextSentCount: { $first: "$result.TextSentCount" },
                },
            },
            {
                $project: {
                    _id: 0,
                    startDate: "$_id.startDate",
                    endDate: "$_id.endDate",
                    TextMsges: {
                        _id: "$_id._id",
                        date: "$date",
                        TextSentCount: "$TextSentCount",
                    },
                },
            },
            { $group: { _id: null, startDate: { $first: "$startDate" }, endDate: { $first: "$endDate" }, totalTextSent: { $sum: "$TextMsges.TextSentCount" }, TextMsges: { $push: "$TextMsges" } } },
            { $unwind: "$TextMsges" }, // Unwind the "TextMsges" array to work on each element separately
            { $sort: { "TextMsges.date": 1 } }, // Sort the TextMsges array by the "date" field in ascending order
            { $group: { _id: "$_id", startDate: { $first: "$startDate" }, endDate: { $first: "$endDate" }, totalTextSent: { $first: "$totalTextSent" }, TextMsges: { $push: "$TextMsges" }, }, },
            { $project: { _id: 0, startDate: 1, endDate: 1, totalTextSent: 1, TextMsges: 1, }, },
        ]);

        if (Email.length <= 0 && Call.length <= 0 && TextSent.length <= 0) {
            res.status(200).json({ totalEmails: 0, totalCall: 0, totalTextSent: 0 });
        } else {
            res.status(200).json({ Email, Call });
            // res.status(200).json({ EmailDetails, outboundcall, TextSent });
        }

    } catch (err) {
        console.error('Failed :', err);
        res.status(400).json({ err, error: 'Failed ' });
    }
}


module.exports = { index, lineChart, data }

================
File: Server/controllers/roleAccess/_routes.js
================
const express = require('express');
const roleAccess = require('./roleAccess');
const auth = require('../../middelwares/auth');

const router = express.Router();

router.get('/', auth, roleAccess.index)
router.get("/assignedUsers/:id", auth, roleAccess.roleAssignedUsers)
router.post("/add", auth, roleAccess.add)
router.put('/edit/:id', auth, roleAccess.edit)
router.put('/assignedUsers/:id', auth, roleAccess.assignRoleToUsers)

module.exports = router

================
File: Server/controllers/roleAccess/roleAccess.js
================
const customField = require('../../model/schema/customField');
const RoleAccess = require('../../model/schema/roleAccess');
const User = require('../../model/schema/user');

const index = async (req, res) => {
    try {
        const query = req.query;
        let result = await RoleAccess.find(query);
        return res.send(result);
    } catch (err) {
        console.error('Error :', err);
        return res.status(400).json({ err, error: 'Something wents wrong' });
    }
}

const add = async (req, res) => {
    try {
        const { roleName, description } = req.body;

        const existingRole = await RoleAccess.findOne({ roleName: { $regex: new RegExp(`^${roleName}$`, 'i') } }).exec();

        if (existingRole) {
            return res.status(400).json({ message: `${roleName} Role already exist` });
        }
        else {
            const createdDate = new Date();

            const titles = [
                "Emails",
                "Calls",
                "Meetings",
                "Tasks",
                "Properties",
                "Contacts",
                "Leads",
                "Documents",
                "Email Template",
                "Opportunities",
                "Account",
                "Quotes",
                "Invoices",
            ];

            const customModules = Array.from(await customField.find(), item => item.moduleName);

            async function processModules() {
                for (const module of customModules) {
                    const item = await customField.findOne({ moduleName: module });
                    if (item && !item.deleted && !titles?.includes(module)) {
                        titles.push(module);
                    }
                }
            }

            // Call the async function
            processModules().then(async () => {
                const access = [];

                await titles?.forEach((item) => {
                    access.push({ title: item, create: false, update: false, delete: false, view: false });
                })

                const role = new RoleAccess({ roleName: roleName, description, access, createdDate });
                await role.save();
                return res.status(200).json({ message: `${roleName} Role created successfully` });
            }).catch(error => {
                console.error("Error occurred:", error);
            });

        }
    } catch (err) {
        console.error('Failed to create role:', err);
        return res.status(400).json({ message: `Failed to create role`, err: err.toString() });
    }
}

const edit = async (req, res) => {
    try {
        req.body.modifyDate = new Date();
        let result = await RoleAccess.updateOne(
            { _id: req.params.id },
            { $set: req.body }
        );
        return res.status(200).json(result);
    } catch (err) {
        console.error('Failed to Update Role Access:', err);
        return res.status(400).json({ error: 'Failed to Update Role Access' });
    }
}

const roleAssignedUsers = async (req, res) => {
    try {
        let result = await User.find({ roles: { $in: [req.params.id] }, deleted: false });
        return res.send(result);

    } catch (err) {
        console.error('Error :', err);
        return res.status(400).json({ err, error: 'Something wents wrong' });
    }
}

const assignRoleToUsers = async (req, res) => {
    try {
        // const updatedUsers = await User.updateMany({ _id: { $in: req.body } }, { $addToSet: { roles: req.params.id } });    // add if not already exist
        // const updatedUsers2 = await User.updateMany({ _id: { $nin: req.body }, roles: req.params.id }, { $pull: { roles: req.params.id } });      // remove

        const bulkOperations = [];

        bulkOperations.push({
            updateMany: {
                filter: { _id: { $in: req.body }, deleted: false },
                update: { $addToSet: { roles: req.params.id } }
            }
        });

        bulkOperations.push({
            updateMany: {
                filter: { _id: { $nin: req.body }, deleted: false },
                update: { $pull: { roles: req.params.id } }
            }
        });

        const result = await User.bulkWrite(bulkOperations);
        return res.send({ message: "Role changed successfully", result });

    } catch (err) {
        console.error('Error :', err);
        return res.status(400).json({ err, error: 'Something wents wrong' });
    }
}

module.exports = { index, add, edit, roleAssignedUsers, assignRoleToUsers }

================
File: Server/controllers/route/_routes.js
================
const express = require('express');
const route = require('./route');
const auth = require('../../middelwares/auth');

const router = express.Router();

router.get('/', auth, route.index)

module.exports = router

================
File: Server/controllers/route/route.js
================
const customField = require('../../model/schema/customField');
const RoleAccess = require('../../model/schema/roleAccess');
const User = require('../../model/schema/user');

const index = async (req, res) => {
    try {
        const query = req.query;
        query.deleted = false;
        let result = await customField.find(query);
        result.sort((a, b) => {
            return a.no - b.no;
        });

        let response = result.map((item) => ({
            _id: item._id,
            updatedDate: item.updatedDate,
            deleted: item.deleted,
            moduleName: item.moduleName,
            icon: item.icon,
            createdDate: item.createdDate
        }));

        let user = await User.findOne({ _id: req.user.userId, deleted: false }).populate({
            path: 'roles'
        }).exec()

        const mergedRoles = user?.roles?.reduce((acc, current) => {
            current?.access?.forEach(permission => {
                const existingPermission = acc.find(item => item.title === permission.title);
                if (existingPermission) {
                    Object.keys(permission).forEach(key => {
                        if (permission[key] === true) {
                            existingPermission[key] = true;
                        }
                    });
                } else {
                    acc.push(permission);
                }
            });
            return acc;
        }, []);

        // return res.status(200).json(response);
        return res.status(200).json(response);

    } catch (err) {
        console.error('Error :', err);
        return res.status(400).json({ err, error: 'Something wents wrong' });
    }
}

module.exports = { index }

================
File: Server/controllers/status/_routes.js
================
const express = require('express');
const auth = require('../../middelwares/auth');
const status = require('./status');
const router = express.Router();

router.get('/', auth, status.index)

module.exports = router

================
File: Server/controllers/status/status.js
================
const mongoose = require('mongoose');
const Task = require('../../model/schema/task')
const { Lead } = require('../../model/schema/lead');
const user = require('../../model/schema/user');

const index = async (req, res) => {
    try {
        const { query } = req;
        query.deleted = false;

        const [taskData, leadData] = await Promise.all([
            Task.find(query),
            Lead.find(query)
        ]);
        const userDetails = await user.findOne({ _id: req.user.userId }).populate({
            path: 'roles'
        })
        const mergedRoles = userDetails?.roles?.reduce((acc, current) => {
            current?.access?.forEach(permission => {
                const existingPermissionIndex = acc.findIndex(item => item.title === permission.title);
                if (existingPermissionIndex !== -1) {
                    const updatedPermission = { ...acc[existingPermissionIndex] };
                    Object.keys(permission).forEach(key => {
                        if (permission[key] === true) {
                            updatedPermission[key] = true;
                        }
                    });
                    acc[existingPermissionIndex] = updatedPermission;
                } else {
                    acc.push(permission);
                }
            });
            return acc;
        }, []);

        let response = { taskData, leadData }

        if (mergedRoles && mergedRoles.length > 0) {
            for (const item of mergedRoles) {

                if (item.title === "Tasks" && item.view === false) {
                    delete response.taskData
                }
                if (item.title === "Leads" && item.view === false) {
                    delete response.leadData

                }
            }
        }

        res.json({ data: response });
    } catch (error) {
        console.error('Error in index function:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
};

module.exports = { index }

================
File: Server/controllers/task/_routes.js
================
const express = require('express');
const task = require('./task');
const auth = require('../../middelwares/auth');

const router = express.Router();

router.get('/', auth, task.index)
router.post('/add', auth, task.add)
router.get('/view/:id', auth, task.view)
router.put('/edit/:id', auth, task.edit)
router.put('/changeStatus/:id', auth, task.changeStatus)
router.delete('/delete/:id', auth, task.deleteData)
router.post('/deleteMany', auth, task.deleteMany)

module.exports = router

================
File: Server/controllers/task/task.js
================
const Task = require('../../model/schema/task')
const mongoose = require('mongoose');

const index = async (req, res) => {
    query = req.query;
    query.deleted = false;
    if (query.createBy) {
        query.createBy = new mongoose.Types.ObjectId(query.createBy);
    }

    try {
        let result = await Task.aggregate([
            { $match: query },
            {
                $lookup: {
                    from: 'Contacts',
                    localField: 'assignTo',
                    foreignField: '_id',
                    as: 'contact'
                }
            },
            {
                $lookup: {
                    from: 'Leads', // Assuming this is the collection name for 'leads'
                    localField: 'assignToLead',
                    foreignField: '_id',
                    as: 'Lead'
                }
            },
            {
                $lookup: {
                    from: 'User',
                    localField: 'createBy',
                    foreignField: '_id',
                    as: 'users'
                }
            },
            { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$contact', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$Lead', preserveNullAndEmptyArrays: true } },
            { $match: { 'users.deleted': false } },
            {
                $addFields: {
                    assignToName: {
                        $cond: {
                            if: '$contact',
                            then: { $concat: ['$contact.title', ' ', '$contact.firstName', ' ', '$contact.lastName'] },
                            else: { $concat: ['$Lead.leadName'] }
                        }
                    },
                }
            },
            { $project: { users: 0, contact: 0, Lead: 0 } },
        ]);
        res.send(result);
    } catch (error) {
        console.error("Error:", error);
        res.status(500).send("Internal Server Error");
    }
}

const add = async (req, res) => {
    try {
        const { title, category, description, notes, reminder, start, end, backgroundColor, borderColor, textColor, display, url, allDay, createBy, assignTo, assignToLead } = req.body;
        // Check if assignTo is a valid ObjectId if provided and not empty
        if (assignTo && !mongoose.Types.ObjectId.isValid(assignTo)) {
            res.status(400).json({ error: 'Invalid assignTo value' });
        }
        if (assignToLead && !mongoose.Types.ObjectId.isValid(assignToLead)) {
            res.status(400).json({ error: 'Invalid assignToLead value' });
        }
        const taskData = { title, category, description, notes, reminder, start, end, backgroundColor, borderColor, textColor, display, url, createBy, allDay, createdDate: new Date() };

        if (assignTo) {
            taskData.assignTo = assignTo;
        }
        if (assignToLead) {
            taskData.assignToLead = assignToLead;
        }
        const result = new Task(taskData);
        await result.save();
        res.status(200).json(result);
    } catch (err) {
        console.error('Failed to create task:', err);
        res.status(400).json({ error: 'Failed to create task : ', err });
    }
}

const edit = async (req, res) => {
    try {
        const { title, category, description, notes, reminder, start, end, backgroundColor, borderColor, assignToLead, textColor, display, url, createBy, assignTo, status, allDay } = req.body;

        if (assignTo && !mongoose.Types.ObjectId.isValid(assignTo)) {
            res.status(400).json({ error: 'Invalid Assign To value' });
        }
        if (assignToLead && !mongoose.Types.ObjectId.isValid(assignToLead)) {
            res.status(400).json({ error: 'Invalid Assign To Lead value' });
        }
        const taskData = { title, assignTo, assignToLead, category, description, notes, reminder, start, end, backgroundColor, borderColor, textColor, display, url, createBy, status, allDay };

        let result = await Task.findOneAndUpdate(
            { _id: req.params.id },
            { $set: taskData },
            { new: true }
        );

        res.status(200).json(result);
    } catch (err) {
        console.error('Failed to create task:', err);
        res.status(400).json({ error: 'Failed to create task : ', err });
    }
}
const changeStatus = async (req, res) => {
    try {
        const { status } = req.body;

        await Task.updateOne(
            { _id: req.params.id },
            { $set: { status: status } }
        );

        let response = await Task.findOne({ _id: req.params.id })
        res.status(200).json(response);
    } catch (err) {
        console.error('Failed to change status:', err);
        res.status(400).json({ error: 'Failed to change status : ', err });
    }
}

const view = async (req, res) => {
    try {
        let response = await Task.findOne({ _id: req.params.id })
        if (!response) return res.status(404).json({ message: "no Data Found." })
        let result = await Task.aggregate([
            { $match: { _id: response._id } },
            {
                $lookup: {
                    from: 'Contacts',
                    localField: 'assignTo',
                    foreignField: '_id',
                    as: 'contact'
                }
            },
            {
                $lookup: {
                    from: 'Leads', // Assuming this is the collection name for 'leads'
                    localField: 'assignToLead',
                    foreignField: '_id',
                    as: 'Lead'
                }
            },
            {
                $lookup: {
                    from: 'User',
                    localField: 'createBy',
                    foreignField: '_id',
                    as: 'users'
                }
            },
            { $unwind: { path: '$contact', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
            { $unwind: { path: '$Lead', preserveNullAndEmptyArrays: true } },
            {
                $addFields: {
                    assignToName: {
                        $cond: {
                            if: '$contact',
                            then: { $concat: ['$contact.title', ' ', '$contact.firstName', ' ', '$contact.lastName'] },
                            else: { $concat: ['$Lead.leadName'] }
                        }
                    },
                    createByName: '$users.username',
                }
            },
            { $project: { contact: 0, users: 0, Lead: 0 } },
        ])
        res.status(200).json(result[0]);

    } catch (err) {
        console.log('Error:', err);
        res.status(400).json({ Error: err });
    }
}

const deleteData = async (req, res) => {
    try {
        const result = await Task.findByIdAndUpdate(req.params.id, { deleted: true });
        res.status(200).json({ message: "done", result })
    } catch (err) {
        res.status(404).json({ message: "error", err })
    }
}

const deleteMany = async (req, res) => {
    try {
        const result = await Task.updateMany({ _id: { $in: req.body } }, { $set: { deleted: true } });

        if (result?.matchedCount > 0 && result?.modifiedCount > 0) {
            return res.status(200).json({ message: "Tasks Removed successfully", result });
        }
        else {
            return res.status(404).json({ success: false, message: "Failed to remove tasks" })
        }

    } catch (err) {
        return res.status(404).json({ success: false, message: "error", err });
    }
}

module.exports = { index, add, edit, view, deleteData, changeStatus, deleteMany }

================
File: Server/controllers/textMsg/_routes.js
================
const express = require('express');
const auth = require('../../middelwares/auth');
const textMsg = require('./textMsg')

const router = express.Router();

router.get('/', auth, textMsg.index)
router.get('/view/:id', auth, textMsg.view)
router.post('/add', auth, textMsg.add)

module.exports = router

================
File: Server/controllers/textMsg/textMsg.js
================
const TextMsg = require('../../model/schema/textMsg');
const User = require('../../model/schema/user');
const mongoose = require('mongoose');


const add = async (req, res) => {
    try {
        const result = new TextMsg(req.body);
        const user = await User.findById({ _id: result.sender });
        user.textsent = user.textsent + 1;

        await user.save();
        await result.save();
        res.status(200).json(result);
    } catch (err) {
        console.error('Failed to create :', err);
        res.status(400).json({ err, error: 'Failed to create' });
    }
}

const index = async (req, res) => {
    // const startDate = new Date('2023-08-07T00:00:00');
    // const endDate = new Date('2023-08-14T23:59:59');

    // const dates = [];

    // // Generate all date and time values between start and end dates
    // let currentDate = new Date(startDate);
    // while (currentDate <= endDate) {
    //     dates.push(new Date(currentDate));
    //     currentDate.setHours(currentDate.getHours() + 1); // Add one hour to the current date
    // }

    // const allData = await TextMsg.find();
    // for (const data of allData) {
    //     const randomDate = dates[Math.floor(Math.random() * dates.length)];
    //     await TextMsg.updateOne({ _id: data._id }, { $set: { timestamp: randomDate } });
    // }

    const query = req.query
    if (query.sender) {
        query.sender = new mongoose.Types.ObjectId(query.sender);
    }
    try {
        let result = await TextMsg.aggregate([
            { $match: query },
            {
                $lookup: {
                    from: 'Contact',
                    localField: 'createFor',
                    foreignField: '_id',
                    as: 'contact'
                }
            },
            {
                $lookup: {
                    from: 'User',
                    localField: 'sender',
                    foreignField: '_id',
                    as: 'users'
                }
            },
            { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
            { $unwind: '$contact' },
            { $match: { 'contact.deleted': false, 'users.deleted': false } },
            {
                $addFields: {
                    senderName: { $concat: ['$users.firstName', ' ', '$users.lastName'] },
                    deleted: '$contact.deleted',
                    createByName: { $concat: ['$contact.title', ' ', '$contact.firstName', ' ', '$contact.lastName'] },
                }
            },
            { $project: { contact: 0, users: 0 } },

        ])

        res.status(200).json(result);
    } catch (err) {
        console.error('Failed :', err);
        res.status(400).json({ err, error: 'Failed ' });
    }
}

const view = async (req, res) => {
    try {
        let result = await TextMsg.findOne({ _id: req.params.id })

        if (!result) return res.status(404).json({ message: "no Data Found." })

        let response = await TextMsg.aggregate([
            { $match: { _id: result._id } },
            {
                $lookup: {
                    from: 'Contact',
                    localField: 'createFor',
                    foreignField: '_id',
                    as: 'contact'
                }
            },
            {
                $lookup: {
                    from: 'User',
                    localField: 'sender',
                    foreignField: '_id',
                    as: 'users'
                }
            },
            { $unwind: { path: '$users', preserveNullAndEmptyArrays: true } },
            { $unwind: '$contact' },
            { $match: { 'contact.deleted': false } },
            {
                $addFields: {
                    senderName: { $concat: ['$users.firstName', ' ', '$users.lastName'] },
                    deleted: '$contact.deleted',
                    createByName: { $concat: ['$contact.title', ' ', '$contact.firstName', ' ', '$contact.lastName'] },
                }
            },
            { $project: { contact: 0, users: 0 } }
        ])

        res.status(200).json(response[0])
    } catch (err) {
        console.error('Failed :', err);
        res.status(400).json({ err, error: 'Failed ' });
    }
}

module.exports = { add, index, view }

================
File: Server/controllers/user/_routes.js
================
const express = require('express');
const user = require('./user');
const auth = require('../../middelwares/auth');

const router = express.Router();

router.post('/admin-register', user.adminRegister)
router.get('/', auth, user.index)
router.post('/register', user.register)
router.post('/login', user.login)
router.post('/deleteMany', auth, user.deleteMany)
router.get('/view/:id', auth, user.view)
router.delete('/delete/:id', auth, user.deleteData)
router.put('/edit/:id', auth, user.edit)
router.put('/change-roles/:id', auth, user.changeRoles)



module.exports = router

================
File: Server/controllers/user/user.js
================
const User = require('../../model/schema/user')
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');


// Admin register
const adminRegister = async (req, res) => {
    try {
        const { username, password, firstName, lastName, phoneNumber } = req.body;
        const user = await User.findOne({ username: username })
        if (user) {
            return res.status(400).json({ message: "Admin already exist please try another email" })
        } else {
            // Hash the password
            const hashedPassword = await bcrypt.hash(password, 10);
            // Create a new user
            const user = new User({ username, password: hashedPassword, firstName, lastName, phoneNumber, role: 'superAdmin' });
            // Save the user to the database
            await user.save();
            res.status(200).json({ message: 'Admin created successfully' });
        }
    } catch (error) {
        res.status(500).json({ error: error });
    }
}

// User Registration
const register = async (req, res) => {
    try {
        const { username, password, firstName, lastName, phoneNumber } = req.body;
        const user = await User.findOne({ username: username })

        if (user) {
            return res.status(401).json({ message: "user already exist please try another email" })
        } else {
            // Hash the password
            const hashedPassword = await bcrypt.hash(password, 10);
            // Create a new user
            const user = new User({ username, password: hashedPassword, firstName, lastName, phoneNumber, createdDate: new Date() });
            // Save the user to the database
            await user.save();
            res.status(200).json({ message: 'User created successfully' });
        }
    } catch (error) {
        res.status(500).json({ error });
    }
}

const index = async (req, res) => {
    try {
        const query = { ...req.query, deleted: false };

        let user = await User.find(query).populate({
            path: 'roles'
        }).exec()

        res.status(200).json({ user });
    } catch (error) {
        res.status(500).json({ error });
    }
}

const view = async (req, res) => {
    try {
        let user = await User.findOne({ _id: req.params.id }).populate({
            path: 'roles'
        })
        if (!user) return res.status(404).json({ message: "no Data Found." })
        res.status(200).json(user)
    } catch (error) {
        console.log(error)
        res.status(500).json({ error });
    }
}

let deleteData = async (req, res) => {
    try {
        const userId = req.params.id;

        // Assuming you have retrieved the user document using userId
        const user = await User.findById(userId);
        if (process.env.DEFAULT_USERS.includes(user?.username)) {
            return res.status(400).json({ message: `You don't have access to delete ${username}` })
        }
        if (!user) {
            return res.status(404).json({ success: false, message: 'User not found', });
        }
        if (user.role !== 'superAdmin') {
            // Update the user's 'deleted' field to true
            await User.updateOne({ _id: userId }, { $set: { deleted: true } });
            res.send({ message: 'Record deleted Successfully', });
        } else {
            res.status(404).json({ message: 'admin can not delete', });
        }
    } catch (error) {
        res.status(500).json({ error });
    }
}

const deleteMany = async (req, res) => {
    try {
        // if(process.env.DEFAULT_USERS.includes(username)){
        //     return res.status(400).json({ message: `You don't have access to change ${username}` })
        // }
        // const updatedUsers = await User.updateMany({ _id: { $in: req.body }, role: { $ne: 'superAdmin' } }, { $set: { deleted: true } });

        const userIds = req.body; // Assuming req.body is an array of user IDs
        const users = await User.find({ _id: { $in: userIds } });

        // Check for default users and filter them out
        const defaultUsers = process.env.DEFAULT_USERS;
        const filteredUsers = users.filter(user => !defaultUsers.includes(user.username));

        // Further filter out superAdmin users
        const nonSuperAdmins = filteredUsers.filter(user => user.role !== 'superAdmin');
        const nonSuperAdminIds = nonSuperAdmins.map(user => user._id);

        if (nonSuperAdminIds.length === 0) {
            return res.status(400).json({ message: "No users to delete or all users are protected." });
        }

        // Update the 'deleted' field to true for the remaining users
        const updatedUsers = await User.updateMany({ _id: { $in: nonSuperAdminIds } }, { $set: { deleted: true } });


        res.status(200).json({ message: "done", updatedUsers })
    } catch (err) {
        res.status(404).json({ message: "error", err })
    }
}

const edit = async (req, res) => {
    try {
        let { username, firstName, lastName, phoneNumber } = req.body

        let result = await User.updateOne(
            { _id: req.params.id },
            {
                $set: {
                    username, firstName, lastName, phoneNumber
                }
            }
        );

        res.status(200).json(result);
    } catch (err) {
        console.error('Failed to Update User:', err);
        res.status(400).json({ error: 'Failed to Update User' });
    }
}


const login = async (req, res) => {
    try {
        const { username, password } = req.body;
        // Find the user by username
        const user = await User.findOne({ username, deleted: false }).populate({
            path: 'roles'
        });
        if (!user) {
            res.status(401).json({ error: 'Authentication failed, invalid username' });
            return;
        }
        // Compare the provided password with the hashed password stored in the database
        const passwordMatch = await bcrypt.compare(password, user.password);
        if (!passwordMatch) {
            res.status(401).json({ error: 'Authentication failed,password does not match' });
            return;
        }
        // Create a JWT token
        const token = jwt.sign({ userId: user._id }, 'secret_key', { expiresIn: '1d' });

        res.status(200).setHeader('Authorization', `Bearer${token}`).json({ token: token, user });
    } catch (error) {
        res.status(500).json({ error: 'An error occurred' });
    }
}

const changeRoles = async (req, res) => {
    try {
        const userId = req.params.id;

        let result = await User.updateOne({ _id: userId }, { $set: { roles: req.body } });

        res.status(200).json(result);

    } catch (error) {
        console.error('Failed to Change Role:', error);
        res.status(400).json({ error: 'Failed to Change Role' });
    }
}

module.exports = { register, login, adminRegister, index, deleteMany, view, deleteData, edit, changeRoles }

================
File: Server/controllers/validation/_routes.js
================
const express = require('express');
const auth = require("../../middelwares/auth");
const validation = require('./validation');

const router = express.Router();

router.get('/', auth, validation.index);
router.post('/add', auth, validation.add);
router.get('/view/:id', auth, validation.view);
router.put('/edit/:id', auth, validation.editWholeValidationsArray);
router.delete('/delete/:id', auth, validation.deleteValidationDocument);
router.post('/deleteMany', auth, validation.deleteManyValidationDocuments);

module.exports = router;

================
File: Server/controllers/validation/validation.js
================
const Validation = require('../../model/schema/validation');

const index = async (req, res) => {
    try {
        const query = req.query;
        query.deleted = false;
        let result = await Validation.find(query);
        return res.send(result);
    } catch (err) {
        console.error('Error :', err);
        return res.status(400).json({ success: false, message: 'Something wents wrong', error: err.toString() });
    }
};

const add = async (req, res) => {
    try {
        if (!req.body?.name) {
            return res.status(400).json({ success: false, message: `Validation name is required` });
        }

        let existingValidation = await Validation.findOne({ name: { $regex: new RegExp(`^${req.body.name}$`, 'i') } });
        if (existingValidation) {
            return res.status(400).json({ success: false, message: `Validation name already exist` });
        }

        req.body.createdDate = new Date();

        const validation = new Validation(req.body);
        await validation.save();
        return res.status(200).json({ message: "Validation added successfully", result: validation });

    } catch (err) {
        console.error('Failed to add validation:', err);
        return res.status(400).json({ success: false, message: 'Failed to add validation', error: err.toString() });
    }
};

const view = async (req, res) => {
    try {
        const validationDoc = await Validation.findOne({ _id: req.params.id, deleted: false });
        if (!validationDoc) return res.status(404).json({ success: false, message: "No Data Found." });
        return res.send(validationDoc);
    } catch (err) {

        console.error('Failed to display:', err);
        return res.status(400).json({ success: false, message: 'Failed to display', error: err.toString() });
    }
};

const editWholeValidationsArray = async (req, res) => {
    try {
        let result = await Validation.updateOne({ _id: req.params.id }, { $set: req.body });

        if (result?.modifiedCount > 0) {
            return res.status(200).json({ message: "Validations updated successfully", result });
        } else {
            return res.status(404).json({ message: 'Failed to update validations', result });
        }

    } catch (err) {
        console.error('Failed to Update validations:', err);
        return res.status(400).json({ success: false, message: 'Failed to Update validations', error: err.toString() });
    }
};

const deleteValidationDocument = async (req, res) => {
    try {
        const validationId = req.params.id;
        const result = await Validation.updateOne(
            { _id: validationId },
            {
                $set: { deleted: true }
            }
        );

        if (result?.modifiedCount > 0) {
            return res.status(200).json({ message: "Validdation removed successfully", result });
        } else {
            return res.status(404).json({ message: 'Failed to remove validation', result });
        }

    } catch (err) {
        console.error("Failed to delete field ", err);
        return res.status(404).json({ success: false, message: "Failed to remove validation", error: err.toString() });
    }
}

const deleteManyValidationDocuments = async (req, res) => {
    try {
        const validationIds = req.body;
        console.log("validationIds ", validationIds);
        const result = await Validation.updateMany(
            { _id: { $in: validationIds } },
            {
                $set: { deleted: true }
            }
        );

        if (result?.modifiedCount > 0) {
            return res.status(200).json({ message: "Validations removed successfully", result });
        } else {
            return res.status(404).json({ message: 'Failed to remove validations', result });
        }

    } catch (err) {
        console.error("Failed to remove validations ", err);
        return res.status(404).json({ success: false, message: "Failed to remove validations", error: err.toString() });
    }
};

module.exports = { index, add, view, editWholeValidationsArray, deleteValidationDocument, deleteManyValidationDocuments };

================
File: Server/controllers/route.js
================
const express = require('express');
const router = express.Router();

const contactRoute = require('./contact/_routes')
const propertyRoute = require('./property/_routes');
const leadRoute = require('./lead/_routes');
const taskRoute = require('./task/_routes');
const reportingRoute = require('./reporting/_routes');
const documentRoute = require('./document/_routes');
const userRoute = require('./user/_routes');

const route = require('./route/_routes');
const emailRoute = require('./emailHistory/_routes');
const phoneCallRoute = require('./phoneCall/_routes');
const TextMsgRoute = require('./textMsg/_routes');
const meetingRoute = require('./meeting/_routes');
const paymentRoute = require('./payment/_routes');
const roleAccessRoute = require('./roleAccess/_routes');
const imagesRoute = require('./images/_routes');
const customFieldRoute = require("./customField/_routes");
const validationRoute = require("./validation/_routes");
const formRoute = require("./form/_routes");
const statusRoute = require("./status/_routes");
const calendarRoute = require("./calendar/_routes")
const emailTempRoute = require("./emailTemplate/_routes")
const opportunityRoute = require("./opportunities/_routes")
const quotesRoute = require("./quotes/_routes")
const moduleActiveDeactiveRoute = require("./moduleActiveDeactive/_routes")
const accountRoute = require("./account/_routes")
const invoicesRoute = require("./invoices/_routes")

//Api`s
router.use('/contact', contactRoute);
router.use('/property', propertyRoute)
router.use('/lead', leadRoute)
router.use('/task', taskRoute);
router.use('/document', documentRoute);
router.use('/reporting', reportingRoute);
router.use('/user', userRoute);
router.use('/payment', paymentRoute);

router.use('/email', emailRoute);
router.use('/phoneCall', phoneCallRoute);
router.use('/text-msg', TextMsgRoute);
router.use('/meeting', meetingRoute);

router.use("/images", imagesRoute);
router.use('/role-access', roleAccessRoute);
router.use('/route', route);

router.use('/modules', moduleActiveDeactiveRoute);
router.use("/custom-field", customFieldRoute);
router.use("/validation", validationRoute);
router.use("/form", formRoute);
router.use("/status", statusRoute);
router.use("/calendar", calendarRoute);

router.use("/email-temp", emailTempRoute);
router.use("/opportunity", opportunityRoute);
router.use("/quotes", quotesRoute);
router.use("/invoices", invoicesRoute);
router.use("/account", accountRoute);

module.exports = router;

================
File: Server/db/config.js
================
const mongoose = require('mongoose');
const User = require('../model/schema/user');
const bcrypt = require('bcrypt');
const { initializeLeadSchema } = require("../model/schema/lead");
const { initializeContactSchema } = require("../model/schema/contact");
const { initializePropertySchema } = require("../model/schema/property");
const { createNewModule } = require("../controllers/customField/customField.js");
const customField = require('../model/schema/customField.js');
const { contactFields } = require('./contactFields.js');
const { leadFields } = require('./leadFields.js');
const { propertiesFields } = require('./propertiesFields.js');

const initializedSchemas = async () => {
    await initializeLeadSchema();
    await initializeContactSchema();
    await initializePropertySchema();

    const CustomFields = await customField.find({ deleted: false });
    const createDynamicSchemas = async (CustomFields) => {
        for (const module of CustomFields) {
            const { moduleName, fields } = module;

            // Check if schema already exists
            if (!mongoose.models[moduleName]) {
                // Create schema object
                const schemaFields = {};
                for (const field of fields) {
                    schemaFields[field.name] = { type: field.backendType };
                }
                // Create Mongoose schema
                const moduleSchema = new mongoose.Schema(schemaFields);
                // Create Mongoose model
                mongoose.model(moduleName, moduleSchema, moduleName);
                console.log(`Schema created for module: ${moduleName}`);
            }
        }
    };

    createDynamicSchemas(CustomFields);

}

const connectDB = async (DATABASE_URL, DATABASE) => {
    try {
        const DB_OPTIONS = {
            dbName: DATABASE
        }

        mongoose.set("strictQuery", false);
        await mongoose.connect(DATABASE_URL, DB_OPTIONS);

        // const collectionsToDelete = ['abc', 'Report and analytics', 'test', 'krushil', 'bca', 'xyz', 'lkjhg', 'testssssss', 'tel', 'levajav', 'tellevajav', 'Contact'];
        // const db = mongoose.connection.db;
        // console.log(db)
        // for (const collectionName of collectionsToDelete) {
        //     await db.collection(collectionName).drop();
        //     console.log(`Collection ${collectionName} deleted successfully.`);
        // }
        await initializedSchemas();

        /* this was temporary  */
        const mockRes = {
            status: (code) => {
                return {
                    json: (data) => { }
                };
            },
            json: (data) => { }
        };

        // Create default modules
        await createNewModule({ body: { moduleName: 'Leads', fields: leadFields, headings: [], isDefault: true } }, mockRes);
        await createNewModule({ body: { moduleName: 'Contacts', fields: contactFields, headings: [], isDefault: true } }, mockRes);
        await createNewModule({ body: { moduleName: 'Properties', fields: propertiesFields, headings: [], isDefault: true } }, mockRes);
        /*  */
        await initializedSchemas();

        let adminExisting = await User.find({ role: 'superAdmin' });
        if (adminExisting.length <= 0) {
            const phoneNumber = 7874263694
            const firstName = 'Prolink'
            const lastName = 'Infotech'
            const username = 'admin@gmail.com'
            const password = 'admin123'
            // Hash the password
            const hashedPassword = await bcrypt.hash(password, 10);
            // Create a new user
            const user = new User({ _id: new mongoose.Types.ObjectId('64d33173fd7ff3fa0924a109'), username, password: hashedPassword, firstName, lastName, phoneNumber, role: 'superAdmin' });
            // Save the user to the database
            await user.save();
            console.log("Admin created successfully..");
        } else if (adminExisting[0].deleted === true) {
            await User.findByIdAndUpdate(adminExisting[0]._id, { deleted: false });
            console.log("Admin Update successfully..");
        } else if (adminExisting[0].username !== "admin@gmail.com") {
            await User.findByIdAndUpdate(adminExisting[0]._id, { username: 'admin@gmail.com' });
            console.log("Admin Update successfully..");
        }

        console.log("Database Connected Successfully..");
    } catch (err) {
        console.log("Database Not connected", err.message);
    }
}
module.exports = connectDB

================
File: Server/db/contactFields.js
================
const contactFields = [
    {
        "name": "fullName",
        "label": "Full Name",
        "type": "text",
        "fixed": true,
        "delete": false,
        "belongsTo": null,
        "backendType": "String",
        "editable": false,
        "isTableField": true,
        "options": [],
        "validation": [
            {
                "require": true,
                "message": "",
            },
        ],
    },
    {
        "name": "email",
        "label": "Email",
        "type": "email",
        "fixed": true,
        "delete": false,
        "belongsTo": null,
        "backendType": "String",
        "isTableField": true,
        "options": [],
        "validation": [
            {
                "require": true,
                "message": "",
            },
        ],
    },
    // {
    //     "name": "facebookProfile",
    //     "label": "Facebook",
    //     "type": "url",
    //     "fixed": true,
    //     "delete": false,
    //     "belongsTo": null,
    //     "backendType": "Mixed",
    //     "isTableField": false,
    //     "validation": [
    //         {
    //             "message": "Invalid type value for facebook",
    //             "formikType": "url",
    //         }
    //     ],
    // },
    // {
    //     "name": "linkedInProfile",
    //     "label": "LinkedIn Profile URL",
    //     "type": "url",
    //     "fixed": true,
    //     "delete": false,
    //     "belongsTo": null,
    //     "backendType": "Mixed",
    //     "isTableField": false,
    //     "validation": [
    //         {
    //             "message": "Invalid type value for LinkedIn Profile URL",
    //             "formikType": "url",
    //         }
    //     ],
    // },
    // {
    //     "name": "twitterHandle",
    //     "label": "Twitter Username",
    //     "type": "url",
    //     "fixed": true,
    //     "delete": false,
    //     "belongsTo": null,
    //     "backendType": "Mixed",
    //     "isTableField": false,
    //     "validation": [
    //         {
    //             "message": "Invalid type value for Twitter Username",
    //             "formikType": "url",
    //         }
    //     ],
    // },
    // {
    //     "name": "otherProfiles",
    //     "label": "Other Social Media Profiles URL",
    //     "type": "url",
    //     "fixed": true,
    //     "delete": false,
    //     "belongsTo": null,
    //     "backendType": "Mixed",
    //     "isTableField": false,
    //     "validation": [
    //         {
    //             "message": "Invalid type value for Other Social Media Profiles URL",
    //             "formikType": "url",
    //         }
    //     ],
    // },
    {
        "name": "phoneNumber",
        "label": "Phone Number",
        "type": "tel",
        "fixed": true,
        "delete": false,
        "belongsTo": null,
        "backendType": "Number",
        "isTableField": true,
        "options": [],
        "validation": [
            {
                "require": true,
                "message": "",
            },
        ],
    },
];
exports.contactFields = contactFields;

================
File: Server/db/leadFields.js
================
const leadFields = [
    {
        "name": "leadName",
        "label": "Lead Name",
        "type": "text",
        "fixed": true,
        "delete": false,
        "belongsTo": null,
        "backendType": "String",
        "editable": false,
        "isTableField": true,
        "options": [],
        "validation": [
            {
                "require": true,
                "message": "",
            },
        ],
    },
    {
        "name": "leadStatus",
        "label": "Lead Status",
        "type": "select",
        "fixed": false,
        "delete": false,
        "belongsTo": null,
        "backendType": "Mixed",
        "isTableField": true,
        "options": [
            {
                "name": "Active",
                "value": "active",
            },
            {
                "name": "Pending",
                "value": "pending",
            },
            {
                "name": "Sold",
                "value": "sold",
            }
        ],
        "validation": [
            {
                "message": "Invalid type value for Lead Status",
                "formikType": "String",
            }
        ],
    },
    {
        "name": "leadEmail",
        "label": "Lead Email",
        "type": "email",
        "fixed": true,
        "delete": false,
        "belongsTo": null,
        "backendType": "String",
        "isTableField": true,
        "options": [],
        "validation": [
            {
                "require": true,
                "message": "",
            },
        ],
    },
    {
        "name": "leadPhoneNumber",
        "label": "Lead Phone Number",
        "type": "tel",
        "fixed": true,
        "delete": false,
        "belongsTo": null,
        "backendType": "String",
        "isTableField": true,
        "options": [],
        "validation": [
            {
                "require": true,
                "message": "",
            },
        ],
    },
];
exports.leadFields = leadFields;

================
File: Server/db/propertiesFields.js
================
const propertiesFields = [
    {
        "name": "name",
        "label": "Name",
        "type": "text",
        "fixed": true,
        "delete": false,
        "belongsTo": null,
        "backendType": "String",
        "editable": false,
        "isTableField": true,
        "options": [],
        "validation": [
            {
                "require": true,
                "message": "",
                "_id": "66e7b6a4e8458ca1196673ce"
            }
        ],
    }
];
exports.propertiesFields = propertiesFields;

================
File: Server/middelwares/auth.js
================
const jwt = require('jsonwebtoken');

const auth = (req, res, next) => {
    const token = req.headers.authorization;

    if (!token) {
        res.status(401).json({ message: "Authentication failed , Token missing" });
    }
    try {
        const decode = jwt.verify(token, 'secret_key')
        req.user = decode
        next();
    } catch (err) {
        res.status(500).json({ message: 'Authentication failed. Invalid token.' })
    }
}

module.exports = auth

================
File: Server/middelwares/mail.js
================
const nodemailer = require('nodemailer');

// Function to send an email
const sendEmail = async (to, subject, text, html) => {
    try {
        if (to && process.env.user && process.env.pass) {
            const transporter = nodemailer.createTransport({
                host: 'smtp.office365.com',
                port: 587,
                auth: {
                    user: process.env.user,
                    pass: process.env.pass
                }
            });

            const mailOptions = {
                from: process.env.user,
                to: to,
                subject: subject,
                text: text,
                html: html
            };

            const info = await transporter.sendMail(mailOptions);
            console.log('Email sent: ' + info.response);
            return info.response;
        }
    } catch (error) {
        console.error('Failed to send email:', error);
        throw error;
    }
};


module.exports = { sendEmail }

================
File: Server/model/schema/account.js
================
const mongoose = require('mongoose');

const Account = new mongoose.Schema({
    name: String,
    officePhone: Number,
    alternatePhone: Number,
    website: String,
    fax: String,
    ownership: String,
    emailAddress: String,
    nonPrimaryEmail: String,
    billingStreet: String,
    billingStreet2: String,
    billingStreet3: String,
    billingStreet4: String,
    billingPostalcode: String,
    billingCity: String,
    billingState: String,
    billingCountry: String,
    shippingStreet: String,
    shippingStreet2: String,
    shippingStreet3: String,
    shippingStreet4: String,
    shippingPostalcode: String,
    shippingCity: String,
    shippingState: String,
    shippingCountry: String,
    description: String,
    type: String,
    industry: String,
    annualRevenue: String,
    rating: String,
    SICCode: String,
    assignUser: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
    },
    emailOptOut: {
        type: Boolean,
        default: false
    },
    invalidEmail: {
        type: Boolean,
        default: false
    },
    memberOf: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Accounts',
    },
    createBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    modifiedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
    },
    createdDate: {
        type: Date,
        default: Date.now
    },
    modifiedDate: {
        type: Date,
        default: Date.now
    },
    deleted: {
        type: Boolean,
        default: false,
    },
})

module.exports = mongoose.model('Accounts', Account, 'Accounts');

================
File: Server/model/schema/contact.js
================
const mongoose = require('mongoose');

const fetchSchemaFields = async () => {
    const CustomFieldModel = mongoose.model('CustomField');
    return await CustomFieldModel.find({ moduleName: "Contacts" });
};

const contactSchema = new mongoose.Schema({
    // 1. Basic Information
    // firstName: String,
    // lastName: String,
    // title: String,
    // email: String,
    // phoneNumber: Number,
    // mobileNumber: Number,
    // physicalAddress: String,
    // mailingAddress: String,
    // preferredContactMethod: String,
    // // 2.Lead Source Information
    // leadSource: String,
    // referralSource: String,
    // campaignSource: String,
    // // 3. Status and Classifications
    // leadStatus: String,
    // leadRating: Number,
    // leadConversionProbability: String,
    // // 4. Property of Interest
    interestProperty: [{
        type: mongoose.Schema.ObjectId,
        ref: 'Properties',
    }],
    quotes: [{
        type: mongoose.Schema.ObjectId,
        ref: 'Quotes',
    }],
    // // 5. History:
    // notesandComments: String,
    // // 6. Tags or Categories
    // tagsOrLabelsForcategorizingcontacts: String,
    // // 7. Important Dates:
    // birthday: Date,
    // anniversary: Date,
    // keyMilestones: String,
    // // 8. Additional Personal Information
    // dob: String,
    // gender: String,
    // occupation: String,
    // interestsOrHobbies: String,
    // // 9. Preferred  Communication Preferences:
    // communicationFrequency: String,
    // preferences: String,
    // // 10. Social Media Profiles:
    // linkedInProfile: String,
    // facebookProfile: String,
    // twitterHandle: String,
    // otherProfiles: String,
    // // 11. Lead Assignment and Team Collaboration:
    // agentOrTeamMember: String,
    // internalNotesOrComments: String,
    createBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    updatedDate: {
        type: Date,
        default: Date.now
    },
    createdDate: {
        type: Date,
    },
    deleted: {
        type: Boolean,
        default: false,
    },
});

const initializeContactSchema = async () => {
    const schemaFieldsData = await fetchSchemaFields();
    schemaFieldsData[0]?.fields?.forEach((item) => {
        contactSchema.add({ [item.name]: item?.backendType });
    });
};

const Contact = mongoose.model('Contacts', contactSchema, 'Contacts');
module.exports = { Contact, initializeContactSchema };

================
File: Server/model/schema/customField.js
================
const mongoose = require("mongoose");

const typeValidator = (val) => {
    const allowedTypes = ['String', 'Number', 'RegExp', 'Date']
    const isValidType = allowedTypes.some(type => val instanceof mongoose.Schema.Types[type]);
    return isValidType;
}

const validationSchema = new mongoose.Schema({
    require: {
        type: Boolean,
    },
    max: {
        type: Boolean,
    },
    min: {
        type: Boolean,
    },
    value: {
        type: mongoose.Schema.Types.Mixed,
        validate: [typeValidator, 'Invalid data type for "value" field.']
    },
    message: {
        type: String
    },
    match: {
        type: Boolean,
    },
    formikType: {
        type: String
    }
});

const radioSelctboxSchema = new mongoose.Schema({
    name: {
        type: String,
    },
    value: {
        type: String,
    }
});

const fieldsSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
        // unique: true, 
        trim: true
    },
    label: {
        type: String,
    },
    type: {
        type: String,
        default: 'text'
    },
    fixed: {
        type: Boolean,
        default: false
    },
    isDefault: {
        type: Boolean,
        default: false
    },
    editable: {
        type: Boolean,
        default: true
    },
    delete: {
        type: Boolean,
        default: false
    },
    belongsTo: {
        type: mongoose.Schema.Types.ObjectId,
    },
    backendType: {
        type: String,
        default: 'Mixed',
        required: true
    },
    isTableField: {
        type: Boolean,
        default: false
    },
    isView: {
        type: Boolean,
        default: false
    },
    // options: [radioSelctboxSchema],
    options: {
        type: [radioSelctboxSchema],
        default: undefined
    },
    validation: [validationSchema],
});

const headingsSchema = new mongoose.Schema({
    heading: {
        type: String
    }
});

const customFieldSchema = new mongoose.Schema({
    moduleName: {
        type: String,
        required: true,
        unique: true,
        trim: true
    },
    icon: {
        type: String,
    },
    no: {
        type: Number
    },
    deleted: {
        type: Boolean,
        default: false,
    },
    updatedDate: {
        type: Date,
        default: Date.now
    },
    createdDate: {
        type: Date,
    },
    headings: [headingsSchema],
    fields: [fieldsSchema]
});

module.exports = mongoose.model("CustomField", customFieldSchema, 'CustomField');

================
File: Server/model/schema/document.js
================
const mongoose = require('mongoose');

// Define the schema for individual files
const fileSchema = new mongoose.Schema({
    fileName: {
        type: String,
        required: true,
    },
    linkContact: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Contact',
    },
    linkLead: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Lead',
    },  
    path: {
        type: String,
        required: true,
    },
    img: String,
    createOn: {
        type: Date,
        default: Date.now,
    },
    deleted: {
        type: Boolean,
        default: false,
    },
});

// Define the schema for the main document
const documentSchema = new mongoose.Schema({
    folderName: {
        type: String,
        required: true,
    },
    file: [fileSchema],
    createBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
});

// Create the model for the main document


module.exports = mongoose.model('Document', documentSchema, 'Document');

================
File: Server/model/schema/email.js
================
const mongoose = require('mongoose');

const email = new mongoose.Schema({
    sender: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    recipient: { type: String },
    // cc: { type: String },
    // bcc: { type: String },
    subject: { type: String },
    type: { type: String },
    startDate: { type: String, default: Date.now },
    message: { type: String },
    html: { type: String },
    createByLead: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Lead",
    },
    createByContact: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Contact',
    },
    timestamp: {
        type: Date,
        default: Date.now
    },
    createBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
    },
    deleted: {
        type: Boolean,
        default: false,
    },
})

module.exports = mongoose.model('Emails', email, 'Emails');

================
File: Server/model/schema/emailTemplate.js
================
const mongoose = require('mongoose');

const EmailTemp = new mongoose.Schema({
    templateName: String,
    description: String,
    design: { type: Object },
    html: String,
    createBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    createdDate: {
        type: Date,
    },
    deleted: {
        type: Boolean,
        default: false,
    },
})

module.exports = mongoose.model('EmailTemps', EmailTemp, 'EmailTemps');

================
File: Server/model/schema/imagesSchema.js
================
const mongoose = require("mongoose");

const imagesSchema = new mongoose.Schema({
    authImg: {
        type: String,
    },
    logoSmImg: {
        type: String,
    },
    logoLgImg: {
        type: String
    },
    updatedDate: {
        type: Date,
        default: Date.now
    },
    createdDate: {
        type: Date,
    },
    deleted: {
        type: Boolean,
        default: false,
    },
    isActive: {
        type: Boolean,
        default: false,
    }
});

module.exports = mongoose.model('Images', imagesSchema, 'Images');

================
File: Server/model/schema/invoices.js
================
const mongoose = require('mongoose');

const Invoices = new mongoose.Schema({
    title: String,
    description: String,
    quoteNumber: String,
    quoteDate: Date,
    dueDate: Date,
    invoiceDate: Date,
    status: String,
    billingStreet: String,
    billingCity: String,
    billingState: String,
    billingPostalCode: String,
    billingCountry: String,
    shippingStreet: String,
    shippingCity: String,
    shippingState: String,
    shippingPostalCode: String,
    shippingCountry: String,
    invoiceNumber: String,
    lineItems: String,
    total: String,
    subtotal: String,
    discount: String,
    tax: String,
    ptax: String,
    shipping: String,
    shippingTax: String,
    grandTotal: String,
    currency: String,
    quoteStage: String,
    paymentTerms: String,
    description: String,
    approvalStatus: String,
    invoiceStatus: String,
    discountType: String,
    items: [],
    account: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Accounts",
    },
    contact: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Contacts",
    },
    quotesId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Quotes",
    },
    assignedTo: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "User",
    },
    createBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    modifiedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    isCheck: {
        type: Boolean,
        default: false,
    },
    deleted: {
        type: Boolean,
        default: false,
    },
    invoiceConvertDate: {
        type: Date,
    },
    updatedDate: {
        type: Date,
        default: Date.now
    },
    createdDate: {
        type: Date,
    },
})

module.exports = mongoose.model('Invoices', Invoices, 'Invoices');

================
File: Server/model/schema/lead.js
================
const mongoose = require('mongoose');

const fetchSchemaFields = async () => {
    const CustomFieldModel = mongoose.model('CustomField');
    return await CustomFieldModel.find({ moduleName: "Leads" });
};

const leadSchema = new mongoose.Schema({
    // // Lead Information:
    // leadName: String,
    // leadEmail: String,
    // leadPhoneNumber: String,
    // leadAddress: String,
    // // Lead Source and Details:
    // leadSource: String,
    // leadStatus: String,
    // leadSourceDetails: String,
    // leadCampaign: String,
    // leadSourceChannel: String,
    // leadSourceMedium: String,
    // leadSourceCampaign: String,
    // leadSourceReferral: String,
    // // Lead Assignment and Ownership:
    // leadAssignedAgent: String,
    // leadOwner: String,
    // // Lead Dates and Follow - up:
    // leadCreationDate: Date,
    // leadConversionDate: Date,
    // leadFollowUpDate: Date,
    // leadFollowUpStatus: String,
    // // Lead Interaction and Communication:
    // // leadInteractionHistory: [{ leadHistory }],
    // leadNotes: String,
    // leadCommunicationPreferences: String,
    // // Lead Scoring and Nurturing:
    // leadScore: Number,
    // leadNurturingWorkflow: String,
    // leadEngagementLevel: String,
    // leadConversionRate: Number,
    // leadNurturingStage: String,
    // leadNextAction: String,
    deleted: {
        type: Boolean,
        default: false,
    },
    updatedDate: {
        type: Date,
        default: Date.now
    },
    createdDate: {
        type: Date,
    },
    createBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
});

const initializeLeadSchema = async () => {
    const schemaFieldsData = await fetchSchemaFields();
    schemaFieldsData[0]?.fields?.forEach((item) => {
        leadSchema.add({ [item.name]: item?.backendType });
    });
};

const Lead = mongoose.model('Leads', leadSchema, 'Leads');
module.exports = { Lead, initializeLeadSchema };

================
File: Server/model/schema/meeting.js
================
const mongoose = require('mongoose');

const meetingHistory = new mongoose.Schema({
    agenda: { type: String, required: true },
    attendes: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Contact',
    }],
    attendesLead: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Lead',
    }],
    location: String,
    related: String,
    dateTime: String,
    notes: String,
    // meetingReminders: { type: String, required: true },
    createBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "User",
        require: true,
    },
    timestamp: {
        type: Date,
        default: Date.now
    },
    deleted: {
        type: Boolean,
        default: false,
    },
})

module.exports = mongoose.model('Meetings', meetingHistory, 'Meetings');

================
File: Server/model/schema/moduleActiveDeactive.js
================
const mongoose = require("mongoose");

const moduleActiveDeactiveSchema = new mongoose.Schema({
  moduleName: {
    type: String,
    required: true,
  },
  order: {
    type: Number,
    required: true,
  },
  isActive: {
    type: Boolean,
    default: true,
  },
});

module.exports = mongoose.model('ModuleActiveDeactive', moduleActiveDeactiveSchema, 'ModuleActiveDeactive');

================
File: Server/model/schema/opprtunity.js
================
const mongoose = require('mongoose');

const Opportunity = new mongoose.Schema({
    opportunityName: String,
    accountName: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Accounts',
    },
    assignUser: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
    },
    type: String,
    leadSource: String,
    currency: String,
    opportunityAmount: String,
    amount: String,
    expectedCloseDate: Date,
    nextStep: String,
    salesStage: String,
    probability: String,
    description: String,
    createBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    modifiedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
    },
    createdDate: {
        type: Date,
        default: Date.now
    },
    modifiedDate: {
        type: Date,
        default: Date.now
    },
    deleted: {
        type: Boolean,
        default: false,
    },
})

module.exports = mongoose.model('Opportunities', Opportunity, 'Opportunities');

================
File: Server/model/schema/phoneCall.js
================
const mongoose = require('mongoose');

const phoneCall = new mongoose.Schema({
    sender: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    recipient: { type: String },
    callDuration: { type: String },
    callNotes: { type: String },
    phoneNumber: { type: String },
    startDate: { type: String, default: Date.now },
    createByLead: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Lead",
    },
    createByContact: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Contact',
    },
    createBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
    },
    timestamp: {
        type: Date,
        default: Date.now
    },
    deleted: {
        type: Boolean,
        default: false,
    },
})

module.exports = mongoose.model('Calls', phoneCall, 'Calls');

================
File: Server/model/schema/property.js
================
const mongoose = require('mongoose');

const fetchSchemaFields = async () => {
    const CustomFieldModel = mongoose.model('CustomField');
    return await CustomFieldModel.find({ moduleName: "Properties" });
};

const propertySchema = new mongoose.Schema({
    // //1. basicPropertyInformation:
    // propertyType: String,
    // propertyAddress: String,
    // listingPrice: String,
    // squareFootage: String,
    // numberofBedrooms: Number,
    // numberofBathrooms: Number,
    // yearBuilt: Number,
    // propertyDescription: String,
    // //2. Property Features and Amenities:
    // lotSize: String,
    // parkingAvailability: String,
    // appliancesIncluded: String,
    // heatingAndCoolingSystems: String,
    // flooringType: String,
    // exteriorFeatures: String,
    // communityAmenities: String,
    // //3. Media and Visuals:
    propertyPhotos: [],
    virtualToursOrVideos: [],
    floorPlans: [],
    propertyDocuments: [],
    // //4. Listing and Marketing Details:
    // listingStatus: String,
    // listingAgentOrTeam: String,
    // listingDate: String,
    // marketingDescription: String,
    // multipleListingService: String,
    // //5. Property History:
    // previousOwners: Number,
    // purchaseHistory: String,
    // //6. Financial Information:
    // propertyTaxes: String,
    // homeownersAssociation: String,
    // mortgageInformation: String,
    // //7. Contacts Associated with Property:
    // sellers: String,
    // buyers: String,
    // photo: String,
    // propertyManagers: String,
    // contractorsOrServiceProviders: String,
    // //8. Property Notes and Comments:
    // internalNotesOrComments: String,
    deleted: {
        type: Boolean,
        default: false,
    },
    updatedDate: {
        type: Date,
        default: Date.now
    },
    createdDate: {
        type: Date,
    },
    createBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
});

const initializePropertySchema = async () => {
    const schemaFieldsData = await fetchSchemaFields();
    schemaFieldsData[0]?.fields?.forEach((item) => {
        propertySchema.add({ [item.name]: item?.backendType });
    });
};

const Property = mongoose.model('Properties', propertySchema, 'Properties');
module.exports = { Property, initializePropertySchema };

================
File: Server/model/schema/quotes.js
================
const mongoose = require('mongoose');

const Quotes = new mongoose.Schema({
    title: String,
    description: String,
    approvalIssues: String,
    billingStreet: String,
    billingCity: String,
    billingState: String,
    billingPostalCode: String,
    billingCountry: String,
    shippingStreet: String,
    shippingCity: String,
    shippingState: String,
    shippingPostalCode: String,
    shippingCountry: String,
    validUntil: String,
    quoteNumber: String,
    lineItems: String,
    total: String,
    subtotal: String,
    discount: String,
    tax: String,
    ptax: String,
    shipping: String,
    shippingTax: String,
    grandTotal: String,
    currency: String,
    quoteStage: String,
    paymentTerms: String,
    terms: String,
    description: String,
    approvalStatus: String,
    invoiceStatus: String,
    discountType: String,
    items: [],
    oppotunity: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Opportunities",
    },
    account: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Accounts",
    },
    contact: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Contacts",
    },

    assignedTo: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "User",
    },
    createBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    modifiedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    isCheck: {
        type: Boolean,
        default: false,
    },
    deleted: {
        type: Boolean,
        default: false,
    },
    updatedDate: {
        type: Date,
        default: Date.now
    },
    createdDate: {
        type: Date,
        default: Date.now
    },
})

module.exports = mongoose.model('Quotes', Quotes, 'Quotes');


// Title                     - "Textfield"
// Description               - "TextArea"
// Assigned to               - "Relationship – Users"
// Approval Issues           - "TextArea"
// Account                   - "Relationship – Accounts"
// Contact                   - "Relationship – Contacts"
// Billing Street            - "Textfield"
// Billing City              - "Textfield"
// Billing State             - "Textfield"
// Billing Postal Code       - "Textfield"
// Billing Country           - "Textfield"
// Shipping Street           - "Textfield"
// Shipping City             - "Textfield"
// Shipping State            - "Textfield"
// Shipping Postal Code      - "Textfield"
// Shipping Country          - "Textfield"
// Valid Until               - "Date"
// Quote Number              - "Integer"
// Opportunity               - "Relationship – Opportunities"
// Line Items                - "function"
// Total                     - "Currency"
// Subtotal                  - "Currency"
// Discount                  - "Currency"
// Tax                       - "Currency"
// Shipping                  - "Currency"
// Shipping Tax              - "Drop Down List"
// Grand Total               - "Currency"
// Currency                  - "Drop Down List"
// Quote Stage               - "Drop Down List"
// Payment Terms             - "Drop Down List"
// Terms                     - "Text Area"
// Approval Status           - "Drop Down List"
// Invoice Status            - "Drop Down List

================
File: Server/model/schema/roleAccess.js
================
const mongoose = require('mongoose');

const accessSchema = new mongoose.Schema({
    title: {
        type: String,
        required: true,
    },
    create: {
        type: Boolean,
        default: false,
    },
    update: {
        type: Boolean,
        default: false,
    },
    delete: {
        type: Boolean,
        default: false,
    },
    view: {
        type: Boolean,
        default: false,
    }
});

const roleAccess = new mongoose.Schema({
    roleName: {
        type: String,
        required: true,
        unique: true
    },
    access: [accessSchema],
    modifyDate: {
        type: Date,
        default: Date.now,
    },
    createdDate: {
        type: Date,
    },
    description: {
        type: String,
        required: true
    }
});

module.exports = mongoose.model('RoleAccess', roleAccess, 'RoleAccess')

================
File: Server/model/schema/task.js
================
const mongoose = require('mongoose');

const Task = new mongoose.Schema({
    title: String,
    category: String,
    description: String,
    notes: String,
    assignTo: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Contact",
    },
    assignToLead: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Lead",
    },
    reminder: String,
    start: String,
    end: String,
    backgroundColor: String,
    borderColor: String,
    textColor: String,
    display: String,
    url: String,
    allDay: Boolean,
    createBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    updatedDate: {
        type: Date,
        default: Date.now
    },
    status: {
        type: String,
        default: "todo"
    },
    createdDate: {
        type: Date,
    },
    deleted: {
        type: Boolean,
        default: false,
    },
})

module.exports = mongoose.model('Tasks', Task, 'Tasks');

================
File: Server/model/schema/textMsg.js
================
const mongoose = require('mongoose');

const TextMsg = new mongoose.Schema({
    sender: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    to: { type: String },
    message: { type: String },
    createFor: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Contact',
        required: true
    },
    timestamp: {
        type: Date,
        default: Date.now
    }
})

module.exports = mongoose.model('TextMsg', TextMsg, 'TextMsg');

================
File: Server/model/schema/user.js
================
const mongoose = require('mongoose');

// create login schema
const user = new mongoose.Schema({
    username: {
        type: String,
        required: true,
        unique: true
    },
    password: {
        type: String,
        required: true,
    },
    role: { type: String, default: 'user' },
    emailsent: { type: Number, default: 0 },
    textsent: { type: Number, default: 0 },
    outboundcall: { type: Number, default: 0 },
    phoneNumber: { type: Number },
    firstName: String,
    lastName: String,
    roles: [{
        type: mongoose.Schema.ObjectId,
        ref: 'RoleAccess',
        required: true
    }],
    updatedDate: {
        type: Date,
        default: Date.now
    },
    createdDate: {
        type: Date,
    },
    deleted: {
        type: Boolean,
        default: false,
    },
})

module.exports = mongoose.model('User', user, 'User')

================
File: Server/model/schema/validation.js
================
const mongoose = require('mongoose');

const documentSchema = new mongoose.Schema({
    require: {
        type: Boolean,
    },
    min: {
        type: Boolean,
    },
    max: {
        type: Boolean,
    },
    value: {
        type: mongoose.Schema.Types.Mixed,
    },
    message: {
        type: String
    },
    match: {
        type: Boolean,
    },
    formikType: {
        type: String
    }
});

const validationSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
        unique: true,
        trim: true
    },
    validations: [documentSchema],
    createdDate: {
        type: Date
    },
    updatedDate: {
        type: Date,
        default: Date.now
    },
    deleted: {
        type: Boolean,
        default: false
    }
});

module.exports = mongoose.model('Validation', validationSchema, 'Validation');

================
File: Server/test/test.js
================
var chai = require('chai');
var chaiHttp = require('chai-http');
var app = require('../app');
var should = chai.should();
var Product = require('../models').Product;

chai.use(chaiHttp);

describe('Product API', function(){
    //Before each test we empty the database
    beforeEach(function(done){
        Product.destroy({
            where: {},
            truncate: true
        });
        done();
    });
    describe('/GET Products', function(){
        it('Getting all Products', function(done){
            chai.request(app).get('/Products').end(function(err, res){
                res.should.have.status(200);
                res.body.should.be.a('array');
                done();
            });
        });
    });
    describe('/POST Products', function(){
        it('Insert new Product', function(done){
            var Product = {
                title: 'Jack Ma',
                author: 'Chen Wei',
                category: 'Biography'
            }
            chai.request(app).post('/Products').send(Product).end(function(err, res){
                res.should.have.status(200);
                res.body.should.be.a('object');
                done();
            });
        });
    });
    describe('/GET/:id Products', function(){
        it('Get Product by id', function(done){
            Product.create({
                title: 'Jack Ma',
                author: 'Chen Wei',
                category: 'Biography'
            }).then(function(Product){
                chai.request(app).get('/Products/'+Product.id).end(function(err, res){
                    res.should.have.status(200);
                    res.body.should.be.a('object');
                    done();
                });
            });
        });
        it('Get Product by not existed id', function(done){
            chai.request(app).get('/Products/100').end(function(err, res){
                res.should.have.status(400);
                res.body.should.equal('Product not found');
                done();
            })
        });
        it('Get Product by invalid id', function(done){
            chai.request(app).get('/Products/abc').end(function(err, res){
                res.should.have.status(400);
                res.body.should.equal('Invalid ID supplied');
                done();
            });
        });
    });
    describe('/PUT/:id Products', function(){
        it('Update Product by id', function(done){
            Product.create({
                title: 'Jack Ma',
                author: 'Chen Wei',
                category: 'Biography'
            }).then(function(Product){
                var ProductEdit = {
                    title: 'Amor Fati',
                    author: 'Rando Kim',
                    category: 'Non Fiction'
                }
                chai.request(app).put('/Products/'+Product.id).send(ProductEdit).end(function(err, res){
                    res.should.have.status(200);
                    res.body.should.be.a('array');
                    done();
                });
            })
        });
    });
    describe('/DELETE/:id Products', function(){
        it('Delete Product by id', function(done){
            Product.create({
                title: 'Jack Ma',
                author: 'Chen Wei',
                category: 'Biography'
            }).then(function(Product){
                chai.request(app).delete('/Products/'+Product.id).end(function(err, res){
                    res.should.have.status(200);
                    res.body.should.equal(1);
                    done();
                });
            })
        });
    });
});

================
File: Server/index.js
================
const express = require('express');
const db = require('./db/config')
const route = require('./controllers/route');
const bodyParser = require('body-parser');
const cors = require('cors');


const port = 5001
require('dotenv').config()

const fs = require('fs');
const path = require('path');

//Setup Express App
const app = express();
// Middleware
app.use(bodyParser.json());
// Set up CORS  
app.use(cors())
//API Routes
app.use('/api', route);


app.get('/', async (req, res) => {
    res.send('Welcome to my world...')
});

// Get port from environment and store in Express.

const server = app.listen(port, () => {
    const protocol = (process.env.HTTPS === true || process.env.NODE_ENV === 'production') ? 'https' : 'http';
    const { address, port } = server.address();
    const host = address === '::' ? '127.0.0.1' : address;
    console.log(`Server listening at ${protocol}://${host}:${port}/`);
});


// Connect to MongoDB
const DATABASE_URL = process.env.DB_URL || 'mongodb://127.0.0.1:27017'
const DATABASE = process.env.DB || 'Prolink'

db(DATABASE_URL, DATABASE);

================
File: Server/package.json
================
{
  "name": "server",
  "version": "1.0.4",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "nodemon index.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "axios": "^1.8.3",
    "bcrypt": "^5.1.0",
    "body-parser": "^1.20.2",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "jsontostr": "^8.9.4",
    "jsonwebtoken": "^9.0.1",
    "mongoose": "^7.2.4",
    "multer": "^1.4.5-lts.1",
    "nodemailer": "^6.9.4",
    "nodemon": "^2.0.22",
    "request": "^2.88.2",
    "sqlite3": "^5.1.7",
    "stripe": "^12.2.0"
  }
}

================
File: .gitignore
================
node_modules
package-lock.json
yarn.lock
build

# dependencies
Client/node_modules
server/node_modules
server/uploads
server/.env
Client/.env

/.pnp
.pnp.js

# testing
/coverage

# production
/build

*.bat

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: README.md
================
# ⚙️ React & Node.js Skill Test

## 📌 Task Overview

This test is designed to evaluate your coding ability through the experience of building the project from scratch and a basic RESTful feature using **React** and **Node.js**, with attention to code quality and best practices.

---

## ✅ Requirements

### 1. Successful authentication
- Set up the project independently and Ensure successful authentication.
- Implement and verify the **sign-in feature** using the credentials provided below:
  - **Email**: `admin@gmail.com`  
  - **Password**: `admin123`

### 2. "Meeting" Feature (CRUD via RESTful API)
- After successful sign-in, implement the **Meeting** functionality on both the **server** and **client** sides.
- Use a standard **RESTful API** approach.
- Focus on:
  - Code structure and maintainability
  - Clean and consistent code style
  - Optimization where applicable
- You may reference the structure or logic of other existing features within the project.



================================================================
End of Codebase
================================================================
